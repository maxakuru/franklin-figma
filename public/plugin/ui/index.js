var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// ../../public/vendor/preact.min.js
var preact_min_exports = {};
__export(preact_min_exports, {
  Children: () => we,
  Component: () => E,
  Fragment: () => x,
  PureComponent: () => Q,
  StrictMode: () => We,
  Suspense: () => q,
  SuspenseList: () => L,
  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: () => Te,
  cloneElement: () => re,
  createContext: () => B,
  createElement: () => C,
  createFactory: () => Oe,
  createPortal: () => Re,
  createRef: () => M,
  default: () => yn,
  findDOMNode: () => Fe,
  flushSync: () => Ie,
  forwardRef: () => Pe,
  h: () => C,
  hydrate: () => Z,
  isValidElement: () => ge,
  jsx: () => qe,
  jsxDEV: () => qe,
  jsxs: () => qe,
  lazy: () => He,
  memo: () => Ne,
  options: () => c,
  render: () => D,
  startTransition: () => de,
  toChildArray: () => w,
  unmountComponentAtNode: () => Ve,
  unstable_batchedUpdates: () => Le,
  useCallback: () => ae,
  useContext: () => ce,
  useDebugValue: () => se,
  useDeferredValue: () => Me,
  useEffect: () => K,
  useErrorBoundary: () => yt,
  useId: () => fe,
  useImperativeHandle: () => le,
  useInsertionEffect: () => $e,
  useLayoutEffect: () => F,
  useMemo: () => j,
  useReducer: () => J,
  useRef: () => ie,
  useState: () => z,
  useSyncExternalStore: () => je,
  useTransition: () => Be,
  version: () => Dt
});
function R(e, t) {
  for (var n in t)
    e[n] = t[n];
  return e;
}
function Xe(e) {
  var t = e.parentNode;
  t && t.removeChild(e);
}
function C(e, t, n) {
  var _14, o, r2, l = {};
  for (r2 in t)
    r2 == "key" ? _14 = t[r2] : r2 == "ref" ? o = t[r2] : l[r2] = t[r2];
  if (arguments.length > 2 && (l.children = arguments.length > 3 ? G.call(arguments, 2) : n), typeof e == "function" && e.defaultProps != null)
    for (r2 in e.defaultProps)
      l[r2] === void 0 && (l[r2] = e.defaultProps[r2]);
  return Y(e, l, _14, o, null);
}
function Y(e, t, n, _14, o) {
  var r2 = { type: e, props: t, key: n, ref: _14, __k: null, __: null, __b: 0, __e: null, __d: void 0, __c: null, __h: null, constructor: void 0, __v: o ?? ++Ye };
  return o == null && c.vnode != null && c.vnode(r2), r2;
}
function M() {
  return { current: null };
}
function x(e) {
  return e.children;
}
function E(e, t) {
  this.props = e, this.context = t;
}
function te(e, t) {
  if (t == null)
    return e.__ ? te(e.__, e.__.__k.indexOf(e) + 1) : null;
  for (var n; t < e.__k.length; t++)
    if ((n = e.__k[t]) != null && n.__e != null)
      return n.__e;
  return typeof e.type == "function" ? te(e) : null;
}
function et(e) {
  var t, n;
  if ((e = e.__) != null && e.__c != null) {
    for (e.__e = e.__c.base = null, t = 0; t < e.__k.length; t++)
      if ((n = e.__k[t]) != null && n.__e != null) {
        e.__e = e.__c.base = n.__e;
        break;
      }
    return et(e);
  }
}
function ve(e) {
  (!e.__d && (e.__d = true) && A.push(e) && !ne.__r++ || Ze !== c.debounceRendering) && ((Ze = c.debounceRendering) || Je)(ne);
}
function ne() {
  var e, t, n, _14, o, r2, l, a, s;
  for (A.sort(he); e = A.shift(); )
    e.__d && (t = A.length, _14 = void 0, o = void 0, r2 = void 0, a = (l = (n = e).__v).__e, (s = n.__P) && (_14 = [], o = [], (r2 = R({}, l)).__v = l.__v + 1, me(s, l, r2, n.__n, s.ownerSVGElement !== void 0, l.__h != null ? [a] : null, _14, a ?? te(l), l.__h, o), it(_14, l, o), l.__e != a && et(l)), A.length > t && A.sort(he));
  ne.__r = 0;
}
function tt(e, t, n, _14, o, r2, l, a, s, y, d) {
  var u, v, h, f, p, I, g, b, P, H, S = 0, N = _14 && _14.__k || Qe, T = N.length, O = T, k = t.length;
  for (n.__k = [], u = 0; u < k; u++)
    (f = n.__k[u] = (f = t[u]) == null || typeof f == "boolean" || typeof f == "function" ? null : typeof f == "string" || typeof f == "number" || typeof f == "bigint" ? Y(null, f, null, null, f) : ee(f) ? Y(x, { children: f }, null, null, null) : f.__b > 0 ? Y(f.type, f.props, f.key, f.ref ? f.ref : null, f.__v) : f) != null && (f.__ = n, f.__b = n.__b + 1, (b = Vt(f, N, g = u + S, O)) === -1 ? h = W : (h = N[b] || W, N[b] = void 0, O--), me(e, f, h, o, r2, l, a, s, y, d), p = f.__e, (v = f.ref) && h.ref != v && (h.ref && ye(h.ref, null, f), d.push(v, f.__c || p, f)), p != null && (I == null && (I = p), H = !(P = h === W || h.__v === null) && b === g, P ? b == -1 && S-- : b !== g && (b === g + 1 ? (S++, H = true) : b > g ? O > k - g ? (S += b - g, H = true) : S-- : S = b < g && b == g - 1 ? b - g : 0), g = u + S, H = H || b == u && !P, typeof f.type != "function" || b === g && h.__k !== f.__k ? typeof f.type == "function" || H ? f.__d !== void 0 ? (s = f.__d, f.__d = void 0) : s = p.nextSibling : s = _t(e, p, s) : s = nt(f, s, e), typeof n.type == "function" && (n.__d = s)));
  for (n.__e = I, u = T; u--; )
    N[u] != null && (typeof n.type == "function" && N[u].__e != null && N[u].__e == n.__d && (n.__d = N[u].__e.nextSibling), lt(N[u], N[u]));
}
function nt(e, t, n) {
  for (var _14, o = e.__k, r2 = 0; o && r2 < o.length; r2++)
    (_14 = o[r2]) && (_14.__ = e, t = typeof _14.type == "function" ? nt(_14, t, n) : _t(n, _14.__e, t));
  return t;
}
function w(e, t) {
  return t = t || [], e == null || typeof e == "boolean" || (ee(e) ? e.some(function(n) {
    w(n, t);
  }) : t.push(e)), t;
}
function _t(e, t, n) {
  return n == null || n.parentNode !== e ? e.insertBefore(t, null) : t == n && t.parentNode != null || e.insertBefore(t, n), t.nextSibling;
}
function Vt(e, t, n, _14) {
  var o = e.key, r2 = e.type, l = n - 1, a = n + 1, s = t[n];
  if (s === null || s && o == s.key && r2 === s.type)
    return n;
  if (_14 > (s != null ? 1 : 0))
    for (; l >= 0 || a < t.length; ) {
      if (l >= 0) {
        if ((s = t[l]) && o == s.key && r2 === s.type)
          return l;
        l--;
      }
      if (a < t.length) {
        if ((s = t[a]) && o == s.key && r2 === s.type)
          return a;
        a++;
      }
    }
  return -1;
}
function Ft(e, t, n, _14, o) {
  var r2;
  for (r2 in n)
    r2 === "children" || r2 === "key" || r2 in t || _e(e, r2, null, n[r2], _14);
  for (r2 in t)
    o && typeof t[r2] != "function" || r2 === "children" || r2 === "key" || r2 === "value" || r2 === "checked" || n[r2] === t[r2] || _e(e, r2, t[r2], n[r2], _14);
}
function rt(e, t, n) {
  t[0] === "-" ? e.setProperty(t, n ?? "") : e[t] = n == null ? "" : typeof n != "number" || At.test(t) ? n : n + "px";
}
function _e(e, t, n, _14, o) {
  var r2;
  e:
    if (t === "style")
      if (typeof n == "string")
        e.style.cssText = n;
      else {
        if (typeof _14 == "string" && (e.style.cssText = _14 = ""), _14)
          for (t in _14)
            n && t in n || rt(e.style, t, "");
        if (n)
          for (t in n)
            _14 && n[t] === _14[t] || rt(e.style, t, n[t]);
      }
    else if (t[0] === "o" && t[1] === "n")
      r2 = t !== (t = t.replace(/Capture$/, "")), t = t.toLowerCase() in e ? t.toLowerCase().slice(2) : t.slice(2), e.l || (e.l = {}), e.l[t + r2] = n, n ? _14 || e.addEventListener(t, r2 ? ut : ot, r2) : e.removeEventListener(t, r2 ? ut : ot, r2);
    else if (t !== "dangerouslySetInnerHTML") {
      if (o)
        t = t.replace(/xlink(H|:h)/, "h").replace(/sName$/, "s");
      else if (t !== "width" && t !== "height" && t !== "href" && t !== "list" && t !== "form" && t !== "tabIndex" && t !== "download" && t !== "rowSpan" && t !== "colSpan" && t in e)
        try {
          e[t] = n ?? "";
          break e;
        } catch {
        }
      typeof n == "function" || (n == null || n === false && t[4] !== "-" ? e.removeAttribute(t) : e.setAttribute(t, n));
    }
}
function ot(e) {
  return this.l[e.type + false](c.event ? c.event(e) : e);
}
function ut(e) {
  return this.l[e.type + true](c.event ? c.event(e) : e);
}
function me(e, t, n, _14, o, r2, l, a, s, y) {
  var d, u, v, h, f, p, I, g, b, P, H, S, N, T, O, k = t.type;
  if (t.constructor !== void 0)
    return null;
  n.__h != null && (s = n.__h, a = t.__e = n.__e, t.__h = null, r2 = [a]), (d = c.__b) && d(t);
  try {
    e:
      if (typeof k == "function") {
        if (g = t.props, b = (d = k.contextType) && _14[d.__c], P = d ? b ? b.props.value : d.__ : _14, n.__c ? I = (u = t.__c = n.__c).__ = u.__E : ("prototype" in k && k.prototype.render ? t.__c = u = new k(g, P) : (t.__c = u = new E(g, P), u.constructor = k, u.render = It), b && b.sub(u), u.props = g, u.state || (u.state = {}), u.context = P, u.__n = _14, v = u.__d = true, u.__h = [], u._sb = []), u.__s == null && (u.__s = u.state), k.getDerivedStateFromProps != null && (u.__s == u.state && (u.__s = R({}, u.__s)), R(u.__s, k.getDerivedStateFromProps(g, u.__s))), h = u.props, f = u.state, u.__v = t, v)
          k.getDerivedStateFromProps == null && u.componentWillMount != null && u.componentWillMount(), u.componentDidMount != null && u.__h.push(u.componentDidMount);
        else {
          if (k.getDerivedStateFromProps == null && g !== h && u.componentWillReceiveProps != null && u.componentWillReceiveProps(g, P), !u.__e && (u.shouldComponentUpdate != null && u.shouldComponentUpdate(g, u.__s, P) === false || t.__v === n.__v)) {
            for (t.__v !== n.__v && (u.props = g, u.state = u.__s, u.__d = false), t.__e = n.__e, t.__k = n.__k, t.__k.forEach(function(X) {
              X && (X.__ = t);
            }), H = 0; H < u._sb.length; H++)
              u.__h.push(u._sb[H]);
            u._sb = [], u.__h.length && l.push(u);
            break e;
          }
          u.componentWillUpdate != null && u.componentWillUpdate(g, u.__s, P), u.componentDidUpdate != null && u.__h.push(function() {
            u.componentDidUpdate(h, f, p);
          });
        }
        if (u.context = P, u.props = g, u.__P = e, u.__e = false, S = c.__r, N = 0, "prototype" in k && k.prototype.render) {
          for (u.state = u.__s, u.__d = false, S && S(t), d = u.render(u.props, u.state, u.context), T = 0; T < u._sb.length; T++)
            u.__h.push(u._sb[T]);
          u._sb = [];
        } else
          do
            u.__d = false, S && S(t), d = u.render(u.props, u.state, u.context), u.state = u.__s;
          while (u.__d && ++N < 25);
        u.state = u.__s, u.getChildContext != null && (_14 = R(R({}, _14), u.getChildContext())), v || u.getSnapshotBeforeUpdate == null || (p = u.getSnapshotBeforeUpdate(h, f)), tt(e, ee(O = d != null && d.type === x && d.key == null ? d.props.children : d) ? O : [O], t, n, _14, o, r2, l, a, s, y), u.base = t.__e, t.__h = null, u.__h.length && l.push(u), I && (u.__E = u.__ = null);
      } else
        r2 == null && t.__v === n.__v ? (t.__k = n.__k, t.__e = n.__e) : t.__e = Lt(n.__e, t, n, _14, o, r2, l, s, y);
    (d = c.diffed) && d(t);
  } catch (X) {
    t.__v = null, (s || r2 != null) && (t.__e = a, t.__h = !!s, r2[r2.indexOf(a)] = null), c.__e(X, t, n);
  }
}
function it(e, t, n) {
  for (var _14 = 0; _14 < n.length; _14++)
    ye(n[_14], n[++_14], n[++_14]);
  c.__c && c.__c(t, e), e.some(function(o) {
    try {
      e = o.__h, o.__h = [], e.some(function(r2) {
        r2.call(o);
      });
    } catch (r2) {
      c.__e(r2, o.__v);
    }
  });
}
function Lt(e, t, n, _14, o, r2, l, a, s) {
  var y, d, u, v = n.props, h = t.props, f = t.type, p = 0;
  if (f === "svg" && (o = true), r2 != null) {
    for (; p < r2.length; p++)
      if ((y = r2[p]) && "setAttribute" in y == !!f && (f ? y.localName === f : y.nodeType === 3)) {
        e = y, r2[p] = null;
        break;
      }
  }
  if (e == null) {
    if (f === null)
      return document.createTextNode(h);
    e = o ? document.createElementNS("http://www.w3.org/2000/svg", f) : document.createElement(f, h.is && h), r2 = null, a = false;
  }
  if (f === null)
    v === h || a && e.data === h || (e.data = h);
  else {
    if (r2 = r2 && G.call(e.childNodes), d = (v = n.props || W).dangerouslySetInnerHTML, u = h.dangerouslySetInnerHTML, !a) {
      if (r2 != null)
        for (v = {}, p = 0; p < e.attributes.length; p++)
          v[e.attributes[p].name] = e.attributes[p].value;
      (u || d) && (u && (d && u.__html == d.__html || u.__html === e.innerHTML) || (e.innerHTML = u && u.__html || ""));
    }
    if (Ft(e, h, v, o, a), u)
      t.__k = [];
    else if (tt(e, ee(p = t.props.children) ? p : [p], t, n, _14, o && f !== "foreignObject", r2, l, r2 ? r2[0] : n.__k && te(n, 0), a, s), r2 != null)
      for (p = r2.length; p--; )
        r2[p] != null && Xe(r2[p]);
    a || ("value" in h && (p = h.value) !== void 0 && (p !== e.value || f === "progress" && !p || f === "option" && p !== v.value) && _e(e, "value", p, v.value, false), "checked" in h && (p = h.checked) !== void 0 && p !== e.checked && _e(e, "checked", p, v.checked, false));
  }
  return e;
}
function ye(e, t, n) {
  try {
    typeof e == "function" ? e(t) : e.current = t;
  } catch (_14) {
    c.__e(_14, n);
  }
}
function lt(e, t, n) {
  var _14, o;
  if (c.unmount && c.unmount(e), (_14 = e.ref) && (_14.current && _14.current !== e.__e || ye(_14, null, t)), (_14 = e.__c) != null) {
    if (_14.componentWillUnmount)
      try {
        _14.componentWillUnmount();
      } catch (r2) {
        c.__e(r2, t);
      }
    _14.base = _14.__P = null, e.__c = void 0;
  }
  if (_14 = e.__k)
    for (o = 0; o < _14.length; o++)
      _14[o] && lt(_14[o], t, n || typeof e.type != "function");
  n || e.__e == null || Xe(e.__e), e.__ = e.__e = e.__d = void 0;
}
function It(e, t, n) {
  return this.constructor(e, n);
}
function D(e, t, n) {
  var _14, o, r2, l;
  c.__ && c.__(e, t), o = (_14 = typeof n == "function") ? null : n && n.__k || t.__k, r2 = [], l = [], me(t, e = (!_14 && n || t).__k = C(x, null, [e]), o || W, W, t.ownerSVGElement !== void 0, !_14 && n ? [n] : o ? null : t.firstChild ? G.call(t.childNodes) : null, r2, !_14 && n ? n : o ? o.__e : t.firstChild, _14, l), it(r2, e, l);
}
function Z(e, t) {
  D(e, t, Z);
}
function re(e, t, n) {
  var _14, o, r2, l, a = R({}, e.props);
  for (r2 in e.type && e.type.defaultProps && (l = e.type.defaultProps), t)
    r2 == "key" ? _14 = t[r2] : r2 == "ref" ? o = t[r2] : a[r2] = t[r2] === void 0 && l !== void 0 ? l[r2] : t[r2];
  return arguments.length > 2 && (a.children = arguments.length > 3 ? G.call(arguments, 2) : n), Y(e.type, a, _14 || e.key, o || e.ref, null);
}
function B(e, t) {
  var n = { __c: t = "__cC" + Ke++, __: e, Consumer: function(_14, o) {
    return _14.children(o);
  }, Provider: function(_14) {
    var o, r2;
    return this.getChildContext || (o = [], (r2 = {})[t] = this, this.getChildContext = function() {
      return r2;
    }, this.shouldComponentUpdate = function(l) {
      this.props.value !== l.value && o.some(function(a) {
        a.__e = true, ve(a);
      });
    }, this.sub = function(l) {
      o.push(l);
      var a = l.componentWillUnmount;
      l.componentWillUnmount = function() {
        o.splice(o.indexOf(l), 1), a && a.call(l);
      };
    }), _14.children;
  } };
  return n.Provider.__ = n.Consumer.contextType = n;
}
function V(e, t) {
  c.__h && c.__h(m, e, $ || t), $ = 0;
  var n = m.__H || (m.__H = { __: [], __h: [] });
  return e >= n.__.length && n.__.push({ __V: oe }), n.__[e];
}
function z(e) {
  return $ = 1, J(mt, e);
}
function J(e, t, n) {
  var _14 = V(U++, 2);
  if (_14.t = e, !_14.__c && (_14.__ = [n ? n(t) : mt(void 0, t), function(a) {
    var s = _14.__N ? _14.__N[0] : _14.__[0], y = _14.t(s, a);
    s !== y && (_14.__N = [y, _14.__[1]], _14.__c.setState({}));
  }], _14.__c = m, !m.u)) {
    var o = i(function(a, s, y) {
      if (!_14.__c.__H)
        return true;
      var d = _14.__c.__H.__.filter(function(v) {
        return v.__c;
      });
      if (d.every(function(v) {
        return !v.__N;
      }))
        return !r2 || r2.call(this, a, s, y);
      var u = false;
      return d.forEach(function(v) {
        if (v.__N) {
          var h = v.__[0];
          v.__ = v.__N, v.__N = void 0, h !== v.__[0] && (u = true);
        }
      }), !(!u && _14.__c.props === a) && (!r2 || r2.call(this, a, s, y));
    }, "f");
    m.u = true;
    var r2 = m.shouldComponentUpdate, l = m.componentWillUpdate;
    m.componentWillUpdate = function(a, s, y) {
      if (this.__e) {
        var d = r2;
        r2 = void 0, o(a, s, y), r2 = d;
      }
      l && l.call(this, a, s, y);
    }, m.shouldComponentUpdate = o;
  }
  return _14.__N || _14.__;
}
function K(e, t) {
  var n = V(U++, 3);
  !c.__s && ke(n.__H, t) && (n.__ = e, n.i = t, m.__H.__h.push(n));
}
function F(e, t) {
  var n = V(U++, 4);
  !c.__s && ke(n.__H, t) && (n.__ = e, n.i = t, m.__h.push(n));
}
function ie(e) {
  return $ = 5, j(function() {
    return { current: e };
  }, []);
}
function le(e, t, n) {
  $ = 6, F(function() {
    return typeof e == "function" ? (e(t()), function() {
      return e(null);
    }) : e ? (e.current = t(), function() {
      return e.current = null;
    }) : void 0;
  }, n == null ? n : n.concat(e));
}
function j(e, t) {
  var n = V(U++, 7);
  return ke(n.__H, t) ? (n.__V = e(), n.i = t, n.__h = e, n.__V) : n.__;
}
function ae(e, t) {
  return $ = 8, j(function() {
    return e;
  }, t);
}
function ce(e) {
  var t = m.context[e.__c], n = V(U++, 9);
  return n.c = e, t ? (n.__ == null && (n.__ = true, t.sub(m)), t.props.value) : e.__;
}
function se(e, t) {
  c.useDebugValue && c.useDebugValue(t ? t(e) : e);
}
function yt(e) {
  var t = V(U++, 10), n = z();
  return t.__ = e, m.componentDidCatch || (m.componentDidCatch = function(_14, o) {
    t.__ && t.__(_14, o), n[1](_14);
  }), [n[0], function() {
    n[1](void 0);
  }];
}
function fe() {
  var e = V(U++, 11);
  if (!e.__) {
    for (var t = m.__v; t !== null && !t.__m && t.__ !== null; )
      t = t.__;
    var n = t.__m || (t.__m = [0, 0]);
    e.__ = "P" + n[0] + "-" + n[1]++;
  }
  return e.__;
}
function Wt() {
  for (var e; e = ct.shift(); )
    if (e.__P && e.__H)
      try {
        e.__H.__h.forEach(ue), e.__H.__h.forEach(Ce), e.__H.__h = [];
      } catch (t) {
        e.__H.__h = [], c.__e(t, e.__v);
      }
}
function Mt(e) {
  var t, n = i(function() {
    clearTimeout(_14), vt && cancelAnimationFrame(t), setTimeout(e);
  }, "r"), _14 = setTimeout(n, 100);
  vt && (t = requestAnimationFrame(n));
}
function ue(e) {
  var t = m, n = e.__c;
  typeof n == "function" && (e.__c = void 0, n()), m = t;
}
function Ce(e) {
  var t = m;
  e.__c = e.__(), m = t;
}
function ke(e, t) {
  return !e || e.length !== t.length || t.some(function(n, _14) {
    return n !== e[_14];
  });
}
function mt(e, t) {
  return typeof t == "function" ? t(e) : t;
}
function gt(e, t) {
  for (var n in t)
    e[n] = t[n];
  return e;
}
function Ee(e, t) {
  for (var n in e)
    if (n !== "__source" && !(n in t))
      return true;
  for (var _14 in t)
    if (_14 !== "__source" && e[_14] !== t[_14])
      return true;
  return false;
}
function xe(e, t) {
  return e === t && (e !== 0 || 1 / e == 1 / t) || e != e && t != t;
}
function Q(e) {
  this.props = e;
}
function Ne(e, t) {
  function n(o) {
    var r2 = this.props.ref, l = r2 == o.ref;
    return !l && r2 && (r2.call ? r2(null) : r2.current = null), t ? !t(this.props, o) || !l : Ee(this.props, o);
  }
  i(n, "r");
  function _14(o) {
    return this.shouldComponentUpdate = n, C(e, o);
  }
  return i(_14, "u"), _14.displayName = "Memo(" + (e.displayName || e.name) + ")", _14.prototype.isReactComponent = true, _14.__f = true, _14;
}
function Pe(e) {
  function t(n) {
    var _14 = gt({}, n);
    return delete _14.ref, e(_14, n.ref || null);
  }
  return i(t, "t"), t.$$typeof = Bt, t.render = t, t.prototype.isReactComponent = t.__f = true, t.displayName = "ForwardRef(" + (e.displayName || e.name) + ")", t;
}
function Et(e, t, n) {
  return e && (e.__c && e.__c.__H && (e.__c.__H.__.forEach(function(_14) {
    typeof _14.__c == "function" && _14.__c();
  }), e.__c.__H = null), (e = gt({}, e)).__c != null && (e.__c.__P === n && (e.__c.__P = t), e.__c = null), e.__k = e.__k && e.__k.map(function(_14) {
    return Et(_14, t, n);
  })), e;
}
function xt(e, t, n) {
  return e && (e.__v = null, e.__k = e.__k && e.__k.map(function(_14) {
    return xt(_14, t, n);
  }), e.__c && e.__c.__P === t && (e.__e && n.insertBefore(e.__e, e.__d), e.__c.__e = true, e.__c.__P = n)), e;
}
function q() {
  this.__u = 0, this.t = null, this.__b = null;
}
function St(e) {
  var t = e.__.__c;
  return t && t.__a && t.__a(e);
}
function He(e) {
  var t, n, _14;
  function o(r2) {
    if (t || (t = e()).then(function(l) {
      n = l.default || l;
    }, function(l) {
      _14 = l;
    }), _14)
      throw _14;
    if (!n)
      throw t;
    return C(n, r2);
  }
  return i(o, "o"), o.displayName = "Lazy", o.__f = true, o;
}
function L() {
  this.u = null, this.o = null;
}
function jt(e) {
  return this.getChildContext = function() {
    return e.context;
  }, e.children;
}
function zt(e) {
  var t = this, n = e.i;
  t.componentWillUnmount = function() {
    D(null, t.l), t.l = null, t.i = null;
  }, t.i && t.i !== n && t.componentWillUnmount(), e.__v ? (t.l || (t.i = n, t.l = { nodeType: 1, parentNode: n, childNodes: [], appendChild: function(_14) {
    this.childNodes.push(_14), t.i.appendChild(_14);
  }, insertBefore: function(_14, o) {
    this.childNodes.push(_14), t.i.appendChild(_14);
  }, removeChild: function(_14) {
    this.childNodes.splice(this.childNodes.indexOf(_14) >>> 1, 1), t.i.removeChild(_14);
  } }), D(C(jt, { context: t.context }, e.__v), t.l)) : t.l && t.componentWillUnmount();
}
function Re(e, t) {
  var n = C(zt, { __v: e, i: t });
  return n.containerInfo = t, n;
}
function Ue(e, t, n) {
  return t.__k == null && (t.textContent = ""), D(e, t), typeof n == "function" && n(), e ? e.__c : null;
}
function De(e, t, n) {
  return Z(e, t), typeof n == "function" && n(), e ? e.__c : null;
}
function Kt() {
}
function Qt() {
  return this.cancelBubble;
}
function Xt() {
  return this.defaultPrevented;
}
function Oe(e) {
  return C.bind(null, e);
}
function pe(e) {
  return !!e && e.$$typeof === Pt;
}
function Ae(e) {
  return pe(e) ? re.apply(null, arguments) : e;
}
function Ve(e) {
  return !!e.__k && (D(null, e), true);
}
function Fe(e) {
  return e && (e.base || e.nodeType === 1 && e) || null;
}
function de(e) {
  e();
}
function Me(e) {
  return e;
}
function Be() {
  return [false, de];
}
function je(e, t) {
  var n = t(), _14 = z({ h: { __: n, v: t } }), o = _14[0].h, r2 = _14[1];
  return F(function() {
    o.__ = n, o.v = t, xe(o.__, t()) || r2({ h: o });
  }, [e, n, t]), K(function() {
    return xe(o.__, o.v()) || r2({ h: o }), e(function() {
      xe(o.__, o.v()) || r2({ h: o });
    });
  }, [e]), n;
}
function qe(e, t, n, _14, o, r2) {
  var l, a, s = {};
  for (a in t)
    a == "ref" ? l = t[a] : s[a] = t[a];
  var y = { type: e, props: s, key: n, ref: l, __k: null, __: null, __b: 0, __e: null, __d: void 0, __c: null, __h: null, constructor: void 0, __v: --tn, __source: o, __self: r2 };
  if (typeof e == "function" && (l = e.defaultProps))
    for (a in l)
      s[a] === void 0 && (s[a] = l[a]);
  return c.vnode && c.vnode(y), y;
}
var Ge, i, Ot, G, c, Ye, ge, A, Ze, Je, he, Ke, W, Qe, At, ee, U, m, be, at, $, ct, oe, st, ft, pt, dt, ht, vt, ze, bt, Bt, Ct, we, $t, kt, Nt, Pt, qt, Gt, Yt, Zt, Jt, wt, Se, en, Ht, Rt, Ut, Te, Dt, Le, Ie, We, $e, Tt, tn, yn;
var init_preact_min = __esm({
  "../../public/vendor/preact.min.js"() {
    "use strict";
    Ge = Object.defineProperty;
    i = (e, t) => Ge(e, "name", { value: t, configurable: true });
    Ot = (e, t) => {
      for (var n in t)
        Ge(e, n, { get: t[n], enumerable: true });
    };
    W = {};
    Qe = [];
    At = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;
    ee = Array.isArray;
    i(R, "v");
    i(Xe, "p");
    i(C, "y");
    i(Y, "d");
    i(M, "_");
    i(x, "k");
    i(E, "b");
    i(te, "g");
    i(et, "m");
    i(ve, "w");
    i(ne, "x");
    i(tt, "P");
    i(nt, "C");
    i(w, "S");
    i(_t, "$");
    i(Vt, "A");
    i(Ft, "H");
    i(rt, "I");
    i(_e, "T");
    i(ot, "j");
    i(ut, "z");
    i(me, "L");
    i(it, "M");
    i(Lt, "N");
    i(ye, "O");
    i(lt, "q");
    i(It, "B");
    i(D, "D");
    i(Z, "E");
    i(re, "F");
    i(B, "G"), G = Qe.slice, c = { __e: function(e, t, n, _14) {
      for (var o, r2, l; t = t.__; )
        if ((o = t.__c) && !o.__)
          try {
            if ((r2 = o.constructor) && r2.getDerivedStateFromError != null && (o.setState(r2.getDerivedStateFromError(e)), l = o.__d), o.componentDidCatch != null && (o.componentDidCatch(e, _14 || {}), l = o.__d), l)
              return o.__E = o;
          } catch (a) {
            e = a;
          }
      throw e;
    } }, Ye = 0, ge = i(function(e) {
      return e != null && e.constructor === void 0;
    }, "t"), E.prototype.setState = function(e, t) {
      var n;
      n = this.__s != null && this.__s !== this.state ? this.__s : this.__s = R({}, this.state), typeof e == "function" && (e = e(R({}, n), this.props)), e && R(n, e), e != null && this.__v && (t && this._sb.push(t), ve(this));
    }, E.prototype.forceUpdate = function(e) {
      this.__v && (this.__e = true, e && this.__h.push(e), ve(this));
    }, E.prototype.render = x, A = [], Je = typeof Promise == "function" ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, he = i(function(e, t) {
      return e.__v.__b - t.__v.__b;
    }, "f"), ne.__r = 0, Ke = 0;
    $ = 0;
    ct = [];
    oe = [];
    st = c.__b;
    ft = c.__r;
    pt = c.diffed;
    dt = c.__c;
    ht = c.unmount;
    i(V, "d");
    i(z, "h");
    i(J, "s");
    i(K, "p");
    i(F, "y");
    i(ie, "_");
    i(le, "A");
    i(j, "F");
    i(ae, "T");
    i(ce, "q");
    i(se, "x");
    i(yt, "P");
    i(fe, "V");
    i(Wt, "b"), c.__b = function(e) {
      m = null, st && st(e);
    }, c.__r = function(e) {
      ft && ft(e), U = 0;
      var t = (m = e.__c).__H;
      t && (be === m ? (t.__h = [], m.__h = [], t.__.forEach(function(n) {
        n.__N && (n.__ = n.__N), n.__V = oe, n.__N = n.i = void 0;
      })) : (t.__h.forEach(ue), t.__h.forEach(Ce), t.__h = [], U = 0)), be = m;
    }, c.diffed = function(e) {
      pt && pt(e);
      var t = e.__c;
      t && t.__H && (t.__H.__h.length && (ct.push(t) !== 1 && at === c.requestAnimationFrame || ((at = c.requestAnimationFrame) || Mt)(Wt)), t.__H.__.forEach(function(n) {
        n.i && (n.__H = n.i), n.__V !== oe && (n.__ = n.__V), n.i = void 0, n.__V = oe;
      })), be = m = null;
    }, c.__c = function(e, t) {
      t.some(function(n) {
        try {
          n.__h.forEach(ue), n.__h = n.__h.filter(function(_14) {
            return !_14.__ || Ce(_14);
          });
        } catch (_14) {
          t.some(function(o) {
            o.__h && (o.__h = []);
          }), t = [], c.__e(_14, n.__v);
        }
      }), dt && dt(e, t);
    }, c.unmount = function(e) {
      ht && ht(e);
      var t, n = e.__c;
      n && n.__H && (n.__H.__.forEach(function(_14) {
        try {
          ue(_14);
        } catch (o) {
          t = o;
        }
      }), n.__H = void 0, t && c.__e(t, n.__v));
    };
    vt = typeof requestAnimationFrame == "function";
    i(Mt, "j");
    i(ue, "k");
    i(Ce, "w");
    i(ke, "z");
    i(mt, "B");
    ze = {};
    Ot(ze, { Children: () => we, Component: () => E, Fragment: () => x, PureComponent: () => Q, StrictMode: () => We, Suspense: () => q, SuspenseList: () => L, __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: () => Te, cloneElement: () => Ae, createContext: () => B, createElement: () => C, createFactory: () => Oe, createPortal: () => Re, createRef: () => M, default: () => Tt, findDOMNode: () => Fe, flushSync: () => Ie, forwardRef: () => Pe, hydrate: () => De, isValidElement: () => pe, lazy: () => He, memo: () => Ne, render: () => Ue, startTransition: () => de, unmountComponentAtNode: () => Ve, unstable_batchedUpdates: () => Le, useCallback: () => ae, useContext: () => ce, useDebugValue: () => se, useDeferredValue: () => Me, useEffect: () => K, useErrorBoundary: () => yt, useId: () => fe, useImperativeHandle: () => le, useInsertionEffect: () => $e, useLayoutEffect: () => F, useMemo: () => j, useReducer: () => J, useRef: () => ie, useState: () => z, useSyncExternalStore: () => je, useTransition: () => Be, version: () => Dt });
    i(gt, "g");
    i(Ee, "C");
    i(xe, "E");
    i(Q, "w");
    i(Ne, "x"), (Q.prototype = new E()).isPureReactComponent = true, Q.prototype.shouldComponentUpdate = function(e, t) {
      return Ee(this.props, e) || Ee(this.state, t);
    };
    bt = c.__b;
    c.__b = function(e) {
      e.type && e.type.__f && e.ref && (e.props.ref = e.ref, e.ref = null), bt && bt(e);
    };
    Bt = typeof Symbol < "u" && Symbol.for && Symbol.for("react.forward_ref") || 3911;
    i(Pe, "k");
    Ct = i(function(e, t) {
      return e == null ? null : w(w(e).map(t));
    }, "A");
    we = { map: Ct, forEach: Ct, count: function(e) {
      return e ? w(e).length : 0;
    }, only: function(e) {
      var t = w(e);
      if (t.length !== 1)
        throw "Children.only";
      return t[0];
    }, toArray: w };
    $t = c.__e;
    c.__e = function(e, t, n, _14) {
      if (e.then) {
        for (var o, r2 = t; r2 = r2.__; )
          if ((o = r2.__c) && o.__c)
            return t.__e == null && (t.__e = n.__e, t.__k = n.__k), o.__c(e, t);
      }
      $t(e, t, n, _14);
    };
    kt = c.unmount;
    i(Et, "L");
    i(xt, "U");
    i(q, "D");
    i(St, "F");
    i(He, "M");
    i(L, "V"), c.unmount = function(e) {
      var t = e.__c;
      t && t.__R && t.__R(), t && e.__h === true && (e.type = null), kt && kt(e);
    }, (q.prototype = new E()).__c = function(e, t) {
      var n = t.__c, _14 = this;
      _14.t == null && (_14.t = []), _14.t.push(n);
      var o = St(_14.__v), r2 = false, l = i(function() {
        r2 || (r2 = true, n.__R = null, o ? o(a) : a());
      }, "i");
      n.__R = l;
      var a = i(function() {
        if (!--_14.__u) {
          if (_14.state.__a) {
            var y = _14.state.__a;
            _14.__v.__k[0] = xt(y, y.__c.__P, y.__c.__O);
          }
          var d;
          for (_14.setState({ __a: _14.__b = null }); d = _14.t.pop(); )
            d.forceUpdate();
        }
      }, "l"), s = t.__h === true;
      _14.__u++ || s || _14.setState({ __a: _14.__b = _14.__v.__k[0] }), e.then(l, l);
    }, q.prototype.componentWillUnmount = function() {
      this.t = [];
    }, q.prototype.render = function(e, t) {
      if (this.__b) {
        if (this.__v.__k) {
          var n = document.createElement("div"), _14 = this.__v.__k[0].__c;
          this.__v.__k[0] = Et(this.__b, n, _14.__O = _14.__P);
        }
        this.__b = null;
      }
      var o = t.__a && C(x, null, e.fallback);
      return o && (o.__h = null), [C(x, null, t.__a ? null : e.children), o];
    };
    Nt = i(function(e, t, n) {
      if (++n[1] === n[0] && e.o.delete(t), e.props.revealOrder && (e.props.revealOrder[0] !== "t" || !e.o.size))
        for (n = e.u; n; ) {
          for (; n.length > 3; )
            n.pop()();
          if (n[1] < n[0])
            break;
          e.u = n = n[2];
        }
    }, "W");
    i(jt, "P");
    i(zt, "j");
    i(Re, "z"), (L.prototype = new E()).__a = function(e) {
      var t = this, n = St(t.__v), _14 = t.o.get(e);
      return _14[0]++, function(o) {
        var r2 = i(function() {
          t.props.revealOrder ? (_14.push(o), Nt(t, e, _14)) : o();
        }, "o");
        n ? n(r2) : r2();
      };
    }, L.prototype.render = function(e) {
      this.u = null, this.o = /* @__PURE__ */ new Map();
      var t = w(e.children);
      e.revealOrder && e.revealOrder[0] === "b" && t.reverse();
      for (var n = t.length; n--; )
        this.o.set(t[n], this.u = [1, 0, this.u]);
      return e.children;
    }, L.prototype.componentDidUpdate = L.prototype.componentDidMount = function() {
      var e = this;
      this.o.forEach(function(t, n) {
        Nt(e, n, t);
      });
    };
    Pt = typeof Symbol < "u" && Symbol.for && Symbol.for("react.element") || 60103;
    qt = /^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|image(!S)|letter|lighting|marker(?!H|W|U)|overline|paint|pointer|shape|stop|strikethrough|stroke|text(?!L)|transform|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/;
    Gt = /^on(Ani|Tra|Tou|BeforeInp|Compo)/;
    Yt = /[A-Z0-9]/g;
    Zt = typeof document < "u";
    Jt = i(function(e) {
      return (typeof Symbol < "u" && typeof Symbol() == "symbol" ? /fil|che|rad/ : /fil|che|ra/).test(e);
    }, "q");
    i(Ue, "G");
    i(De, "J"), E.prototype.isReactComponent = {}, ["componentWillMount", "componentWillReceiveProps", "componentWillUpdate"].forEach(function(e) {
      Object.defineProperty(E.prototype, e, { configurable: true, get: function() {
        return this["UNSAFE_" + e];
      }, set: function(t) {
        Object.defineProperty(this, e, { configurable: true, writable: true, value: t });
      } });
    });
    wt = c.event;
    i(Kt, "Q");
    i(Qt, "X");
    i(Xt, "nn"), c.event = function(e) {
      return wt && (e = wt(e)), e.persist = Kt, e.isPropagationStopped = Qt, e.isDefaultPrevented = Xt, e.nativeEvent = e;
    };
    en = { enumerable: false, configurable: true, get: function() {
      return this.class;
    } };
    Ht = c.vnode;
    c.vnode = function(e) {
      typeof e.type == "string" && function(t) {
        var n = t.props, _14 = t.type, o = {};
        for (var r2 in n) {
          var l = n[r2];
          if (!(r2 === "value" && "defaultValue" in n && l == null || Zt && r2 === "children" && _14 === "noscript" || r2 === "class" || r2 === "className")) {
            var a = r2.toLowerCase();
            r2 === "defaultValue" && "value" in n && n.value == null ? r2 = "value" : r2 === "download" && l === true ? l = "" : a === "ondoubleclick" ? r2 = "ondblclick" : a !== "onchange" || _14 !== "input" && _14 !== "textarea" || Jt(n.type) ? a === "onfocus" ? r2 = "onfocusin" : a === "onblur" ? r2 = "onfocusout" : Gt.test(r2) ? r2 = a : _14.indexOf("-") === -1 && qt.test(r2) ? r2 = r2.replace(Yt, "-$&").toLowerCase() : l === null && (l = void 0) : a = r2 = "oninput", a === "oninput" && o[r2 = a] && (r2 = "oninputCapture"), o[r2] = l;
          }
        }
        _14 == "select" && o.multiple && Array.isArray(o.value) && (o.value = w(n.children).forEach(function(s) {
          s.props.selected = o.value.indexOf(s.props.value) != -1;
        })), _14 == "select" && o.defaultValue != null && (o.value = w(n.children).forEach(function(s) {
          s.props.selected = o.multiple ? o.defaultValue.indexOf(s.props.value) != -1 : o.defaultValue == s.props.value;
        })), n.class && !n.className ? (o.class = n.class, Object.defineProperty(o, "className", en)) : (n.className && !n.class || n.class && n.className) && (o.class = o.className = n.className), t.props = o;
      }(e), e.$$typeof = Pt, Ht && Ht(e);
    };
    Rt = c.__r;
    c.__r = function(e) {
      Rt && Rt(e), Se = e.__c;
    };
    Ut = c.diffed;
    c.diffed = function(e) {
      Ut && Ut(e);
      var t = e.props, n = e.__e;
      n != null && e.type === "textarea" && "value" in t && t.value !== n.value && (n.value = t.value == null ? "" : t.value), Se = null;
    };
    Te = { ReactCurrentDispatcher: { current: { readContext: function(e) {
      return Se.__n[e.__c].props.value;
    } } } };
    Dt = "17.0.2";
    i(Oe, "fn");
    i(pe, "an");
    i(Ae, "sn");
    i(Ve, "hn");
    i(Fe, "vn");
    Le = i(function(e, t) {
      return e(t);
    }, "dn");
    Ie = i(function(e, t) {
      return e(t);
    }, "pn");
    We = x;
    i(de, "yn");
    i(Me, "_n");
    i(Be, "bn");
    $e = F;
    i(je, "gn");
    Tt = { useState: z, useId: fe, useReducer: J, useEffect: K, useLayoutEffect: F, useInsertionEffect: $e, useTransition: Be, useDeferredValue: Me, useSyncExternalStore: je, startTransition: de, useRef: ie, useImperativeHandle: le, useMemo: j, useCallback: ae, useContext: ce, useDebugValue: se, version: "17.0.2", Children: we, render: Ue, hydrate: De, unmountComponentAtNode: Ve, createPortal: Re, createElement: C, createContext: B, createFactory: Oe, cloneElement: Ae, createRef: M, Fragment: x, isValidElement: pe, findDOMNode: Fe, Component: E, PureComponent: Q, memo: Ne, forwardRef: Pe, flushSync: Ie, unstable_batchedUpdates: Le, StrictMode: We, Suspense: q, SuspenseList: L, lazy: He, __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: Te };
    tn = 0;
    i(qe, "o");
    yn = ze;
  }
});

// ../../node_modules/@adobe/react-spectrum-ui/dist/CornerTriangle.js
var require_CornerTriangle = __commonJS({
  "../../node_modules/@adobe/react-spectrum-ui/dist/CornerTriangle.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CornerTriangle = CornerTriangle2;
    var _react = _interopRequireDefault((init_preact_min(), __toCommonJS(preact_min_exports)));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _extends3() {
      _extends3 = Object.assign || function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends3.apply(this, arguments);
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose2(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose2(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i2;
      for (i2 = 0; i2 < sourceKeys.length; i2++) {
        key = sourceKeys[i2];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function CornerTriangle2(_ref) {
      var _ref$scale = _ref.scale, scale = _ref$scale === void 0 ? "M" : _ref$scale, props = _objectWithoutProperties(_ref, ["scale"]);
      return _react["default"].createElement("svg", _extends3({}, props, props), scale === "L" && _react["default"].createElement("path", {
        d: "M5.74.01a.25.25 0 0 0-.177.073l-5.48 5.48a.25.25 0 0 0 .177.427h5.48a.25.25 0 0 0 .25-.25V.26a.25.25 0 0 0-.25-.25z"
      }), scale === "M" && _react["default"].createElement("path", {
        d: "M4.74.01a.25.25 0 0 0-.177.073l-4.48 4.48a.25.25 0 0 0 .177.427h4.48a.25.25 0 0 0 .25-.25V.26a.25.25 0 0 0-.25-.25z"
      }));
    }
    CornerTriangle2.displayName = "CornerTriangle";
  }
});

// ../../node_modules/@adobe/react-spectrum-ui/dist/CrossSmall.js
var require_CrossSmall = __commonJS({
  "../../node_modules/@adobe/react-spectrum-ui/dist/CrossSmall.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CrossSmall = CrossSmall2;
    var _react = _interopRequireDefault((init_preact_min(), __toCommonJS(preact_min_exports)));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _extends3() {
      _extends3 = Object.assign || function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends3.apply(this, arguments);
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose2(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose2(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i2;
      for (i2 = 0; i2 < sourceKeys.length; i2++) {
        key = sourceKeys[i2];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function CrossSmall2(_ref) {
      var _ref$scale = _ref.scale, scale = _ref$scale === void 0 ? "M" : _ref$scale, props = _objectWithoutProperties(_ref, ["scale"]);
      return _react["default"].createElement("svg", _extends3({}, props, props), scale === "L" && _react["default"].createElement("path", {
        d: "M9.317 8.433L5.884 5l3.433-3.433a.625.625 0 1 0-.884-.884L5 4.116 1.567.683a.625.625 0 1 0-.884.884C.83 1.713 2.77 3.657 4.116 5L.683 8.433a.625.625 0 1 0 .884.884L5 5.884l3.433 3.433a.625.625 0 0 0 .884-.884z"
      }), scale === "M" && _react["default"].createElement("path", {
        d: "M7.317 6.433L4.884 4l2.433-2.433a.625.625 0 1 0-.884-.884L4 3.116 1.567.683a.625.625 0 1 0-.884.884L3.116 4 .683 6.433a.625.625 0 1 0 .884.884L4 4.884l2.433 2.433a.625.625 0 0 0 .884-.884z"
      }));
    }
    CrossSmall2.displayName = "CrossSmall";
  }
});

// ../../node_modules/@adobe/react-spectrum-ui/dist/ChevronDownMedium.js
var require_ChevronDownMedium = __commonJS({
  "../../node_modules/@adobe/react-spectrum-ui/dist/ChevronDownMedium.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ChevronDownMedium = ChevronDownMedium2;
    var _react = _interopRequireDefault((init_preact_min(), __toCommonJS(preact_min_exports)));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _extends3() {
      _extends3 = Object.assign || function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends3.apply(this, arguments);
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose2(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose2(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i2;
      for (i2 = 0; i2 < sourceKeys.length; i2++) {
        key = sourceKeys[i2];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function ChevronDownMedium2(_ref) {
      var _ref$scale = _ref.scale, scale = _ref$scale === void 0 ? "M" : _ref$scale, props = _objectWithoutProperties(_ref, ["scale"]);
      return _react["default"].createElement("svg", _extends3({}, props, props), scale === "L" && _react["default"].createElement("path", {
        d: "M11.99 1.51a1 1 0 0 0-1.707-.707L6 5.086 1.717.803A1 1 0 1 0 .303 2.217l4.99 4.99a1 1 0 0 0 1.414 0l4.99-4.99a.997.997 0 0 0 .293-.707z"
      }), scale === "M" && _react["default"].createElement("path", {
        d: "M9.99 1.01A1 1 0 0 0 8.283.303L5 3.586 1.717.303A1 1 0 1 0 .303 1.717l3.99 3.98a1 1 0 0 0 1.414 0l3.99-3.98a.997.997 0 0 0 .293-.707z"
      }));
    }
    ChevronDownMedium2.displayName = "ChevronDownMedium";
  }
});

// ../../node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "../../node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol2 = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol2 ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol2 ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol2 ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol2 ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol2 ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol2 ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol2 ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol2 ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol2 ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol2 ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol2 ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol2 ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol2 ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol2 ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol2 ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol2 ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object2) {
          if (typeof object2 === "object" && object2 !== null) {
            var $$typeof = object2.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object2.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object2) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object2) || typeOf(object2) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object2) {
          return typeOf(object2) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object2) {
          return typeOf(object2) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object2) {
          return typeOf(object2) === REACT_PROVIDER_TYPE;
        }
        function isElement(object2) {
          return typeof object2 === "object" && object2 !== null && object2.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object2) {
          return typeOf(object2) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object2) {
          return typeOf(object2) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object2) {
          return typeOf(object2) === REACT_LAZY_TYPE;
        }
        function isMemo(object2) {
          return typeOf(object2) === REACT_MEMO_TYPE;
        }
        function isPortal(object2) {
          return typeOf(object2) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object2) {
          return typeOf(object2) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object2) {
          return typeOf(object2) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object2) {
          return typeOf(object2) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// ../../node_modules/react-is/index.js
var require_react_is = __commonJS({
  "../../node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// ../../node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "../../node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i2 = 0; i2 < 10; i2++) {
          test2["_" + String.fromCharCode(i2)] = i2;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i2 = 0; i2 < symbols.length; i2++) {
            if (propIsEnumerable.call(from, symbols[i2])) {
              to[symbols[i2]] = from[symbols[i2]];
            }
          }
        }
      }
      return to;
    };
  }
});

// ../../node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "../../node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// ../../node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "../../node_modules/prop-types/lib/has.js"(exports, module) {
    "use strict";
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// ../../node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "../../node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has2 = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x2) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has2;
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has2(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// ../../node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "../../node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is();
    var assign2 = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has2 = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x2) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x2, y) {
        if (x2 === y) {
          return x2 !== 0 || 1 / x2 === 1 / y;
        } else {
          return x2 !== x2 && y !== y;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i2 = 0; i2 < propValue.length; i2++) {
            var error = typeChecker(propValue, i2, componentName, location, propFullName + "[" + i2 + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i2 = 0; i2 < expectedValues.length; i2++) {
            if (is(propValue, expectedValues[i2])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has2(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
          var checker = arrayOfTypeCheckers[i2];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i2 + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i3 = 0; i3 < arrayOfTypeCheckers.length; i3++) {
            var checker2 = arrayOfTypeCheckers[i3];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has2(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign2({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has2(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// ../../node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "../../node_modules/prop-types/index.js"(exports, module) {
    "use strict";
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// ../../node_modules/@adobe/react-spectrum-ui/dist/CheckmarkMedium.js
var require_CheckmarkMedium = __commonJS({
  "../../node_modules/@adobe/react-spectrum-ui/dist/CheckmarkMedium.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CheckmarkMedium = CheckmarkMedium2;
    var _react = _interopRequireDefault((init_preact_min(), __toCommonJS(preact_min_exports)));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _extends3() {
      _extends3 = Object.assign || function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends3.apply(this, arguments);
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose2(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose2(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i2;
      for (i2 = 0; i2 < sourceKeys.length; i2++) {
        key = sourceKeys[i2];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function CheckmarkMedium2(_ref) {
      var _ref$scale = _ref.scale, scale = _ref$scale === void 0 ? "M" : _ref$scale, props = _objectWithoutProperties(_ref, ["scale"]);
      return _react["default"].createElement("svg", _extends3({}, props, props), scale === "L" && _react["default"].createElement("path", {
        d: "M6 14a1 1 0 0 1-.789-.385l-4-5a1 1 0 1 1 1.577-1.23L6 11.376l7.213-8.99a1 1 0 1 1 1.576 1.23l-8 10a1 1 0 0 1-.789.384z"
      }), scale === "M" && _react["default"].createElement("path", {
        d: "M4.5 10a1.022 1.022 0 0 1-.799-.384l-2.488-3a1 1 0 0 1 1.576-1.233L4.5 7.376l4.712-5.991a1 1 0 1 1 1.576 1.23l-5.51 7A.978.978 0 0 1 4.5 10z"
      }));
    }
    CheckmarkMedium2.displayName = "CheckmarkMedium";
  }
});

// ../../node_modules/@adobe/react-spectrum-ui/dist/AlertMedium.js
var require_AlertMedium = __commonJS({
  "../../node_modules/@adobe/react-spectrum-ui/dist/AlertMedium.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AlertMedium = AlertMedium2;
    var _react = _interopRequireDefault((init_preact_min(), __toCommonJS(preact_min_exports)));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _extends3() {
      _extends3 = Object.assign || function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends3.apply(this, arguments);
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose2(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose2(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i2;
      for (i2 = 0; i2 < sourceKeys.length; i2++) {
        key = sourceKeys[i2];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function AlertMedium2(_ref) {
      var _ref$scale = _ref.scale, scale = _ref$scale === void 0 ? "M" : _ref$scale, props = _objectWithoutProperties(_ref, ["scale"]);
      return _react["default"].createElement("svg", _extends3({}, props, props), scale === "L" && _react["default"].createElement("path", {
        d: "M10.563 2.206l-9.249 16.55a.5.5 0 0 0 .436.744h18.5a.5.5 0 0 0 .436-.744l-9.251-16.55a.5.5 0 0 0-.872 0zm1.436 15.044a.25.25 0 0 1-.25.25h-1.5a.25.25 0 0 1-.25-.25v-1.5a.25.25 0 0 1 .25-.25h1.5a.25.25 0 0 1 .25.25zm0-3.5a.25.25 0 0 1-.25.25h-1.5a.25.25 0 0 1-.25-.25v-6a.25.25 0 0 1 .25-.25h1.5a.25.25 0 0 1 .25.25z"
      }), scale === "M" && _react["default"].createElement("path", {
        d: "M8.564 1.289L.2 16.256A.5.5 0 0 0 .636 17h16.728a.5.5 0 0 0 .436-.744L9.436 1.289a.5.5 0 0 0-.872 0zM10 14.75a.25.25 0 0 1-.25.25h-1.5a.25.25 0 0 1-.25-.25v-1.5a.25.25 0 0 1 .25-.25h1.5a.25.25 0 0 1 .25.25zm0-3a.25.25 0 0 1-.25.25h-1.5a.25.25 0 0 1-.25-.25v-6a.25.25 0 0 1 .25-.25h1.5a.25.25 0 0 1 .25.25z"
      }));
    }
    AlertMedium2.displayName = "AlertMedium";
  }
});

// ../../node_modules/@adobe/react-spectrum-ui/dist/Asterisk.js
var require_Asterisk = __commonJS({
  "../../node_modules/@adobe/react-spectrum-ui/dist/Asterisk.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Asterisk = Asterisk2;
    var _react = _interopRequireDefault((init_preact_min(), __toCommonJS(preact_min_exports)));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _extends3() {
      _extends3 = Object.assign || function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends3.apply(this, arguments);
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose2(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose2(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i2;
      for (i2 = 0; i2 < sourceKeys.length; i2++) {
        key = sourceKeys[i2];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function Asterisk2(_ref) {
      var _ref$scale = _ref.scale, scale = _ref$scale === void 0 ? "M" : _ref$scale, props = _objectWithoutProperties(_ref, ["scale"]);
      return _react["default"].createElement("svg", _extends3({}, props, props), scale === "L" && _react["default"].createElement("path", {
        d: "M7.867 7.872c.061.062.103.145 0 .228l-1.283.827c-.104.061-.145.02-.186-.083L4.804 6.07l-2.09 2.297c-.021.042-.083.083-.145 0l-.994-1.035c-.103-.062-.082-.124 0-.186l2.36-1.966-2.691-1.014c-.042 0-.104-.083-.062-.186l.703-1.41a.11.11 0 0 1 .187-.04L4.43 4.06l.145-3.02A.109.109 0 0 1 4.7.917l1.718.227c.104 0 .124.042.104.145l-.808 2.96 2.734-.828c.061-.042.124-.042.165.082l.27 1.532c.02.103 0 .145-.084.145l-2.856.227z"
      }), scale === "M" && _react["default"].createElement("path", {
        d: "M6.573 6.558c.056.055.092.13 0 .204l-1.148.74c-.093.056-.13.02-.167-.073L3.832 4.947l-1.87 2.055c-.02.037-.075.074-.13 0l-.889-.926c-.092-.055-.074-.111 0-.167l2.111-1.76-2.408-.906c-.037 0-.092-.074-.055-.167l.63-1.259a.097.097 0 0 1 .166-.036l2.111 1.37.13-2.704a.097.097 0 0 1 .111-.11L5.277.54c.092 0 .11.037.092.13l-.722 2.647 2.444-.74c.056-.038.111-.038.148.073l.241 1.37c.019.093 0 .13-.074.13l-2.556.204z"
      }));
    }
    Asterisk2.displayName = "Asterisk";
  }
});

// ../../node_modules/@adobe/react-spectrum-workflow/dist/Edit.js
var require_Edit = __commonJS({
  "../../node_modules/@adobe/react-spectrum-workflow/dist/Edit.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.A4uEdit = A4uEdit;
    var _react = _interopRequireDefault((init_preact_min(), __toCommonJS(preact_min_exports)));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _extends3() {
      _extends3 = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends3.apply(this, arguments);
    }
    function A4uEdit(_ref) {
      var props = _extends3({}, _ref);
      return /* @__PURE__ */ _react["default"].createElement("svg", _extends3({
        viewBox: "0 0 36 36"
      }, props, props), /* @__PURE__ */ _react["default"].createElement("path", {
        fillRule: "evenodd",
        d: "M33.567,8.2,27.8,2.432a1.215,1.215,0,0,0-.866-.353H26.9a1.371,1.371,0,0,0-.927.406L5.084,23.372a.99.99,0,0,0-.251.422L2.055,33.1c-.114.377.459.851.783.851a.251.251,0,0,0,.062-.007c.276-.063,7.866-2.344,9.311-2.778a.972.972,0,0,0,.414-.249L33.513,10.028a1.372,1.372,0,0,0,.4-.883A1.221,1.221,0,0,0,33.567,8.2ZM11.4,29.316c-2.161.649-4.862,1.465-6.729,2.022l2.009-6.73Z"
      }));
    }
  }
});

// src/setup.ts
globalThis.UI = true;
globalThis.UI_ENDPOINT = "http://localhost:3000";
globalThis.PLUGIN_ID = "1152303696398026079";
globalThis.DEV = true;

// src/index.tsx
init_preact_min();

// src/Provider.tsx
init_preact_min();
init_preact_min();

// src/state/provider.tsx
init_preact_min();
init_preact_min();

// ../../node_modules/mobx/dist/mobx.esm.js
var niceErrors = {
  0: "Invalid value for configuration 'enforceActions', expected 'never', 'always' or 'observed'",
  1: function _(annotationType, key) {
    return "Cannot apply '" + annotationType + "' to '" + key.toString() + "': Field not found.";
  },
  /*
  2(prop) {
      return `invalid decorator for '${prop.toString()}'`
  },
  3(prop) {
      return `Cannot decorate '${prop.toString()}': action can only be used on properties with a function value.`
  },
  4(prop) {
      return `Cannot decorate '${prop.toString()}': computed can only be used on getter properties.`
  },
  */
  5: "'keys()' can only be used on observable objects, arrays, sets and maps",
  6: "'values()' can only be used on observable objects, arrays, sets and maps",
  7: "'entries()' can only be used on observable objects, arrays and maps",
  8: "'set()' can only be used on observable objects, arrays and maps",
  9: "'remove()' can only be used on observable objects, arrays and maps",
  10: "'has()' can only be used on observable objects, arrays and maps",
  11: "'get()' can only be used on observable objects, arrays and maps",
  12: "Invalid annotation",
  13: "Dynamic observable objects cannot be frozen. If you're passing observables to 3rd party component/function that calls Object.freeze, pass copy instead: toJS(observable)",
  14: "Intercept handlers should return nothing or a change object",
  15: "Observable arrays cannot be frozen. If you're passing observables to 3rd party component/function that calls Object.freeze, pass copy instead: toJS(observable)",
  16: "Modification exception: the internal structure of an observable array was changed.",
  17: function _2(index, length) {
    return "[mobx.array] Index out of bounds, " + index + " is larger than " + length;
  },
  18: "mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js",
  19: function _3(other) {
    return "Cannot initialize from classes that inherit from Map: " + other.constructor.name;
  },
  20: function _4(other) {
    return "Cannot initialize map from " + other;
  },
  21: function _5(dataStructure) {
    return "Cannot convert to map from '" + dataStructure + "'";
  },
  22: "mobx.set requires Set polyfill for the current browser. Check babel-polyfill or core-js/es6/set.js",
  23: "It is not possible to get index atoms from arrays",
  24: function _6(thing) {
    return "Cannot obtain administration from " + thing;
  },
  25: function _7(property, name) {
    return "the entry '" + property + "' does not exist in the observable map '" + name + "'";
  },
  26: "please specify a property",
  27: function _8(property, name) {
    return "no observable property '" + property.toString() + "' found on the observable object '" + name + "'";
  },
  28: function _9(thing) {
    return "Cannot obtain atom from " + thing;
  },
  29: "Expecting some object",
  30: "invalid action stack. did you forget to finish an action?",
  31: "missing option for computed: get",
  32: function _10(name, derivation) {
    return "Cycle detected in computation " + name + ": " + derivation;
  },
  33: function _11(name) {
    return "The setter of computed value '" + name + "' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?";
  },
  34: function _12(name) {
    return "[ComputedValue '" + name + "'] It is not possible to assign a new value to a computed value.";
  },
  35: "There are multiple, different versions of MobX active. Make sure MobX is loaded only once or use `configure({ isolateGlobalState: true })`",
  36: "isolateGlobalState should be called before MobX is running any reactions",
  37: function _13(method) {
    return "[mobx] `observableArray." + method + "()` mutates the array in-place, which is not allowed inside a derivation. Use `array.slice()." + method + "()` instead";
  },
  38: "'ownKeys()' can only be used on observable objects",
  39: "'defineProperty()' can only be used on observable objects"
};
var errors = true ? niceErrors : {};
function die(error) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  if (true) {
    var e = typeof error === "string" ? error : errors[error];
    if (typeof e === "function")
      e = e.apply(null, args);
    throw new Error("[MobX] " + e);
  }
  throw new Error(typeof error === "number" ? "[MobX] minified error nr: " + error + (args.length ? " " + args.map(String).join(",") : "") + ". Find the full error at: https://github.com/mobxjs/mobx/blob/main/packages/mobx/src/errors.ts" : "[MobX] " + error);
}
var mockGlobal = {};
function getGlobal() {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  return mockGlobal;
}
var assign = Object.assign;
var getDescriptor = Object.getOwnPropertyDescriptor;
var defineProperty = Object.defineProperty;
var objectPrototype = Object.prototype;
var EMPTY_ARRAY = [];
Object.freeze(EMPTY_ARRAY);
var EMPTY_OBJECT = {};
Object.freeze(EMPTY_OBJECT);
var hasProxy = typeof Proxy !== "undefined";
var plainObjectString = /* @__PURE__ */ Object.toString();
function assertProxies() {
  if (!hasProxy) {
    die(true ? "`Proxy` objects are not available in the current environment. Please configure MobX to enable a fallback implementation.`" : "Proxy not available");
  }
}
function warnAboutProxyRequirement(msg) {
  if (globalState.verifyProxies) {
    die("MobX is currently configured to be able to run in ES5 mode, but in ES5 MobX won't be able to " + msg);
  }
}
function getNextId() {
  return ++globalState.mobxGuid;
}
function once(func) {
  var invoked = false;
  return function() {
    if (invoked) {
      return;
    }
    invoked = true;
    return func.apply(this, arguments);
  };
}
var noop = function noop2() {
};
function isFunction(fn) {
  return typeof fn === "function";
}
function isStringish(value) {
  var t = typeof value;
  switch (t) {
    case "string":
    case "symbol":
    case "number":
      return true;
  }
  return false;
}
function isObject(value) {
  return value !== null && typeof value === "object";
}
function isPlainObject(value) {
  if (!isObject(value)) {
    return false;
  }
  var proto = Object.getPrototypeOf(value);
  if (proto == null) {
    return true;
  }
  var protoConstructor = Object.hasOwnProperty.call(proto, "constructor") && proto.constructor;
  return typeof protoConstructor === "function" && protoConstructor.toString() === plainObjectString;
}
function isGenerator(obj) {
  var constructor = obj == null ? void 0 : obj.constructor;
  if (!constructor) {
    return false;
  }
  if ("GeneratorFunction" === constructor.name || "GeneratorFunction" === constructor.displayName) {
    return true;
  }
  return false;
}
function addHiddenProp(object2, propName, value) {
  defineProperty(object2, propName, {
    enumerable: false,
    writable: true,
    configurable: true,
    value
  });
}
function addHiddenFinalProp(object2, propName, value) {
  defineProperty(object2, propName, {
    enumerable: false,
    writable: false,
    configurable: true,
    value
  });
}
function createInstanceofPredicate(name, theClass) {
  var propName = "isMobX" + name;
  theClass.prototype[propName] = true;
  return function(x2) {
    return isObject(x2) && x2[propName] === true;
  };
}
function isES6Map(thing) {
  return thing instanceof Map;
}
function isES6Set(thing) {
  return thing instanceof Set;
}
var hasGetOwnPropertySymbols = typeof Object.getOwnPropertySymbols !== "undefined";
function getPlainObjectKeys(object2) {
  var keys = Object.keys(object2);
  if (!hasGetOwnPropertySymbols) {
    return keys;
  }
  var symbols = Object.getOwnPropertySymbols(object2);
  if (!symbols.length) {
    return keys;
  }
  return [].concat(keys, symbols.filter(function(s) {
    return objectPrototype.propertyIsEnumerable.call(object2, s);
  }));
}
var ownKeys = typeof Reflect !== "undefined" && Reflect.ownKeys ? Reflect.ownKeys : hasGetOwnPropertySymbols ? function(obj) {
  return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));
} : (
  /* istanbul ignore next */
  Object.getOwnPropertyNames
);
function stringifyKey(key) {
  if (typeof key === "string") {
    return key;
  }
  if (typeof key === "symbol") {
    return key.toString();
  }
  return new String(key).toString();
}
function toPrimitive(value) {
  return value === null ? null : typeof value === "object" ? "" + value : value;
}
function hasProp(target, prop) {
  return objectPrototype.hasOwnProperty.call(target, prop);
}
var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors2(target) {
  var res = {};
  ownKeys(target).forEach(function(key) {
    res[key] = getDescriptor(target, key);
  });
  return res;
};
function _defineProperties(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf3(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _assertThisInitialized(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
    arr2[i2] = arr[i2];
  return arr2;
}
function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it2 = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it2)
    return (it2 = it2.call(o)).next.bind(it2);
  if (Array.isArray(o) || (it2 = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it2)
      o = it2;
    var i2 = 0;
    return function() {
      if (i2 >= o.length)
        return {
          done: true
        };
      return {
        done: false,
        value: o[i2++]
      };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
var storedAnnotationsSymbol = /* @__PURE__ */ Symbol("mobx-stored-annotations");
function createDecoratorAnnotation(annotation) {
  function decorator(target, property) {
    storeAnnotation(target, property, annotation);
  }
  return Object.assign(decorator, annotation);
}
function storeAnnotation(prototype, key, annotation) {
  if (!hasProp(prototype, storedAnnotationsSymbol)) {
    addHiddenProp(prototype, storedAnnotationsSymbol, _extends({}, prototype[storedAnnotationsSymbol]));
  }
  if (isOverride(annotation) && !hasProp(prototype[storedAnnotationsSymbol], key)) {
    var fieldName = prototype.constructor.name + ".prototype." + key.toString();
    die("'" + fieldName + "' is decorated with 'override', but no such decorated member was found on prototype.");
  }
  assertNotDecorated(prototype, annotation, key);
  if (!isOverride(annotation)) {
    prototype[storedAnnotationsSymbol][key] = annotation;
  }
}
function assertNotDecorated(prototype, annotation, key) {
  if (!isOverride(annotation) && hasProp(prototype[storedAnnotationsSymbol], key)) {
    var fieldName = prototype.constructor.name + ".prototype." + key.toString();
    var currentAnnotationType = prototype[storedAnnotationsSymbol][key].annotationType_;
    var requestedAnnotationType = annotation.annotationType_;
    die("Cannot apply '@" + requestedAnnotationType + "' to '" + fieldName + "':" + ("\nThe field is already decorated with '@" + currentAnnotationType + "'.") + "\nRe-decorating fields is not allowed.\nUse '@override' decorator for methods overridden by subclass.");
  }
}
function collectStoredAnnotations(target) {
  if (!hasProp(target, storedAnnotationsSymbol)) {
    if (!target[storedAnnotationsSymbol]) {
      die("No annotations were passed to makeObservable, but no decorated members have been found either");
    }
    addHiddenProp(target, storedAnnotationsSymbol, _extends({}, target[storedAnnotationsSymbol]));
  }
  return target[storedAnnotationsSymbol];
}
var $mobx = /* @__PURE__ */ Symbol("mobx administration");
var Atom = /* @__PURE__ */ function() {
  function Atom2(name_) {
    if (name_ === void 0) {
      name_ = true ? "Atom@" + getNextId() : "Atom";
    }
    this.name_ = void 0;
    this.isPendingUnobservation_ = false;
    this.isBeingObserved_ = false;
    this.observers_ = /* @__PURE__ */ new Set();
    this.diffValue_ = 0;
    this.lastAccessedBy_ = 0;
    this.lowestObserverState_ = IDerivationState_.NOT_TRACKING_;
    this.onBOL = void 0;
    this.onBUOL = void 0;
    this.name_ = name_;
  }
  var _proto = Atom2.prototype;
  _proto.onBO = function onBO() {
    if (this.onBOL) {
      this.onBOL.forEach(function(listener) {
        return listener();
      });
    }
  };
  _proto.onBUO = function onBUO() {
    if (this.onBUOL) {
      this.onBUOL.forEach(function(listener) {
        return listener();
      });
    }
  };
  _proto.reportObserved = function reportObserved$1() {
    return reportObserved(this);
  };
  _proto.reportChanged = function reportChanged() {
    startBatch();
    propagateChanged(this);
    globalState.stateVersion = globalState.stateVersion < Number.MAX_SAFE_INTEGER ? globalState.stateVersion + 1 : Number.MIN_SAFE_INTEGER;
    endBatch();
  };
  _proto.toString = function toString2() {
    return this.name_;
  };
  return Atom2;
}();
var isAtom = /* @__PURE__ */ createInstanceofPredicate("Atom", Atom);
function createAtom(name, onBecomeObservedHandler, onBecomeUnobservedHandler) {
  if (onBecomeObservedHandler === void 0) {
    onBecomeObservedHandler = noop;
  }
  if (onBecomeUnobservedHandler === void 0) {
    onBecomeUnobservedHandler = noop;
  }
  var atom = new Atom(name);
  if (onBecomeObservedHandler !== noop) {
    onBecomeObserved(atom, onBecomeObservedHandler);
  }
  if (onBecomeUnobservedHandler !== noop) {
    onBecomeUnobserved(atom, onBecomeUnobservedHandler);
  }
  return atom;
}
function identityComparer(a, b) {
  return a === b;
}
function structuralComparer(a, b) {
  return deepEqual(a, b);
}
function shallowComparer(a, b) {
  return deepEqual(a, b, 1);
}
function defaultComparer(a, b) {
  if (Object.is) {
    return Object.is(a, b);
  }
  return a === b ? a !== 0 || 1 / a === 1 / b : a !== a && b !== b;
}
var comparer = {
  identity: identityComparer,
  structural: structuralComparer,
  "default": defaultComparer,
  shallow: shallowComparer
};
function deepEnhancer(v, _14, name) {
  if (isObservable(v)) {
    return v;
  }
  if (Array.isArray(v)) {
    return observable.array(v, {
      name
    });
  }
  if (isPlainObject(v)) {
    return observable.object(v, void 0, {
      name
    });
  }
  if (isES6Map(v)) {
    return observable.map(v, {
      name
    });
  }
  if (isES6Set(v)) {
    return observable.set(v, {
      name
    });
  }
  if (typeof v === "function" && !isAction(v) && !isFlow(v)) {
    if (isGenerator(v)) {
      return flow(v);
    } else {
      return autoAction(name, v);
    }
  }
  return v;
}
function shallowEnhancer(v, _14, name) {
  if (v === void 0 || v === null) {
    return v;
  }
  if (isObservableObject(v) || isObservableArray(v) || isObservableMap(v) || isObservableSet(v)) {
    return v;
  }
  if (Array.isArray(v)) {
    return observable.array(v, {
      name,
      deep: false
    });
  }
  if (isPlainObject(v)) {
    return observable.object(v, void 0, {
      name,
      deep: false
    });
  }
  if (isES6Map(v)) {
    return observable.map(v, {
      name,
      deep: false
    });
  }
  if (isES6Set(v)) {
    return observable.set(v, {
      name,
      deep: false
    });
  }
  if (true) {
    die("The shallow modifier / decorator can only used in combination with arrays, objects, maps and sets");
  }
}
function referenceEnhancer(newValue) {
  return newValue;
}
function refStructEnhancer(v, oldValue) {
  if (isObservable(v)) {
    die("observable.struct should not be used with observable values");
  }
  if (deepEqual(v, oldValue)) {
    return oldValue;
  }
  return v;
}
var OVERRIDE = "override";
function isOverride(annotation) {
  return annotation.annotationType_ === OVERRIDE;
}
function createActionAnnotation(name, options) {
  return {
    annotationType_: name,
    options_: options,
    make_: make_$1,
    extend_: extend_$1
  };
}
function make_$1(adm, key, descriptor, source) {
  var _this$options_;
  if ((_this$options_ = this.options_) != null && _this$options_.bound) {
    return this.extend_(adm, key, descriptor, false) === null ? 0 : 1;
  }
  if (source === adm.target_) {
    return this.extend_(adm, key, descriptor, false) === null ? 0 : 2;
  }
  if (isAction(descriptor.value)) {
    return 1;
  }
  var actionDescriptor = createActionDescriptor(adm, this, key, descriptor, false);
  defineProperty(source, key, actionDescriptor);
  return 2;
}
function extend_$1(adm, key, descriptor, proxyTrap) {
  var actionDescriptor = createActionDescriptor(adm, this, key, descriptor);
  return adm.defineProperty_(key, actionDescriptor, proxyTrap);
}
function assertActionDescriptor(adm, _ref, key, _ref2) {
  var annotationType_ = _ref.annotationType_;
  var value = _ref2.value;
  if (!isFunction(value)) {
    die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' can only be used on properties with a function value."));
  }
}
function createActionDescriptor(adm, annotation, key, descriptor, safeDescriptors) {
  var _annotation$options_, _annotation$options_$, _annotation$options_2, _annotation$options_$2, _annotation$options_3, _annotation$options_4, _adm$proxy_2;
  if (safeDescriptors === void 0) {
    safeDescriptors = globalState.safeDescriptors;
  }
  assertActionDescriptor(adm, annotation, key, descriptor);
  var value = descriptor.value;
  if ((_annotation$options_ = annotation.options_) != null && _annotation$options_.bound) {
    var _adm$proxy_;
    value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);
  }
  return {
    value: createAction(
      (_annotation$options_$ = (_annotation$options_2 = annotation.options_) == null ? void 0 : _annotation$options_2.name) != null ? _annotation$options_$ : key.toString(),
      value,
      (_annotation$options_$2 = (_annotation$options_3 = annotation.options_) == null ? void 0 : _annotation$options_3.autoAction) != null ? _annotation$options_$2 : false,
      // https://github.com/mobxjs/mobx/discussions/3140
      (_annotation$options_4 = annotation.options_) != null && _annotation$options_4.bound ? (_adm$proxy_2 = adm.proxy_) != null ? _adm$proxy_2 : adm.target_ : void 0
    ),
    // Non-configurable for classes
    // prevents accidental field redefinition in subclass
    configurable: safeDescriptors ? adm.isPlainObject_ : true,
    // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058
    enumerable: false,
    // Non-obsevable, therefore non-writable
    // Also prevents rewriting in subclass constructor
    writable: safeDescriptors ? false : true
  };
}
function createFlowAnnotation(name, options) {
  return {
    annotationType_: name,
    options_: options,
    make_: make_$2,
    extend_: extend_$2
  };
}
function make_$2(adm, key, descriptor, source) {
  var _this$options_;
  if (source === adm.target_) {
    return this.extend_(adm, key, descriptor, false) === null ? 0 : 2;
  }
  if ((_this$options_ = this.options_) != null && _this$options_.bound && (!hasProp(adm.target_, key) || !isFlow(adm.target_[key]))) {
    if (this.extend_(adm, key, descriptor, false) === null) {
      return 0;
    }
  }
  if (isFlow(descriptor.value)) {
    return 1;
  }
  var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, false, false);
  defineProperty(source, key, flowDescriptor);
  return 2;
}
function extend_$2(adm, key, descriptor, proxyTrap) {
  var _this$options_2;
  var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, (_this$options_2 = this.options_) == null ? void 0 : _this$options_2.bound);
  return adm.defineProperty_(key, flowDescriptor, proxyTrap);
}
function assertFlowDescriptor(adm, _ref, key, _ref2) {
  var annotationType_ = _ref.annotationType_;
  var value = _ref2.value;
  if (!isFunction(value)) {
    die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' can only be used on properties with a generator function value."));
  }
}
function createFlowDescriptor(adm, annotation, key, descriptor, bound, safeDescriptors) {
  if (safeDescriptors === void 0) {
    safeDescriptors = globalState.safeDescriptors;
  }
  assertFlowDescriptor(adm, annotation, key, descriptor);
  var value = descriptor.value;
  if (!isFlow(value)) {
    value = flow(value);
  }
  if (bound) {
    var _adm$proxy_;
    value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);
    value.isMobXFlow = true;
  }
  return {
    value,
    // Non-configurable for classes
    // prevents accidental field redefinition in subclass
    configurable: safeDescriptors ? adm.isPlainObject_ : true,
    // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058
    enumerable: false,
    // Non-obsevable, therefore non-writable
    // Also prevents rewriting in subclass constructor
    writable: safeDescriptors ? false : true
  };
}
function createComputedAnnotation(name, options) {
  return {
    annotationType_: name,
    options_: options,
    make_: make_$3,
    extend_: extend_$3
  };
}
function make_$3(adm, key, descriptor) {
  return this.extend_(adm, key, descriptor, false) === null ? 0 : 1;
}
function extend_$3(adm, key, descriptor, proxyTrap) {
  assertComputedDescriptor(adm, this, key, descriptor);
  return adm.defineComputedProperty_(key, _extends({}, this.options_, {
    get: descriptor.get,
    set: descriptor.set
  }), proxyTrap);
}
function assertComputedDescriptor(adm, _ref, key, _ref2) {
  var annotationType_ = _ref.annotationType_;
  var get3 = _ref2.get;
  if (!get3) {
    die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' can only be used on getter(+setter) properties."));
  }
}
function createObservableAnnotation(name, options) {
  return {
    annotationType_: name,
    options_: options,
    make_: make_$4,
    extend_: extend_$4
  };
}
function make_$4(adm, key, descriptor) {
  return this.extend_(adm, key, descriptor, false) === null ? 0 : 1;
}
function extend_$4(adm, key, descriptor, proxyTrap) {
  var _this$options_$enhanc, _this$options_;
  assertObservableDescriptor(adm, this, key, descriptor);
  return adm.defineObservableProperty_(key, descriptor.value, (_this$options_$enhanc = (_this$options_ = this.options_) == null ? void 0 : _this$options_.enhancer) != null ? _this$options_$enhanc : deepEnhancer, proxyTrap);
}
function assertObservableDescriptor(adm, _ref, key, descriptor) {
  var annotationType_ = _ref.annotationType_;
  if (!("value" in descriptor)) {
    die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' cannot be used on getter/setter properties"));
  }
}
var AUTO = "true";
var autoAnnotation = /* @__PURE__ */ createAutoAnnotation();
function createAutoAnnotation(options) {
  return {
    annotationType_: AUTO,
    options_: options,
    make_: make_$5,
    extend_: extend_$5
  };
}
function make_$5(adm, key, descriptor, source) {
  var _this$options_3, _this$options_4;
  if (descriptor.get) {
    return computed.make_(adm, key, descriptor, source);
  }
  if (descriptor.set) {
    var set4 = createAction(key.toString(), descriptor.set);
    if (source === adm.target_) {
      return adm.defineProperty_(key, {
        configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,
        set: set4
      }) === null ? 0 : 2;
    }
    defineProperty(source, key, {
      configurable: true,
      set: set4
    });
    return 2;
  }
  if (source !== adm.target_ && typeof descriptor.value === "function") {
    var _this$options_2;
    if (isGenerator(descriptor.value)) {
      var _this$options_;
      var flowAnnotation2 = (_this$options_ = this.options_) != null && _this$options_.autoBind ? flow.bound : flow;
      return flowAnnotation2.make_(adm, key, descriptor, source);
    }
    var actionAnnotation2 = (_this$options_2 = this.options_) != null && _this$options_2.autoBind ? autoAction.bound : autoAction;
    return actionAnnotation2.make_(adm, key, descriptor, source);
  }
  var observableAnnotation2 = ((_this$options_3 = this.options_) == null ? void 0 : _this$options_3.deep) === false ? observable.ref : observable;
  if (typeof descriptor.value === "function" && (_this$options_4 = this.options_) != null && _this$options_4.autoBind) {
    var _adm$proxy_;
    descriptor.value = descriptor.value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);
  }
  return observableAnnotation2.make_(adm, key, descriptor, source);
}
function extend_$5(adm, key, descriptor, proxyTrap) {
  var _this$options_5, _this$options_6;
  if (descriptor.get) {
    return computed.extend_(adm, key, descriptor, proxyTrap);
  }
  if (descriptor.set) {
    return adm.defineProperty_(key, {
      configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,
      set: createAction(key.toString(), descriptor.set)
    }, proxyTrap);
  }
  if (typeof descriptor.value === "function" && (_this$options_5 = this.options_) != null && _this$options_5.autoBind) {
    var _adm$proxy_2;
    descriptor.value = descriptor.value.bind((_adm$proxy_2 = adm.proxy_) != null ? _adm$proxy_2 : adm.target_);
  }
  var observableAnnotation2 = ((_this$options_6 = this.options_) == null ? void 0 : _this$options_6.deep) === false ? observable.ref : observable;
  return observableAnnotation2.extend_(adm, key, descriptor, proxyTrap);
}
var OBSERVABLE = "observable";
var OBSERVABLE_REF = "observable.ref";
var OBSERVABLE_SHALLOW = "observable.shallow";
var OBSERVABLE_STRUCT = "observable.struct";
var defaultCreateObservableOptions = {
  deep: true,
  name: void 0,
  defaultDecorator: void 0,
  proxy: true
};
Object.freeze(defaultCreateObservableOptions);
function asCreateObservableOptions(thing) {
  return thing || defaultCreateObservableOptions;
}
var observableAnnotation = /* @__PURE__ */ createObservableAnnotation(OBSERVABLE);
var observableRefAnnotation = /* @__PURE__ */ createObservableAnnotation(OBSERVABLE_REF, {
  enhancer: referenceEnhancer
});
var observableShallowAnnotation = /* @__PURE__ */ createObservableAnnotation(OBSERVABLE_SHALLOW, {
  enhancer: shallowEnhancer
});
var observableStructAnnotation = /* @__PURE__ */ createObservableAnnotation(OBSERVABLE_STRUCT, {
  enhancer: refStructEnhancer
});
var observableDecoratorAnnotation = /* @__PURE__ */ createDecoratorAnnotation(observableAnnotation);
function getEnhancerFromOptions(options) {
  return options.deep === true ? deepEnhancer : options.deep === false ? referenceEnhancer : getEnhancerFromAnnotation(options.defaultDecorator);
}
function getAnnotationFromOptions(options) {
  var _options$defaultDecor;
  return options ? (_options$defaultDecor = options.defaultDecorator) != null ? _options$defaultDecor : createAutoAnnotation(options) : void 0;
}
function getEnhancerFromAnnotation(annotation) {
  var _annotation$options_$, _annotation$options_;
  return !annotation ? deepEnhancer : (_annotation$options_$ = (_annotation$options_ = annotation.options_) == null ? void 0 : _annotation$options_.enhancer) != null ? _annotation$options_$ : deepEnhancer;
}
function createObservable(v, arg2, arg3) {
  if (isStringish(arg2)) {
    storeAnnotation(v, arg2, observableAnnotation);
    return;
  }
  if (isObservable(v)) {
    return v;
  }
  if (isPlainObject(v)) {
    return observable.object(v, arg2, arg3);
  }
  if (Array.isArray(v)) {
    return observable.array(v, arg2);
  }
  if (isES6Map(v)) {
    return observable.map(v, arg2);
  }
  if (isES6Set(v)) {
    return observable.set(v, arg2);
  }
  if (typeof v === "object" && v !== null) {
    return v;
  }
  return observable.box(v, arg2);
}
assign(createObservable, observableDecoratorAnnotation);
var observableFactories = {
  box: function box(value, options) {
    var o = asCreateObservableOptions(options);
    return new ObservableValue(value, getEnhancerFromOptions(o), o.name, true, o.equals);
  },
  array: function array(initialValues, options) {
    var o = asCreateObservableOptions(options);
    return (globalState.useProxies === false || o.proxy === false ? createLegacyArray : createObservableArray)(initialValues, getEnhancerFromOptions(o), o.name);
  },
  map: function map(initialValues, options) {
    var o = asCreateObservableOptions(options);
    return new ObservableMap(initialValues, getEnhancerFromOptions(o), o.name);
  },
  set: function set(initialValues, options) {
    var o = asCreateObservableOptions(options);
    return new ObservableSet(initialValues, getEnhancerFromOptions(o), o.name);
  },
  object: function object(props, decorators, options) {
    return extendObservable(globalState.useProxies === false || (options == null ? void 0 : options.proxy) === false ? asObservableObject({}, options) : asDynamicObservableObject({}, options), props, decorators);
  },
  ref: /* @__PURE__ */ createDecoratorAnnotation(observableRefAnnotation),
  shallow: /* @__PURE__ */ createDecoratorAnnotation(observableShallowAnnotation),
  deep: observableDecoratorAnnotation,
  struct: /* @__PURE__ */ createDecoratorAnnotation(observableStructAnnotation)
};
var observable = /* @__PURE__ */ assign(createObservable, observableFactories);
var COMPUTED = "computed";
var COMPUTED_STRUCT = "computed.struct";
var computedAnnotation = /* @__PURE__ */ createComputedAnnotation(COMPUTED);
var computedStructAnnotation = /* @__PURE__ */ createComputedAnnotation(COMPUTED_STRUCT, {
  equals: comparer.structural
});
var computed = function computed2(arg1, arg2) {
  if (isStringish(arg2)) {
    return storeAnnotation(arg1, arg2, computedAnnotation);
  }
  if (isPlainObject(arg1)) {
    return createDecoratorAnnotation(createComputedAnnotation(COMPUTED, arg1));
  }
  if (true) {
    if (!isFunction(arg1)) {
      die("First argument to `computed` should be an expression.");
    }
    if (isFunction(arg2)) {
      die("A setter as second argument is no longer supported, use `{ set: fn }` option instead");
    }
  }
  var opts = isPlainObject(arg2) ? arg2 : {};
  opts.get = arg1;
  opts.name || (opts.name = arg1.name || "");
  return new ComputedValue(opts);
};
Object.assign(computed, computedAnnotation);
computed.struct = /* @__PURE__ */ createDecoratorAnnotation(computedStructAnnotation);
var _getDescriptor$config;
var _getDescriptor;
var currentActionId = 0;
var nextActionId = 1;
var isFunctionNameConfigurable = (_getDescriptor$config = (_getDescriptor = /* @__PURE__ */ getDescriptor(function() {
}, "name")) == null ? void 0 : _getDescriptor.configurable) != null ? _getDescriptor$config : false;
var tmpNameDescriptor = {
  value: "action",
  configurable: true,
  writable: false,
  enumerable: false
};
function createAction(actionName, fn, autoAction2, ref) {
  if (autoAction2 === void 0) {
    autoAction2 = false;
  }
  if (true) {
    if (!isFunction(fn)) {
      die("`action` can only be invoked on functions");
    }
    if (typeof actionName !== "string" || !actionName) {
      die("actions should have valid names, got: '" + actionName + "'");
    }
  }
  function res() {
    return executeAction(actionName, autoAction2, fn, ref || this, arguments);
  }
  res.isMobxAction = true;
  if (isFunctionNameConfigurable) {
    tmpNameDescriptor.value = actionName;
    defineProperty(res, "name", tmpNameDescriptor);
  }
  return res;
}
function executeAction(actionName, canRunAsDerivation, fn, scope, args) {
  var runInfo = _startAction(actionName, canRunAsDerivation, scope, args);
  try {
    return fn.apply(scope, args);
  } catch (err) {
    runInfo.error_ = err;
    throw err;
  } finally {
    _endAction(runInfo);
  }
}
function _startAction(actionName, canRunAsDerivation, scope, args) {
  var notifySpy_ = isSpyEnabled() && !!actionName;
  var startTime_ = 0;
  if (notifySpy_) {
    startTime_ = Date.now();
    var flattenedArgs = args ? Array.from(args) : EMPTY_ARRAY;
    spyReportStart({
      type: ACTION,
      name: actionName,
      object: scope,
      arguments: flattenedArgs
    });
  }
  var prevDerivation_ = globalState.trackingDerivation;
  var runAsAction = !canRunAsDerivation || !prevDerivation_;
  startBatch();
  var prevAllowStateChanges_ = globalState.allowStateChanges;
  if (runAsAction) {
    untrackedStart();
    prevAllowStateChanges_ = allowStateChangesStart(true);
  }
  var prevAllowStateReads_ = allowStateReadsStart(true);
  var runInfo = {
    runAsAction_: runAsAction,
    prevDerivation_,
    prevAllowStateChanges_,
    prevAllowStateReads_,
    notifySpy_,
    startTime_,
    actionId_: nextActionId++,
    parentActionId_: currentActionId
  };
  currentActionId = runInfo.actionId_;
  return runInfo;
}
function _endAction(runInfo) {
  if (currentActionId !== runInfo.actionId_) {
    die(30);
  }
  currentActionId = runInfo.parentActionId_;
  if (runInfo.error_ !== void 0) {
    globalState.suppressReactionErrors = true;
  }
  allowStateChangesEnd(runInfo.prevAllowStateChanges_);
  allowStateReadsEnd(runInfo.prevAllowStateReads_);
  endBatch();
  if (runInfo.runAsAction_) {
    untrackedEnd(runInfo.prevDerivation_);
  }
  if (runInfo.notifySpy_) {
    spyReportEnd({
      time: Date.now() - runInfo.startTime_
    });
  }
  globalState.suppressReactionErrors = false;
}
function allowStateChanges(allowStateChanges2, func) {
  var prev = allowStateChangesStart(allowStateChanges2);
  try {
    return func();
  } finally {
    allowStateChangesEnd(prev);
  }
}
function allowStateChangesStart(allowStateChanges2) {
  var prev = globalState.allowStateChanges;
  globalState.allowStateChanges = allowStateChanges2;
  return prev;
}
function allowStateChangesEnd(prev) {
  globalState.allowStateChanges = prev;
}
var _Symbol$toPrimitive;
var CREATE = "create";
_Symbol$toPrimitive = Symbol.toPrimitive;
var ObservableValue = /* @__PURE__ */ function(_Atom) {
  _inheritsLoose(ObservableValue2, _Atom);
  function ObservableValue2(value, enhancer, name_, notifySpy, equals) {
    var _this;
    if (name_ === void 0) {
      name_ = true ? "ObservableValue@" + getNextId() : "ObservableValue";
    }
    if (notifySpy === void 0) {
      notifySpy = true;
    }
    if (equals === void 0) {
      equals = comparer["default"];
    }
    _this = _Atom.call(this, name_) || this;
    _this.enhancer = void 0;
    _this.name_ = void 0;
    _this.equals = void 0;
    _this.hasUnreportedChange_ = false;
    _this.interceptors_ = void 0;
    _this.changeListeners_ = void 0;
    _this.value_ = void 0;
    _this.dehancer = void 0;
    _this.enhancer = enhancer;
    _this.name_ = name_;
    _this.equals = equals;
    _this.value_ = enhancer(value, void 0, name_);
    if (notifySpy && isSpyEnabled()) {
      spyReport({
        type: CREATE,
        object: _assertThisInitialized(_this),
        observableKind: "value",
        debugObjectName: _this.name_,
        newValue: "" + _this.value_
      });
    }
    return _this;
  }
  var _proto = ObservableValue2.prototype;
  _proto.dehanceValue = function dehanceValue(value) {
    if (this.dehancer !== void 0) {
      return this.dehancer(value);
    }
    return value;
  };
  _proto.set = function set4(newValue) {
    var oldValue = this.value_;
    newValue = this.prepareNewValue_(newValue);
    if (newValue !== globalState.UNCHANGED) {
      var notifySpy = isSpyEnabled();
      if (notifySpy) {
        spyReportStart({
          type: UPDATE,
          object: this,
          observableKind: "value",
          debugObjectName: this.name_,
          newValue,
          oldValue
        });
      }
      this.setNewValue_(newValue);
      if (notifySpy) {
        spyReportEnd();
      }
    }
  };
  _proto.prepareNewValue_ = function prepareNewValue_(newValue) {
    checkIfStateModificationsAreAllowed(this);
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        object: this,
        type: UPDATE,
        newValue
      });
      if (!change) {
        return globalState.UNCHANGED;
      }
      newValue = change.newValue;
    }
    newValue = this.enhancer(newValue, this.value_, this.name_);
    return this.equals(this.value_, newValue) ? globalState.UNCHANGED : newValue;
  };
  _proto.setNewValue_ = function setNewValue_(newValue) {
    var oldValue = this.value_;
    this.value_ = newValue;
    this.reportChanged();
    if (hasListeners(this)) {
      notifyListeners(this, {
        type: UPDATE,
        object: this,
        newValue,
        oldValue
      });
    }
  };
  _proto.get = function get3() {
    this.reportObserved();
    return this.dehanceValue(this.value_);
  };
  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };
  _proto.observe_ = function observe_(listener, fireImmediately) {
    if (fireImmediately) {
      listener({
        observableKind: "value",
        debugObjectName: this.name_,
        object: this,
        type: UPDATE,
        newValue: this.value_,
        oldValue: void 0
      });
    }
    return registerListener(this, listener);
  };
  _proto.raw = function raw() {
    return this.value_;
  };
  _proto.toJSON = function toJSON2() {
    return this.get();
  };
  _proto.toString = function toString2() {
    return this.name_ + "[" + this.value_ + "]";
  };
  _proto.valueOf = function valueOf() {
    return toPrimitive(this.get());
  };
  _proto[_Symbol$toPrimitive] = function() {
    return this.valueOf();
  };
  return ObservableValue2;
}(Atom);
var _Symbol$toPrimitive$1;
_Symbol$toPrimitive$1 = Symbol.toPrimitive;
var ComputedValue = /* @__PURE__ */ function() {
  function ComputedValue2(options) {
    this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
    this.observing_ = [];
    this.newObserving_ = null;
    this.isBeingObserved_ = false;
    this.isPendingUnobservation_ = false;
    this.observers_ = /* @__PURE__ */ new Set();
    this.diffValue_ = 0;
    this.runId_ = 0;
    this.lastAccessedBy_ = 0;
    this.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
    this.unboundDepsCount_ = 0;
    this.value_ = new CaughtException(null);
    this.name_ = void 0;
    this.triggeredBy_ = void 0;
    this.isComputing_ = false;
    this.isRunningSetter_ = false;
    this.derivation = void 0;
    this.setter_ = void 0;
    this.isTracing_ = TraceMode.NONE;
    this.scope_ = void 0;
    this.equals_ = void 0;
    this.requiresReaction_ = void 0;
    this.keepAlive_ = void 0;
    this.onBOL = void 0;
    this.onBUOL = void 0;
    if (!options.get) {
      die(31);
    }
    this.derivation = options.get;
    this.name_ = options.name || (true ? "ComputedValue@" + getNextId() : "ComputedValue");
    if (options.set) {
      this.setter_ = createAction(true ? this.name_ + "-setter" : "ComputedValue-setter", options.set);
    }
    this.equals_ = options.equals || (options.compareStructural || options.struct ? comparer.structural : comparer["default"]);
    this.scope_ = options.context;
    this.requiresReaction_ = options.requiresReaction;
    this.keepAlive_ = !!options.keepAlive;
  }
  var _proto = ComputedValue2.prototype;
  _proto.onBecomeStale_ = function onBecomeStale_() {
    propagateMaybeChanged(this);
  };
  _proto.onBO = function onBO() {
    if (this.onBOL) {
      this.onBOL.forEach(function(listener) {
        return listener();
      });
    }
  };
  _proto.onBUO = function onBUO() {
    if (this.onBUOL) {
      this.onBUOL.forEach(function(listener) {
        return listener();
      });
    }
  };
  _proto.get = function get3() {
    if (this.isComputing_) {
      die(32, this.name_, this.derivation);
    }
    if (globalState.inBatch === 0 && // !globalState.trackingDerivatpion &&
    this.observers_.size === 0 && !this.keepAlive_) {
      if (shouldCompute(this)) {
        this.warnAboutUntrackedRead_();
        startBatch();
        this.value_ = this.computeValue_(false);
        endBatch();
      }
    } else {
      reportObserved(this);
      if (shouldCompute(this)) {
        var prevTrackingContext = globalState.trackingContext;
        if (this.keepAlive_ && !prevTrackingContext) {
          globalState.trackingContext = this;
        }
        if (this.trackAndCompute()) {
          propagateChangeConfirmed(this);
        }
        globalState.trackingContext = prevTrackingContext;
      }
    }
    var result = this.value_;
    if (isCaughtException(result)) {
      throw result.cause;
    }
    return result;
  };
  _proto.set = function set4(value) {
    if (this.setter_) {
      if (this.isRunningSetter_) {
        die(33, this.name_);
      }
      this.isRunningSetter_ = true;
      try {
        this.setter_.call(this.scope_, value);
      } finally {
        this.isRunningSetter_ = false;
      }
    } else {
      die(34, this.name_);
    }
  };
  _proto.trackAndCompute = function trackAndCompute() {
    var oldValue = this.value_;
    var wasSuspended = (
      /* see #1208 */
      this.dependenciesState_ === IDerivationState_.NOT_TRACKING_
    );
    var newValue = this.computeValue_(true);
    var changed = wasSuspended || isCaughtException(oldValue) || isCaughtException(newValue) || !this.equals_(oldValue, newValue);
    if (changed) {
      this.value_ = newValue;
      if (isSpyEnabled()) {
        spyReport({
          observableKind: "computed",
          debugObjectName: this.name_,
          object: this.scope_,
          type: "update",
          oldValue,
          newValue
        });
      }
    }
    return changed;
  };
  _proto.computeValue_ = function computeValue_(track) {
    this.isComputing_ = true;
    var prev = allowStateChangesStart(false);
    var res;
    if (track) {
      res = trackDerivedFunction(this, this.derivation, this.scope_);
    } else {
      if (globalState.disableErrorBoundaries === true) {
        res = this.derivation.call(this.scope_);
      } else {
        try {
          res = this.derivation.call(this.scope_);
        } catch (e) {
          res = new CaughtException(e);
        }
      }
    }
    allowStateChangesEnd(prev);
    this.isComputing_ = false;
    return res;
  };
  _proto.suspend_ = function suspend_() {
    if (!this.keepAlive_) {
      clearObserving(this);
      this.value_ = void 0;
      if (this.isTracing_ !== TraceMode.NONE) {
        console.log("[mobx.trace] Computed value '" + this.name_ + "' was suspended and it will recompute on the next access.");
      }
    }
  };
  _proto.observe_ = function observe_(listener, fireImmediately) {
    var _this = this;
    var firstTime = true;
    var prevValue = void 0;
    return autorun(function() {
      var newValue = _this.get();
      if (!firstTime || fireImmediately) {
        var prevU = untrackedStart();
        listener({
          observableKind: "computed",
          debugObjectName: _this.name_,
          type: UPDATE,
          object: _this,
          newValue,
          oldValue: prevValue
        });
        untrackedEnd(prevU);
      }
      firstTime = false;
      prevValue = newValue;
    });
  };
  _proto.warnAboutUntrackedRead_ = function warnAboutUntrackedRead_() {
    if (false) {
      return;
    }
    if (this.isTracing_ !== TraceMode.NONE) {
      console.log("[mobx.trace] Computed value '" + this.name_ + "' is being read outside a reactive context. Doing a full recompute.");
    }
    if (typeof this.requiresReaction_ === "boolean" ? this.requiresReaction_ : globalState.computedRequiresReaction) {
      console.warn("[mobx] Computed value '" + this.name_ + "' is being read outside a reactive context. Doing a full recompute.");
    }
  };
  _proto.toString = function toString2() {
    return this.name_ + "[" + this.derivation.toString() + "]";
  };
  _proto.valueOf = function valueOf() {
    return toPrimitive(this.get());
  };
  _proto[_Symbol$toPrimitive$1] = function() {
    return this.valueOf();
  };
  return ComputedValue2;
}();
var isComputedValue = /* @__PURE__ */ createInstanceofPredicate("ComputedValue", ComputedValue);
var IDerivationState_;
(function(IDerivationState_2) {
  IDerivationState_2[IDerivationState_2["NOT_TRACKING_"] = -1] = "NOT_TRACKING_";
  IDerivationState_2[IDerivationState_2["UP_TO_DATE_"] = 0] = "UP_TO_DATE_";
  IDerivationState_2[IDerivationState_2["POSSIBLY_STALE_"] = 1] = "POSSIBLY_STALE_";
  IDerivationState_2[IDerivationState_2["STALE_"] = 2] = "STALE_";
})(IDerivationState_ || (IDerivationState_ = {}));
var TraceMode;
(function(TraceMode2) {
  TraceMode2[TraceMode2["NONE"] = 0] = "NONE";
  TraceMode2[TraceMode2["LOG"] = 1] = "LOG";
  TraceMode2[TraceMode2["BREAK"] = 2] = "BREAK";
})(TraceMode || (TraceMode = {}));
var CaughtException = function CaughtException2(cause) {
  this.cause = void 0;
  this.cause = cause;
};
function isCaughtException(e) {
  return e instanceof CaughtException;
}
function shouldCompute(derivation) {
  switch (derivation.dependenciesState_) {
    case IDerivationState_.UP_TO_DATE_:
      return false;
    case IDerivationState_.NOT_TRACKING_:
    case IDerivationState_.STALE_:
      return true;
    case IDerivationState_.POSSIBLY_STALE_: {
      var prevAllowStateReads = allowStateReadsStart(true);
      var prevUntracked = untrackedStart();
      var obs = derivation.observing_, l = obs.length;
      for (var i2 = 0; i2 < l; i2++) {
        var obj = obs[i2];
        if (isComputedValue(obj)) {
          if (globalState.disableErrorBoundaries) {
            obj.get();
          } else {
            try {
              obj.get();
            } catch (e) {
              untrackedEnd(prevUntracked);
              allowStateReadsEnd(prevAllowStateReads);
              return true;
            }
          }
          if (derivation.dependenciesState_ === IDerivationState_.STALE_) {
            untrackedEnd(prevUntracked);
            allowStateReadsEnd(prevAllowStateReads);
            return true;
          }
        }
      }
      changeDependenciesStateTo0(derivation);
      untrackedEnd(prevUntracked);
      allowStateReadsEnd(prevAllowStateReads);
      return false;
    }
  }
}
function checkIfStateModificationsAreAllowed(atom) {
  if (false) {
    return;
  }
  var hasObservers = atom.observers_.size > 0;
  if (!globalState.allowStateChanges && (hasObservers || globalState.enforceActions === "always")) {
    console.warn("[MobX] " + (globalState.enforceActions ? "Since strict-mode is enabled, changing (observed) observable values without using an action is not allowed. Tried to modify: " : "Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, a computed value or the render function of a React component? You can wrap side effects in 'runInAction' (or decorate functions with 'action') if needed. Tried to modify: ") + atom.name_);
  }
}
function checkIfStateReadsAreAllowed(observable2) {
  if (!globalState.allowStateReads && globalState.observableRequiresReaction) {
    console.warn("[mobx] Observable '" + observable2.name_ + "' being read outside a reactive context.");
  }
}
function trackDerivedFunction(derivation, f, context) {
  var prevAllowStateReads = allowStateReadsStart(true);
  changeDependenciesStateTo0(derivation);
  derivation.newObserving_ = new Array(derivation.observing_.length + 100);
  derivation.unboundDepsCount_ = 0;
  derivation.runId_ = ++globalState.runId;
  var prevTracking = globalState.trackingDerivation;
  globalState.trackingDerivation = derivation;
  globalState.inBatch++;
  var result;
  if (globalState.disableErrorBoundaries === true) {
    result = f.call(context);
  } else {
    try {
      result = f.call(context);
    } catch (e) {
      result = new CaughtException(e);
    }
  }
  globalState.inBatch--;
  globalState.trackingDerivation = prevTracking;
  bindDependencies(derivation);
  warnAboutDerivationWithoutDependencies(derivation);
  allowStateReadsEnd(prevAllowStateReads);
  return result;
}
function warnAboutDerivationWithoutDependencies(derivation) {
  if (false) {
    return;
  }
  if (derivation.observing_.length !== 0) {
    return;
  }
  if (typeof derivation.requiresObservable_ === "boolean" ? derivation.requiresObservable_ : globalState.reactionRequiresObservable) {
    console.warn("[mobx] Derivation '" + derivation.name_ + "' is created/updated without reading any observable value.");
  }
}
function bindDependencies(derivation) {
  var prevObserving = derivation.observing_;
  var observing = derivation.observing_ = derivation.newObserving_;
  var lowestNewObservingDerivationState = IDerivationState_.UP_TO_DATE_;
  var i0 = 0, l = derivation.unboundDepsCount_;
  for (var i2 = 0; i2 < l; i2++) {
    var dep = observing[i2];
    if (dep.diffValue_ === 0) {
      dep.diffValue_ = 1;
      if (i0 !== i2) {
        observing[i0] = dep;
      }
      i0++;
    }
    if (dep.dependenciesState_ > lowestNewObservingDerivationState) {
      lowestNewObservingDerivationState = dep.dependenciesState_;
    }
  }
  observing.length = i0;
  derivation.newObserving_ = null;
  l = prevObserving.length;
  while (l--) {
    var _dep = prevObserving[l];
    if (_dep.diffValue_ === 0) {
      removeObserver(_dep, derivation);
    }
    _dep.diffValue_ = 0;
  }
  while (i0--) {
    var _dep2 = observing[i0];
    if (_dep2.diffValue_ === 1) {
      _dep2.diffValue_ = 0;
      addObserver(_dep2, derivation);
    }
  }
  if (lowestNewObservingDerivationState !== IDerivationState_.UP_TO_DATE_) {
    derivation.dependenciesState_ = lowestNewObservingDerivationState;
    derivation.onBecomeStale_();
  }
}
function clearObserving(derivation) {
  var obs = derivation.observing_;
  derivation.observing_ = [];
  var i2 = obs.length;
  while (i2--) {
    removeObserver(obs[i2], derivation);
  }
  derivation.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
}
function untracked(action2) {
  var prev = untrackedStart();
  try {
    return action2();
  } finally {
    untrackedEnd(prev);
  }
}
function untrackedStart() {
  var prev = globalState.trackingDerivation;
  globalState.trackingDerivation = null;
  return prev;
}
function untrackedEnd(prev) {
  globalState.trackingDerivation = prev;
}
function allowStateReadsStart(allowStateReads) {
  var prev = globalState.allowStateReads;
  globalState.allowStateReads = allowStateReads;
  return prev;
}
function allowStateReadsEnd(prev) {
  globalState.allowStateReads = prev;
}
function changeDependenciesStateTo0(derivation) {
  if (derivation.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
    return;
  }
  derivation.dependenciesState_ = IDerivationState_.UP_TO_DATE_;
  var obs = derivation.observing_;
  var i2 = obs.length;
  while (i2--) {
    obs[i2].lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
  }
}
var MobXGlobals = function MobXGlobals2() {
  this.version = 6;
  this.UNCHANGED = {};
  this.trackingDerivation = null;
  this.trackingContext = null;
  this.runId = 0;
  this.mobxGuid = 0;
  this.inBatch = 0;
  this.pendingUnobservations = [];
  this.pendingReactions = [];
  this.isRunningReactions = false;
  this.allowStateChanges = false;
  this.allowStateReads = true;
  this.enforceActions = true;
  this.spyListeners = [];
  this.globalReactionErrorHandlers = [];
  this.computedRequiresReaction = false;
  this.reactionRequiresObservable = false;
  this.observableRequiresReaction = false;
  this.disableErrorBoundaries = false;
  this.suppressReactionErrors = false;
  this.useProxies = true;
  this.verifyProxies = false;
  this.safeDescriptors = true;
  this.stateVersion = Number.MIN_SAFE_INTEGER;
};
var canMergeGlobalState = true;
var isolateCalled = false;
var globalState = /* @__PURE__ */ function() {
  var global2 = /* @__PURE__ */ getGlobal();
  if (global2.__mobxInstanceCount > 0 && !global2.__mobxGlobals) {
    canMergeGlobalState = false;
  }
  if (global2.__mobxGlobals && global2.__mobxGlobals.version !== new MobXGlobals().version) {
    canMergeGlobalState = false;
  }
  if (!canMergeGlobalState) {
    setTimeout(function() {
      if (!isolateCalled) {
        die(35);
      }
    }, 1);
    return new MobXGlobals();
  } else if (global2.__mobxGlobals) {
    global2.__mobxInstanceCount += 1;
    if (!global2.__mobxGlobals.UNCHANGED) {
      global2.__mobxGlobals.UNCHANGED = {};
    }
    return global2.__mobxGlobals;
  } else {
    global2.__mobxInstanceCount = 1;
    return global2.__mobxGlobals = /* @__PURE__ */ new MobXGlobals();
  }
}();
function isolateGlobalState() {
  if (globalState.pendingReactions.length || globalState.inBatch || globalState.isRunningReactions) {
    die(36);
  }
  isolateCalled = true;
  if (canMergeGlobalState) {
    var global2 = getGlobal();
    if (--global2.__mobxInstanceCount === 0) {
      global2.__mobxGlobals = void 0;
    }
    globalState = new MobXGlobals();
  }
}
function addObserver(observable2, node) {
  observable2.observers_.add(node);
  if (observable2.lowestObserverState_ > node.dependenciesState_) {
    observable2.lowestObserverState_ = node.dependenciesState_;
  }
}
function removeObserver(observable2, node) {
  observable2.observers_["delete"](node);
  if (observable2.observers_.size === 0) {
    queueForUnobservation(observable2);
  }
}
function queueForUnobservation(observable2) {
  if (observable2.isPendingUnobservation_ === false) {
    observable2.isPendingUnobservation_ = true;
    globalState.pendingUnobservations.push(observable2);
  }
}
function startBatch() {
  globalState.inBatch++;
}
function endBatch() {
  if (--globalState.inBatch === 0) {
    runReactions();
    var list = globalState.pendingUnobservations;
    for (var i2 = 0; i2 < list.length; i2++) {
      var observable2 = list[i2];
      observable2.isPendingUnobservation_ = false;
      if (observable2.observers_.size === 0) {
        if (observable2.isBeingObserved_) {
          observable2.isBeingObserved_ = false;
          observable2.onBUO();
        }
        if (observable2 instanceof ComputedValue) {
          observable2.suspend_();
        }
      }
    }
    globalState.pendingUnobservations = [];
  }
}
function reportObserved(observable2) {
  checkIfStateReadsAreAllowed(observable2);
  var derivation = globalState.trackingDerivation;
  if (derivation !== null) {
    if (derivation.runId_ !== observable2.lastAccessedBy_) {
      observable2.lastAccessedBy_ = derivation.runId_;
      derivation.newObserving_[derivation.unboundDepsCount_++] = observable2;
      if (!observable2.isBeingObserved_ && globalState.trackingContext) {
        observable2.isBeingObserved_ = true;
        observable2.onBO();
      }
    }
    return observable2.isBeingObserved_;
  } else if (observable2.observers_.size === 0 && globalState.inBatch > 0) {
    queueForUnobservation(observable2);
  }
  return false;
}
function propagateChanged(observable2) {
  if (observable2.lowestObserverState_ === IDerivationState_.STALE_) {
    return;
  }
  observable2.lowestObserverState_ = IDerivationState_.STALE_;
  observable2.observers_.forEach(function(d) {
    if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
      if (d.isTracing_ !== TraceMode.NONE) {
        logTraceInfo(d, observable2);
      }
      d.onBecomeStale_();
    }
    d.dependenciesState_ = IDerivationState_.STALE_;
  });
}
function propagateChangeConfirmed(observable2) {
  if (observable2.lowestObserverState_ === IDerivationState_.STALE_) {
    return;
  }
  observable2.lowestObserverState_ = IDerivationState_.STALE_;
  observable2.observers_.forEach(function(d) {
    if (d.dependenciesState_ === IDerivationState_.POSSIBLY_STALE_) {
      d.dependenciesState_ = IDerivationState_.STALE_;
      if (d.isTracing_ !== TraceMode.NONE) {
        logTraceInfo(d, observable2);
      }
    } else if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
      observable2.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
    }
  });
}
function propagateMaybeChanged(observable2) {
  if (observable2.lowestObserverState_ !== IDerivationState_.UP_TO_DATE_) {
    return;
  }
  observable2.lowestObserverState_ = IDerivationState_.POSSIBLY_STALE_;
  observable2.observers_.forEach(function(d) {
    if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
      d.dependenciesState_ = IDerivationState_.POSSIBLY_STALE_;
      d.onBecomeStale_();
    }
  });
}
function logTraceInfo(derivation, observable2) {
  console.log("[mobx.trace] '" + derivation.name_ + "' is invalidated due to a change in: '" + observable2.name_ + "'");
  if (derivation.isTracing_ === TraceMode.BREAK) {
    var lines = [];
    printDepTree(getDependencyTree(derivation), lines, 1);
    new Function("debugger;\n/*\nTracing '" + derivation.name_ + "'\n\nYou are entering this break point because derivation '" + derivation.name_ + "' is being traced and '" + observable2.name_ + "' is now forcing it to update.\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\n\n" + (derivation instanceof ComputedValue ? derivation.derivation.toString().replace(/[*]\//g, "/") : "") + "\n\nThe dependencies for this derivation are:\n\n" + lines.join("\n") + "\n*/\n    ")();
  }
}
function printDepTree(tree, lines, depth) {
  if (lines.length >= 1e3) {
    lines.push("(and many more)");
    return;
  }
  lines.push("" + "	".repeat(depth - 1) + tree.name);
  if (tree.dependencies) {
    tree.dependencies.forEach(function(child) {
      return printDepTree(child, lines, depth + 1);
    });
  }
}
var Reaction = /* @__PURE__ */ function() {
  function Reaction2(name_, onInvalidate_, errorHandler_, requiresObservable_) {
    if (name_ === void 0) {
      name_ = true ? "Reaction@" + getNextId() : "Reaction";
    }
    this.name_ = void 0;
    this.onInvalidate_ = void 0;
    this.errorHandler_ = void 0;
    this.requiresObservable_ = void 0;
    this.observing_ = [];
    this.newObserving_ = [];
    this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
    this.diffValue_ = 0;
    this.runId_ = 0;
    this.unboundDepsCount_ = 0;
    this.isDisposed_ = false;
    this.isScheduled_ = false;
    this.isTrackPending_ = false;
    this.isRunning_ = false;
    this.isTracing_ = TraceMode.NONE;
    this.name_ = name_;
    this.onInvalidate_ = onInvalidate_;
    this.errorHandler_ = errorHandler_;
    this.requiresObservable_ = requiresObservable_;
  }
  var _proto = Reaction2.prototype;
  _proto.onBecomeStale_ = function onBecomeStale_() {
    this.schedule_();
  };
  _proto.schedule_ = function schedule_() {
    if (!this.isScheduled_) {
      this.isScheduled_ = true;
      globalState.pendingReactions.push(this);
      runReactions();
    }
  };
  _proto.isScheduled = function isScheduled() {
    return this.isScheduled_;
  };
  _proto.runReaction_ = function runReaction_() {
    if (!this.isDisposed_) {
      startBatch();
      this.isScheduled_ = false;
      var prev = globalState.trackingContext;
      globalState.trackingContext = this;
      if (shouldCompute(this)) {
        this.isTrackPending_ = true;
        try {
          this.onInvalidate_();
          if (this.isTrackPending_ && isSpyEnabled()) {
            spyReport({
              name: this.name_,
              type: "scheduled-reaction"
            });
          }
        } catch (e) {
          this.reportExceptionInDerivation_(e);
        }
      }
      globalState.trackingContext = prev;
      endBatch();
    }
  };
  _proto.track = function track(fn) {
    if (this.isDisposed_) {
      return;
    }
    startBatch();
    var notify = isSpyEnabled();
    var startTime;
    if (notify) {
      startTime = Date.now();
      spyReportStart({
        name: this.name_,
        type: "reaction"
      });
    }
    this.isRunning_ = true;
    var prevReaction = globalState.trackingContext;
    globalState.trackingContext = this;
    var result = trackDerivedFunction(this, fn, void 0);
    globalState.trackingContext = prevReaction;
    this.isRunning_ = false;
    this.isTrackPending_ = false;
    if (this.isDisposed_) {
      clearObserving(this);
    }
    if (isCaughtException(result)) {
      this.reportExceptionInDerivation_(result.cause);
    }
    if (notify) {
      spyReportEnd({
        time: Date.now() - startTime
      });
    }
    endBatch();
  };
  _proto.reportExceptionInDerivation_ = function reportExceptionInDerivation_(error) {
    var _this = this;
    if (this.errorHandler_) {
      this.errorHandler_(error, this);
      return;
    }
    if (globalState.disableErrorBoundaries) {
      throw error;
    }
    var message = true ? "[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '" + this + "'" : "[mobx] uncaught error in '" + this + "'";
    if (!globalState.suppressReactionErrors) {
      console.error(message, error);
    } else if (true) {
      console.warn("[mobx] (error in reaction '" + this.name_ + "' suppressed, fix error of causing action below)");
    }
    if (isSpyEnabled()) {
      spyReport({
        type: "error",
        name: this.name_,
        message,
        error: "" + error
      });
    }
    globalState.globalReactionErrorHandlers.forEach(function(f) {
      return f(error, _this);
    });
  };
  _proto.dispose = function dispose() {
    if (!this.isDisposed_) {
      this.isDisposed_ = true;
      if (!this.isRunning_) {
        startBatch();
        clearObserving(this);
        endBatch();
      }
    }
  };
  _proto.getDisposer_ = function getDisposer_(abortSignal) {
    var _this2 = this;
    var dispose = function dispose2() {
      _this2.dispose();
      abortSignal == null ? void 0 : abortSignal.removeEventListener == null ? void 0 : abortSignal.removeEventListener("abort", dispose2);
    };
    abortSignal == null ? void 0 : abortSignal.addEventListener == null ? void 0 : abortSignal.addEventListener("abort", dispose);
    dispose[$mobx] = this;
    return dispose;
  };
  _proto.toString = function toString2() {
    return "Reaction[" + this.name_ + "]";
  };
  _proto.trace = function trace$1(enterBreakPoint) {
    if (enterBreakPoint === void 0) {
      enterBreakPoint = false;
    }
    trace(this, enterBreakPoint);
  };
  return Reaction2;
}();
var MAX_REACTION_ITERATIONS = 100;
var reactionScheduler = function reactionScheduler2(f) {
  return f();
};
function runReactions() {
  if (globalState.inBatch > 0 || globalState.isRunningReactions) {
    return;
  }
  reactionScheduler(runReactionsHelper);
}
function runReactionsHelper() {
  globalState.isRunningReactions = true;
  var allReactions = globalState.pendingReactions;
  var iterations = 0;
  while (allReactions.length > 0) {
    if (++iterations === MAX_REACTION_ITERATIONS) {
      console.error(true ? "Reaction doesn't converge to a stable state after " + MAX_REACTION_ITERATIONS + " iterations." + (" Probably there is a cycle in the reactive function: " + allReactions[0]) : "[mobx] cycle in reaction: " + allReactions[0]);
      allReactions.splice(0);
    }
    var remainingReactions = allReactions.splice(0);
    for (var i2 = 0, l = remainingReactions.length; i2 < l; i2++) {
      remainingReactions[i2].runReaction_();
    }
  }
  globalState.isRunningReactions = false;
}
var isReaction = /* @__PURE__ */ createInstanceofPredicate("Reaction", Reaction);
function setReactionScheduler(fn) {
  var baseScheduler = reactionScheduler;
  reactionScheduler = function reactionScheduler3(f) {
    return fn(function() {
      return baseScheduler(f);
    });
  };
}
function isSpyEnabled() {
  return !!globalState.spyListeners.length;
}
function spyReport(event) {
  if (false) {
    return;
  }
  if (!globalState.spyListeners.length) {
    return;
  }
  var listeners = globalState.spyListeners;
  for (var i2 = 0, l = listeners.length; i2 < l; i2++) {
    listeners[i2](event);
  }
}
function spyReportStart(event) {
  if (false) {
    return;
  }
  var change = _extends({}, event, {
    spyReportStart: true
  });
  spyReport(change);
}
var END_EVENT = {
  type: "report-end",
  spyReportEnd: true
};
function spyReportEnd(change) {
  if (false) {
    return;
  }
  if (change) {
    spyReport(_extends({}, change, {
      type: "report-end",
      spyReportEnd: true
    }));
  } else {
    spyReport(END_EVENT);
  }
}
function spy(listener) {
  if (false) {
    console.warn("[mobx.spy] Is a no-op in production builds");
    return function() {
    };
  } else {
    globalState.spyListeners.push(listener);
    return once(function() {
      globalState.spyListeners = globalState.spyListeners.filter(function(l) {
        return l !== listener;
      });
    });
  }
}
var ACTION = "action";
var ACTION_BOUND = "action.bound";
var AUTOACTION = "autoAction";
var AUTOACTION_BOUND = "autoAction.bound";
var DEFAULT_ACTION_NAME = "<unnamed action>";
var actionAnnotation = /* @__PURE__ */ createActionAnnotation(ACTION);
var actionBoundAnnotation = /* @__PURE__ */ createActionAnnotation(ACTION_BOUND, {
  bound: true
});
var autoActionAnnotation = /* @__PURE__ */ createActionAnnotation(AUTOACTION, {
  autoAction: true
});
var autoActionBoundAnnotation = /* @__PURE__ */ createActionAnnotation(AUTOACTION_BOUND, {
  autoAction: true,
  bound: true
});
function createActionFactory(autoAction2) {
  var res = function action2(arg1, arg2) {
    if (isFunction(arg1)) {
      return createAction(arg1.name || DEFAULT_ACTION_NAME, arg1, autoAction2);
    }
    if (isFunction(arg2)) {
      return createAction(arg1, arg2, autoAction2);
    }
    if (isStringish(arg2)) {
      return storeAnnotation(arg1, arg2, autoAction2 ? autoActionAnnotation : actionAnnotation);
    }
    if (isStringish(arg1)) {
      return createDecoratorAnnotation(createActionAnnotation(autoAction2 ? AUTOACTION : ACTION, {
        name: arg1,
        autoAction: autoAction2
      }));
    }
    if (true) {
      die("Invalid arguments for `action`");
    }
  };
  return res;
}
var action = /* @__PURE__ */ createActionFactory(false);
Object.assign(action, actionAnnotation);
var autoAction = /* @__PURE__ */ createActionFactory(true);
Object.assign(autoAction, autoActionAnnotation);
action.bound = /* @__PURE__ */ createDecoratorAnnotation(actionBoundAnnotation);
autoAction.bound = /* @__PURE__ */ createDecoratorAnnotation(autoActionBoundAnnotation);
function runInAction(fn) {
  return executeAction(fn.name || DEFAULT_ACTION_NAME, false, fn, this, void 0);
}
function isAction(thing) {
  return isFunction(thing) && thing.isMobxAction === true;
}
function autorun(view, opts) {
  var _opts$name, _opts, _opts2, _opts2$signal, _opts3;
  if (opts === void 0) {
    opts = EMPTY_OBJECT;
  }
  if (true) {
    if (!isFunction(view)) {
      die("Autorun expects a function as first argument");
    }
    if (isAction(view)) {
      die("Autorun does not accept actions since actions are untrackable");
    }
  }
  var name = (_opts$name = (_opts = opts) == null ? void 0 : _opts.name) != null ? _opts$name : true ? view.name || "Autorun@" + getNextId() : "Autorun";
  var runSync = !opts.scheduler && !opts.delay;
  var reaction;
  if (runSync) {
    reaction = new Reaction(name, function() {
      this.track(reactionRunner);
    }, opts.onError, opts.requiresObservable);
  } else {
    var scheduler = createSchedulerFromOptions(opts);
    var isScheduled = false;
    reaction = new Reaction(name, function() {
      if (!isScheduled) {
        isScheduled = true;
        scheduler(function() {
          isScheduled = false;
          if (!reaction.isDisposed_) {
            reaction.track(reactionRunner);
          }
        });
      }
    }, opts.onError, opts.requiresObservable);
  }
  function reactionRunner() {
    view(reaction);
  }
  if (!((_opts2 = opts) != null && (_opts2$signal = _opts2.signal) != null && _opts2$signal.aborted)) {
    reaction.schedule_();
  }
  return reaction.getDisposer_((_opts3 = opts) == null ? void 0 : _opts3.signal);
}
var run = function run2(f) {
  return f();
};
function createSchedulerFromOptions(opts) {
  return opts.scheduler ? opts.scheduler : opts.delay ? function(f) {
    return setTimeout(f, opts.delay);
  } : run;
}
var ON_BECOME_OBSERVED = "onBO";
var ON_BECOME_UNOBSERVED = "onBUO";
function onBecomeObserved(thing, arg2, arg3) {
  return interceptHook(ON_BECOME_OBSERVED, thing, arg2, arg3);
}
function onBecomeUnobserved(thing, arg2, arg3) {
  return interceptHook(ON_BECOME_UNOBSERVED, thing, arg2, arg3);
}
function interceptHook(hook, thing, arg2, arg3) {
  var atom = typeof arg3 === "function" ? getAtom(thing, arg2) : getAtom(thing);
  var cb = isFunction(arg3) ? arg3 : arg2;
  var listenersKey = hook + "L";
  if (atom[listenersKey]) {
    atom[listenersKey].add(cb);
  } else {
    atom[listenersKey] = /* @__PURE__ */ new Set([cb]);
  }
  return function() {
    var hookListeners = atom[listenersKey];
    if (hookListeners) {
      hookListeners["delete"](cb);
      if (hookListeners.size === 0) {
        delete atom[listenersKey];
      }
    }
  };
}
var NEVER = "never";
var ALWAYS = "always";
var OBSERVED = "observed";
function configure(options) {
  if (options.isolateGlobalState === true) {
    isolateGlobalState();
  }
  var useProxies = options.useProxies, enforceActions = options.enforceActions;
  if (useProxies !== void 0) {
    globalState.useProxies = useProxies === ALWAYS ? true : useProxies === NEVER ? false : typeof Proxy !== "undefined";
  }
  if (useProxies === "ifavailable") {
    globalState.verifyProxies = true;
  }
  if (enforceActions !== void 0) {
    var ea = enforceActions === ALWAYS ? ALWAYS : enforceActions === OBSERVED;
    globalState.enforceActions = ea;
    globalState.allowStateChanges = ea === true || ea === ALWAYS ? false : true;
  }
  ["computedRequiresReaction", "reactionRequiresObservable", "observableRequiresReaction", "disableErrorBoundaries", "safeDescriptors"].forEach(function(key) {
    if (key in options) {
      globalState[key] = !!options[key];
    }
  });
  globalState.allowStateReads = !globalState.observableRequiresReaction;
  if (globalState.disableErrorBoundaries === true) {
    console.warn("WARNING: Debug feature only. MobX will NOT recover from errors when `disableErrorBoundaries` is enabled.");
  }
  if (options.reactionScheduler) {
    setReactionScheduler(options.reactionScheduler);
  }
}
function extendObservable(target, properties, annotations, options) {
  if (true) {
    if (arguments.length > 4) {
      die("'extendObservable' expected 2-4 arguments");
    }
    if (typeof target !== "object") {
      die("'extendObservable' expects an object as first argument");
    }
    if (isObservableMap(target)) {
      die("'extendObservable' should not be used on maps, use map.merge instead");
    }
    if (!isPlainObject(properties)) {
      die("'extendObservable' only accepts plain objects as second argument");
    }
    if (isObservable(properties) || isObservable(annotations)) {
      die("Extending an object with another observable (object) is not supported");
    }
  }
  var descriptors = getOwnPropertyDescriptors(properties);
  var adm = asObservableObject(target, options)[$mobx];
  startBatch();
  try {
    ownKeys(descriptors).forEach(function(key) {
      adm.extend_(
        key,
        descriptors[key],
        // must pass "undefined" for { key: undefined }
        !annotations ? true : key in annotations ? annotations[key] : true
      );
    });
  } finally {
    endBatch();
  }
  return target;
}
function getDependencyTree(thing, property) {
  return nodeToDependencyTree(getAtom(thing, property));
}
function nodeToDependencyTree(node) {
  var result = {
    name: node.name_
  };
  if (node.observing_ && node.observing_.length > 0) {
    result.dependencies = unique(node.observing_).map(nodeToDependencyTree);
  }
  return result;
}
function unique(list) {
  return Array.from(new Set(list));
}
var generatorId = 0;
function FlowCancellationError() {
  this.message = "FLOW_CANCELLED";
}
FlowCancellationError.prototype = /* @__PURE__ */ Object.create(Error.prototype);
var flowAnnotation = /* @__PURE__ */ createFlowAnnotation("flow");
var flowBoundAnnotation = /* @__PURE__ */ createFlowAnnotation("flow.bound", {
  bound: true
});
var flow = /* @__PURE__ */ Object.assign(function flow2(arg1, arg2) {
  if (isStringish(arg2)) {
    return storeAnnotation(arg1, arg2, flowAnnotation);
  }
  if (arguments.length !== 1) {
    die("Flow expects single argument with generator function");
  }
  var generator = arg1;
  var name = generator.name || "<unnamed flow>";
  var res = function res2() {
    var ctx = this;
    var args = arguments;
    var runId = ++generatorId;
    var gen = action(name + " - runid: " + runId + " - init", generator).apply(ctx, args);
    var rejector;
    var pendingPromise = void 0;
    var promise = new Promise(function(resolve, reject) {
      var stepId = 0;
      rejector = reject;
      function onFulfilled(res3) {
        pendingPromise = void 0;
        var ret;
        try {
          ret = action(name + " - runid: " + runId + " - yield " + stepId++, gen.next).call(gen, res3);
        } catch (e) {
          return reject(e);
        }
        next(ret);
      }
      function onRejected(err) {
        pendingPromise = void 0;
        var ret;
        try {
          ret = action(name + " - runid: " + runId + " - yield " + stepId++, gen["throw"]).call(gen, err);
        } catch (e) {
          return reject(e);
        }
        next(ret);
      }
      function next(ret) {
        if (isFunction(ret == null ? void 0 : ret.then)) {
          ret.then(next, reject);
          return;
        }
        if (ret.done) {
          return resolve(ret.value);
        }
        pendingPromise = Promise.resolve(ret.value);
        return pendingPromise.then(onFulfilled, onRejected);
      }
      onFulfilled(void 0);
    });
    promise.cancel = action(name + " - runid: " + runId + " - cancel", function() {
      try {
        if (pendingPromise) {
          cancelPromise(pendingPromise);
        }
        var _res = gen["return"](void 0);
        var yieldedPromise = Promise.resolve(_res.value);
        yieldedPromise.then(noop, noop);
        cancelPromise(yieldedPromise);
        rejector(new FlowCancellationError());
      } catch (e) {
        rejector(e);
      }
    });
    return promise;
  };
  res.isMobXFlow = true;
  return res;
}, flowAnnotation);
flow.bound = /* @__PURE__ */ createDecoratorAnnotation(flowBoundAnnotation);
function cancelPromise(promise) {
  if (isFunction(promise.cancel)) {
    promise.cancel();
  }
}
function isFlow(fn) {
  return (fn == null ? void 0 : fn.isMobXFlow) === true;
}
function _isObservable(value, property) {
  if (!value) {
    return false;
  }
  if (property !== void 0) {
    if (isObservableMap(value) || isObservableArray(value)) {
      return die("isObservable(object, propertyName) is not supported for arrays and maps. Use map.has or array.length instead.");
    }
    if (isObservableObject(value)) {
      return value[$mobx].values_.has(property);
    }
    return false;
  }
  return isObservableObject(value) || !!value[$mobx] || isAtom(value) || isReaction(value) || isComputedValue(value);
}
function isObservable(value) {
  if (arguments.length !== 1) {
    die("isObservable expects only 1 argument. Use isObservableProp to inspect the observability of a property");
  }
  return _isObservable(value);
}
function trace() {
  if (false) {
    return;
  }
  var enterBreakPoint = false;
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  if (typeof args[args.length - 1] === "boolean") {
    enterBreakPoint = args.pop();
  }
  var derivation = getAtomFromArgs(args);
  if (!derivation) {
    return die("'trace(break?)' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly");
  }
  if (derivation.isTracing_ === TraceMode.NONE) {
    console.log("[mobx.trace] '" + derivation.name_ + "' tracing enabled");
  }
  derivation.isTracing_ = enterBreakPoint ? TraceMode.BREAK : TraceMode.LOG;
}
function getAtomFromArgs(args) {
  switch (args.length) {
    case 0:
      return globalState.trackingDerivation;
    case 1:
      return getAtom(args[0]);
    case 2:
      return getAtom(args[0], args[1]);
  }
}
function transaction(action2, thisArg) {
  if (thisArg === void 0) {
    thisArg = void 0;
  }
  startBatch();
  try {
    return action2.apply(thisArg);
  } finally {
    endBatch();
  }
}
function getAdm(target) {
  return target[$mobx];
}
var objectProxyTraps = {
  has: function has(target, name) {
    if (globalState.trackingDerivation) {
      warnAboutProxyRequirement("detect new properties using the 'in' operator. Use 'has' from 'mobx' instead.");
    }
    return getAdm(target).has_(name);
  },
  get: function get(target, name) {
    return getAdm(target).get_(name);
  },
  set: function set2(target, name, value) {
    var _getAdm$set_;
    if (!isStringish(name)) {
      return false;
    }
    if (!getAdm(target).values_.has(name)) {
      warnAboutProxyRequirement("add a new observable property through direct assignment. Use 'set' from 'mobx' instead.");
    }
    return (_getAdm$set_ = getAdm(target).set_(name, value, true)) != null ? _getAdm$set_ : true;
  },
  deleteProperty: function deleteProperty(target, name) {
    var _getAdm$delete_;
    if (true) {
      warnAboutProxyRequirement("delete properties from an observable object. Use 'remove' from 'mobx' instead.");
    }
    if (!isStringish(name)) {
      return false;
    }
    return (_getAdm$delete_ = getAdm(target).delete_(name, true)) != null ? _getAdm$delete_ : true;
  },
  defineProperty: function defineProperty2(target, name, descriptor) {
    var _getAdm$definePropert;
    if (true) {
      warnAboutProxyRequirement("define property on an observable object. Use 'defineProperty' from 'mobx' instead.");
    }
    return (_getAdm$definePropert = getAdm(target).defineProperty_(name, descriptor)) != null ? _getAdm$definePropert : true;
  },
  ownKeys: function ownKeys2(target) {
    if (globalState.trackingDerivation) {
      warnAboutProxyRequirement("iterate keys to detect added / removed properties. Use 'keys' from 'mobx' instead.");
    }
    return getAdm(target).ownKeys_();
  },
  preventExtensions: function preventExtensions(target) {
    die(13);
  }
};
function asDynamicObservableObject(target, options) {
  var _target$$mobx, _target$$mobx$proxy_;
  assertProxies();
  target = asObservableObject(target, options);
  return (_target$$mobx$proxy_ = (_target$$mobx = target[$mobx]).proxy_) != null ? _target$$mobx$proxy_ : _target$$mobx.proxy_ = new Proxy(target, objectProxyTraps);
}
function hasInterceptors(interceptable) {
  return interceptable.interceptors_ !== void 0 && interceptable.interceptors_.length > 0;
}
function registerInterceptor(interceptable, handler) {
  var interceptors = interceptable.interceptors_ || (interceptable.interceptors_ = []);
  interceptors.push(handler);
  return once(function() {
    var idx = interceptors.indexOf(handler);
    if (idx !== -1) {
      interceptors.splice(idx, 1);
    }
  });
}
function interceptChange(interceptable, change) {
  var prevU = untrackedStart();
  try {
    var interceptors = [].concat(interceptable.interceptors_ || []);
    for (var i2 = 0, l = interceptors.length; i2 < l; i2++) {
      change = interceptors[i2](change);
      if (change && !change.type) {
        die(14);
      }
      if (!change) {
        break;
      }
    }
    return change;
  } finally {
    untrackedEnd(prevU);
  }
}
function hasListeners(listenable) {
  return listenable.changeListeners_ !== void 0 && listenable.changeListeners_.length > 0;
}
function registerListener(listenable, handler) {
  var listeners = listenable.changeListeners_ || (listenable.changeListeners_ = []);
  listeners.push(handler);
  return once(function() {
    var idx = listeners.indexOf(handler);
    if (idx !== -1) {
      listeners.splice(idx, 1);
    }
  });
}
function notifyListeners(listenable, change) {
  var prevU = untrackedStart();
  var listeners = listenable.changeListeners_;
  if (!listeners) {
    return;
  }
  listeners = listeners.slice();
  for (var i2 = 0, l = listeners.length; i2 < l; i2++) {
    listeners[i2](change);
  }
  untrackedEnd(prevU);
}
function makeObservable(target, annotations, options) {
  var adm = asObservableObject(target, options)[$mobx];
  startBatch();
  try {
    var _annotations;
    if (annotations && target[storedAnnotationsSymbol]) {
      die("makeObservable second arg must be nullish when using decorators. Mixing @decorator syntax with annotations is not supported.");
    }
    (_annotations = annotations) != null ? _annotations : annotations = collectStoredAnnotations(target);
    ownKeys(annotations).forEach(function(key) {
      return adm.make_(key, annotations[key]);
    });
  } finally {
    endBatch();
  }
  return target;
}
var SPLICE = "splice";
var UPDATE = "update";
var MAX_SPLICE_SIZE = 1e4;
var arrayTraps = {
  get: function get2(target, name) {
    var adm = target[$mobx];
    if (name === $mobx) {
      return adm;
    }
    if (name === "length") {
      return adm.getArrayLength_();
    }
    if (typeof name === "string" && !isNaN(name)) {
      return adm.get_(parseInt(name));
    }
    if (hasProp(arrayExtensions, name)) {
      return arrayExtensions[name];
    }
    return target[name];
  },
  set: function set3(target, name, value) {
    var adm = target[$mobx];
    if (name === "length") {
      adm.setArrayLength_(value);
    }
    if (typeof name === "symbol" || isNaN(name)) {
      target[name] = value;
    } else {
      adm.set_(parseInt(name), value);
    }
    return true;
  },
  preventExtensions: function preventExtensions2() {
    die(15);
  }
};
var ObservableArrayAdministration = /* @__PURE__ */ function() {
  function ObservableArrayAdministration2(name, enhancer, owned_, legacyMode_) {
    if (name === void 0) {
      name = true ? "ObservableArray@" + getNextId() : "ObservableArray";
    }
    this.owned_ = void 0;
    this.legacyMode_ = void 0;
    this.atom_ = void 0;
    this.values_ = [];
    this.interceptors_ = void 0;
    this.changeListeners_ = void 0;
    this.enhancer_ = void 0;
    this.dehancer = void 0;
    this.proxy_ = void 0;
    this.lastKnownLength_ = 0;
    this.owned_ = owned_;
    this.legacyMode_ = legacyMode_;
    this.atom_ = new Atom(name);
    this.enhancer_ = function(newV, oldV) {
      return enhancer(newV, oldV, true ? name + "[..]" : "ObservableArray[..]");
    };
  }
  var _proto = ObservableArrayAdministration2.prototype;
  _proto.dehanceValue_ = function dehanceValue_(value) {
    if (this.dehancer !== void 0) {
      return this.dehancer(value);
    }
    return value;
  };
  _proto.dehanceValues_ = function dehanceValues_(values) {
    if (this.dehancer !== void 0 && values.length > 0) {
      return values.map(this.dehancer);
    }
    return values;
  };
  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };
  _proto.observe_ = function observe_(listener, fireImmediately) {
    if (fireImmediately === void 0) {
      fireImmediately = false;
    }
    if (fireImmediately) {
      listener({
        observableKind: "array",
        object: this.proxy_,
        debugObjectName: this.atom_.name_,
        type: "splice",
        index: 0,
        added: this.values_.slice(),
        addedCount: this.values_.length,
        removed: [],
        removedCount: 0
      });
    }
    return registerListener(this, listener);
  };
  _proto.getArrayLength_ = function getArrayLength_() {
    this.atom_.reportObserved();
    return this.values_.length;
  };
  _proto.setArrayLength_ = function setArrayLength_(newLength) {
    if (typeof newLength !== "number" || isNaN(newLength) || newLength < 0) {
      die("Out of range: " + newLength);
    }
    var currentLength = this.values_.length;
    if (newLength === currentLength) {
      return;
    } else if (newLength > currentLength) {
      var newItems = new Array(newLength - currentLength);
      for (var i2 = 0; i2 < newLength - currentLength; i2++) {
        newItems[i2] = void 0;
      }
      this.spliceWithArray_(currentLength, 0, newItems);
    } else {
      this.spliceWithArray_(newLength, currentLength - newLength);
    }
  };
  _proto.updateArrayLength_ = function updateArrayLength_(oldLength, delta) {
    if (oldLength !== this.lastKnownLength_) {
      die(16);
    }
    this.lastKnownLength_ += delta;
    if (this.legacyMode_ && delta > 0) {
      reserveArrayBuffer(oldLength + delta + 1);
    }
  };
  _proto.spliceWithArray_ = function spliceWithArray_(index, deleteCount, newItems) {
    var _this = this;
    checkIfStateModificationsAreAllowed(this.atom_);
    var length = this.values_.length;
    if (index === void 0) {
      index = 0;
    } else if (index > length) {
      index = length;
    } else if (index < 0) {
      index = Math.max(0, length + index);
    }
    if (arguments.length === 1) {
      deleteCount = length - index;
    } else if (deleteCount === void 0 || deleteCount === null) {
      deleteCount = 0;
    } else {
      deleteCount = Math.max(0, Math.min(deleteCount, length - index));
    }
    if (newItems === void 0) {
      newItems = EMPTY_ARRAY;
    }
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        object: this.proxy_,
        type: SPLICE,
        index,
        removedCount: deleteCount,
        added: newItems
      });
      if (!change) {
        return EMPTY_ARRAY;
      }
      deleteCount = change.removedCount;
      newItems = change.added;
    }
    newItems = newItems.length === 0 ? newItems : newItems.map(function(v) {
      return _this.enhancer_(v, void 0);
    });
    if (this.legacyMode_ || true) {
      var lengthDelta = newItems.length - deleteCount;
      this.updateArrayLength_(length, lengthDelta);
    }
    var res = this.spliceItemsIntoValues_(index, deleteCount, newItems);
    if (deleteCount !== 0 || newItems.length !== 0) {
      this.notifyArraySplice_(index, newItems, res);
    }
    return this.dehanceValues_(res);
  };
  _proto.spliceItemsIntoValues_ = function spliceItemsIntoValues_(index, deleteCount, newItems) {
    if (newItems.length < MAX_SPLICE_SIZE) {
      var _this$values_;
      return (_this$values_ = this.values_).splice.apply(_this$values_, [index, deleteCount].concat(newItems));
    } else {
      var res = this.values_.slice(index, index + deleteCount);
      var oldItems = this.values_.slice(index + deleteCount);
      this.values_.length += newItems.length - deleteCount;
      for (var i2 = 0; i2 < newItems.length; i2++) {
        this.values_[index + i2] = newItems[i2];
      }
      for (var _i = 0; _i < oldItems.length; _i++) {
        this.values_[index + newItems.length + _i] = oldItems[_i];
      }
      return res;
    }
  };
  _proto.notifyArrayChildUpdate_ = function notifyArrayChildUpdate_(index, newValue, oldValue) {
    var notifySpy = !this.owned_ && isSpyEnabled();
    var notify = hasListeners(this);
    var change = notify || notifySpy ? {
      observableKind: "array",
      object: this.proxy_,
      type: UPDATE,
      debugObjectName: this.atom_.name_,
      index,
      newValue,
      oldValue
    } : null;
    if (notifySpy) {
      spyReportStart(change);
    }
    this.atom_.reportChanged();
    if (notify) {
      notifyListeners(this, change);
    }
    if (notifySpy) {
      spyReportEnd();
    }
  };
  _proto.notifyArraySplice_ = function notifyArraySplice_(index, added, removed) {
    var notifySpy = !this.owned_ && isSpyEnabled();
    var notify = hasListeners(this);
    var change = notify || notifySpy ? {
      observableKind: "array",
      object: this.proxy_,
      debugObjectName: this.atom_.name_,
      type: SPLICE,
      index,
      removed,
      added,
      removedCount: removed.length,
      addedCount: added.length
    } : null;
    if (notifySpy) {
      spyReportStart(change);
    }
    this.atom_.reportChanged();
    if (notify) {
      notifyListeners(this, change);
    }
    if (notifySpy) {
      spyReportEnd();
    }
  };
  _proto.get_ = function get_(index) {
    if (this.legacyMode_ && index >= this.values_.length) {
      console.warn(true ? "[mobx.array] Attempt to read an array index (" + index + ") that is out of bounds (" + this.values_.length + "). Please check length first. Out of bound indices will not be tracked by MobX" : "[mobx] Out of bounds read: " + index);
      return void 0;
    }
    this.atom_.reportObserved();
    return this.dehanceValue_(this.values_[index]);
  };
  _proto.set_ = function set_(index, newValue) {
    var values = this.values_;
    if (this.legacyMode_ && index > values.length) {
      die(17, index, values.length);
    }
    if (index < values.length) {
      checkIfStateModificationsAreAllowed(this.atom_);
      var oldValue = values[index];
      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          type: UPDATE,
          object: this.proxy_,
          index,
          newValue
        });
        if (!change) {
          return;
        }
        newValue = change.newValue;
      }
      newValue = this.enhancer_(newValue, oldValue);
      var changed = newValue !== oldValue;
      if (changed) {
        values[index] = newValue;
        this.notifyArrayChildUpdate_(index, newValue, oldValue);
      }
    } else {
      var newItems = new Array(index + 1 - values.length);
      for (var i2 = 0; i2 < newItems.length - 1; i2++) {
        newItems[i2] = void 0;
      }
      newItems[newItems.length - 1] = newValue;
      this.spliceWithArray_(values.length, 0, newItems);
    }
  };
  return ObservableArrayAdministration2;
}();
function createObservableArray(initialValues, enhancer, name, owned) {
  if (name === void 0) {
    name = true ? "ObservableArray@" + getNextId() : "ObservableArray";
  }
  if (owned === void 0) {
    owned = false;
  }
  assertProxies();
  var adm = new ObservableArrayAdministration(name, enhancer, owned, false);
  addHiddenFinalProp(adm.values_, $mobx, adm);
  var proxy = new Proxy(adm.values_, arrayTraps);
  adm.proxy_ = proxy;
  if (initialValues && initialValues.length) {
    var prev = allowStateChangesStart(true);
    adm.spliceWithArray_(0, 0, initialValues);
    allowStateChangesEnd(prev);
  }
  return proxy;
}
var arrayExtensions = {
  clear: function clear() {
    return this.splice(0);
  },
  replace: function replace(newItems) {
    var adm = this[$mobx];
    return adm.spliceWithArray_(0, adm.values_.length, newItems);
  },
  // Used by JSON.stringify
  toJSON: function toJSON() {
    return this.slice();
  },
  /*
   * functions that do alter the internal structure of the array, (based on lib.es6.d.ts)
   * since these functions alter the inner structure of the array, the have side effects.
   * Because the have side effects, they should not be used in computed function,
   * and for that reason the do not call dependencyState.notifyObserved
   */
  splice: function splice(index, deleteCount) {
    for (var _len = arguments.length, newItems = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      newItems[_key - 2] = arguments[_key];
    }
    var adm = this[$mobx];
    switch (arguments.length) {
      case 0:
        return [];
      case 1:
        return adm.spliceWithArray_(index);
      case 2:
        return adm.spliceWithArray_(index, deleteCount);
    }
    return adm.spliceWithArray_(index, deleteCount, newItems);
  },
  spliceWithArray: function spliceWithArray(index, deleteCount, newItems) {
    return this[$mobx].spliceWithArray_(index, deleteCount, newItems);
  },
  push: function push() {
    var adm = this[$mobx];
    for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      items[_key2] = arguments[_key2];
    }
    adm.spliceWithArray_(adm.values_.length, 0, items);
    return adm.values_.length;
  },
  pop: function pop() {
    return this.splice(Math.max(this[$mobx].values_.length - 1, 0), 1)[0];
  },
  shift: function shift() {
    return this.splice(0, 1)[0];
  },
  unshift: function unshift() {
    var adm = this[$mobx];
    for (var _len3 = arguments.length, items = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      items[_key3] = arguments[_key3];
    }
    adm.spliceWithArray_(0, 0, items);
    return adm.values_.length;
  },
  reverse: function reverse() {
    if (globalState.trackingDerivation) {
      die(37, "reverse");
    }
    this.replace(this.slice().reverse());
    return this;
  },
  sort: function sort() {
    if (globalState.trackingDerivation) {
      die(37, "sort");
    }
    var copy = this.slice();
    copy.sort.apply(copy, arguments);
    this.replace(copy);
    return this;
  },
  remove: function remove(value) {
    var adm = this[$mobx];
    var idx = adm.dehanceValues_(adm.values_).indexOf(value);
    if (idx > -1) {
      this.splice(idx, 1);
      return true;
    }
    return false;
  }
};
addArrayExtension("concat", simpleFunc);
addArrayExtension("flat", simpleFunc);
addArrayExtension("includes", simpleFunc);
addArrayExtension("indexOf", simpleFunc);
addArrayExtension("join", simpleFunc);
addArrayExtension("lastIndexOf", simpleFunc);
addArrayExtension("slice", simpleFunc);
addArrayExtension("toString", simpleFunc);
addArrayExtension("toLocaleString", simpleFunc);
addArrayExtension("every", mapLikeFunc);
addArrayExtension("filter", mapLikeFunc);
addArrayExtension("find", mapLikeFunc);
addArrayExtension("findIndex", mapLikeFunc);
addArrayExtension("flatMap", mapLikeFunc);
addArrayExtension("forEach", mapLikeFunc);
addArrayExtension("map", mapLikeFunc);
addArrayExtension("some", mapLikeFunc);
addArrayExtension("reduce", reduceLikeFunc);
addArrayExtension("reduceRight", reduceLikeFunc);
function addArrayExtension(funcName, funcFactory) {
  if (typeof Array.prototype[funcName] === "function") {
    arrayExtensions[funcName] = funcFactory(funcName);
  }
}
function simpleFunc(funcName) {
  return function() {
    var adm = this[$mobx];
    adm.atom_.reportObserved();
    var dehancedValues = adm.dehanceValues_(adm.values_);
    return dehancedValues[funcName].apply(dehancedValues, arguments);
  };
}
function mapLikeFunc(funcName) {
  return function(callback, thisArg) {
    var _this2 = this;
    var adm = this[$mobx];
    adm.atom_.reportObserved();
    var dehancedValues = adm.dehanceValues_(adm.values_);
    return dehancedValues[funcName](function(element, index) {
      return callback.call(thisArg, element, index, _this2);
    });
  };
}
function reduceLikeFunc(funcName) {
  return function() {
    var _this3 = this;
    var adm = this[$mobx];
    adm.atom_.reportObserved();
    var dehancedValues = adm.dehanceValues_(adm.values_);
    var callback = arguments[0];
    arguments[0] = function(accumulator, currentValue, index) {
      return callback(accumulator, currentValue, index, _this3);
    };
    return dehancedValues[funcName].apply(dehancedValues, arguments);
  };
}
var isObservableArrayAdministration = /* @__PURE__ */ createInstanceofPredicate("ObservableArrayAdministration", ObservableArrayAdministration);
function isObservableArray(thing) {
  return isObject(thing) && isObservableArrayAdministration(thing[$mobx]);
}
var _Symbol$iterator;
var _Symbol$toStringTag;
var ObservableMapMarker = {};
var ADD = "add";
var DELETE = "delete";
_Symbol$iterator = Symbol.iterator;
_Symbol$toStringTag = Symbol.toStringTag;
var ObservableMap = /* @__PURE__ */ function() {
  function ObservableMap2(initialData, enhancer_, name_) {
    var _this = this;
    if (enhancer_ === void 0) {
      enhancer_ = deepEnhancer;
    }
    if (name_ === void 0) {
      name_ = true ? "ObservableMap@" + getNextId() : "ObservableMap";
    }
    this.enhancer_ = void 0;
    this.name_ = void 0;
    this[$mobx] = ObservableMapMarker;
    this.data_ = void 0;
    this.hasMap_ = void 0;
    this.keysAtom_ = void 0;
    this.interceptors_ = void 0;
    this.changeListeners_ = void 0;
    this.dehancer = void 0;
    this.enhancer_ = enhancer_;
    this.name_ = name_;
    if (!isFunction(Map)) {
      die(18);
    }
    this.keysAtom_ = createAtom(true ? this.name_ + ".keys()" : "ObservableMap.keys()");
    this.data_ = /* @__PURE__ */ new Map();
    this.hasMap_ = /* @__PURE__ */ new Map();
    allowStateChanges(true, function() {
      _this.merge(initialData);
    });
  }
  var _proto = ObservableMap2.prototype;
  _proto.has_ = function has_(key) {
    return this.data_.has(key);
  };
  _proto.has = function has2(key) {
    var _this2 = this;
    if (!globalState.trackingDerivation) {
      return this.has_(key);
    }
    var entry = this.hasMap_.get(key);
    if (!entry) {
      var newEntry = entry = new ObservableValue(this.has_(key), referenceEnhancer, true ? this.name_ + "." + stringifyKey(key) + "?" : "ObservableMap.key?", false);
      this.hasMap_.set(key, newEntry);
      onBecomeUnobserved(newEntry, function() {
        return _this2.hasMap_["delete"](key);
      });
    }
    return entry.get();
  };
  _proto.set = function set4(key, value) {
    var hasKey = this.has_(key);
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: hasKey ? UPDATE : ADD,
        object: this,
        newValue: value,
        name: key
      });
      if (!change) {
        return this;
      }
      value = change.newValue;
    }
    if (hasKey) {
      this.updateValue_(key, value);
    } else {
      this.addValue_(key, value);
    }
    return this;
  };
  _proto["delete"] = function _delete(key) {
    var _this3 = this;
    checkIfStateModificationsAreAllowed(this.keysAtom_);
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: DELETE,
        object: this,
        name: key
      });
      if (!change) {
        return false;
      }
    }
    if (this.has_(key)) {
      var notifySpy = isSpyEnabled();
      var notify = hasListeners(this);
      var _change = notify || notifySpy ? {
        observableKind: "map",
        debugObjectName: this.name_,
        type: DELETE,
        object: this,
        oldValue: this.data_.get(key).value_,
        name: key
      } : null;
      if (notifySpy) {
        spyReportStart(_change);
      }
      transaction(function() {
        var _this3$hasMap_$get;
        _this3.keysAtom_.reportChanged();
        (_this3$hasMap_$get = _this3.hasMap_.get(key)) == null ? void 0 : _this3$hasMap_$get.setNewValue_(false);
        var observable2 = _this3.data_.get(key);
        observable2.setNewValue_(void 0);
        _this3.data_["delete"](key);
      });
      if (notify) {
        notifyListeners(this, _change);
      }
      if (notifySpy) {
        spyReportEnd();
      }
      return true;
    }
    return false;
  };
  _proto.updateValue_ = function updateValue_(key, newValue) {
    var observable2 = this.data_.get(key);
    newValue = observable2.prepareNewValue_(newValue);
    if (newValue !== globalState.UNCHANGED) {
      var notifySpy = isSpyEnabled();
      var notify = hasListeners(this);
      var change = notify || notifySpy ? {
        observableKind: "map",
        debugObjectName: this.name_,
        type: UPDATE,
        object: this,
        oldValue: observable2.value_,
        name: key,
        newValue
      } : null;
      if (notifySpy) {
        spyReportStart(change);
      }
      observable2.setNewValue_(newValue);
      if (notify) {
        notifyListeners(this, change);
      }
      if (notifySpy) {
        spyReportEnd();
      }
    }
  };
  _proto.addValue_ = function addValue_(key, newValue) {
    var _this4 = this;
    checkIfStateModificationsAreAllowed(this.keysAtom_);
    transaction(function() {
      var _this4$hasMap_$get;
      var observable2 = new ObservableValue(newValue, _this4.enhancer_, true ? _this4.name_ + "." + stringifyKey(key) : "ObservableMap.key", false);
      _this4.data_.set(key, observable2);
      newValue = observable2.value_;
      (_this4$hasMap_$get = _this4.hasMap_.get(key)) == null ? void 0 : _this4$hasMap_$get.setNewValue_(true);
      _this4.keysAtom_.reportChanged();
    });
    var notifySpy = isSpyEnabled();
    var notify = hasListeners(this);
    var change = notify || notifySpy ? {
      observableKind: "map",
      debugObjectName: this.name_,
      type: ADD,
      object: this,
      name: key,
      newValue
    } : null;
    if (notifySpy) {
      spyReportStart(change);
    }
    if (notify) {
      notifyListeners(this, change);
    }
    if (notifySpy) {
      spyReportEnd();
    }
  };
  _proto.get = function get3(key) {
    if (this.has(key)) {
      return this.dehanceValue_(this.data_.get(key).get());
    }
    return this.dehanceValue_(void 0);
  };
  _proto.dehanceValue_ = function dehanceValue_(value) {
    if (this.dehancer !== void 0) {
      return this.dehancer(value);
    }
    return value;
  };
  _proto.keys = function keys() {
    this.keysAtom_.reportObserved();
    return this.data_.keys();
  };
  _proto.values = function values() {
    var self2 = this;
    var keys = this.keys();
    return makeIterable({
      next: function next() {
        var _keys$next = keys.next(), done = _keys$next.done, value = _keys$next.value;
        return {
          done,
          value: done ? void 0 : self2.get(value)
        };
      }
    });
  };
  _proto.entries = function entries() {
    var self2 = this;
    var keys = this.keys();
    return makeIterable({
      next: function next() {
        var _keys$next2 = keys.next(), done = _keys$next2.done, value = _keys$next2.value;
        return {
          done,
          value: done ? void 0 : [value, self2.get(value)]
        };
      }
    });
  };
  _proto[_Symbol$iterator] = function() {
    return this.entries();
  };
  _proto.forEach = function forEach(callback, thisArg) {
    for (var _iterator = _createForOfIteratorHelperLoose(this), _step; !(_step = _iterator()).done; ) {
      var _step$value = _step.value, key = _step$value[0], value = _step$value[1];
      callback.call(thisArg, value, key, this);
    }
  };
  _proto.merge = function merge(other) {
    var _this5 = this;
    if (isObservableMap(other)) {
      other = new Map(other);
    }
    transaction(function() {
      if (isPlainObject(other)) {
        getPlainObjectKeys(other).forEach(function(key) {
          return _this5.set(key, other[key]);
        });
      } else if (Array.isArray(other)) {
        other.forEach(function(_ref) {
          var key = _ref[0], value = _ref[1];
          return _this5.set(key, value);
        });
      } else if (isES6Map(other)) {
        if (other.constructor !== Map) {
          die(19, other);
        }
        other.forEach(function(value, key) {
          return _this5.set(key, value);
        });
      } else if (other !== null && other !== void 0) {
        die(20, other);
      }
    });
    return this;
  };
  _proto.clear = function clear2() {
    var _this6 = this;
    transaction(function() {
      untracked(function() {
        for (var _iterator2 = _createForOfIteratorHelperLoose(_this6.keys()), _step2; !(_step2 = _iterator2()).done; ) {
          var key = _step2.value;
          _this6["delete"](key);
        }
      });
    });
  };
  _proto.replace = function replace2(values) {
    var _this7 = this;
    transaction(function() {
      var replacementMap = convertToMap(values);
      var orderedData = /* @__PURE__ */ new Map();
      var keysReportChangedCalled = false;
      for (var _iterator3 = _createForOfIteratorHelperLoose(_this7.data_.keys()), _step3; !(_step3 = _iterator3()).done; ) {
        var key = _step3.value;
        if (!replacementMap.has(key)) {
          var deleted = _this7["delete"](key);
          if (deleted) {
            keysReportChangedCalled = true;
          } else {
            var value = _this7.data_.get(key);
            orderedData.set(key, value);
          }
        }
      }
      for (var _iterator4 = _createForOfIteratorHelperLoose(replacementMap.entries()), _step4; !(_step4 = _iterator4()).done; ) {
        var _step4$value = _step4.value, _key = _step4$value[0], _value = _step4$value[1];
        var keyExisted = _this7.data_.has(_key);
        _this7.set(_key, _value);
        if (_this7.data_.has(_key)) {
          var _value2 = _this7.data_.get(_key);
          orderedData.set(_key, _value2);
          if (!keyExisted) {
            keysReportChangedCalled = true;
          }
        }
      }
      if (!keysReportChangedCalled) {
        if (_this7.data_.size !== orderedData.size) {
          _this7.keysAtom_.reportChanged();
        } else {
          var iter1 = _this7.data_.keys();
          var iter2 = orderedData.keys();
          var next1 = iter1.next();
          var next2 = iter2.next();
          while (!next1.done) {
            if (next1.value !== next2.value) {
              _this7.keysAtom_.reportChanged();
              break;
            }
            next1 = iter1.next();
            next2 = iter2.next();
          }
        }
      }
      _this7.data_ = orderedData;
    });
    return this;
  };
  _proto.toString = function toString2() {
    return "[object ObservableMap]";
  };
  _proto.toJSON = function toJSON2() {
    return Array.from(this);
  };
  _proto.observe_ = function observe_(listener, fireImmediately) {
    if (fireImmediately === true) {
      die("`observe` doesn't support fireImmediately=true in combination with maps.");
    }
    return registerListener(this, listener);
  };
  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };
  _createClass(ObservableMap2, [{
    key: "size",
    get: function get3() {
      this.keysAtom_.reportObserved();
      return this.data_.size;
    }
  }, {
    key: _Symbol$toStringTag,
    get: function get3() {
      return "Map";
    }
  }]);
  return ObservableMap2;
}();
var isObservableMap = /* @__PURE__ */ createInstanceofPredicate("ObservableMap", ObservableMap);
function convertToMap(dataStructure) {
  if (isES6Map(dataStructure) || isObservableMap(dataStructure)) {
    return dataStructure;
  } else if (Array.isArray(dataStructure)) {
    return new Map(dataStructure);
  } else if (isPlainObject(dataStructure)) {
    var map2 = /* @__PURE__ */ new Map();
    for (var key in dataStructure) {
      map2.set(key, dataStructure[key]);
    }
    return map2;
  } else {
    return die(21, dataStructure);
  }
}
var _Symbol$iterator$1;
var _Symbol$toStringTag$1;
var ObservableSetMarker = {};
_Symbol$iterator$1 = Symbol.iterator;
_Symbol$toStringTag$1 = Symbol.toStringTag;
var ObservableSet = /* @__PURE__ */ function() {
  function ObservableSet2(initialData, enhancer, name_) {
    if (enhancer === void 0) {
      enhancer = deepEnhancer;
    }
    if (name_ === void 0) {
      name_ = true ? "ObservableSet@" + getNextId() : "ObservableSet";
    }
    this.name_ = void 0;
    this[$mobx] = ObservableSetMarker;
    this.data_ = /* @__PURE__ */ new Set();
    this.atom_ = void 0;
    this.changeListeners_ = void 0;
    this.interceptors_ = void 0;
    this.dehancer = void 0;
    this.enhancer_ = void 0;
    this.name_ = name_;
    if (!isFunction(Set)) {
      die(22);
    }
    this.atom_ = createAtom(this.name_);
    this.enhancer_ = function(newV, oldV) {
      return enhancer(newV, oldV, name_);
    };
    if (initialData) {
      this.replace(initialData);
    }
  }
  var _proto = ObservableSet2.prototype;
  _proto.dehanceValue_ = function dehanceValue_(value) {
    if (this.dehancer !== void 0) {
      return this.dehancer(value);
    }
    return value;
  };
  _proto.clear = function clear2() {
    var _this = this;
    transaction(function() {
      untracked(function() {
        for (var _iterator = _createForOfIteratorHelperLoose(_this.data_.values()), _step; !(_step = _iterator()).done; ) {
          var value = _step.value;
          _this["delete"](value);
        }
      });
    });
  };
  _proto.forEach = function forEach(callbackFn, thisArg) {
    for (var _iterator2 = _createForOfIteratorHelperLoose(this), _step2; !(_step2 = _iterator2()).done; ) {
      var value = _step2.value;
      callbackFn.call(thisArg, value, value, this);
    }
  };
  _proto.add = function add(value) {
    var _this2 = this;
    checkIfStateModificationsAreAllowed(this.atom_);
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: ADD,
        object: this,
        newValue: value
      });
      if (!change) {
        return this;
      }
    }
    if (!this.has(value)) {
      transaction(function() {
        _this2.data_.add(_this2.enhancer_(value, void 0));
        _this2.atom_.reportChanged();
      });
      var notifySpy = isSpyEnabled();
      var notify = hasListeners(this);
      var _change = notify || notifySpy ? {
        observableKind: "set",
        debugObjectName: this.name_,
        type: ADD,
        object: this,
        newValue: value
      } : null;
      if (notifySpy && true) {
        spyReportStart(_change);
      }
      if (notify) {
        notifyListeners(this, _change);
      }
      if (notifySpy && true) {
        spyReportEnd();
      }
    }
    return this;
  };
  _proto["delete"] = function _delete(value) {
    var _this3 = this;
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: DELETE,
        object: this,
        oldValue: value
      });
      if (!change) {
        return false;
      }
    }
    if (this.has(value)) {
      var notifySpy = isSpyEnabled();
      var notify = hasListeners(this);
      var _change2 = notify || notifySpy ? {
        observableKind: "set",
        debugObjectName: this.name_,
        type: DELETE,
        object: this,
        oldValue: value
      } : null;
      if (notifySpy && true) {
        spyReportStart(_change2);
      }
      transaction(function() {
        _this3.atom_.reportChanged();
        _this3.data_["delete"](value);
      });
      if (notify) {
        notifyListeners(this, _change2);
      }
      if (notifySpy && true) {
        spyReportEnd();
      }
      return true;
    }
    return false;
  };
  _proto.has = function has2(value) {
    this.atom_.reportObserved();
    return this.data_.has(this.dehanceValue_(value));
  };
  _proto.entries = function entries() {
    var nextIndex = 0;
    var keys = Array.from(this.keys());
    var values = Array.from(this.values());
    return makeIterable({
      next: function next() {
        var index = nextIndex;
        nextIndex += 1;
        return index < values.length ? {
          value: [keys[index], values[index]],
          done: false
        } : {
          done: true
        };
      }
    });
  };
  _proto.keys = function keys() {
    return this.values();
  };
  _proto.values = function values() {
    this.atom_.reportObserved();
    var self2 = this;
    var nextIndex = 0;
    var observableValues = Array.from(this.data_.values());
    return makeIterable({
      next: function next() {
        return nextIndex < observableValues.length ? {
          value: self2.dehanceValue_(observableValues[nextIndex++]),
          done: false
        } : {
          done: true
        };
      }
    });
  };
  _proto.replace = function replace2(other) {
    var _this4 = this;
    if (isObservableSet(other)) {
      other = new Set(other);
    }
    transaction(function() {
      if (Array.isArray(other)) {
        _this4.clear();
        other.forEach(function(value) {
          return _this4.add(value);
        });
      } else if (isES6Set(other)) {
        _this4.clear();
        other.forEach(function(value) {
          return _this4.add(value);
        });
      } else if (other !== null && other !== void 0) {
        die("Cannot initialize set from " + other);
      }
    });
    return this;
  };
  _proto.observe_ = function observe_(listener, fireImmediately) {
    if (fireImmediately === true) {
      die("`observe` doesn't support fireImmediately=true in combination with sets.");
    }
    return registerListener(this, listener);
  };
  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };
  _proto.toJSON = function toJSON2() {
    return Array.from(this);
  };
  _proto.toString = function toString2() {
    return "[object ObservableSet]";
  };
  _proto[_Symbol$iterator$1] = function() {
    return this.values();
  };
  _createClass(ObservableSet2, [{
    key: "size",
    get: function get3() {
      this.atom_.reportObserved();
      return this.data_.size;
    }
  }, {
    key: _Symbol$toStringTag$1,
    get: function get3() {
      return "Set";
    }
  }]);
  return ObservableSet2;
}();
var isObservableSet = /* @__PURE__ */ createInstanceofPredicate("ObservableSet", ObservableSet);
var descriptorCache = /* @__PURE__ */ Object.create(null);
var REMOVE = "remove";
var ObservableObjectAdministration = /* @__PURE__ */ function() {
  function ObservableObjectAdministration2(target_, values_, name_, defaultAnnotation_) {
    if (values_ === void 0) {
      values_ = /* @__PURE__ */ new Map();
    }
    if (defaultAnnotation_ === void 0) {
      defaultAnnotation_ = autoAnnotation;
    }
    this.target_ = void 0;
    this.values_ = void 0;
    this.name_ = void 0;
    this.defaultAnnotation_ = void 0;
    this.keysAtom_ = void 0;
    this.changeListeners_ = void 0;
    this.interceptors_ = void 0;
    this.proxy_ = void 0;
    this.isPlainObject_ = void 0;
    this.appliedAnnotations_ = void 0;
    this.pendingKeys_ = void 0;
    this.target_ = target_;
    this.values_ = values_;
    this.name_ = name_;
    this.defaultAnnotation_ = defaultAnnotation_;
    this.keysAtom_ = new Atom(true ? this.name_ + ".keys" : "ObservableObject.keys");
    this.isPlainObject_ = isPlainObject(this.target_);
    if (!isAnnotation(this.defaultAnnotation_)) {
      die("defaultAnnotation must be valid annotation");
    }
    if (true) {
      this.appliedAnnotations_ = {};
    }
  }
  var _proto = ObservableObjectAdministration2.prototype;
  _proto.getObservablePropValue_ = function getObservablePropValue_(key) {
    return this.values_.get(key).get();
  };
  _proto.setObservablePropValue_ = function setObservablePropValue_(key, newValue) {
    var observable2 = this.values_.get(key);
    if (observable2 instanceof ComputedValue) {
      observable2.set(newValue);
      return true;
    }
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: UPDATE,
        object: this.proxy_ || this.target_,
        name: key,
        newValue
      });
      if (!change) {
        return null;
      }
      newValue = change.newValue;
    }
    newValue = observable2.prepareNewValue_(newValue);
    if (newValue !== globalState.UNCHANGED) {
      var notify = hasListeners(this);
      var notifySpy = isSpyEnabled();
      var _change = notify || notifySpy ? {
        type: UPDATE,
        observableKind: "object",
        debugObjectName: this.name_,
        object: this.proxy_ || this.target_,
        oldValue: observable2.value_,
        name: key,
        newValue
      } : null;
      if (notifySpy) {
        spyReportStart(_change);
      }
      observable2.setNewValue_(newValue);
      if (notify) {
        notifyListeners(this, _change);
      }
      if (notifySpy) {
        spyReportEnd();
      }
    }
    return true;
  };
  _proto.get_ = function get_(key) {
    if (globalState.trackingDerivation && !hasProp(this.target_, key)) {
      this.has_(key);
    }
    return this.target_[key];
  };
  _proto.set_ = function set_(key, value, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }
    if (hasProp(this.target_, key)) {
      if (this.values_.has(key)) {
        return this.setObservablePropValue_(key, value);
      } else if (proxyTrap) {
        return Reflect.set(this.target_, key, value);
      } else {
        this.target_[key] = value;
        return true;
      }
    } else {
      return this.extend_(key, {
        value,
        enumerable: true,
        writable: true,
        configurable: true
      }, this.defaultAnnotation_, proxyTrap);
    }
  };
  _proto.has_ = function has_(key) {
    if (!globalState.trackingDerivation) {
      return key in this.target_;
    }
    this.pendingKeys_ || (this.pendingKeys_ = /* @__PURE__ */ new Map());
    var entry = this.pendingKeys_.get(key);
    if (!entry) {
      entry = new ObservableValue(key in this.target_, referenceEnhancer, true ? this.name_ + "." + stringifyKey(key) + "?" : "ObservableObject.key?", false);
      this.pendingKeys_.set(key, entry);
    }
    return entry.get();
  };
  _proto.make_ = function make_(key, annotation) {
    if (annotation === true) {
      annotation = this.defaultAnnotation_;
    }
    if (annotation === false) {
      return;
    }
    assertAnnotable(this, annotation, key);
    if (!(key in this.target_)) {
      var _this$target_$storedA;
      if ((_this$target_$storedA = this.target_[storedAnnotationsSymbol]) != null && _this$target_$storedA[key]) {
        return;
      } else {
        die(1, annotation.annotationType_, this.name_ + "." + key.toString());
      }
    }
    var source = this.target_;
    while (source && source !== objectPrototype) {
      var descriptor = getDescriptor(source, key);
      if (descriptor) {
        var outcome = annotation.make_(this, key, descriptor, source);
        if (outcome === 0) {
          return;
        }
        if (outcome === 1) {
          break;
        }
      }
      source = Object.getPrototypeOf(source);
    }
    recordAnnotationApplied(this, annotation, key);
  };
  _proto.extend_ = function extend_(key, descriptor, annotation, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }
    if (annotation === true) {
      annotation = this.defaultAnnotation_;
    }
    if (annotation === false) {
      return this.defineProperty_(key, descriptor, proxyTrap);
    }
    assertAnnotable(this, annotation, key);
    var outcome = annotation.extend_(this, key, descriptor, proxyTrap);
    if (outcome) {
      recordAnnotationApplied(this, annotation, key);
    }
    return outcome;
  };
  _proto.defineProperty_ = function defineProperty_(key, descriptor, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }
    try {
      startBatch();
      var deleteOutcome = this.delete_(key);
      if (!deleteOutcome) {
        return deleteOutcome;
      }
      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          object: this.proxy_ || this.target_,
          name: key,
          type: ADD,
          newValue: descriptor.value
        });
        if (!change) {
          return null;
        }
        var newValue = change.newValue;
        if (descriptor.value !== newValue) {
          descriptor = _extends({}, descriptor, {
            value: newValue
          });
        }
      }
      if (proxyTrap) {
        if (!Reflect.defineProperty(this.target_, key, descriptor)) {
          return false;
        }
      } else {
        defineProperty(this.target_, key, descriptor);
      }
      this.notifyPropertyAddition_(key, descriptor.value);
    } finally {
      endBatch();
    }
    return true;
  };
  _proto.defineObservableProperty_ = function defineObservableProperty_(key, value, enhancer, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }
    try {
      startBatch();
      var deleteOutcome = this.delete_(key);
      if (!deleteOutcome) {
        return deleteOutcome;
      }
      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          object: this.proxy_ || this.target_,
          name: key,
          type: ADD,
          newValue: value
        });
        if (!change) {
          return null;
        }
        value = change.newValue;
      }
      var cachedDescriptor = getCachedObservablePropDescriptor(key);
      var descriptor = {
        configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,
        enumerable: true,
        get: cachedDescriptor.get,
        set: cachedDescriptor.set
      };
      if (proxyTrap) {
        if (!Reflect.defineProperty(this.target_, key, descriptor)) {
          return false;
        }
      } else {
        defineProperty(this.target_, key, descriptor);
      }
      var observable2 = new ObservableValue(value, enhancer, true ? this.name_ + "." + key.toString() : "ObservableObject.key", false);
      this.values_.set(key, observable2);
      this.notifyPropertyAddition_(key, observable2.value_);
    } finally {
      endBatch();
    }
    return true;
  };
  _proto.defineComputedProperty_ = function defineComputedProperty_(key, options, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }
    try {
      startBatch();
      var deleteOutcome = this.delete_(key);
      if (!deleteOutcome) {
        return deleteOutcome;
      }
      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          object: this.proxy_ || this.target_,
          name: key,
          type: ADD,
          newValue: void 0
        });
        if (!change) {
          return null;
        }
      }
      options.name || (options.name = true ? this.name_ + "." + key.toString() : "ObservableObject.key");
      options.context = this.proxy_ || this.target_;
      var cachedDescriptor = getCachedObservablePropDescriptor(key);
      var descriptor = {
        configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,
        enumerable: false,
        get: cachedDescriptor.get,
        set: cachedDescriptor.set
      };
      if (proxyTrap) {
        if (!Reflect.defineProperty(this.target_, key, descriptor)) {
          return false;
        }
      } else {
        defineProperty(this.target_, key, descriptor);
      }
      this.values_.set(key, new ComputedValue(options));
      this.notifyPropertyAddition_(key, void 0);
    } finally {
      endBatch();
    }
    return true;
  };
  _proto.delete_ = function delete_(key, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }
    if (!hasProp(this.target_, key)) {
      return true;
    }
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        object: this.proxy_ || this.target_,
        name: key,
        type: REMOVE
      });
      if (!change) {
        return null;
      }
    }
    try {
      var _this$pendingKeys_, _this$pendingKeys_$ge;
      startBatch();
      var notify = hasListeners(this);
      var notifySpy = isSpyEnabled();
      var observable2 = this.values_.get(key);
      var value = void 0;
      if (!observable2 && (notify || notifySpy)) {
        var _getDescriptor2;
        value = (_getDescriptor2 = getDescriptor(this.target_, key)) == null ? void 0 : _getDescriptor2.value;
      }
      if (proxyTrap) {
        if (!Reflect.deleteProperty(this.target_, key)) {
          return false;
        }
      } else {
        delete this.target_[key];
      }
      if (true) {
        delete this.appliedAnnotations_[key];
      }
      if (observable2) {
        this.values_["delete"](key);
        if (observable2 instanceof ObservableValue) {
          value = observable2.value_;
        }
        propagateChanged(observable2);
      }
      this.keysAtom_.reportChanged();
      (_this$pendingKeys_ = this.pendingKeys_) == null ? void 0 : (_this$pendingKeys_$ge = _this$pendingKeys_.get(key)) == null ? void 0 : _this$pendingKeys_$ge.set(key in this.target_);
      if (notify || notifySpy) {
        var _change2 = {
          type: REMOVE,
          observableKind: "object",
          object: this.proxy_ || this.target_,
          debugObjectName: this.name_,
          oldValue: value,
          name: key
        };
        if (notifySpy) {
          spyReportStart(_change2);
        }
        if (notify) {
          notifyListeners(this, _change2);
        }
        if (notifySpy) {
          spyReportEnd();
        }
      }
    } finally {
      endBatch();
    }
    return true;
  };
  _proto.observe_ = function observe_(callback, fireImmediately) {
    if (fireImmediately === true) {
      die("`observe` doesn't support the fire immediately property for observable objects.");
    }
    return registerListener(this, callback);
  };
  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };
  _proto.notifyPropertyAddition_ = function notifyPropertyAddition_(key, value) {
    var _this$pendingKeys_2, _this$pendingKeys_2$g;
    var notify = hasListeners(this);
    var notifySpy = isSpyEnabled();
    if (notify || notifySpy) {
      var change = notify || notifySpy ? {
        type: ADD,
        observableKind: "object",
        debugObjectName: this.name_,
        object: this.proxy_ || this.target_,
        name: key,
        newValue: value
      } : null;
      if (notifySpy) {
        spyReportStart(change);
      }
      if (notify) {
        notifyListeners(this, change);
      }
      if (notifySpy) {
        spyReportEnd();
      }
    }
    (_this$pendingKeys_2 = this.pendingKeys_) == null ? void 0 : (_this$pendingKeys_2$g = _this$pendingKeys_2.get(key)) == null ? void 0 : _this$pendingKeys_2$g.set(true);
    this.keysAtom_.reportChanged();
  };
  _proto.ownKeys_ = function ownKeys_() {
    this.keysAtom_.reportObserved();
    return ownKeys(this.target_);
  };
  _proto.keys_ = function keys_() {
    this.keysAtom_.reportObserved();
    return Object.keys(this.target_);
  };
  return ObservableObjectAdministration2;
}();
function asObservableObject(target, options) {
  var _options$name;
  if (options && isObservableObject(target)) {
    die("Options can't be provided for already observable objects.");
  }
  if (hasProp(target, $mobx)) {
    if (!(getAdministration(target) instanceof ObservableObjectAdministration)) {
      die("Cannot convert '" + getDebugName(target) + "' into observable object:\nThe target is already observable of different type.\nExtending builtins is not supported.");
    }
    return target;
  }
  if (!Object.isExtensible(target)) {
    die("Cannot make the designated object observable; it is not extensible");
  }
  var name = (_options$name = options == null ? void 0 : options.name) != null ? _options$name : true ? (isPlainObject(target) ? "ObservableObject" : target.constructor.name) + "@" + getNextId() : "ObservableObject";
  var adm = new ObservableObjectAdministration(target, /* @__PURE__ */ new Map(), String(name), getAnnotationFromOptions(options));
  addHiddenProp(target, $mobx, adm);
  return target;
}
var isObservableObjectAdministration = /* @__PURE__ */ createInstanceofPredicate("ObservableObjectAdministration", ObservableObjectAdministration);
function getCachedObservablePropDescriptor(key) {
  return descriptorCache[key] || (descriptorCache[key] = {
    get: function get3() {
      return this[$mobx].getObservablePropValue_(key);
    },
    set: function set4(value) {
      return this[$mobx].setObservablePropValue_(key, value);
    }
  });
}
function isObservableObject(thing) {
  if (isObject(thing)) {
    return isObservableObjectAdministration(thing[$mobx]);
  }
  return false;
}
function recordAnnotationApplied(adm, annotation, key) {
  var _adm$target_$storedAn;
  if (true) {
    adm.appliedAnnotations_[key] = annotation;
  }
  (_adm$target_$storedAn = adm.target_[storedAnnotationsSymbol]) == null ? true : delete _adm$target_$storedAn[key];
}
function assertAnnotable(adm, annotation, key) {
  if (!isAnnotation(annotation)) {
    die("Cannot annotate '" + adm.name_ + "." + key.toString() + "': Invalid annotation.");
  }
  if (!isOverride(annotation) && hasProp(adm.appliedAnnotations_, key)) {
    var fieldName = adm.name_ + "." + key.toString();
    var currentAnnotationType = adm.appliedAnnotations_[key].annotationType_;
    var requestedAnnotationType = annotation.annotationType_;
    die("Cannot apply '" + requestedAnnotationType + "' to '" + fieldName + "':" + ("\nThe field is already annotated with '" + currentAnnotationType + "'.") + "\nRe-annotating fields is not allowed.\nUse 'override' annotation for methods overridden by subclass.");
  }
}
var ENTRY_0 = /* @__PURE__ */ createArrayEntryDescriptor(0);
var OBSERVABLE_ARRAY_BUFFER_SIZE = 0;
var StubArray = function StubArray2() {
};
function inherit(ctor, proto) {
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(ctor.prototype, proto);
  } else if (ctor.prototype.__proto__ !== void 0) {
    ctor.prototype.__proto__ = proto;
  } else {
    ctor.prototype = proto;
  }
}
inherit(StubArray, Array.prototype);
var LegacyObservableArray = /* @__PURE__ */ function(_StubArray, _Symbol$toStringTag2, _Symbol$iterator2) {
  _inheritsLoose(LegacyObservableArray2, _StubArray);
  function LegacyObservableArray2(initialValues, enhancer, name, owned) {
    var _this;
    if (name === void 0) {
      name = true ? "ObservableArray@" + getNextId() : "ObservableArray";
    }
    if (owned === void 0) {
      owned = false;
    }
    _this = _StubArray.call(this) || this;
    var adm = new ObservableArrayAdministration(name, enhancer, owned, true);
    adm.proxy_ = _assertThisInitialized(_this);
    addHiddenFinalProp(_assertThisInitialized(_this), $mobx, adm);
    if (initialValues && initialValues.length) {
      var prev = allowStateChangesStart(true);
      _this.spliceWithArray(0, 0, initialValues);
      allowStateChangesEnd(prev);
    }
    {
      Object.defineProperty(_assertThisInitialized(_this), "0", ENTRY_0);
    }
    return _this;
  }
  var _proto = LegacyObservableArray2.prototype;
  _proto.concat = function concat() {
    this[$mobx].atom_.reportObserved();
    for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {
      arrays[_key] = arguments[_key];
    }
    return Array.prototype.concat.apply(
      this.slice(),
      //@ts-ignore
      arrays.map(function(a) {
        return isObservableArray(a) ? a.slice() : a;
      })
    );
  };
  _proto[_Symbol$iterator2] = function() {
    var self2 = this;
    var nextIndex = 0;
    return makeIterable({
      next: function next() {
        return nextIndex < self2.length ? {
          value: self2[nextIndex++],
          done: false
        } : {
          done: true,
          value: void 0
        };
      }
    });
  };
  _createClass(LegacyObservableArray2, [{
    key: "length",
    get: function get3() {
      return this[$mobx].getArrayLength_();
    },
    set: function set4(newLength) {
      this[$mobx].setArrayLength_(newLength);
    }
  }, {
    key: _Symbol$toStringTag2,
    get: function get3() {
      return "Array";
    }
  }]);
  return LegacyObservableArray2;
}(StubArray, Symbol.toStringTag, Symbol.iterator);
Object.entries(arrayExtensions).forEach(function(_ref) {
  var prop = _ref[0], fn = _ref[1];
  if (prop !== "concat") {
    addHiddenProp(LegacyObservableArray.prototype, prop, fn);
  }
});
function createArrayEntryDescriptor(index) {
  return {
    enumerable: false,
    configurable: true,
    get: function get3() {
      return this[$mobx].get_(index);
    },
    set: function set4(value) {
      this[$mobx].set_(index, value);
    }
  };
}
function createArrayBufferItem(index) {
  defineProperty(LegacyObservableArray.prototype, "" + index, createArrayEntryDescriptor(index));
}
function reserveArrayBuffer(max) {
  if (max > OBSERVABLE_ARRAY_BUFFER_SIZE) {
    for (var index = OBSERVABLE_ARRAY_BUFFER_SIZE; index < max + 100; index++) {
      createArrayBufferItem(index);
    }
    OBSERVABLE_ARRAY_BUFFER_SIZE = max;
  }
}
reserveArrayBuffer(1e3);
function createLegacyArray(initialValues, enhancer, name) {
  return new LegacyObservableArray(initialValues, enhancer, name);
}
function getAtom(thing, property) {
  if (typeof thing === "object" && thing !== null) {
    if (isObservableArray(thing)) {
      if (property !== void 0) {
        die(23);
      }
      return thing[$mobx].atom_;
    }
    if (isObservableSet(thing)) {
      return thing.atom_;
    }
    if (isObservableMap(thing)) {
      if (property === void 0) {
        return thing.keysAtom_;
      }
      var observable2 = thing.data_.get(property) || thing.hasMap_.get(property);
      if (!observable2) {
        die(25, property, getDebugName(thing));
      }
      return observable2;
    }
    if (isObservableObject(thing)) {
      if (!property) {
        return die(26);
      }
      var _observable = thing[$mobx].values_.get(property);
      if (!_observable) {
        die(27, property, getDebugName(thing));
      }
      return _observable;
    }
    if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {
      return thing;
    }
  } else if (isFunction(thing)) {
    if (isReaction(thing[$mobx])) {
      return thing[$mobx];
    }
  }
  die(28);
}
function getAdministration(thing, property) {
  if (!thing) {
    die(29);
  }
  if (property !== void 0) {
    return getAdministration(getAtom(thing, property));
  }
  if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {
    return thing;
  }
  if (isObservableMap(thing) || isObservableSet(thing)) {
    return thing;
  }
  if (thing[$mobx]) {
    return thing[$mobx];
  }
  die(24, thing);
}
function getDebugName(thing, property) {
  var named;
  if (property !== void 0) {
    named = getAtom(thing, property);
  } else if (isAction(thing)) {
    return thing.name;
  } else if (isObservableObject(thing) || isObservableMap(thing) || isObservableSet(thing)) {
    named = getAdministration(thing);
  } else {
    named = getAtom(thing);
  }
  return named.name_;
}
var toString = objectPrototype.toString;
function deepEqual(a, b, depth) {
  if (depth === void 0) {
    depth = -1;
  }
  return eq(a, b, depth);
}
function eq(a, b, depth, aStack, bStack) {
  if (a === b) {
    return a !== 0 || 1 / a === 1 / b;
  }
  if (a == null || b == null) {
    return false;
  }
  if (a !== a) {
    return b !== b;
  }
  var type = typeof a;
  if (type !== "function" && type !== "object" && typeof b != "object") {
    return false;
  }
  var className = toString.call(a);
  if (className !== toString.call(b)) {
    return false;
  }
  switch (className) {
    case "[object RegExp]":
    case "[object String]":
      return "" + a === "" + b;
    case "[object Number]":
      if (+a !== +a) {
        return +b !== +b;
      }
      return +a === 0 ? 1 / +a === 1 / b : +a === +b;
    case "[object Date]":
    case "[object Boolean]":
      return +a === +b;
    case "[object Symbol]":
      return typeof Symbol !== "undefined" && Symbol.valueOf.call(a) === Symbol.valueOf.call(b);
    case "[object Map]":
    case "[object Set]":
      if (depth >= 0) {
        depth++;
      }
      break;
  }
  a = unwrap(a);
  b = unwrap(b);
  var areArrays = className === "[object Array]";
  if (!areArrays) {
    if (typeof a != "object" || typeof b != "object") {
      return false;
    }
    var aCtor = a.constructor, bCtor = b.constructor;
    if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor && isFunction(bCtor) && bCtor instanceof bCtor) && "constructor" in a && "constructor" in b) {
      return false;
    }
  }
  if (depth === 0) {
    return false;
  } else if (depth < 0) {
    depth = -1;
  }
  aStack = aStack || [];
  bStack = bStack || [];
  var length = aStack.length;
  while (length--) {
    if (aStack[length] === a) {
      return bStack[length] === b;
    }
  }
  aStack.push(a);
  bStack.push(b);
  if (areArrays) {
    length = a.length;
    if (length !== b.length) {
      return false;
    }
    while (length--) {
      if (!eq(a[length], b[length], depth - 1, aStack, bStack)) {
        return false;
      }
    }
  } else {
    var keys = Object.keys(a);
    var key;
    length = keys.length;
    if (Object.keys(b).length !== length) {
      return false;
    }
    while (length--) {
      key = keys[length];
      if (!(hasProp(b, key) && eq(a[key], b[key], depth - 1, aStack, bStack))) {
        return false;
      }
    }
  }
  aStack.pop();
  bStack.pop();
  return true;
}
function unwrap(a) {
  if (isObservableArray(a)) {
    return a.slice();
  }
  if (isES6Map(a) || isObservableMap(a)) {
    return Array.from(a.entries());
  }
  if (isES6Set(a) || isObservableSet(a)) {
    return Array.from(a.entries());
  }
  return a;
}
function makeIterable(iterator) {
  iterator[Symbol.iterator] = getSelf;
  return iterator;
}
function getSelf() {
  return this;
}
function isAnnotation(thing) {
  return (
    // Can be function
    thing instanceof Object && typeof thing.annotationType_ === "string" && isFunction(thing.make_) && isFunction(thing.extend_)
  );
}
["Symbol", "Map", "Set"].forEach(function(m2) {
  var g = getGlobal();
  if (typeof g[m2] === "undefined") {
    die("MobX requires global '" + m2 + "' to be available or polyfilled");
  }
});
if (typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === "object") {
  __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({
    spy,
    extras: {
      getDebugName
    },
    $mobx
  });
}

// src/views/ids.ts
var ViewId = {
  Config: "config",
  Settings: "settings",
  Wizard: "wizard"
};
var ids_default = ViewId;

// ../mobx-preact-lite/dist/index.js
init_preact_min();
init_preact_min();
init_preact_min();
init_preact_min();
init_preact_min();
init_preact_min();
init_preact_min();
if (!z) {
  throw new Error("mobx-react-lite requires React with Hooks support");
}
if (!makeObservable) {
  throw new Error("mobx-react-lite@3 requires mobx at least version 6 to be available");
}
function defaultNoopBatch(callback) {
  callback();
}
function observerBatching(reactionScheduler3) {
  if (!reactionScheduler3) {
    reactionScheduler3 = defaultNoopBatch;
    if (true) {
      console.warn("[MobX] Failed to get unstable_batched updates from react-dom / react-native");
    }
  }
  configure({ reactionScheduler: reactionScheduler3 });
}
function printDebugValue(v) {
  return getDependencyTree(v);
}
var REGISTRY_FINALIZE_AFTER = 1e4;
var REGISTRY_SWEEP_INTERVAL = 1e4;
var TimerBasedFinalizationRegistry = (
  /** @class */
  function() {
    function TimerBasedFinalizationRegistry2(finalize) {
      var _this = this;
      Object.defineProperty(this, "finalize", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: finalize
      });
      Object.defineProperty(this, "registrations", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: /* @__PURE__ */ new Map()
      });
      Object.defineProperty(this, "sweepTimeout", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, "sweep", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: function(maxAge) {
          if (maxAge === void 0) {
            maxAge = REGISTRY_FINALIZE_AFTER;
          }
          clearTimeout(_this.sweepTimeout);
          _this.sweepTimeout = void 0;
          var now = Date.now();
          _this.registrations.forEach(function(registration, token) {
            if (now - registration.registeredAt >= maxAge) {
              _this.finalize(registration.value);
              _this.registrations.delete(token);
            }
          });
          if (_this.registrations.size > 0) {
            _this.scheduleSweep();
          }
        }
      });
      Object.defineProperty(this, "finalizeAllImmediately", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: function() {
          _this.sweep(0);
        }
      });
    }
    Object.defineProperty(TimerBasedFinalizationRegistry2.prototype, "register", {
      enumerable: false,
      configurable: true,
      writable: true,
      value: function(target, value, token) {
        this.registrations.set(token, {
          value,
          registeredAt: Date.now()
        });
        this.scheduleSweep();
      }
    });
    Object.defineProperty(TimerBasedFinalizationRegistry2.prototype, "unregister", {
      enumerable: false,
      configurable: true,
      writable: true,
      value: function(token) {
        this.registrations.delete(token);
      }
    });
    Object.defineProperty(TimerBasedFinalizationRegistry2.prototype, "scheduleSweep", {
      enumerable: false,
      configurable: true,
      writable: true,
      value: function() {
        if (this.sweepTimeout === void 0) {
          this.sweepTimeout = setTimeout(this.sweep, REGISTRY_SWEEP_INTERVAL);
        }
      }
    });
    return TimerBasedFinalizationRegistry2;
  }()
);
var UniversalFinalizationRegistry = typeof FinalizationRegistry !== "undefined" ? FinalizationRegistry : TimerBasedFinalizationRegistry;
var observerFinalizationRegistry = new UniversalFinalizationRegistry(function(adm) {
  var _a2;
  (_a2 = adm.reaction) === null || _a2 === void 0 ? void 0 : _a2.dispose();
  adm.reaction = null;
});
var globalIsUsingStaticRendering = false;
function isUsingStaticRendering() {
  return globalIsUsingStaticRendering;
}
var __read = function(o, n) {
  var m2 = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m2)
    return o;
  var i2 = m2.call(o), r2, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r2 = i2.next()).done)
      ar.push(r2.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r2 && !r2.done && (m2 = i2["return"]))
        m2.call(i2);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
function observerComponentNameFor(baseComponentName) {
  return "observer".concat(baseComponentName);
}
var ObjectToBeRetainedByReact = (
  /** @class */
  function() {
    function ObjectToBeRetainedByReact2() {
    }
    return ObjectToBeRetainedByReact2;
  }()
);
function objectToBeRetainedByReactFactory() {
  return new ObjectToBeRetainedByReact();
}
function useObserver(fn, baseComponentName) {
  if (baseComponentName === void 0) {
    baseComponentName = "observed";
  }
  if (isUsingStaticRendering()) {
    return fn();
  }
  var _a2 = __read(yn.useState(objectToBeRetainedByReactFactory), 1), objectRetainedByReact = _a2[0];
  var _b = __read(yn.useState(), 2), setState = _b[1];
  var forceUpdate = function() {
    return setState([]);
  };
  var admRef = yn.useRef(null);
  if (!admRef.current) {
    admRef.current = {
      reaction: null,
      mounted: false,
      changedBeforeMount: false
    };
  }
  var adm = admRef.current;
  if (!adm.reaction) {
    adm.reaction = new Reaction(observerComponentNameFor(baseComponentName), function() {
      if (adm.mounted) {
        forceUpdate();
      } else {
        adm.changedBeforeMount = true;
      }
    });
    observerFinalizationRegistry.register(objectRetainedByReact, adm, adm);
  }
  yn.useDebugValue(adm.reaction, printDebugValue);
  yn.useEffect(function() {
    observerFinalizationRegistry.unregister(adm);
    adm.mounted = true;
    if (adm.reaction) {
      if (adm.changedBeforeMount) {
        adm.changedBeforeMount = false;
        forceUpdate();
      }
    } else {
      adm.reaction = new Reaction(observerComponentNameFor(baseComponentName), function() {
        forceUpdate();
      });
      forceUpdate();
    }
    return function() {
      adm.reaction.dispose();
      adm.reaction = null;
      adm.mounted = false;
      adm.changedBeforeMount = false;
    };
  }, []);
  var rendering;
  var exception;
  adm.reaction.track(function() {
    try {
      rendering = fn();
    } catch (e) {
      exception = e;
    }
  });
  if (exception) {
    throw exception;
  }
  return rendering;
}
var warnObserverOptionsDeprecated = true;
var hasSymbol = typeof Symbol === "function" && Symbol.for;
var ReactForwardRefSymbol = hasSymbol ? Symbol.for("react.forward_ref") : typeof Pe === "function" && Pe(function(props) {
  return null;
})["$$typeof"];
var ReactMemoSymbol = hasSymbol ? Symbol.for("react.memo") : typeof Ne === "function" && Ne(function(props) {
  return null;
})["$$typeof"];
function observer(baseComponent, options) {
  var _a2;
  if (warnObserverOptionsDeprecated && options) {
    warnObserverOptionsDeprecated = false;
    console.warn("[mobx-react-lite] `observer(fn, { forwardRef: true })` is deprecated, use `observer(React.forwardRef(fn))`");
  }
  if (ReactMemoSymbol && baseComponent["$$typeof"] === ReactMemoSymbol) {
    throw new Error("[mobx-react-lite] You are trying to use `observer` on a function component wrapped in either another `observer` or `React.memo`. The observer already applies 'React.memo' for you.");
  }
  if (isUsingStaticRendering()) {
    return baseComponent;
  }
  var useForwardRef = (_a2 = options === null || options === void 0 ? void 0 : options.forwardRef) !== null && _a2 !== void 0 ? _a2 : false;
  var render = baseComponent;
  var baseComponentName = baseComponent.displayName || baseComponent.name;
  if (ReactForwardRefSymbol && baseComponent["$$typeof"] === ReactForwardRefSymbol) {
    useForwardRef = true;
    render = baseComponent["render"];
    if (typeof render !== "function") {
      throw new Error("[mobx-react-lite] `render` property of ForwardRef was not a function");
    }
  }
  var observerComponent = function(props, ref) {
    return useObserver(function() {
      return render(props, ref);
    }, baseComponentName);
  };
  if (baseComponentName !== "") {
    ;
    observerComponent.displayName = baseComponentName;
  }
  if (baseComponent.contextTypes) {
    ;
    observerComponent.contextTypes = baseComponent.contextTypes;
  }
  if (useForwardRef) {
    observerComponent = Pe(observerComponent);
  }
  observerComponent = Ne(observerComponent);
  copyStaticProperties(baseComponent, observerComponent);
  if (true) {
    Object.defineProperty(observerComponent, "contextTypes", {
      set: function() {
        var _a3;
        throw new Error("[mobx-react-lite] `".concat(this.displayName || ((_a3 = this.type) === null || _a3 === void 0 ? void 0 : _a3.displayName) || "Component", ".contextTypes` must be set before applying `observer`."));
      }
    });
  }
  return observerComponent;
}
var hoistBlackList = {
  $$typeof: true,
  render: true,
  compare: true,
  type: true,
  // Don't redefine `displayName`,
  // it's defined as getter-setter pair on `memo` (see #3192).
  displayName: true
};
function copyStaticProperties(base, target) {
  Object.keys(base).forEach(function(key) {
    if (!hoistBlackList[key]) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));
    }
  });
}
function ObserverComponent(_a2) {
  var children = _a2.children, render = _a2.render;
  var component = children || render;
  if (typeof component !== "function") {
    return null;
  }
  return useObserver(component);
}
if (true) {
  ObserverComponent.propTypes = {
    children: ObserverPropsCheck,
    render: ObserverPropsCheck
  };
}
ObserverComponent.displayName = "Observer";
function ObserverPropsCheck(props, key, componentName, location, propFullName) {
  var extraKey = key === "children" ? "render" : "children";
  var hasProp2 = typeof props[key] === "function";
  var hasExtraProp = typeof props[extraKey] === "function";
  if (hasProp2 && hasExtraProp) {
    return new Error("MobX Observer: Do not use children and render in the same time in`" + componentName);
  }
  if (hasProp2 || hasExtraProp) {
    return null;
  }
  return new Error("Invalid prop `" + propFullName + "` of type `" + typeof props[key] + "` supplied to `" + componentName + "`, expected `function`.");
}
var _a;
observerBatching(Le);
var clearTimers = (_a = observerFinalizationRegistry["finalizeAllImmediately"]) !== null && _a !== void 0 ? _a : function() {
};

// ../../node_modules/@react-stately/collections/dist/import.mjs
init_preact_min();
function $c1d7fb2ec91bae71$var$Item(props) {
  return null;
}
$c1d7fb2ec91bae71$var$Item.getCollectionNode = function* getCollectionNode(props, context) {
  let { childItems, title, children } = props;
  let rendered = props.title || props.children;
  let textValue = props.textValue || (typeof rendered === "string" ? rendered : "") || props["aria-label"] || "";
  if (!textValue && !(context === null || context === void 0 ? void 0 : context.suppressTextValueWarning))
    console.warn("<Item> with non-plain text contents is unsupported by type to select for accessibility. Please add a `textValue` prop.");
  yield {
    type: "item",
    props,
    rendered,
    textValue,
    "aria-label": props["aria-label"],
    hasChildNodes: $c1d7fb2ec91bae71$var$hasChildItems(props),
    *childNodes() {
      if (childItems)
        for (let child of childItems)
          yield {
            type: "item",
            value: child
          };
      else if (title) {
        let items = [];
        (0, yn).Children.forEach(children, (child) => {
          items.push({
            type: "item",
            element: child
          });
        });
        yield* items;
      }
    }
  };
};
function $c1d7fb2ec91bae71$var$hasChildItems(props) {
  if (props.hasChildItems != null)
    return props.hasChildItems;
  if (props.childItems)
    return true;
  if (props.title && (0, yn).Children.count(props.children) > 0)
    return true;
  return false;
}
var $c1d7fb2ec91bae71$export$6d08773d2e66f8f2 = $c1d7fb2ec91bae71$var$Item;
function $9fc4852771d079eb$var$Section(props) {
  return null;
}
$9fc4852771d079eb$var$Section.getCollectionNode = function* getCollectionNode2(props) {
  let { children, title, items } = props;
  yield {
    type: "section",
    props,
    hasChildNodes: true,
    rendered: title,
    "aria-label": props["aria-label"],
    *childNodes() {
      if (typeof children === "function") {
        if (!items)
          throw new Error("props.children was a function but props.items is missing");
        for (let item of items)
          yield {
            type: "item",
            value: item,
            renderer: children
          };
      } else {
        let items2 = [];
        (0, yn).Children.forEach(children, (child) => {
          items2.push({
            type: "item",
            element: child
          });
        });
        yield* items2;
      }
    }
  };
};
var $eb2240fc39a57fa5$export$bf788dd355e3a401 = class {
  build(props, context) {
    this.context = context;
    return $eb2240fc39a57fa5$var$iterable(() => this.iterateCollection(props));
  }
  *iterateCollection(props) {
    let { children, items } = props;
    if (typeof children === "function") {
      if (!items)
        throw new Error("props.children was a function but props.items is missing");
      for (let item of props.items)
        yield* this.getFullNode({
          value: item
        }, {
          renderer: children
        });
    } else {
      let items2 = [];
      (0, yn).Children.forEach(children, (child) => {
        items2.push(child);
      });
      let index = 0;
      for (let item of items2) {
        let nodes = this.getFullNode({
          element: item,
          index
        }, {});
        for (let node of nodes) {
          index++;
          yield node;
        }
      }
    }
  }
  getKey(item, partialNode, state, parentKey) {
    if (item.key != null)
      return item.key;
    if (partialNode.type === "cell" && partialNode.key != null)
      return `${parentKey}${partialNode.key}`;
    let v = partialNode.value;
    if (v != null) {
      var _v_key;
      let key = (_v_key = v.key) !== null && _v_key !== void 0 ? _v_key : v.id;
      if (key == null)
        throw new Error("No key found for item");
      return key;
    }
    return parentKey ? `${parentKey}.${partialNode.index}` : `$.${partialNode.index}`;
  }
  getChildState(state, partialNode) {
    return {
      renderer: partialNode.renderer || state.renderer
    };
  }
  *getFullNode(partialNode, state, parentKey, parentNode) {
    let element = partialNode.element;
    if (!element && partialNode.value && state && state.renderer) {
      let cached = this.cache.get(partialNode.value);
      if (cached && (!cached.shouldInvalidate || !cached.shouldInvalidate(this.context))) {
        cached.index = partialNode.index;
        cached.parentKey = parentNode ? parentNode.key : null;
        yield cached;
        return;
      }
      element = state.renderer(partialNode.value);
    }
    if ((0, yn).isValidElement(element)) {
      let type = element.type;
      if (typeof type !== "function" && typeof type.getCollectionNode !== "function") {
        let name = typeof element.type === "function" ? element.type.name : element.type;
        throw new Error(`Unknown element <${name}> in collection.`);
      }
      let childNodes = type.getCollectionNode(element.props, this.context);
      let index = partialNode.index;
      let result = childNodes.next();
      while (!result.done && result.value) {
        let childNode = result.value;
        partialNode.index = index;
        let nodeKey = childNode.key;
        if (!nodeKey)
          nodeKey = childNode.element ? null : this.getKey(element, partialNode, state, parentKey);
        let nodes = this.getFullNode({
          ...childNode,
          key: nodeKey,
          index,
          wrapper: $eb2240fc39a57fa5$var$compose(partialNode.wrapper, childNode.wrapper)
        }, this.getChildState(state, childNode), parentKey ? `${parentKey}${element.key}` : element.key, parentNode);
        let children = [
          ...nodes
        ];
        for (let node2 of children) {
          node2.value = childNode.value || partialNode.value;
          if (node2.value)
            this.cache.set(node2.value, node2);
          if (partialNode.type && node2.type !== partialNode.type)
            throw new Error(`Unsupported type <${$eb2240fc39a57fa5$var$capitalize(node2.type)}> in <${$eb2240fc39a57fa5$var$capitalize(parentNode.type)}>. Only <${$eb2240fc39a57fa5$var$capitalize(partialNode.type)}> is supported.`);
          index++;
          yield node2;
        }
        result = childNodes.next(children);
      }
      return;
    }
    if (partialNode.key == null)
      return;
    let builder = this;
    let node = {
      type: partialNode.type,
      props: partialNode.props,
      key: partialNode.key,
      parentKey: parentNode ? parentNode.key : null,
      value: partialNode.value,
      level: parentNode ? parentNode.level + 1 : 0,
      index: partialNode.index,
      rendered: partialNode.rendered,
      textValue: partialNode.textValue,
      "aria-label": partialNode["aria-label"],
      wrapper: partialNode.wrapper,
      shouldInvalidate: partialNode.shouldInvalidate,
      hasChildNodes: partialNode.hasChildNodes,
      childNodes: $eb2240fc39a57fa5$var$iterable(function* () {
        if (!partialNode.hasChildNodes)
          return;
        let index = 0;
        for (let child of partialNode.childNodes()) {
          if (child.key != null)
            child.key = `${node.key}${child.key}`;
          child.index = index;
          let nodes = builder.getFullNode(child, builder.getChildState(state, child), node.key, node);
          for (let node2 of nodes) {
            index++;
            yield node2;
          }
        }
      })
    };
    yield node;
  }
  constructor() {
    this.cache = /* @__PURE__ */ new WeakMap();
  }
};
function $eb2240fc39a57fa5$var$iterable(iterator) {
  let cache = [];
  let iterable = null;
  return {
    *[Symbol.iterator]() {
      for (let item of cache)
        yield item;
      if (!iterable)
        iterable = iterator();
      for (let item of iterable) {
        cache.push(item);
        yield item;
      }
    }
  };
}
function $eb2240fc39a57fa5$var$compose(outer, inner) {
  if (outer && inner)
    return (element) => outer(inner(element));
  if (outer)
    return outer;
  if (inner)
    return inner;
}
function $eb2240fc39a57fa5$var$capitalize(str) {
  return str[0].toUpperCase() + str.slice(1);
}
function $7613b1592d41b092$export$6cd28814d92fa9c9(props, factory, context) {
  let builder = (0, j)(() => new (0, $eb2240fc39a57fa5$export$bf788dd355e3a401)(), []);
  let { children, items, collection } = props;
  let result = (0, j)(() => {
    if (collection)
      return collection;
    let nodes = builder.build({
      children,
      items
    }, context);
    return factory(nodes);
  }, [
    builder,
    children,
    items,
    collection,
    context,
    factory
  ]);
  return result;
}
function $c5a24bc478652b5f$export$1005530eda016c13(node, collection) {
  if (typeof collection.getChildren === "function")
    return collection.getChildren(node.key);
  return node.childNodes;
}
function $c5a24bc478652b5f$export$fbdeaa6a76694f71(iterable) {
  return $c5a24bc478652b5f$export$5f3398f8733f90e2(iterable, 0);
}
function $c5a24bc478652b5f$export$5f3398f8733f90e2(iterable, index) {
  if (index < 0)
    return void 0;
  let i2 = 0;
  for (let item of iterable) {
    if (i2 === index)
      return item;
    i2++;
  }
}
function $c5a24bc478652b5f$export$8c434b3a7a4dad6(collection, a, b) {
  if (a.parentKey === b.parentKey)
    return a.index - b.index;
  let aAncestors = $c5a24bc478652b5f$var$getAncestors(collection, a);
  let bAncestors = $c5a24bc478652b5f$var$getAncestors(collection, b);
  let firstNonMatchingAncestor = aAncestors.slice(0, bAncestors.length).findIndex((a2, i2) => a2 !== bAncestors[i2]);
  if (firstNonMatchingAncestor !== -1) {
    a = aAncestors[firstNonMatchingAncestor];
    b = bAncestors[firstNonMatchingAncestor];
    return a.index - b.index;
  }
  return -1;
}
function $c5a24bc478652b5f$var$getAncestors(collection, node) {
  let parents = [];
  while ((node === null || node === void 0 ? void 0 : node.parentKey) != null) {
    node = collection.getItem(node.parentKey);
    parents.unshift(node);
  }
  return parents;
}
var $453cc9f0df89c0a5$var$cache = /* @__PURE__ */ new WeakMap();
function $453cc9f0df89c0a5$export$77d5aafae4e095b2(collection) {
  let count = $453cc9f0df89c0a5$var$cache.get(collection);
  if (count != null)
    return count;
  count = 0;
  let countItems = (items) => {
    for (let item of items)
      if (item.type === "section")
        countItems((0, $c5a24bc478652b5f$export$1005530eda016c13)(item, collection));
      else
        count++;
  };
  countItems(collection);
  $453cc9f0df89c0a5$var$cache.set(collection, count);
  return count;
}

// ../../node_modules/@react-stately/utils/dist/import.mjs
init_preact_min();
function $458b0a5536c1a7cf$export$40bfa8c7b0832715(value, defaultValue, onChange) {
  let [stateValue, setStateValue] = (0, z)(value || defaultValue);
  let isControlledRef = (0, ie)(value !== void 0);
  let isControlled = value !== void 0;
  (0, K)(() => {
    let wasControlled = isControlledRef.current;
    if (wasControlled !== isControlled)
      console.warn(`WARN: A component changed from ${wasControlled ? "controlled" : "uncontrolled"} to ${isControlled ? "controlled" : "uncontrolled"}.`);
    isControlledRef.current = isControlled;
  }, [
    isControlled
  ]);
  let currentValue = isControlled ? value : stateValue;
  let setValue = (0, ae)((value2, ...args) => {
    let onChangeCaller = (value3, ...onChangeArgs) => {
      if (onChange) {
        if (!Object.is(currentValue, value3))
          onChange(value3, ...onChangeArgs);
      }
      if (!isControlled)
        currentValue = value3;
    };
    if (typeof value2 === "function") {
      console.warn("We can not support a function callback. See Github Issues for details https://github.com/adobe/react-spectrum/issues/2320");
      let updateFunction = (oldValue, ...functionArgs) => {
        let interceptedValue = value2(isControlled ? currentValue : oldValue, ...functionArgs);
        onChangeCaller(interceptedValue, ...args);
        if (!isControlled)
          return interceptedValue;
        return oldValue;
      };
      setStateValue(updateFunction);
    } else {
      if (!isControlled)
        setStateValue(value2);
      onChangeCaller(value2, ...args);
    }
  }, [
    isControlled,
    currentValue,
    onChange
  ]);
  return [
    currentValue,
    setValue
  ];
}
function $9446cca9a3875146$export$7d15b64cf5a3a4c4(value, min = -Infinity, max = Infinity) {
  let newValue = Math.min(Math.max(value, min), max);
  return newValue;
}

// ../../node_modules/@react-aria/utils/dist/import.mjs
init_preact_min();

// ../../node_modules/@react-aria/ssr/dist/import.mjs
init_preact_min();
var $704cf1d3b684cc5c$var$defaultContext = {
  prefix: String(Math.round(Math.random() * 1e10)),
  current: 0,
  isSSR: false
};
var $704cf1d3b684cc5c$var$SSRContext = /* @__PURE__ */ (0, yn).createContext($704cf1d3b684cc5c$var$defaultContext);
var $704cf1d3b684cc5c$var$canUseDOM = Boolean(typeof window !== "undefined" && window.document && window.document.createElement);
var $704cf1d3b684cc5c$var$componentIds = /* @__PURE__ */ new WeakMap();
function $704cf1d3b684cc5c$var$useCounter(isDisabled = false) {
  let ctx = (0, ce)($704cf1d3b684cc5c$var$SSRContext);
  let ref = (0, ie)(null);
  if (ref.current === null && !isDisabled) {
    var _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner;
    let currentOwner = (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = (0, yn).__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED === void 0 ? void 0 : (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner = _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner === void 0 ? void 0 : _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner.current;
    if (currentOwner) {
      let prevComponentValue = $704cf1d3b684cc5c$var$componentIds.get(currentOwner);
      if (prevComponentValue == null)
        $704cf1d3b684cc5c$var$componentIds.set(currentOwner, {
          id: ctx.current,
          state: currentOwner.memoizedState
        });
      else if (currentOwner.memoizedState !== prevComponentValue.state) {
        ctx.current = prevComponentValue.id;
        $704cf1d3b684cc5c$var$componentIds.delete(currentOwner);
      }
    }
    ref.current = ++ctx.current;
  }
  return ref.current;
}
function $704cf1d3b684cc5c$var$useLegacySSRSafeId(defaultId) {
  let ctx = (0, ce)($704cf1d3b684cc5c$var$SSRContext);
  if (ctx === $704cf1d3b684cc5c$var$defaultContext && !$704cf1d3b684cc5c$var$canUseDOM)
    console.warn("When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.");
  let counter = $704cf1d3b684cc5c$var$useCounter(!!defaultId);
  return defaultId || `react-aria${ctx.prefix}-${counter}`;
}
function $704cf1d3b684cc5c$var$useModernSSRSafeId(defaultId) {
  let id = (0, yn).useId();
  let [didSSR] = (0, z)($704cf1d3b684cc5c$export$535bd6ca7f90a273());
  let prefix = didSSR ? "react-aria" : `react-aria${$704cf1d3b684cc5c$var$defaultContext.prefix}`;
  return defaultId || `${prefix}-${id}`;
}
var $704cf1d3b684cc5c$export$619500959fc48b26 = typeof (0, yn)["useId"] === "function" ? $704cf1d3b684cc5c$var$useModernSSRSafeId : $704cf1d3b684cc5c$var$useLegacySSRSafeId;
function $704cf1d3b684cc5c$var$getSnapshot() {
  return false;
}
function $704cf1d3b684cc5c$var$getServerSnapshot() {
  return true;
}
function $704cf1d3b684cc5c$var$subscribe(onStoreChange) {
  return () => {
  };
}
function $704cf1d3b684cc5c$export$535bd6ca7f90a273() {
  if (typeof (0, yn)["useSyncExternalStore"] === "function")
    return (0, yn)["useSyncExternalStore"]($704cf1d3b684cc5c$var$subscribe, $704cf1d3b684cc5c$var$getSnapshot, $704cf1d3b684cc5c$var$getServerSnapshot);
  let cur = (0, ce)($704cf1d3b684cc5c$var$SSRContext);
  return cur.isSSR;
}

// ../../node_modules/clsx/dist/clsx.m.js
function r(e) {
  var t, f, n = "";
  if ("string" == typeof e || "number" == typeof e)
    n += e;
  else if ("object" == typeof e)
    if (Array.isArray(e))
      for (t = 0; t < e.length; t++)
        e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
    else
      for (t in e)
        e[t] && (n && (n += " "), n += t);
  return n;
}
function clsx() {
  for (var e, t, f = 0, n = ""; f < arguments.length; )
    (e = arguments[f++]) && (t = r(e)) && (n && (n += " "), n += t);
  return n;
}
var clsx_m_default = clsx;

// ../../node_modules/@react-aria/utils/dist/import.mjs
var $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c = typeof window !== "undefined" ? (0, yn).useLayoutEffect : () => {
};
function $1dbecbe27a04f9af$export$14d238f342723f25(defaultValue) {
  let [value, setValue] = (0, z)(defaultValue);
  let valueRef = (0, ie)(value);
  let effect = (0, ie)(null);
  let nextIter = (0, ae)(() => {
    let newValue = effect.current.next();
    while (!newValue.done && valueRef.current === newValue.value)
      newValue = effect.current.next();
    if (newValue.done) {
      effect.current = null;
      return;
    }
    setValue(newValue.value);
    valueRef.current = newValue.value;
  }, [
    setValue,
    valueRef,
    effect
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (effect.current)
      nextIter();
  });
  let queue = (0, ae)((fn) => {
    effect.current = fn(valueRef.current);
    nextIter();
  }, [
    nextIter,
    effect,
    valueRef
  ]);
  return [
    value,
    queue
  ];
}
var $bdb11010cef70236$var$idsUpdaterMap = /* @__PURE__ */ new Map();
function $bdb11010cef70236$export$f680877a34711e37(defaultId) {
  let [value, setValue] = (0, z)(defaultId);
  let nextId = (0, ie)(null);
  let res = (0, $704cf1d3b684cc5c$export$619500959fc48b26)(value);
  let updateValue = (0, ae)((val) => {
    nextId.current = val;
  }, []);
  $bdb11010cef70236$var$idsUpdaterMap.set(res, updateValue);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    let r2 = res;
    return () => {
      $bdb11010cef70236$var$idsUpdaterMap.delete(r2);
    };
  }, [
    res
  ]);
  (0, K)(() => {
    let newId = nextId.current;
    if (newId) {
      nextId.current = null;
      setValue(newId);
    }
  });
  return res;
}
function $bdb11010cef70236$export$cd8c9cb68f842629(idA, idB) {
  if (idA === idB)
    return idA;
  let setIdA = $bdb11010cef70236$var$idsUpdaterMap.get(idA);
  if (setIdA) {
    setIdA(idB);
    return idB;
  }
  let setIdB = $bdb11010cef70236$var$idsUpdaterMap.get(idB);
  if (setIdB) {
    setIdB(idA);
    return idA;
  }
  return idB;
}
function $bdb11010cef70236$export$b4cc09c592e8fdb8(depArray = []) {
  let id = $bdb11010cef70236$export$f680877a34711e37();
  let [resolvedId, setResolvedId] = (0, $1dbecbe27a04f9af$export$14d238f342723f25)(id);
  let updateId = (0, ae)(() => {
    setResolvedId(function* () {
      yield id;
      yield document.getElementById(id) ? id : void 0;
    });
  }, [
    id,
    setResolvedId
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(updateId, [
    id,
    updateId,
    ...depArray
  ]);
  return resolvedId;
}
function $ff5963eb1fccf552$export$e08e3b67e392101e(...callbacks) {
  return (...args) => {
    for (let callback of callbacks)
      if (typeof callback === "function")
        callback(...args);
  };
}
function $3ef42575df84b30b$export$9d1611c77c2fe928(...args) {
  let result = {
    ...args[0]
  };
  for (let i2 = 1; i2 < args.length; i2++) {
    let props = args[i2];
    for (let key in props) {
      let a = result[key];
      let b = props[key];
      if (typeof a === "function" && typeof b === "function" && // This is a lot faster than a regex.
      key[0] === "o" && key[1] === "n" && key.charCodeAt(2) >= /* 'A' */
      65 && key.charCodeAt(2) <= /* 'Z' */
      90)
        result[key] = (0, $ff5963eb1fccf552$export$e08e3b67e392101e)(a, b);
      else if ((key === "className" || key === "UNSAFE_className") && typeof a === "string" && typeof b === "string")
        result[key] = (0, clsx_m_default)(a, b);
      else if (key === "id" && a && b)
        result.id = (0, $bdb11010cef70236$export$cd8c9cb68f842629)(a, b);
      else
        result[key] = b !== void 0 ? b : a;
    }
  }
  return result;
}
var $65484d02dcb7eb3e$var$DOMPropNames = /* @__PURE__ */ new Set([
  "id"
]);
var $65484d02dcb7eb3e$var$labelablePropNames = /* @__PURE__ */ new Set([
  "aria-label",
  "aria-labelledby",
  "aria-describedby",
  "aria-details"
]);
var $65484d02dcb7eb3e$var$propRe = /^(data-.*)$/;
function $65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, opts = {}) {
  let { labelable, propNames } = opts;
  let filteredProps = {};
  for (const prop in props)
    if (Object.prototype.hasOwnProperty.call(props, prop) && ($65484d02dcb7eb3e$var$DOMPropNames.has(prop) || labelable && $65484d02dcb7eb3e$var$labelablePropNames.has(prop) || (propNames === null || propNames === void 0 ? void 0 : propNames.has(prop)) || $65484d02dcb7eb3e$var$propRe.test(prop)))
      filteredProps[prop] = props[prop];
  return filteredProps;
}
function $7215afc6de606d6b$export$de79e2c695e052f3(element) {
  if ($7215afc6de606d6b$var$supportsPreventScroll())
    element.focus({
      preventScroll: true
    });
  else {
    let scrollableElements = $7215afc6de606d6b$var$getScrollableElements(element);
    element.focus();
    $7215afc6de606d6b$var$restoreScrollPosition(scrollableElements);
  }
}
var $7215afc6de606d6b$var$supportsPreventScrollCached = null;
function $7215afc6de606d6b$var$supportsPreventScroll() {
  if ($7215afc6de606d6b$var$supportsPreventScrollCached == null) {
    $7215afc6de606d6b$var$supportsPreventScrollCached = false;
    try {
      var focusElem = document.createElement("div");
      focusElem.focus({
        get preventScroll() {
          $7215afc6de606d6b$var$supportsPreventScrollCached = true;
          return true;
        }
      });
    } catch (e) {
    }
  }
  return $7215afc6de606d6b$var$supportsPreventScrollCached;
}
function $7215afc6de606d6b$var$getScrollableElements(element) {
  var parent = element.parentNode;
  var scrollableElements = [];
  var rootScrollingElement = document.scrollingElement || document.documentElement;
  while (parent instanceof HTMLElement && parent !== rootScrollingElement) {
    if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth)
      scrollableElements.push({
        element: parent,
        scrollTop: parent.scrollTop,
        scrollLeft: parent.scrollLeft
      });
    parent = parent.parentNode;
  }
  if (rootScrollingElement instanceof HTMLElement)
    scrollableElements.push({
      element: rootScrollingElement,
      scrollTop: rootScrollingElement.scrollTop,
      scrollLeft: rootScrollingElement.scrollLeft
    });
  return scrollableElements;
}
function $7215afc6de606d6b$var$restoreScrollPosition(scrollableElements) {
  for (let { element, scrollTop, scrollLeft } of scrollableElements) {
    element.scrollTop = scrollTop;
    element.scrollLeft = scrollLeft;
  }
}
var $bbed8b41f857bcc0$var$transitionsByElement = /* @__PURE__ */ new Map();
var $bbed8b41f857bcc0$var$transitionCallbacks = /* @__PURE__ */ new Set();
function $bbed8b41f857bcc0$var$setupGlobalEvents() {
  if (typeof window === "undefined")
    return;
  let onTransitionStart = (e) => {
    let transitions = $bbed8b41f857bcc0$var$transitionsByElement.get(e.target);
    if (!transitions) {
      transitions = /* @__PURE__ */ new Set();
      $bbed8b41f857bcc0$var$transitionsByElement.set(e.target, transitions);
      e.target.addEventListener("transitioncancel", onTransitionEnd);
    }
    transitions.add(e.propertyName);
  };
  let onTransitionEnd = (e) => {
    let properties = $bbed8b41f857bcc0$var$transitionsByElement.get(e.target);
    if (!properties)
      return;
    properties.delete(e.propertyName);
    if (properties.size === 0) {
      e.target.removeEventListener("transitioncancel", onTransitionEnd);
      $bbed8b41f857bcc0$var$transitionsByElement.delete(e.target);
    }
    if ($bbed8b41f857bcc0$var$transitionsByElement.size === 0) {
      for (let cb of $bbed8b41f857bcc0$var$transitionCallbacks)
        cb();
      $bbed8b41f857bcc0$var$transitionCallbacks.clear();
    }
  };
  document.body.addEventListener("transitionrun", onTransitionStart);
  document.body.addEventListener("transitionend", onTransitionEnd);
}
if (typeof document !== "undefined") {
  if (document.readyState !== "loading")
    $bbed8b41f857bcc0$var$setupGlobalEvents();
  else
    document.addEventListener("DOMContentLoaded", $bbed8b41f857bcc0$var$setupGlobalEvents);
}
function $bbed8b41f857bcc0$export$24490316f764c430(fn) {
  requestAnimationFrame(() => {
    if ($bbed8b41f857bcc0$var$transitionsByElement.size === 0)
      fn();
    else
      $bbed8b41f857bcc0$var$transitionCallbacks.add(fn);
  });
}
function $03deb23ff14920c4$export$4eaf04e54aa8eed6() {
  let globalListeners = (0, ie)(/* @__PURE__ */ new Map());
  let addGlobalListener = (0, ae)((eventTarget, type, listener, options) => {
    let fn = (options === null || options === void 0 ? void 0 : options.once) ? (...args) => {
      globalListeners.current.delete(listener);
      listener(...args);
    } : listener;
    globalListeners.current.set(listener, {
      type,
      eventTarget,
      fn,
      options
    });
    eventTarget.addEventListener(type, listener, options);
  }, []);
  let removeGlobalListener = (0, ae)((eventTarget, type, listener, options) => {
    var _globalListeners_current_get;
    let fn = ((_globalListeners_current_get = globalListeners.current.get(listener)) === null || _globalListeners_current_get === void 0 ? void 0 : _globalListeners_current_get.fn) || listener;
    eventTarget.removeEventListener(type, fn, options);
    globalListeners.current.delete(listener);
  }, []);
  let removeAllGlobalListeners = (0, ae)(() => {
    globalListeners.current.forEach((value, key) => {
      removeGlobalListener(value.eventTarget, value.type, key, value.options);
    });
  }, [
    removeGlobalListener
  ]);
  (0, K)(() => {
    return removeAllGlobalListeners;
  }, [
    removeAllGlobalListeners
  ]);
  return {
    addGlobalListener,
    removeGlobalListener,
    removeAllGlobalListeners
  };
}
function $313b98861ee5dd6c$export$d6875122194c7b44(props, defaultLabel) {
  let { id, "aria-label": label, "aria-labelledby": labelledBy } = props;
  id = (0, $bdb11010cef70236$export$f680877a34711e37)(id);
  if (labelledBy && label) {
    let ids = /* @__PURE__ */ new Set([
      id,
      ...labelledBy.trim().split(/\s+/)
    ]);
    labelledBy = [
      ...ids
    ].join(" ");
  } else if (labelledBy)
    labelledBy = labelledBy.trim().split(/\s+/).join(" ");
  if (!label && !labelledBy && defaultLabel)
    label = defaultLabel;
  return {
    id,
    "aria-label": label,
    "aria-labelledby": labelledBy
  };
}
function $9daab02d461809db$var$hasResizeObserver() {
  return typeof window.ResizeObserver !== "undefined";
}
function $9daab02d461809db$export$683480f191c0e3ea(options) {
  const { ref, onResize } = options;
  (0, K)(() => {
    let element = ref === null || ref === void 0 ? void 0 : ref.current;
    if (!element)
      return;
    if (!$9daab02d461809db$var$hasResizeObserver()) {
      window.addEventListener("resize", onResize, false);
      return () => {
        window.removeEventListener("resize", onResize, false);
      };
    } else {
      const resizeObserverInstance = new window.ResizeObserver((entries) => {
        if (!entries.length)
          return;
        onResize();
      });
      resizeObserverInstance.observe(element);
      return () => {
        if (element)
          resizeObserverInstance.unobserve(element);
      };
    }
  }, [
    onResize,
    ref
  ]);
}
function $e7801be82b4b2a53$export$4debdb1a3f0fa79e(context, ref) {
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (context && context.ref && ref) {
      context.ref.current = ref.current;
      return () => {
        context.ref.current = null;
      };
    }
  }, [
    context,
    ref
  ]);
}
function $62d8ded9296f3872$export$cfa2225e87938781(node) {
  if ($62d8ded9296f3872$export$2bb74740c4e19def(node))
    node = node.parentElement;
  while (node && !$62d8ded9296f3872$export$2bb74740c4e19def(node))
    node = node.parentElement;
  return node || document.scrollingElement || document.documentElement;
}
function $62d8ded9296f3872$export$2bb74740c4e19def(node) {
  let style = window.getComputedStyle(node);
  return /(auto|scroll)/.test(style.overflow + style.overflowX + style.overflowY);
}
var $5df64b3807dc15ee$var$visualViewport = typeof window !== "undefined" && window.visualViewport;
function $5df64b3807dc15ee$export$d699905dd57c73ca() {
  let [size, setSize] = (0, z)(() => $5df64b3807dc15ee$var$getViewportSize());
  (0, K)(() => {
    let onResize = () => {
      setSize((size2) => {
        let newSize = $5df64b3807dc15ee$var$getViewportSize();
        if (newSize.width === size2.width && newSize.height === size2.height)
          return size2;
        return newSize;
      });
    };
    if (!$5df64b3807dc15ee$var$visualViewport)
      window.addEventListener("resize", onResize);
    else
      $5df64b3807dc15ee$var$visualViewport.addEventListener("resize", onResize);
    return () => {
      if (!$5df64b3807dc15ee$var$visualViewport)
        window.removeEventListener("resize", onResize);
      else
        $5df64b3807dc15ee$var$visualViewport.removeEventListener("resize", onResize);
    };
  }, []);
  return size;
}
function $5df64b3807dc15ee$var$getViewportSize() {
  return {
    width: ($5df64b3807dc15ee$var$visualViewport === null || $5df64b3807dc15ee$var$visualViewport === void 0 ? void 0 : $5df64b3807dc15ee$var$visualViewport.width) || window.innerWidth,
    height: ($5df64b3807dc15ee$var$visualViewport === null || $5df64b3807dc15ee$var$visualViewport === void 0 ? void 0 : $5df64b3807dc15ee$var$visualViewport.height) || window.innerHeight
  };
}
var $ef06256079686ba0$var$descriptionId = 0;
var $ef06256079686ba0$var$descriptionNodes = /* @__PURE__ */ new Map();
function $ef06256079686ba0$export$f8aeda7b10753fa1(description) {
  let [id, setId] = (0, z)(void 0);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (!description)
      return;
    let desc = $ef06256079686ba0$var$descriptionNodes.get(description);
    if (!desc) {
      let id2 = `react-aria-description-${$ef06256079686ba0$var$descriptionId++}`;
      setId(id2);
      let node = document.createElement("div");
      node.id = id2;
      node.style.display = "none";
      node.textContent = description;
      document.body.appendChild(node);
      desc = {
        refCount: 0,
        element: node
      };
      $ef06256079686ba0$var$descriptionNodes.set(description, desc);
    } else
      setId(desc.element.id);
    desc.refCount++;
    return () => {
      if (--desc.refCount === 0) {
        desc.element.remove();
        $ef06256079686ba0$var$descriptionNodes.delete(description);
      }
    };
  }, [
    description
  ]);
  return {
    "aria-describedby": description ? id : void 0
  };
}
function $c87311424ea30a05$var$testUserAgent(re2) {
  var _window_navigator_userAgentData;
  if (typeof window === "undefined" || window.navigator == null)
    return false;
  return ((_window_navigator_userAgentData = window.navigator["userAgentData"]) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.brands.some((brand) => re2.test(brand.brand))) || re2.test(window.navigator.userAgent);
}
function $c87311424ea30a05$var$testPlatform(re2) {
  var _window_navigator_userAgentData;
  return typeof window !== "undefined" && window.navigator != null ? re2.test(((_window_navigator_userAgentData = window.navigator["userAgentData"]) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.platform) || window.navigator.platform) : false;
}
function $c87311424ea30a05$export$9ac100e40613ea10() {
  return $c87311424ea30a05$var$testPlatform(/^Mac/i);
}
function $c87311424ea30a05$export$186c6964ca17d99() {
  return $c87311424ea30a05$var$testPlatform(/^iPhone/i);
}
function $c87311424ea30a05$export$7bef049ce92e4224() {
  return $c87311424ea30a05$var$testPlatform(/^iPad/i) || // iPadOS 13 lies and says it's a Mac, but we can distinguish by detecting touch support.
  $c87311424ea30a05$export$9ac100e40613ea10() && navigator.maxTouchPoints > 1;
}
function $c87311424ea30a05$export$fedb369cb70207f1() {
  return $c87311424ea30a05$export$186c6964ca17d99() || $c87311424ea30a05$export$7bef049ce92e4224();
}
function $c87311424ea30a05$export$e1865c3bedcd822b() {
  return $c87311424ea30a05$export$9ac100e40613ea10() || $c87311424ea30a05$export$fedb369cb70207f1();
}
function $c87311424ea30a05$export$78551043582a6a98() {
  return $c87311424ea30a05$var$testUserAgent(/AppleWebKit/i) && !$c87311424ea30a05$export$6446a186d09e379e();
}
function $c87311424ea30a05$export$6446a186d09e379e() {
  return $c87311424ea30a05$var$testUserAgent(/Chrome/i);
}
function $c87311424ea30a05$export$a11b0059900ceec8() {
  return $c87311424ea30a05$var$testUserAgent(/Android/i);
}
function $8ae05eaa5c114e9c$export$7f54fc3180508a52(fn) {
  const ref = (0, ie)(null);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    ref.current = fn;
  }, [
    fn
  ]);
  return (0, ae)((...args) => {
    const f = ref.current;
    return f(...args);
  }, []);
}
function $e9faafb641e167db$export$90fc3a17d93f704c(ref, event, handler, options) {
  let handleEvent = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)(handler);
  let isDisabled = handler == null;
  (0, K)(() => {
    if (isDisabled)
      return;
    let element = ref.current;
    element.addEventListener(event, handleEvent, options);
    return () => {
      element.removeEventListener(event, handleEvent, options);
    };
  }, [
    ref,
    event,
    options,
    isDisabled,
    handleEvent
  ]);
}
function $2f04cbc44ee30ce0$export$53a0910f038337bd(scrollView, element) {
  let offsetX = $2f04cbc44ee30ce0$var$relativeOffset(scrollView, element, "left");
  let offsetY = $2f04cbc44ee30ce0$var$relativeOffset(scrollView, element, "top");
  let width = element.offsetWidth;
  let height = element.offsetHeight;
  let x2 = scrollView.scrollLeft;
  let y = scrollView.scrollTop;
  let { borderTopWidth, borderLeftWidth } = getComputedStyle(scrollView);
  let borderAdjustedX = scrollView.scrollLeft + parseInt(borderLeftWidth, 10);
  let borderAdjustedY = scrollView.scrollTop + parseInt(borderTopWidth, 10);
  let maxX = borderAdjustedX + scrollView.clientWidth;
  let maxY = borderAdjustedY + scrollView.clientHeight;
  if (offsetX <= x2)
    x2 = offsetX - parseInt(borderLeftWidth, 10);
  else if (offsetX + width > maxX)
    x2 += offsetX + width - maxX;
  if (offsetY <= borderAdjustedY)
    y = offsetY - parseInt(borderTopWidth, 10);
  else if (offsetY + height > maxY)
    y += offsetY + height - maxY;
  scrollView.scrollLeft = x2;
  scrollView.scrollTop = y;
}
function $2f04cbc44ee30ce0$var$relativeOffset(ancestor, child, axis) {
  const prop = axis === "left" ? "offsetLeft" : "offsetTop";
  let sum = 0;
  while (child.offsetParent) {
    sum += child[prop];
    if (child.offsetParent === ancestor)
      break;
    else if (child.offsetParent.contains(ancestor)) {
      sum -= ancestor[prop];
      break;
    }
    child = child.offsetParent;
  }
  return sum;
}
function $2f04cbc44ee30ce0$export$c826860796309d1b(targetElement, opts) {
  if (document.contains(targetElement)) {
    let root3 = document.scrollingElement || document.documentElement;
    let isScrollPrevented = window.getComputedStyle(root3).overflow === "hidden";
    if (!isScrollPrevented) {
      var _targetElement_scrollIntoView;
      let { left: originalLeft, top: originalTop } = targetElement.getBoundingClientRect();
      targetElement === null || targetElement === void 0 ? void 0 : (_targetElement_scrollIntoView = targetElement.scrollIntoView) === null || _targetElement_scrollIntoView === void 0 ? void 0 : _targetElement_scrollIntoView.call(targetElement, {
        block: "nearest"
      });
      let { left: newLeft, top: newTop } = targetElement.getBoundingClientRect();
      if (Math.abs(originalLeft - newLeft) > 1 || Math.abs(originalTop - newTop) > 1) {
        var _opts_containingElement, _opts_containingElement_scrollIntoView, _targetElement_scrollIntoView1;
        opts === null || opts === void 0 ? void 0 : (_opts_containingElement = opts.containingElement) === null || _opts_containingElement === void 0 ? void 0 : (_opts_containingElement_scrollIntoView = _opts_containingElement.scrollIntoView) === null || _opts_containingElement_scrollIntoView === void 0 ? void 0 : _opts_containingElement_scrollIntoView.call(_opts_containingElement, {
          block: "center",
          inline: "center"
        });
        (_targetElement_scrollIntoView1 = targetElement.scrollIntoView) === null || _targetElement_scrollIntoView1 === void 0 ? void 0 : _targetElement_scrollIntoView1.call(targetElement, {
          block: "nearest"
        });
      }
    } else {
      let scrollParent = (0, $62d8ded9296f3872$export$cfa2225e87938781)(targetElement);
      while (targetElement && scrollParent && targetElement !== root3 && scrollParent !== root3) {
        $2f04cbc44ee30ce0$export$53a0910f038337bd(scrollParent, targetElement);
        targetElement = scrollParent;
        scrollParent = (0, $62d8ded9296f3872$export$cfa2225e87938781)(targetElement);
      }
    }
  }
}
function $6a7db85432448f7f$export$60278871457622de(event) {
  if (event.mozInputSource === 0 && event.isTrusted)
    return true;
  if ((0, $c87311424ea30a05$export$a11b0059900ceec8)() && event.pointerType)
    return event.type === "click" && event.buttons === 1;
  return event.detail === 0 && !event.pointerType;
}
function $6a7db85432448f7f$export$29bf1b5f2c56cf63(event) {
  return event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === "mouse";
}

// ../../node_modules/@react-spectrum/utils/dist/import.mjs
init_preact_min();

// ../../node_modules/@react-aria/i18n/dist/real-module.mjs
init_preact_min();

// ../../node_modules/@internationalized/string/dist/import.mjs
var $5b160d28a433310d$export$c17fa47878dc55b6 = class {
  /** Returns a localized string for the given key and locale. */
  getStringForLocale(key, locale) {
    let strings = this.strings[locale];
    if (!strings) {
      strings = $5b160d28a433310d$var$getStringsForLocale(locale, this.strings, this.defaultLocale);
      this.strings[locale] = strings;
    }
    let string = strings[key];
    if (!string)
      throw new Error(`Could not find intl message ${key} in ${locale} locale`);
    return string;
  }
  constructor(messages, defaultLocale = "en-US") {
    this.strings = {
      ...messages
    };
    this.defaultLocale = defaultLocale;
  }
};
function $5b160d28a433310d$var$getStringsForLocale(locale, strings, defaultLocale = "en-US") {
  if (strings[locale])
    return strings[locale];
  let language = $5b160d28a433310d$var$getLanguage(locale);
  if (strings[language])
    return strings[language];
  for (let key in strings) {
    if (key.startsWith(language + "-"))
      return strings[key];
  }
  return strings[defaultLocale];
}
function $5b160d28a433310d$var$getLanguage(locale) {
  if (Intl.Locale)
    return new Intl.Locale(locale).language;
  return locale.split("-")[0];
}
var $6db58dc88e78b024$var$pluralRulesCache = /* @__PURE__ */ new Map();
var $6db58dc88e78b024$var$numberFormatCache = /* @__PURE__ */ new Map();
var $6db58dc88e78b024$export$2f817fcdc4b89ae0 = class {
  /** Formats a localized string for the given key with the provided variables. */
  format(key, variables) {
    let message = this.strings.getStringForLocale(key, this.locale);
    return typeof message === "function" ? message(variables, this) : message;
  }
  plural(count, options, type = "cardinal") {
    let opt = options["=" + count];
    if (opt)
      return typeof opt === "function" ? opt() : opt;
    let key = this.locale + ":" + type;
    let pluralRules = $6db58dc88e78b024$var$pluralRulesCache.get(key);
    if (!pluralRules) {
      pluralRules = new Intl.PluralRules(this.locale, {
        type
      });
      $6db58dc88e78b024$var$pluralRulesCache.set(key, pluralRules);
    }
    let selected = pluralRules.select(count);
    opt = options[selected] || options.other;
    return typeof opt === "function" ? opt() : opt;
  }
  number(value) {
    let numberFormat = $6db58dc88e78b024$var$numberFormatCache.get(this.locale);
    if (!numberFormat) {
      numberFormat = new Intl.NumberFormat(this.locale);
      $6db58dc88e78b024$var$numberFormatCache.set(this.locale, numberFormat);
    }
    return numberFormat.format(value);
  }
  select(options, value) {
    let opt = options[value] || options.other;
    return typeof opt === "function" ? opt() : opt;
  }
  constructor(locale, strings) {
    this.locale = locale;
    this.strings = strings;
  }
};

// ../../node_modules/@internationalized/number/dist/import.mjs
var $488c6ddbf4ef74c2$var$formatterCache = /* @__PURE__ */ new Map();
var $488c6ddbf4ef74c2$var$supportsSignDisplay = false;
try {
  $488c6ddbf4ef74c2$var$supportsSignDisplay = new Intl.NumberFormat("de-DE", {
    signDisplay: "exceptZero"
  }).resolvedOptions().signDisplay === "exceptZero";
} catch (e) {
}
var $488c6ddbf4ef74c2$var$supportsUnit = false;
try {
  $488c6ddbf4ef74c2$var$supportsUnit = new Intl.NumberFormat("de-DE", {
    style: "unit",
    unit: "degree"
  }).resolvedOptions().style === "unit";
} catch (e) {
}
var $488c6ddbf4ef74c2$var$UNITS = {
  degree: {
    narrow: {
      default: "\xB0",
      "ja-JP": " \u5EA6",
      "zh-TW": "\u5EA6",
      "sl-SI": " \xB0"
    }
  }
};
var $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5 = class {
  /** Formats a number value as a string, according to the locale and options provided to the constructor. */
  format(value) {
    let res = "";
    if (!$488c6ddbf4ef74c2$var$supportsSignDisplay && this.options.signDisplay != null)
      res = $488c6ddbf4ef74c2$export$711b50b3c525e0f2(this.numberFormatter, this.options.signDisplay, value);
    else
      res = this.numberFormatter.format(value);
    if (this.options.style === "unit" && !$488c6ddbf4ef74c2$var$supportsUnit) {
      var _UNITS_unit;
      let { unit, unitDisplay = "short", locale } = this.resolvedOptions();
      let values = (_UNITS_unit = $488c6ddbf4ef74c2$var$UNITS[unit]) === null || _UNITS_unit === void 0 ? void 0 : _UNITS_unit[unitDisplay];
      res += values[locale] || values.default;
    }
    return res;
  }
  /** Formats a number to an array of parts such as separators, digits, punctuation, and more. */
  formatToParts(value) {
    return this.numberFormatter.formatToParts(value);
  }
  /** Formats a number range as a string. */
  formatRange(start, end) {
    if (typeof this.numberFormatter.formatRange === "function")
      return this.numberFormatter.formatRange(start, end);
    if (end < start)
      throw new RangeError("End date must be >= start date");
    return `${this.format(start)} \u2013 ${this.format(end)}`;
  }
  /** Formats a number range as an array of parts. */
  formatRangeToParts(start, end) {
    if (typeof this.numberFormatter.formatRangeToParts === "function")
      return this.numberFormatter.formatRangeToParts(start, end);
    if (end < start)
      throw new RangeError("End date must be >= start date");
    let startParts = this.numberFormatter.formatToParts(start);
    let endParts = this.numberFormatter.formatToParts(end);
    return [
      ...startParts.map((p) => ({
        ...p,
        source: "startRange"
      })),
      {
        type: "literal",
        value: " \u2013 ",
        source: "shared"
      },
      ...endParts.map((p) => ({
        ...p,
        source: "endRange"
      }))
    ];
  }
  /** Returns the resolved formatting options based on the values passed to the constructor. */
  resolvedOptions() {
    let options = this.numberFormatter.resolvedOptions();
    if (!$488c6ddbf4ef74c2$var$supportsSignDisplay && this.options.signDisplay != null)
      options = {
        ...options,
        signDisplay: this.options.signDisplay
      };
    if (!$488c6ddbf4ef74c2$var$supportsUnit && this.options.style === "unit")
      options = {
        ...options,
        style: "unit",
        unit: this.options.unit,
        unitDisplay: this.options.unitDisplay
      };
    return options;
  }
  constructor(locale, options = {}) {
    this.numberFormatter = $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale, options);
    this.options = options;
  }
};
function $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale, options = {}) {
  let { numberingSystem } = options;
  if (numberingSystem && locale.indexOf("-u-nu-") === -1)
    locale = `${locale}-u-nu-${numberingSystem}`;
  if (options.style === "unit" && !$488c6ddbf4ef74c2$var$supportsUnit) {
    var _UNITS_unit;
    let { unit, unitDisplay = "short" } = options;
    if (!unit)
      throw new Error('unit option must be provided with style: "unit"');
    if (!((_UNITS_unit = $488c6ddbf4ef74c2$var$UNITS[unit]) === null || _UNITS_unit === void 0 ? void 0 : _UNITS_unit[unitDisplay]))
      throw new Error(`Unsupported unit ${unit} with unitDisplay = ${unitDisplay}`);
    options = {
      ...options,
      style: "decimal"
    };
  }
  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : "");
  if ($488c6ddbf4ef74c2$var$formatterCache.has(cacheKey))
    return $488c6ddbf4ef74c2$var$formatterCache.get(cacheKey);
  let numberFormatter = new Intl.NumberFormat(locale, options);
  $488c6ddbf4ef74c2$var$formatterCache.set(cacheKey, numberFormatter);
  return numberFormatter;
}
function $488c6ddbf4ef74c2$export$711b50b3c525e0f2(numberFormat, signDisplay, num) {
  if (signDisplay === "auto")
    return numberFormat.format(num);
  else if (signDisplay === "never")
    return numberFormat.format(Math.abs(num));
  else {
    let needsPositiveSign = false;
    if (signDisplay === "always")
      needsPositiveSign = num > 0 || Object.is(num, 0);
    else if (signDisplay === "exceptZero") {
      if (Object.is(num, -0) || Object.is(num, 0))
        num = Math.abs(num);
      else
        needsPositiveSign = num > 0;
    }
    if (needsPositiveSign) {
      let negative = numberFormat.format(-num);
      let noSign = numberFormat.format(num);
      let minus = negative.replace(noSign, "").replace(/\u200e|\u061C/, "");
      if ([
        ...minus
      ].length !== 1)
        console.warn("@react-aria/i18n polyfill for NumberFormat signDisplay: Unsupported case");
      let positive = negative.replace(noSign, "!!!").replace(minus, "+").replace("!!!", noSign);
      return positive;
    } else
      return numberFormat.format(num);
  }
}
var $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX = new RegExp("^.*\\(.*\\).*$");

// ../../node_modules/@react-aria/i18n/dist/real-module.mjs
var $148a7a147e38ea7f$var$RTL_SCRIPTS = /* @__PURE__ */ new Set([
  "Arab",
  "Syrc",
  "Samr",
  "Mand",
  "Thaa",
  "Mend",
  "Nkoo",
  "Adlm",
  "Rohg",
  "Hebr"
]);
var $148a7a147e38ea7f$var$RTL_LANGS = /* @__PURE__ */ new Set([
  "ae",
  "ar",
  "arc",
  "bcc",
  "bqi",
  "ckb",
  "dv",
  "fa",
  "glk",
  "he",
  "ku",
  "mzn",
  "nqo",
  "pnb",
  "ps",
  "sd",
  "ug",
  "ur",
  "yi"
]);
function $148a7a147e38ea7f$export$702d680b21cbd764(locale) {
  if (Intl.Locale) {
    let script = new Intl.Locale(locale).maximize().script;
    return $148a7a147e38ea7f$var$RTL_SCRIPTS.has(script);
  }
  let lang = locale.split("-")[0];
  return $148a7a147e38ea7f$var$RTL_LANGS.has(lang);
}
function $1e5a04cdaf7d1af8$export$f09106e7c6677ec5() {
  let locale = typeof navigator !== "undefined" && (navigator.language || navigator.userLanguage) || "en-US";
  try {
    Intl.DateTimeFormat.supportedLocalesOf([
      locale
    ]);
  } catch (_err) {
    locale = "en-US";
  }
  return {
    locale,
    direction: (0, $148a7a147e38ea7f$export$702d680b21cbd764)(locale) ? "rtl" : "ltr"
  };
}
var $1e5a04cdaf7d1af8$var$currentLocale = $1e5a04cdaf7d1af8$export$f09106e7c6677ec5();
var $1e5a04cdaf7d1af8$var$listeners = /* @__PURE__ */ new Set();
function $1e5a04cdaf7d1af8$var$updateLocale() {
  $1e5a04cdaf7d1af8$var$currentLocale = $1e5a04cdaf7d1af8$export$f09106e7c6677ec5();
  for (let listener of $1e5a04cdaf7d1af8$var$listeners)
    listener($1e5a04cdaf7d1af8$var$currentLocale);
}
function $1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a() {
  let isSSR = (0, $704cf1d3b684cc5c$export$535bd6ca7f90a273)();
  let [defaultLocale, setDefaultLocale] = (0, z)($1e5a04cdaf7d1af8$var$currentLocale);
  (0, K)(() => {
    if ($1e5a04cdaf7d1af8$var$listeners.size === 0)
      window.addEventListener("languagechange", $1e5a04cdaf7d1af8$var$updateLocale);
    $1e5a04cdaf7d1af8$var$listeners.add(setDefaultLocale);
    return () => {
      $1e5a04cdaf7d1af8$var$listeners.delete(setDefaultLocale);
      if ($1e5a04cdaf7d1af8$var$listeners.size === 0)
        window.removeEventListener("languagechange", $1e5a04cdaf7d1af8$var$updateLocale);
    };
  }, []);
  if (isSSR)
    return {
      locale: "en-US",
      direction: "ltr"
    };
  return defaultLocale;
}
var $18f2051aff69b9bf$var$I18nContext = /* @__PURE__ */ (0, yn).createContext(null);
function $18f2051aff69b9bf$export$a54013f0d02a8f82(props) {
  let { locale, children } = props;
  let defaultLocale = (0, $1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a)();
  let value = locale ? {
    locale,
    direction: (0, $148a7a147e38ea7f$export$702d680b21cbd764)(locale) ? "rtl" : "ltr"
  } : defaultLocale;
  return /* @__PURE__ */ (0, yn).createElement($18f2051aff69b9bf$var$I18nContext.Provider, {
    value
  }, children);
}
function $18f2051aff69b9bf$export$43bb16f9c6d9e3f7() {
  let defaultLocale = (0, $1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a)();
  let context = (0, ce)($18f2051aff69b9bf$var$I18nContext);
  return context || defaultLocale;
}
var $fca6afa0e843324b$var$cache = /* @__PURE__ */ new WeakMap();
function $fca6afa0e843324b$var$getCachedDictionary(strings) {
  let dictionary = $fca6afa0e843324b$var$cache.get(strings);
  if (!dictionary) {
    dictionary = new (0, $5b160d28a433310d$export$c17fa47878dc55b6)(strings);
    $fca6afa0e843324b$var$cache.set(strings, dictionary);
  }
  return dictionary;
}
function $fca6afa0e843324b$export$f12b703ca79dfbb1(strings) {
  let { locale } = (0, $18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  let dictionary = (0, j)(() => $fca6afa0e843324b$var$getCachedDictionary(strings), [
    strings
  ]);
  return (0, j)(() => new (0, $6db58dc88e78b024$export$2f817fcdc4b89ae0)(locale, dictionary), [
    locale,
    dictionary
  ]);
}
function $a916eb452884faea$export$b7a616150fdb9f44(options = {}) {
  let { locale } = (0, $18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  return (0, j)(() => new (0, $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5)(locale, options), [
    locale,
    options
  ]);
}
var $325a3faab7a68acd$var$cache = /* @__PURE__ */ new Map();
function $325a3faab7a68acd$export$a16aca283550c30d(options) {
  let { locale } = (0, $18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : "");
  if ($325a3faab7a68acd$var$cache.has(cacheKey))
    return $325a3faab7a68acd$var$cache.get(cacheKey);
  let formatter = new Intl.Collator(locale, options);
  $325a3faab7a68acd$var$cache.set(cacheKey, formatter);
  return formatter;
}

// ../../node_modules/@react-spectrum/utils/dist/import.mjs
var $fd933927dbac1f15$export$46d604dce8bf8724 = false;
function $fd933927dbac1f15$export$ce4ab0c55987d1ff(cssModule, ...values) {
  let classes = [];
  for (let value of values) {
    if (typeof value === "object" && value) {
      let mapped = {};
      for (let key in value) {
        if (cssModule[key])
          mapped[cssModule[key]] = value[key];
        if ($fd933927dbac1f15$export$46d604dce8bf8724 || !cssModule[key])
          mapped[key] = value[key];
      }
      classes.push(mapped);
    } else if (typeof value === "string") {
      if (cssModule[value])
        classes.push(cssModule[value]);
      if ($fd933927dbac1f15$export$46d604dce8bf8724 || !cssModule[value])
        classes.push(value);
    } else
      classes.push(value);
  }
  return (0, clsx_m_default)(...classes);
}
function $3df547e395c4522f$export$32d5543ab307c01(query) {
  let supportsMatchMedia = typeof window !== "undefined" && typeof window.matchMedia === "function";
  let [matches, setMatches] = (0, z)(() => supportsMatchMedia ? window.matchMedia(query).matches : false);
  (0, K)(() => {
    if (!supportsMatchMedia)
      return;
    let mq = window.matchMedia(query);
    let onChange = (evt) => {
      setMatches(evt.matches);
    };
    mq.addListener(onChange);
    return () => {
      mq.removeListener(onChange);
    };
  }, [
    supportsMatchMedia,
    query
  ]);
  let isSSR = (0, $704cf1d3b684cc5c$export$535bd6ca7f90a273)();
  return isSSR ? false : matches;
}
function $98e5a8ae0e6415af$export$a5795cc979dfae80(ref) {
  return {
    UNSAFE_getDOMNode() {
      return ref.current;
    }
  };
}
function $98e5a8ae0e6415af$export$79d69eee6ae4b329(domRef, focusableRef = domRef) {
  return {
    ...$98e5a8ae0e6415af$export$a5795cc979dfae80(domRef),
    focus() {
      if (focusableRef.current)
        focusableRef.current.focus();
    }
  };
}
function $98e5a8ae0e6415af$export$c2c55ef9111cafd8(ref) {
  let domRef = (0, ie)(null);
  (0, le)(ref, () => $98e5a8ae0e6415af$export$a5795cc979dfae80(domRef));
  return domRef;
}
function $98e5a8ae0e6415af$export$96a734597687c040(ref, focusableRef) {
  let domRef = (0, ie)(null);
  (0, le)(ref, () => $98e5a8ae0e6415af$export$79d69eee6ae4b329(domRef, focusableRef));
  return domRef;
}
function $98e5a8ae0e6415af$export$c7e28c72a4823176(ref) {
  return {
    get current() {
      return ref.current && ref.current.UNSAFE_getDOMNode();
    }
  };
}
function $98e5a8ae0e6415af$export$1d5cc31d9d8df817(ref) {
  return (0, j)(() => $98e5a8ae0e6415af$export$c7e28c72a4823176(ref), [
    ref
  ]);
}
var $1051245f87c5981d$var$Context = /* @__PURE__ */ (0, yn).createContext(null);
$1051245f87c5981d$var$Context.displayName = "BreakpointContext";
function $1051245f87c5981d$export$8214320346cf5104(props) {
  let { children, matchedBreakpoints } = props;
  return /* @__PURE__ */ (0, yn).createElement($1051245f87c5981d$var$Context.Provider, {
    value: {
      matchedBreakpoints
    }
  }, children);
}
function $1051245f87c5981d$export$140ae7baa51cca23(breakpoints) {
  let entries = Object.entries(breakpoints).sort(([, valueA], [, valueB]) => valueB - valueA);
  let breakpointQueries = entries.map(([, value]) => `(min-width: ${value}px)`);
  let supportsMatchMedia = typeof window !== "undefined" && typeof window.matchMedia === "function";
  let getBreakpointHandler = () => {
    let matched = [];
    for (let i2 in breakpointQueries) {
      let query = breakpointQueries[i2];
      if (window.matchMedia(query).matches)
        matched.push(entries[i2][0]);
    }
    matched.push("base");
    return matched;
  };
  let [breakpoint, setBreakpoint] = (0, z)(() => supportsMatchMedia ? getBreakpointHandler() : [
    "base"
  ]);
  (0, K)(() => {
    if (!supportsMatchMedia)
      return;
    let onResize = () => {
      const breakpointHandler = getBreakpointHandler();
      setBreakpoint((previousBreakpointHandler) => {
        if (previousBreakpointHandler.length !== breakpointHandler.length || previousBreakpointHandler.some((breakpoint2, idx) => breakpoint2 !== breakpointHandler[idx]))
          return [
            ...breakpointHandler
          ];
        return previousBreakpointHandler;
      });
    };
    window.addEventListener("resize", onResize);
    return () => {
      window.removeEventListener("resize", onResize);
    };
  }, [
    supportsMatchMedia
  ]);
  let isSSR = (0, $704cf1d3b684cc5c$export$535bd6ca7f90a273)();
  return isSSR ? [
    "base"
  ] : breakpoint;
}
function $1051245f87c5981d$export$199d6754bdf4e1e3() {
  return (0, ce)($1051245f87c5981d$var$Context);
}
var $380ed8f3903c3931$export$fe9c6e915565b4e8 = {
  margin: [
    "margin",
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  marginStart: [
    $380ed8f3903c3931$var$rtl("marginLeft", "marginRight"),
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  marginEnd: [
    $380ed8f3903c3931$var$rtl("marginRight", "marginLeft"),
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  // marginLeft: ['marginLeft', dimensionValue],
  // marginRight: ['marginRight', dimensionValue],
  marginTop: [
    "marginTop",
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  marginBottom: [
    "marginBottom",
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  marginX: [
    [
      "marginLeft",
      "marginRight"
    ],
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  marginY: [
    [
      "marginTop",
      "marginBottom"
    ],
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  width: [
    "width",
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  height: [
    "height",
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  minWidth: [
    "minWidth",
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  minHeight: [
    "minHeight",
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  maxWidth: [
    "maxWidth",
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  maxHeight: [
    "maxHeight",
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  isHidden: [
    "display",
    $380ed8f3903c3931$var$hiddenValue
  ],
  alignSelf: [
    "alignSelf",
    $380ed8f3903c3931$export$46b6c81d11d2c30a
  ],
  justifySelf: [
    "justifySelf",
    $380ed8f3903c3931$export$46b6c81d11d2c30a
  ],
  position: [
    "position",
    $380ed8f3903c3931$var$anyValue
  ],
  zIndex: [
    "zIndex",
    $380ed8f3903c3931$var$anyValue
  ],
  top: [
    "top",
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  bottom: [
    "bottom",
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  start: [
    $380ed8f3903c3931$var$rtl("left", "right"),
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  end: [
    $380ed8f3903c3931$var$rtl("right", "left"),
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  left: [
    "left",
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  right: [
    "right",
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  order: [
    "order",
    $380ed8f3903c3931$var$anyValue
  ],
  flex: [
    "flex",
    $380ed8f3903c3931$var$flexValue
  ],
  flexGrow: [
    "flexGrow",
    $380ed8f3903c3931$export$46b6c81d11d2c30a
  ],
  flexShrink: [
    "flexShrink",
    $380ed8f3903c3931$export$46b6c81d11d2c30a
  ],
  flexBasis: [
    "flexBasis",
    $380ed8f3903c3931$export$46b6c81d11d2c30a
  ],
  gridArea: [
    "gridArea",
    $380ed8f3903c3931$export$46b6c81d11d2c30a
  ],
  gridColumn: [
    "gridColumn",
    $380ed8f3903c3931$export$46b6c81d11d2c30a
  ],
  gridColumnEnd: [
    "gridColumnEnd",
    $380ed8f3903c3931$export$46b6c81d11d2c30a
  ],
  gridColumnStart: [
    "gridColumnStart",
    $380ed8f3903c3931$export$46b6c81d11d2c30a
  ],
  gridRow: [
    "gridRow",
    $380ed8f3903c3931$export$46b6c81d11d2c30a
  ],
  gridRowEnd: [
    "gridRowEnd",
    $380ed8f3903c3931$export$46b6c81d11d2c30a
  ],
  gridRowStart: [
    "gridRowStart",
    $380ed8f3903c3931$export$46b6c81d11d2c30a
  ]
};
var $380ed8f3903c3931$export$e0705d1a55f297c = {
  ...$380ed8f3903c3931$export$fe9c6e915565b4e8,
  backgroundColor: [
    "backgroundColor",
    $380ed8f3903c3931$var$backgroundColorValue
  ],
  borderWidth: [
    "borderWidth",
    $380ed8f3903c3931$var$borderSizeValue
  ],
  borderStartWidth: [
    $380ed8f3903c3931$var$rtl("borderLeftWidth", "borderRightWidth"),
    $380ed8f3903c3931$var$borderSizeValue
  ],
  borderEndWidth: [
    $380ed8f3903c3931$var$rtl("borderRightWidth", "borderLeftWidth"),
    $380ed8f3903c3931$var$borderSizeValue
  ],
  borderLeftWidth: [
    "borderLeftWidth",
    $380ed8f3903c3931$var$borderSizeValue
  ],
  borderRightWidth: [
    "borderRightWidth",
    $380ed8f3903c3931$var$borderSizeValue
  ],
  borderTopWidth: [
    "borderTopWidth",
    $380ed8f3903c3931$var$borderSizeValue
  ],
  borderBottomWidth: [
    "borderBottomWidth",
    $380ed8f3903c3931$var$borderSizeValue
  ],
  borderXWidth: [
    [
      "borderLeftWidth",
      "borderRightWidth"
    ],
    $380ed8f3903c3931$var$borderSizeValue
  ],
  borderYWidth: [
    [
      "borderTopWidth",
      "borderBottomWidth"
    ],
    $380ed8f3903c3931$var$borderSizeValue
  ],
  borderColor: [
    "borderColor",
    $380ed8f3903c3931$var$borderColorValue
  ],
  borderStartColor: [
    $380ed8f3903c3931$var$rtl("borderLeftColor", "borderRightColor"),
    $380ed8f3903c3931$var$borderColorValue
  ],
  borderEndColor: [
    $380ed8f3903c3931$var$rtl("borderRightColor", "borderLeftColor"),
    $380ed8f3903c3931$var$borderColorValue
  ],
  borderLeftColor: [
    "borderLeftColor",
    $380ed8f3903c3931$var$borderColorValue
  ],
  borderRightColor: [
    "borderRightColor",
    $380ed8f3903c3931$var$borderColorValue
  ],
  borderTopColor: [
    "borderTopColor",
    $380ed8f3903c3931$var$borderColorValue
  ],
  borderBottomColor: [
    "borderBottomColor",
    $380ed8f3903c3931$var$borderColorValue
  ],
  borderXColor: [
    [
      "borderLeftColor",
      "borderRightColor"
    ],
    $380ed8f3903c3931$var$borderColorValue
  ],
  borderYColor: [
    [
      "borderTopColor",
      "borderBottomColor"
    ],
    $380ed8f3903c3931$var$borderColorValue
  ],
  borderRadius: [
    "borderRadius",
    $380ed8f3903c3931$var$borderRadiusValue
  ],
  borderTopStartRadius: [
    $380ed8f3903c3931$var$rtl("borderTopLeftRadius", "borderTopRightRadius"),
    $380ed8f3903c3931$var$borderRadiusValue
  ],
  borderTopEndRadius: [
    $380ed8f3903c3931$var$rtl("borderTopRightRadius", "borderTopLeftRadius"),
    $380ed8f3903c3931$var$borderRadiusValue
  ],
  borderBottomStartRadius: [
    $380ed8f3903c3931$var$rtl("borderBottomLeftRadius", "borderBottomRightRadius"),
    $380ed8f3903c3931$var$borderRadiusValue
  ],
  borderBottomEndRadius: [
    $380ed8f3903c3931$var$rtl("borderBottomRightRadius", "borderBottomLeftRadius"),
    $380ed8f3903c3931$var$borderRadiusValue
  ],
  borderTopLeftRadius: [
    "borderTopLeftRadius",
    $380ed8f3903c3931$var$borderRadiusValue
  ],
  borderTopRightRadius: [
    "borderTopRightRadius",
    $380ed8f3903c3931$var$borderRadiusValue
  ],
  borderBottomLeftRadius: [
    "borderBottomLeftRadius",
    $380ed8f3903c3931$var$borderRadiusValue
  ],
  borderBottomRightRadius: [
    "borderBottomRightRadius",
    $380ed8f3903c3931$var$borderRadiusValue
  ],
  padding: [
    "padding",
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  paddingStart: [
    $380ed8f3903c3931$var$rtl("paddingLeft", "paddingRight"),
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  paddingEnd: [
    $380ed8f3903c3931$var$rtl("paddingRight", "paddingLeft"),
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  paddingLeft: [
    "paddingLeft",
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  paddingRight: [
    "paddingRight",
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  paddingTop: [
    "paddingTop",
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  paddingBottom: [
    "paddingBottom",
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  paddingX: [
    [
      "paddingLeft",
      "paddingRight"
    ],
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  paddingY: [
    [
      "paddingTop",
      "paddingBottom"
    ],
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  overflow: [
    "overflow",
    $380ed8f3903c3931$export$46b6c81d11d2c30a
  ]
};
var $380ed8f3903c3931$var$borderStyleProps = {
  borderWidth: "borderStyle",
  borderLeftWidth: "borderLeftStyle",
  borderRightWidth: "borderRightStyle",
  borderTopWidth: "borderTopStyle",
  borderBottomWidth: "borderBottomStyle"
};
function $380ed8f3903c3931$var$rtl(ltr, rtl) {
  return (direction) => direction === "rtl" ? rtl : ltr;
}
var $380ed8f3903c3931$var$UNIT_RE = /(%|px|em|rem|vw|vh|auto|cm|mm|in|pt|pc|ex|ch|rem|vmin|vmax|fr)$/;
var $380ed8f3903c3931$var$FUNC_RE = /^\s*\w+\(/;
var $380ed8f3903c3931$var$SPECTRUM_VARIABLE_RE = /(static-)?size-\d+|single-line-(height|width)/g;
function $380ed8f3903c3931$export$abc24f5b99744ea6(value) {
  if (typeof value === "number")
    return value + "px";
  if ($380ed8f3903c3931$var$UNIT_RE.test(value))
    return value;
  if ($380ed8f3903c3931$var$FUNC_RE.test(value))
    return value.replace($380ed8f3903c3931$var$SPECTRUM_VARIABLE_RE, "var(--spectrum-global-dimension-$&, var(--spectrum-alias-$&))");
  return `var(--spectrum-global-dimension-${value}, var(--spectrum-alias-${value}))`;
}
function $380ed8f3903c3931$export$f348bec194f2e6b5(value, matchedBreakpoints) {
  value = $380ed8f3903c3931$export$52dbfdbe1b2c3541(value, matchedBreakpoints);
  return $380ed8f3903c3931$export$abc24f5b99744ea6(value);
}
function $380ed8f3903c3931$var$colorValue(value, type = "default", version = 5) {
  if (version > 5)
    return `var(--spectrum-${value}, var(--spectrum-semantic-${value}-color-${type}))`;
  return `var(--spectrum-legacy-color-${value}, var(--spectrum-global-color-${value}, var(--spectrum-semantic-${value}-color-${type})))`;
}
function $380ed8f3903c3931$var$backgroundColorValue(value, version = 5) {
  return `var(--spectrum-alias-background-color-${value}, ${$380ed8f3903c3931$var$colorValue(value, "background", version)})`;
}
function $380ed8f3903c3931$var$borderColorValue(value, version = 5) {
  if (value === "default")
    return "var(--spectrum-alias-border-color)";
  return `var(--spectrum-alias-border-color-${value}, ${$380ed8f3903c3931$var$colorValue(value, "border", version)})`;
}
function $380ed8f3903c3931$var$borderSizeValue(value) {
  return `var(--spectrum-alias-border-size-${value})`;
}
function $380ed8f3903c3931$var$borderRadiusValue(value) {
  return `var(--spectrum-alias-border-radius-${value})`;
}
function $380ed8f3903c3931$var$hiddenValue(value) {
  return value ? "none" : void 0;
}
function $380ed8f3903c3931$var$anyValue(value) {
  return value;
}
function $380ed8f3903c3931$var$flexValue(value) {
  if (typeof value === "boolean")
    return value ? "1" : void 0;
  return "" + value;
}
function $380ed8f3903c3931$export$f3c39bb9534218d0(props, handlers, direction, matchedBreakpoints) {
  let style = {};
  for (let key in props) {
    let styleProp = handlers[key];
    if (!styleProp || props[key] == null)
      continue;
    let [name, convert] = styleProp;
    if (typeof name === "function")
      name = name(direction);
    let prop = $380ed8f3903c3931$export$52dbfdbe1b2c3541(props[key], matchedBreakpoints);
    let value = convert(prop, props.colorVersion);
    if (Array.isArray(name))
      for (let k of name)
        style[k] = value;
    else
      style[name] = value;
  }
  for (let prop in $380ed8f3903c3931$var$borderStyleProps)
    if (style[prop]) {
      style[$380ed8f3903c3931$var$borderStyleProps[prop]] = "solid";
      style.boxSizing = "border-box";
    }
  return style;
}
function $380ed8f3903c3931$export$b8e6fb9d2dff3f41(props, handlers = $380ed8f3903c3931$export$fe9c6e915565b4e8, options = {}) {
  let { UNSAFE_className, UNSAFE_style, ...otherProps } = props;
  let breakpointProvider = (0, $1051245f87c5981d$export$199d6754bdf4e1e3)();
  let { direction } = (0, $18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  let { matchedBreakpoints = (breakpointProvider === null || breakpointProvider === void 0 ? void 0 : breakpointProvider.matchedBreakpoints) || [
    "base"
  ] } = options;
  let styles = $380ed8f3903c3931$export$f3c39bb9534218d0(props, handlers, direction, matchedBreakpoints);
  let style = {
    ...UNSAFE_style,
    ...styles
  };
  if (otherProps.className)
    console.warn("The className prop is unsafe and is unsupported in React Spectrum v3. Please use style props with Spectrum variables, or UNSAFE_className if you absolutely must do something custom. Note that this may break in future versions due to DOM structure changes.");
  if (otherProps.style)
    console.warn("The style prop is unsafe and is unsupported in React Spectrum v3. Please use style props with Spectrum variables, or UNSAFE_style if you absolutely must do something custom. Note that this may break in future versions due to DOM structure changes.");
  let styleProps = {
    style,
    className: UNSAFE_className
  };
  if ($380ed8f3903c3931$export$52dbfdbe1b2c3541(props.isHidden, matchedBreakpoints))
    styleProps.hidden = true;
  return {
    styleProps
  };
}
function $380ed8f3903c3931$export$46b6c81d11d2c30a(value) {
  return value;
}
function $380ed8f3903c3931$export$52dbfdbe1b2c3541(prop, matchedBreakpoints) {
  if (prop && typeof prop === "object" && !Array.isArray(prop)) {
    for (let i2 = 0; i2 < matchedBreakpoints.length; i2++) {
      let breakpoint = matchedBreakpoints[i2];
      if (prop[breakpoint] != null)
        return prop[breakpoint];
    }
    return prop.base;
  }
  return prop;
}
var $59d09bcc83651bf9$var$SlotContext = /* @__PURE__ */ (0, yn).createContext(null);
function $59d09bcc83651bf9$export$1e5c9e6e4e15efe3(props, defaultSlot) {
  let slot = props.slot || defaultSlot;
  let { [slot]: slotProps = {} } = (0, ce)($59d09bcc83651bf9$var$SlotContext) || {};
  return (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(props, (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(slotProps, {
    id: props.id
  }));
}
function $59d09bcc83651bf9$export$8107b24b91795686(props) {
  let parentSlots = (0, ce)($59d09bcc83651bf9$var$SlotContext) || {};
  let { slots = {}, children } = props;
  let value = (0, j)(() => Object.keys(parentSlots).concat(Object.keys(slots)).reduce((o, p) => ({
    ...o,
    [p]: (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(parentSlots[p] || {}, slots[p] || {})
  }), {}), [
    parentSlots,
    slots
  ]);
  return /* @__PURE__ */ (0, yn).createElement($59d09bcc83651bf9$var$SlotContext.Provider, {
    value
  }, children);
}
function $59d09bcc83651bf9$export$ceb145244332b7a2(props) {
  let { children, ...otherProps } = props;
  let content = children;
  if ((0, yn).Children.toArray(children).length <= 1) {
    if (typeof children === "function")
      content = /* @__PURE__ */ (0, yn).cloneElement((0, yn).Children.only(children), otherProps);
  }
  return /* @__PURE__ */ (0, yn).createElement($59d09bcc83651bf9$var$SlotContext.Provider, {
    value: {}
  }, content);
}
function $54cda195bd4173fb$export$e52e2242b6d0f1d4(query, ref) {
  let [hasChild, setHasChild] = (0, z)(true);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    setHasChild(!!(ref.current && ref.current.querySelector(query)));
  }, [
    setHasChild,
    query,
    ref
  ]);
  return hasChild;
}
var $fdbe26a36ce1c672$var$MOBILE_SCREEN_WIDTH = 700;
function $fdbe26a36ce1c672$export$736bf165441b18c7() {
  let isSSR = (0, $704cf1d3b684cc5c$export$535bd6ca7f90a273)();
  if (isSSR || typeof window === "undefined")
    return false;
  return window.screen.width <= $fdbe26a36ce1c672$var$MOBILE_SCREEN_WIDTH;
}

// ../../node_modules/@react-aria/focus/dist/import.mjs
init_preact_min();

// ../../node_modules/@react-aria/interactions/dist/import.mjs
init_preact_min();
var $14c0b72509d70225$var$state = "default";
var $14c0b72509d70225$var$savedUserSelect = "";
var $14c0b72509d70225$var$modifiedElementMap = /* @__PURE__ */ new WeakMap();
function $14c0b72509d70225$export$16a4697467175487(target) {
  if ((0, $c87311424ea30a05$export$fedb369cb70207f1)()) {
    if ($14c0b72509d70225$var$state === "default") {
      $14c0b72509d70225$var$savedUserSelect = document.documentElement.style.webkitUserSelect;
      document.documentElement.style.webkitUserSelect = "none";
    }
    $14c0b72509d70225$var$state = "disabled";
  } else if (target instanceof HTMLElement || target instanceof SVGElement) {
    $14c0b72509d70225$var$modifiedElementMap.set(target, target.style.userSelect);
    target.style.userSelect = "none";
  }
}
function $14c0b72509d70225$export$b0d6fa1ab32e3295(target) {
  if ((0, $c87311424ea30a05$export$fedb369cb70207f1)()) {
    if ($14c0b72509d70225$var$state !== "disabled")
      return;
    $14c0b72509d70225$var$state = "restoring";
    setTimeout(() => {
      (0, $bbed8b41f857bcc0$export$24490316f764c430)(() => {
        if ($14c0b72509d70225$var$state === "restoring") {
          if (document.documentElement.style.webkitUserSelect === "none")
            document.documentElement.style.webkitUserSelect = $14c0b72509d70225$var$savedUserSelect || "";
          $14c0b72509d70225$var$savedUserSelect = "";
          $14c0b72509d70225$var$state = "default";
        }
      });
    }, 300);
  } else if (target instanceof HTMLElement || target instanceof SVGElement) {
    if (target && $14c0b72509d70225$var$modifiedElementMap.has(target)) {
      let targetOldUserSelect = $14c0b72509d70225$var$modifiedElementMap.get(target);
      if (target.style.userSelect === "none")
        target.style.userSelect = targetOldUserSelect;
      if (target.getAttribute("style") === "")
        target.removeAttribute("style");
      $14c0b72509d70225$var$modifiedElementMap.delete(target);
    }
  }
}
var $ae1eeba8b9eafd08$export$5165eccb35aaadb5 = (0, yn).createContext(null);
$ae1eeba8b9eafd08$export$5165eccb35aaadb5.displayName = "PressResponderContext";
function $f6c31cce2adf654f$var$usePressResponderContext(props) {
  let context = (0, ce)((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5));
  if (context) {
    let { register, ...contextProps } = context;
    props = (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(contextProps, props);
    register();
  }
  (0, $e7801be82b4b2a53$export$4debdb1a3f0fa79e)(context, props.ref);
  return props;
}
function $f6c31cce2adf654f$export$45712eceda6fad21(props) {
  let {
    onPress,
    onPressChange,
    onPressStart,
    onPressEnd,
    onPressUp,
    isDisabled,
    isPressed: isPressedProp,
    preventFocusOnPress,
    shouldCancelOnPointerExit,
    allowTextSelectionOnPress,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    ref: _14,
    ...domProps
  } = $f6c31cce2adf654f$var$usePressResponderContext(props);
  let [isPressed, setPressed] = (0, z)(false);
  let ref = (0, ie)({
    isPressed: false,
    ignoreEmulatedMouseEvents: false,
    ignoreClickAfterPress: false,
    didFirePressStart: false,
    activePointerId: null,
    target: null,
    isOverTarget: false,
    pointerType: null
  });
  let { addGlobalListener, removeAllGlobalListeners } = (0, $03deb23ff14920c4$export$4eaf04e54aa8eed6)();
  let triggerPressStart = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((originalEvent, pointerType) => {
    let state = ref.current;
    if (isDisabled || state.didFirePressStart)
      return;
    if (onPressStart)
      onPressStart({
        type: "pressstart",
        pointerType,
        target: originalEvent.currentTarget,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
    if (onPressChange)
      onPressChange(true);
    state.didFirePressStart = true;
    setPressed(true);
  });
  let triggerPressEnd = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((originalEvent, pointerType, wasPressed = true) => {
    let state = ref.current;
    if (!state.didFirePressStart)
      return;
    state.ignoreClickAfterPress = true;
    state.didFirePressStart = false;
    if (onPressEnd)
      onPressEnd({
        type: "pressend",
        pointerType,
        target: originalEvent.currentTarget,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
    if (onPressChange)
      onPressChange(false);
    setPressed(false);
    if (onPress && wasPressed && !isDisabled)
      onPress({
        type: "press",
        pointerType,
        target: originalEvent.currentTarget,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
  });
  let triggerPressUp = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((originalEvent, pointerType) => {
    if (isDisabled)
      return;
    if (onPressUp)
      onPressUp({
        type: "pressup",
        pointerType,
        target: originalEvent.currentTarget,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
  });
  let cancel = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((e) => {
    let state = ref.current;
    if (state.isPressed) {
      if (state.isOverTarget)
        triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
      state.isPressed = false;
      state.isOverTarget = false;
      state.activePointerId = null;
      state.pointerType = null;
      removeAllGlobalListeners();
      if (!allowTextSelectionOnPress)
        (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);
    }
  });
  let cancelOnPointerExit = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((e) => {
    if (shouldCancelOnPointerExit)
      cancel(e);
  });
  let pressProps = (0, j)(() => {
    let state = ref.current;
    let pressProps2 = {
      onKeyDown(e) {
        if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && e.currentTarget.contains(e.target)) {
          if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key))
            e.preventDefault();
          e.stopPropagation();
          if (!state.isPressed && !e.repeat) {
            state.target = e.currentTarget;
            state.isPressed = true;
            triggerPressStart(e, "keyboard");
            addGlobalListener(document, "keyup", onKeyUp, false);
          }
        } else if (e.key === "Enter" && $f6c31cce2adf654f$var$isHTMLAnchorLink(e.currentTarget))
          e.stopPropagation();
      },
      onKeyUp(e) {
        if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && !e.repeat && e.currentTarget.contains(e.target))
          triggerPressUp($f6c31cce2adf654f$var$createEvent(state.target, e), "keyboard");
      },
      onClick(e) {
        if (e && !e.currentTarget.contains(e.target))
          return;
        if (e && e.button === 0) {
          e.stopPropagation();
          if (isDisabled)
            e.preventDefault();
          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && (state.pointerType === "virtual" || (0, $6a7db85432448f7f$export$60278871457622de)(e.nativeEvent))) {
            if (!isDisabled && !preventFocusOnPress)
              (0, $7215afc6de606d6b$export$de79e2c695e052f3)(e.currentTarget);
            triggerPressStart(e, "virtual");
            triggerPressUp(e, "virtual");
            triggerPressEnd(e, "virtual");
          }
          state.ignoreEmulatedMouseEvents = false;
          state.ignoreClickAfterPress = false;
        }
      }
    };
    let onKeyUp = (e) => {
      if (state.isPressed && $f6c31cce2adf654f$var$isValidKeyboardEvent(e, state.target)) {
        if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key))
          e.preventDefault();
        e.stopPropagation();
        state.isPressed = false;
        let target = e.target;
        triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), "keyboard", state.target.contains(target));
        removeAllGlobalListeners();
        if (state.target instanceof HTMLElement && state.target.contains(target) && ($f6c31cce2adf654f$var$isHTMLAnchorLink(state.target) || state.target.getAttribute("role") === "link"))
          state.target.click();
      }
    };
    if (typeof PointerEvent !== "undefined") {
      pressProps2.onPointerDown = (e) => {
        if (e.button !== 0 || !e.currentTarget.contains(e.target))
          return;
        if ((0, $6a7db85432448f7f$export$29bf1b5f2c56cf63)(e.nativeEvent)) {
          state.pointerType = "virtual";
          return;
        }
        if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget))
          e.preventDefault();
        state.pointerType = e.pointerType;
        e.stopPropagation();
        if (!state.isPressed) {
          state.isPressed = true;
          state.isOverTarget = true;
          state.activePointerId = e.pointerId;
          state.target = e.currentTarget;
          if (!isDisabled && !preventFocusOnPress)
            (0, $7215afc6de606d6b$export$de79e2c695e052f3)(e.currentTarget);
          if (!allowTextSelectionOnPress)
            (0, $14c0b72509d70225$export$16a4697467175487)(state.target);
          triggerPressStart(e, state.pointerType);
          addGlobalListener(document, "pointermove", onPointerMove, false);
          addGlobalListener(document, "pointerup", onPointerUp, false);
          addGlobalListener(document, "pointercancel", onPointerCancel, false);
        }
      };
      pressProps2.onMouseDown = (e) => {
        if (!e.currentTarget.contains(e.target))
          return;
        if (e.button === 0) {
          if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget))
            e.preventDefault();
          e.stopPropagation();
        }
      };
      pressProps2.onPointerUp = (e) => {
        if (!e.currentTarget.contains(e.target) || state.pointerType === "virtual")
          return;
        if (e.button === 0 && $f6c31cce2adf654f$var$isOverTarget(e, e.currentTarget))
          triggerPressUp(e, state.pointerType || e.pointerType);
      };
      let onPointerMove = (e) => {
        if (e.pointerId !== state.activePointerId)
          return;
        if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) {
          if (!state.isOverTarget) {
            state.isOverTarget = true;
            triggerPressStart($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);
          }
        } else if (state.isOverTarget) {
          state.isOverTarget = false;
          triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
          cancelOnPointerExit(e);
        }
      };
      let onPointerUp = (e) => {
        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {
          if ($f6c31cce2adf654f$var$isOverTarget(e, state.target))
            triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);
          else if (state.isOverTarget)
            triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
          state.isPressed = false;
          state.isOverTarget = false;
          state.activePointerId = null;
          state.pointerType = null;
          removeAllGlobalListeners();
          if (!allowTextSelectionOnPress)
            (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);
        }
      };
      let onPointerCancel = (e) => {
        cancel(e);
      };
      pressProps2.onDragStart = (e) => {
        if (!e.currentTarget.contains(e.target))
          return;
        cancel(e);
      };
    } else {
      pressProps2.onMouseDown = (e) => {
        if (e.button !== 0 || !e.currentTarget.contains(e.target))
          return;
        if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget))
          e.preventDefault();
        e.stopPropagation();
        if (state.ignoreEmulatedMouseEvents)
          return;
        state.isPressed = true;
        state.isOverTarget = true;
        state.target = e.currentTarget;
        state.pointerType = (0, $6a7db85432448f7f$export$60278871457622de)(e.nativeEvent) ? "virtual" : "mouse";
        if (!isDisabled && !preventFocusOnPress)
          (0, $7215afc6de606d6b$export$de79e2c695e052f3)(e.currentTarget);
        triggerPressStart(e, state.pointerType);
        addGlobalListener(document, "mouseup", onMouseUp, false);
      };
      pressProps2.onMouseEnter = (e) => {
        if (!e.currentTarget.contains(e.target))
          return;
        e.stopPropagation();
        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {
          state.isOverTarget = true;
          triggerPressStart(e, state.pointerType);
        }
      };
      pressProps2.onMouseLeave = (e) => {
        if (!e.currentTarget.contains(e.target))
          return;
        e.stopPropagation();
        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {
          state.isOverTarget = false;
          triggerPressEnd(e, state.pointerType, false);
          cancelOnPointerExit(e);
        }
      };
      pressProps2.onMouseUp = (e) => {
        if (!e.currentTarget.contains(e.target))
          return;
        if (!state.ignoreEmulatedMouseEvents && e.button === 0)
          triggerPressUp(e, state.pointerType);
      };
      let onMouseUp = (e) => {
        if (e.button !== 0)
          return;
        state.isPressed = false;
        removeAllGlobalListeners();
        if (state.ignoreEmulatedMouseEvents) {
          state.ignoreEmulatedMouseEvents = false;
          return;
        }
        if ($f6c31cce2adf654f$var$isOverTarget(e, state.target))
          triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);
        else if (state.isOverTarget)
          triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
        state.isOverTarget = false;
      };
      pressProps2.onTouchStart = (e) => {
        if (!e.currentTarget.contains(e.target))
          return;
        e.stopPropagation();
        let touch = $f6c31cce2adf654f$var$getTouchFromEvent(e.nativeEvent);
        if (!touch)
          return;
        state.activePointerId = touch.identifier;
        state.ignoreEmulatedMouseEvents = true;
        state.isOverTarget = true;
        state.isPressed = true;
        state.target = e.currentTarget;
        state.pointerType = "touch";
        if (!isDisabled && !preventFocusOnPress)
          (0, $7215afc6de606d6b$export$de79e2c695e052f3)(e.currentTarget);
        if (!allowTextSelectionOnPress)
          (0, $14c0b72509d70225$export$16a4697467175487)(state.target);
        triggerPressStart(e, state.pointerType);
        addGlobalListener(window, "scroll", onScroll, true);
      };
      pressProps2.onTouchMove = (e) => {
        if (!e.currentTarget.contains(e.target))
          return;
        e.stopPropagation();
        if (!state.isPressed)
          return;
        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);
        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {
          if (!state.isOverTarget) {
            state.isOverTarget = true;
            triggerPressStart(e, state.pointerType);
          }
        } else if (state.isOverTarget) {
          state.isOverTarget = false;
          triggerPressEnd(e, state.pointerType, false);
          cancelOnPointerExit(e);
        }
      };
      pressProps2.onTouchEnd = (e) => {
        if (!e.currentTarget.contains(e.target))
          return;
        e.stopPropagation();
        if (!state.isPressed)
          return;
        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);
        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {
          triggerPressUp(e, state.pointerType);
          triggerPressEnd(e, state.pointerType);
        } else if (state.isOverTarget)
          triggerPressEnd(e, state.pointerType, false);
        state.isPressed = false;
        state.activePointerId = null;
        state.isOverTarget = false;
        state.ignoreEmulatedMouseEvents = true;
        if (!allowTextSelectionOnPress)
          (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);
        removeAllGlobalListeners();
      };
      pressProps2.onTouchCancel = (e) => {
        if (!e.currentTarget.contains(e.target))
          return;
        e.stopPropagation();
        if (state.isPressed)
          cancel(e);
      };
      let onScroll = (e) => {
        if (state.isPressed && e.target.contains(state.target))
          cancel({
            currentTarget: state.target,
            shiftKey: false,
            ctrlKey: false,
            metaKey: false,
            altKey: false
          });
      };
      pressProps2.onDragStart = (e) => {
        if (!e.currentTarget.contains(e.target))
          return;
        cancel(e);
      };
    }
    return pressProps2;
  }, [
    addGlobalListener,
    isDisabled,
    preventFocusOnPress,
    removeAllGlobalListeners,
    allowTextSelectionOnPress,
    cancel,
    cancelOnPointerExit,
    triggerPressEnd,
    triggerPressStart,
    triggerPressUp
  ]);
  (0, K)(() => {
    return () => {
      if (!allowTextSelectionOnPress)
        (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(ref.current.target);
    };
  }, [
    allowTextSelectionOnPress
  ]);
  return {
    isPressed: isPressedProp || isPressed,
    pressProps: (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, pressProps)
  };
}
function $f6c31cce2adf654f$var$isHTMLAnchorLink(target) {
  return target.tagName === "A" && target.hasAttribute("href");
}
function $f6c31cce2adf654f$var$isValidKeyboardEvent(event, currentTarget) {
  const { key, code } = event;
  const element = currentTarget;
  const role = element.getAttribute("role");
  return (key === "Enter" || key === " " || key === "Spacebar" || code === "Space") && !(element instanceof HTMLInputElement && !$f6c31cce2adf654f$var$isValidInputKey(element, key) || element instanceof HTMLTextAreaElement || element.isContentEditable) && // A link with a valid href should be handled natively,
  // unless it also has role='button' and was triggered using Space.
  (!$f6c31cce2adf654f$var$isHTMLAnchorLink(element) || role === "button" && key !== "Enter") && // An element with role='link' should only trigger with Enter key
  !(role === "link" && key !== "Enter");
}
function $f6c31cce2adf654f$var$getTouchFromEvent(event) {
  const { targetTouches } = event;
  if (targetTouches.length > 0)
    return targetTouches[0];
  return null;
}
function $f6c31cce2adf654f$var$getTouchById(event, pointerId) {
  const changedTouches = event.changedTouches;
  for (let i2 = 0; i2 < changedTouches.length; i2++) {
    const touch = changedTouches[i2];
    if (touch.identifier === pointerId)
      return touch;
  }
  return null;
}
function $f6c31cce2adf654f$var$createEvent(target, e) {
  return {
    currentTarget: target,
    shiftKey: e.shiftKey,
    ctrlKey: e.ctrlKey,
    metaKey: e.metaKey,
    altKey: e.altKey
  };
}
function $f6c31cce2adf654f$var$getPointClientRect(point) {
  let offsetX = point.width / 2 || point.radiusX || 0;
  let offsetY = point.height / 2 || point.radiusY || 0;
  return {
    top: point.clientY - offsetY,
    right: point.clientX + offsetX,
    bottom: point.clientY + offsetY,
    left: point.clientX - offsetX
  };
}
function $f6c31cce2adf654f$var$areRectanglesOverlapping(a, b) {
  if (a.left > b.right || b.left > a.right)
    return false;
  if (a.top > b.bottom || b.top > a.bottom)
    return false;
  return true;
}
function $f6c31cce2adf654f$var$isOverTarget(point, target) {
  let rect = target.getBoundingClientRect();
  let pointRect = $f6c31cce2adf654f$var$getPointClientRect(point);
  return $f6c31cce2adf654f$var$areRectanglesOverlapping(rect, pointRect);
}
function $f6c31cce2adf654f$var$shouldPreventDefault(target) {
  return !(target instanceof HTMLElement) || !target.draggable;
}
function $f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(target, key) {
  if (target instanceof HTMLInputElement)
    return !$f6c31cce2adf654f$var$isValidInputKey(target, key);
  if (target instanceof HTMLButtonElement)
    return target.type !== "submit";
  return true;
}
var $f6c31cce2adf654f$var$nonTextInputTypes = /* @__PURE__ */ new Set([
  "checkbox",
  "radio",
  "range",
  "color",
  "file",
  "image",
  "button",
  "submit",
  "reset"
]);
function $f6c31cce2adf654f$var$isValidInputKey(target, key) {
  return target.type === "checkbox" || target.type === "radio" ? key === " " : $f6c31cce2adf654f$var$nonTextInputTypes.has(target.type);
}
var $f1ab8c75478c6f73$export$3351871ee4b288b8 = /* @__PURE__ */ (0, yn).forwardRef(({ children, ...props }, ref) => {
  let isRegistered = (0, ie)(false);
  let prevContext = (0, ce)((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5));
  let context = (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(prevContext || {}, {
    ...props,
    ref: ref || (prevContext === null || prevContext === void 0 ? void 0 : prevContext.ref),
    register() {
      isRegistered.current = true;
      if (prevContext)
        prevContext.register();
    }
  });
  (0, $e7801be82b4b2a53$export$4debdb1a3f0fa79e)(prevContext, ref);
  (0, K)(() => {
    if (!isRegistered.current) {
      console.warn("A PressResponder was rendered without a pressable child. Either call the usePress hook, or wrap your DOM node with <Pressable> component.");
      isRegistered.current = true;
    }
  }, []);
  return /* @__PURE__ */ (0, yn).createElement((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5).Provider, {
    value: context
  }, children);
});
var $8a9cb279dc87e130$export$905e7fc544a71f36 = class {
  isDefaultPrevented() {
    return this.nativeEvent.defaultPrevented;
  }
  preventDefault() {
    this.defaultPrevented = true;
    this.nativeEvent.preventDefault();
  }
  stopPropagation() {
    this.nativeEvent.stopPropagation();
    this.isPropagationStopped = () => true;
  }
  isPropagationStopped() {
    return false;
  }
  persist() {
  }
  constructor(type, nativeEvent) {
    this.nativeEvent = nativeEvent;
    this.target = nativeEvent.target;
    this.currentTarget = nativeEvent.currentTarget;
    this.relatedTarget = nativeEvent.relatedTarget;
    this.bubbles = nativeEvent.bubbles;
    this.cancelable = nativeEvent.cancelable;
    this.defaultPrevented = nativeEvent.defaultPrevented;
    this.eventPhase = nativeEvent.eventPhase;
    this.isTrusted = nativeEvent.isTrusted;
    this.timeStamp = nativeEvent.timeStamp;
    this.type = type;
  }
};
function $8a9cb279dc87e130$export$715c682d09d639cc(onBlur) {
  let stateRef = (0, ie)({
    isFocused: false,
    observer: null
  });
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    const state = stateRef.current;
    return () => {
      if (state.observer) {
        state.observer.disconnect();
        state.observer = null;
      }
    };
  }, []);
  let dispatchBlur = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((e) => {
    onBlur === null || onBlur === void 0 ? void 0 : onBlur(e);
  });
  return (0, ae)((e) => {
    if (e.target instanceof HTMLButtonElement || e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement || e.target instanceof HTMLSelectElement) {
      stateRef.current.isFocused = true;
      let target = e.target;
      let onBlurHandler = (e2) => {
        stateRef.current.isFocused = false;
        if (target.disabled)
          dispatchBlur(new $8a9cb279dc87e130$export$905e7fc544a71f36("blur", e2));
        if (stateRef.current.observer) {
          stateRef.current.observer.disconnect();
          stateRef.current.observer = null;
        }
      };
      target.addEventListener("focusout", onBlurHandler, {
        once: true
      });
      stateRef.current.observer = new MutationObserver(() => {
        if (stateRef.current.isFocused && target.disabled) {
          stateRef.current.observer.disconnect();
          let relatedTargetEl = target === document.activeElement ? null : document.activeElement;
          target.dispatchEvent(new FocusEvent("blur", {
            relatedTarget: relatedTargetEl
          }));
          target.dispatchEvent(new FocusEvent("focusout", {
            bubbles: true,
            relatedTarget: relatedTargetEl
          }));
        }
      });
      stateRef.current.observer.observe(target, {
        attributes: true,
        attributeFilter: [
          "disabled"
        ]
      });
    }
  }, [
    dispatchBlur
  ]);
}
function $a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props) {
  let { isDisabled, onFocus: onFocusProp, onBlur: onBlurProp, onFocusChange } = props;
  const onBlur = (0, ae)((e) => {
    if (e.target === e.currentTarget) {
      if (onBlurProp)
        onBlurProp(e);
      if (onFocusChange)
        onFocusChange(false);
      return true;
    }
  }, [
    onBlurProp,
    onFocusChange
  ]);
  const onSyntheticFocus = (0, $8a9cb279dc87e130$export$715c682d09d639cc)(onBlur);
  const onFocus = (0, ae)((e) => {
    if (e.target === e.currentTarget && document.activeElement === e.target) {
      if (onFocusProp)
        onFocusProp(e);
      if (onFocusChange)
        onFocusChange(true);
      onSyntheticFocus(e);
    }
  }, [
    onFocusChange,
    onFocusProp,
    onSyntheticFocus
  ]);
  return {
    focusProps: {
      onFocus: !isDisabled && (onFocusProp || onFocusChange || onBlurProp) ? onFocus : void 0,
      onBlur: !isDisabled && (onBlurProp || onFocusChange) ? onBlur : void 0
    }
  };
}
var $507fabe10e71c6fb$var$currentModality = null;
var $507fabe10e71c6fb$var$changeHandlers = /* @__PURE__ */ new Set();
var $507fabe10e71c6fb$var$hasSetupGlobalListeners = false;
var $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
var $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;
var $507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS = {
  Tab: true,
  Escape: true
};
function $507fabe10e71c6fb$var$triggerChangeHandlers(modality, e) {
  for (let handler of $507fabe10e71c6fb$var$changeHandlers)
    handler(modality, e);
}
function $507fabe10e71c6fb$var$isValidKey(e) {
  return !(e.metaKey || !(0, $c87311424ea30a05$export$9ac100e40613ea10)() && e.altKey || e.ctrlKey || e.key === "Control" || e.key === "Shift" || e.key === "Meta");
}
function $507fabe10e71c6fb$var$handleKeyboardEvent(e) {
  $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
  if ($507fabe10e71c6fb$var$isValidKey(e)) {
    $507fabe10e71c6fb$var$currentModality = "keyboard";
    $507fabe10e71c6fb$var$triggerChangeHandlers("keyboard", e);
  }
}
function $507fabe10e71c6fb$var$handlePointerEvent(e) {
  $507fabe10e71c6fb$var$currentModality = "pointer";
  if (e.type === "mousedown" || e.type === "pointerdown") {
    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    $507fabe10e71c6fb$var$triggerChangeHandlers("pointer", e);
  }
}
function $507fabe10e71c6fb$var$handleClickEvent(e) {
  if ((0, $6a7db85432448f7f$export$60278871457622de)(e)) {
    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    $507fabe10e71c6fb$var$currentModality = "virtual";
  }
}
function $507fabe10e71c6fb$var$handleFocusEvent(e) {
  if (e.target === window || e.target === document)
    return;
  if (!$507fabe10e71c6fb$var$hasEventBeforeFocus && !$507fabe10e71c6fb$var$hasBlurredWindowRecently) {
    $507fabe10e71c6fb$var$currentModality = "virtual";
    $507fabe10e71c6fb$var$triggerChangeHandlers("virtual", e);
  }
  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
  $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;
}
function $507fabe10e71c6fb$var$handleWindowBlur() {
  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
  $507fabe10e71c6fb$var$hasBlurredWindowRecently = true;
}
function $507fabe10e71c6fb$var$setupGlobalFocusEvents() {
  if (typeof window === "undefined" || $507fabe10e71c6fb$var$hasSetupGlobalListeners)
    return;
  let focus = HTMLElement.prototype.focus;
  HTMLElement.prototype.focus = function() {
    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    focus.apply(this, arguments);
  };
  document.addEventListener("keydown", $507fabe10e71c6fb$var$handleKeyboardEvent, true);
  document.addEventListener("keyup", $507fabe10e71c6fb$var$handleKeyboardEvent, true);
  document.addEventListener("click", $507fabe10e71c6fb$var$handleClickEvent, true);
  window.addEventListener("focus", $507fabe10e71c6fb$var$handleFocusEvent, true);
  window.addEventListener("blur", $507fabe10e71c6fb$var$handleWindowBlur, false);
  if (typeof PointerEvent !== "undefined") {
    document.addEventListener("pointerdown", $507fabe10e71c6fb$var$handlePointerEvent, true);
    document.addEventListener("pointermove", $507fabe10e71c6fb$var$handlePointerEvent, true);
    document.addEventListener("pointerup", $507fabe10e71c6fb$var$handlePointerEvent, true);
  } else {
    document.addEventListener("mousedown", $507fabe10e71c6fb$var$handlePointerEvent, true);
    document.addEventListener("mousemove", $507fabe10e71c6fb$var$handlePointerEvent, true);
    document.addEventListener("mouseup", $507fabe10e71c6fb$var$handlePointerEvent, true);
  }
  $507fabe10e71c6fb$var$hasSetupGlobalListeners = true;
}
if (typeof document !== "undefined") {
  if (document.readyState !== "loading")
    $507fabe10e71c6fb$var$setupGlobalFocusEvents();
  else
    document.addEventListener("DOMContentLoaded", $507fabe10e71c6fb$var$setupGlobalFocusEvents);
}
function $507fabe10e71c6fb$export$b9b3dfddab17db27() {
  return $507fabe10e71c6fb$var$currentModality !== "pointer";
}
function $507fabe10e71c6fb$export$630ff653c5ada6a9() {
  return $507fabe10e71c6fb$var$currentModality;
}
function $507fabe10e71c6fb$export$8397ddfc504fdb9a(modality) {
  $507fabe10e71c6fb$var$currentModality = modality;
  $507fabe10e71c6fb$var$triggerChangeHandlers(modality, null);
}
function $507fabe10e71c6fb$export$98e20ec92f614cfe() {
  $507fabe10e71c6fb$var$setupGlobalFocusEvents();
  let [modality, setModality] = (0, z)($507fabe10e71c6fb$var$currentModality);
  (0, K)(() => {
    let handler = () => {
      setModality($507fabe10e71c6fb$var$currentModality);
    };
    $507fabe10e71c6fb$var$changeHandlers.add(handler);
    return () => {
      $507fabe10e71c6fb$var$changeHandlers.delete(handler);
    };
  }, []);
  return (0, $704cf1d3b684cc5c$export$535bd6ca7f90a273)() ? null : modality;
}
function $507fabe10e71c6fb$var$isKeyboardFocusEvent(isTextInput, modality, e) {
  return !(isTextInput && modality === "keyboard" && e instanceof KeyboardEvent && !$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS[e.key]);
}
function $507fabe10e71c6fb$export$ec71b4b83ac08ec3(fn, deps, opts) {
  $507fabe10e71c6fb$var$setupGlobalFocusEvents();
  (0, K)(() => {
    let handler = (modality, e) => {
      if (!$507fabe10e71c6fb$var$isKeyboardFocusEvent(opts === null || opts === void 0 ? void 0 : opts.isTextInput, modality, e))
        return;
      fn($507fabe10e71c6fb$export$b9b3dfddab17db27());
    };
    $507fabe10e71c6fb$var$changeHandlers.add(handler);
    return () => {
      $507fabe10e71c6fb$var$changeHandlers.delete(handler);
    };
  }, deps);
}
function $9ab94262bd0047c7$export$420e68273165f4ec(props) {
  let { isDisabled, onBlurWithin, onFocusWithin, onFocusWithinChange } = props;
  let state = (0, ie)({
    isFocusWithin: false
  });
  let onBlur = (0, ae)((e) => {
    if (state.current.isFocusWithin && !e.currentTarget.contains(e.relatedTarget)) {
      state.current.isFocusWithin = false;
      if (onBlurWithin)
        onBlurWithin(e);
      if (onFocusWithinChange)
        onFocusWithinChange(false);
    }
  }, [
    onBlurWithin,
    onFocusWithinChange,
    state
  ]);
  let onSyntheticFocus = (0, $8a9cb279dc87e130$export$715c682d09d639cc)(onBlur);
  let onFocus = (0, ae)((e) => {
    if (!state.current.isFocusWithin && document.activeElement === e.target) {
      if (onFocusWithin)
        onFocusWithin(e);
      if (onFocusWithinChange)
        onFocusWithinChange(true);
      state.current.isFocusWithin = true;
      onSyntheticFocus(e);
    }
  }, [
    onFocusWithin,
    onFocusWithinChange,
    onSyntheticFocus
  ]);
  if (isDisabled)
    return {
      focusWithinProps: {
        onFocus: null,
        onBlur: null
      }
    };
  return {
    focusWithinProps: {
      onFocus,
      onBlur
    }
  };
}
var $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;
var $6179b936705e76d3$var$hoverCount = 0;
function $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents() {
  $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = true;
  setTimeout(() => {
    $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;
  }, 50);
}
function $6179b936705e76d3$var$handleGlobalPointerEvent(e) {
  if (e.pointerType === "touch")
    $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents();
}
function $6179b936705e76d3$var$setupGlobalTouchEvents() {
  if (typeof document === "undefined")
    return;
  if (typeof PointerEvent !== "undefined")
    document.addEventListener("pointerup", $6179b936705e76d3$var$handleGlobalPointerEvent);
  else
    document.addEventListener("touchend", $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);
  $6179b936705e76d3$var$hoverCount++;
  return () => {
    $6179b936705e76d3$var$hoverCount--;
    if ($6179b936705e76d3$var$hoverCount > 0)
      return;
    if (typeof PointerEvent !== "undefined")
      document.removeEventListener("pointerup", $6179b936705e76d3$var$handleGlobalPointerEvent);
    else
      document.removeEventListener("touchend", $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);
  };
}
function $6179b936705e76d3$export$ae780daf29e6d456(props) {
  let { onHoverStart, onHoverChange, onHoverEnd, isDisabled } = props;
  let [isHovered, setHovered] = (0, z)(false);
  let state = (0, ie)({
    isHovered: false,
    ignoreEmulatedMouseEvents: false,
    pointerType: "",
    target: null
  }).current;
  (0, K)($6179b936705e76d3$var$setupGlobalTouchEvents, []);
  let { hoverProps, triggerHoverEnd } = (0, j)(() => {
    let triggerHoverStart = (event, pointerType) => {
      state.pointerType = pointerType;
      if (isDisabled || pointerType === "touch" || state.isHovered || !event.currentTarget.contains(event.target))
        return;
      state.isHovered = true;
      let target = event.currentTarget;
      state.target = target;
      if (onHoverStart)
        onHoverStart({
          type: "hoverstart",
          target,
          pointerType
        });
      if (onHoverChange)
        onHoverChange(true);
      setHovered(true);
    };
    let triggerHoverEnd2 = (event, pointerType) => {
      state.pointerType = "";
      state.target = null;
      if (pointerType === "touch" || !state.isHovered)
        return;
      state.isHovered = false;
      let target = event.currentTarget;
      if (onHoverEnd)
        onHoverEnd({
          type: "hoverend",
          target,
          pointerType
        });
      if (onHoverChange)
        onHoverChange(false);
      setHovered(false);
    };
    let hoverProps2 = {};
    if (typeof PointerEvent !== "undefined") {
      hoverProps2.onPointerEnter = (e) => {
        if ($6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents && e.pointerType === "mouse")
          return;
        triggerHoverStart(e, e.pointerType);
      };
      hoverProps2.onPointerLeave = (e) => {
        if (!isDisabled && e.currentTarget.contains(e.target))
          triggerHoverEnd2(e, e.pointerType);
      };
    } else {
      hoverProps2.onTouchStart = () => {
        state.ignoreEmulatedMouseEvents = true;
      };
      hoverProps2.onMouseEnter = (e) => {
        if (!state.ignoreEmulatedMouseEvents && !$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents)
          triggerHoverStart(e, "mouse");
        state.ignoreEmulatedMouseEvents = false;
      };
      hoverProps2.onMouseLeave = (e) => {
        if (!isDisabled && e.currentTarget.contains(e.target))
          triggerHoverEnd2(e, "mouse");
      };
    }
    return {
      hoverProps: hoverProps2,
      triggerHoverEnd: triggerHoverEnd2
    };
  }, [
    onHoverStart,
    onHoverChange,
    onHoverEnd,
    isDisabled,
    state
  ]);
  (0, K)(() => {
    if (isDisabled)
      triggerHoverEnd({
        currentTarget: state.target
      }, state.pointerType);
  }, [
    isDisabled
  ]);
  return {
    hoverProps,
    isHovered
  };
}
function $e0b6e0b68ec7f50f$export$872b660ac5a1ff98(props) {
  let { ref, onInteractOutside, isDisabled, onInteractOutsideStart } = props;
  let stateRef = (0, ie)({
    isPointerDown: false,
    ignoreEmulatedMouseEvents: false
  });
  let onPointerDown = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((e) => {
    if (onInteractOutside && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {
      if (onInteractOutsideStart)
        onInteractOutsideStart(e);
      stateRef.current.isPointerDown = true;
    }
  });
  let triggerInteractOutside = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((e) => {
    if (onInteractOutside)
      onInteractOutside(e);
  });
  (0, K)(() => {
    let state = stateRef.current;
    if (isDisabled)
      return;
    if (typeof PointerEvent !== "undefined") {
      let onPointerUp = (e) => {
        if (state.isPointerDown && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref))
          triggerInteractOutside(e);
        state.isPointerDown = false;
      };
      document.addEventListener("pointerdown", onPointerDown, true);
      document.addEventListener("pointerup", onPointerUp, true);
      return () => {
        document.removeEventListener("pointerdown", onPointerDown, true);
        document.removeEventListener("pointerup", onPointerUp, true);
      };
    } else {
      let onMouseUp = (e) => {
        if (state.ignoreEmulatedMouseEvents)
          state.ignoreEmulatedMouseEvents = false;
        else if (state.isPointerDown && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref))
          triggerInteractOutside(e);
        state.isPointerDown = false;
      };
      let onTouchEnd = (e) => {
        state.ignoreEmulatedMouseEvents = true;
        if (state.isPointerDown && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref))
          triggerInteractOutside(e);
        state.isPointerDown = false;
      };
      document.addEventListener("mousedown", onPointerDown, true);
      document.addEventListener("mouseup", onMouseUp, true);
      document.addEventListener("touchstart", onPointerDown, true);
      document.addEventListener("touchend", onTouchEnd, true);
      return () => {
        document.removeEventListener("mousedown", onPointerDown, true);
        document.removeEventListener("mouseup", onMouseUp, true);
        document.removeEventListener("touchstart", onPointerDown, true);
        document.removeEventListener("touchend", onTouchEnd, true);
      };
    }
  }, [
    ref,
    isDisabled,
    onPointerDown,
    triggerInteractOutside
  ]);
}
function $e0b6e0b68ec7f50f$var$isValidEvent(event, ref) {
  if (event.button > 0)
    return false;
  if (event.target) {
    const ownerDocument = event.target.ownerDocument;
    if (!ownerDocument || !ownerDocument.documentElement.contains(event.target))
      return false;
    if (event.target.closest("[data-react-aria-top-layer]"))
      return false;
  }
  return ref.current && !ref.current.contains(event.target);
}
function $93925083ecbb358c$export$48d1ea6320830260(handler) {
  if (!handler)
    return;
  let shouldStopPropagation = true;
  return (e) => {
    let event = {
      ...e,
      preventDefault() {
        e.preventDefault();
      },
      isDefaultPrevented() {
        return e.isDefaultPrevented();
      },
      stopPropagation() {
        console.error("stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.");
      },
      continuePropagation() {
        shouldStopPropagation = false;
      }
    };
    handler(event);
    if (shouldStopPropagation)
      e.stopPropagation();
  };
}
function $46d819fcbaf35654$export$8f71654801c2f7cd(props) {
  return {
    keyboardProps: props.isDisabled ? {} : {
      onKeyDown: (0, $93925083ecbb358c$export$48d1ea6320830260)(props.onKeyDown),
      onKeyUp: (0, $93925083ecbb358c$export$48d1ea6320830260)(props.onKeyUp)
    }
  };
}
var $8a26561d2877236e$var$DEFAULT_THRESHOLD = 500;
function $8a26561d2877236e$export$c24ed0104d07eab9(props) {
  let { isDisabled, onLongPressStart, onLongPressEnd, onLongPress, threshold = $8a26561d2877236e$var$DEFAULT_THRESHOLD, accessibilityDescription } = props;
  const timeRef = (0, ie)(null);
  let { addGlobalListener, removeGlobalListener } = (0, $03deb23ff14920c4$export$4eaf04e54aa8eed6)();
  let { pressProps } = (0, $f6c31cce2adf654f$export$45712eceda6fad21)({
    isDisabled,
    onPressStart(e) {
      if (e.pointerType === "mouse" || e.pointerType === "touch") {
        if (onLongPressStart)
          onLongPressStart({
            ...e,
            type: "longpressstart"
          });
        timeRef.current = setTimeout(() => {
          e.target.dispatchEvent(new PointerEvent("pointercancel", {
            bubbles: true
          }));
          if (onLongPress)
            onLongPress({
              ...e,
              type: "longpress"
            });
          timeRef.current = null;
        }, threshold);
        if (e.pointerType === "touch") {
          let onContextMenu = (e2) => {
            e2.preventDefault();
          };
          addGlobalListener(e.target, "contextmenu", onContextMenu, {
            once: true
          });
          addGlobalListener(window, "pointerup", () => {
            setTimeout(() => {
              removeGlobalListener(e.target, "contextmenu", onContextMenu);
            }, 30);
          }, {
            once: true
          });
        }
      }
    },
    onPressEnd(e) {
      if (timeRef.current)
        clearTimeout(timeRef.current);
      if (onLongPressEnd && (e.pointerType === "mouse" || e.pointerType === "touch"))
        onLongPressEnd({
          ...e,
          type: "longpressend"
        });
    }
  });
  let descriptionProps = (0, $ef06256079686ba0$export$f8aeda7b10753fa1)(onLongPress && !isDisabled ? accessibilityDescription : null);
  return {
    longPressProps: (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(pressProps, descriptionProps)
  };
}

// ../../node_modules/@react-aria/focus/dist/import.mjs
function $6a99195332edec8b$export$80f3e147d781571c(element) {
  if ((0, $507fabe10e71c6fb$export$630ff653c5ada6a9)() === "virtual") {
    let lastFocusedElement = document.activeElement;
    (0, $bbed8b41f857bcc0$export$24490316f764c430)(() => {
      if (document.activeElement === lastFocusedElement && document.contains(element))
        (0, $7215afc6de606d6b$export$de79e2c695e052f3)(element);
    });
  } else
    (0, $7215afc6de606d6b$export$de79e2c695e052f3)(element);
}
function $645f2e67b85a24c9$var$isStyleVisible(element) {
  if (!(element instanceof HTMLElement) && !(element instanceof SVGElement))
    return false;
  let { display, visibility } = element.style;
  let isVisible = display !== "none" && visibility !== "hidden" && visibility !== "collapse";
  if (isVisible) {
    const { getComputedStyle: getComputedStyle2 } = element.ownerDocument.defaultView;
    let { display: computedDisplay, visibility: computedVisibility } = getComputedStyle2(element);
    isVisible = computedDisplay !== "none" && computedVisibility !== "hidden" && computedVisibility !== "collapse";
  }
  return isVisible;
}
function $645f2e67b85a24c9$var$isAttributeVisible(element, childElement) {
  return !element.hasAttribute("hidden") && (element.nodeName === "DETAILS" && childElement && childElement.nodeName !== "SUMMARY" ? element.hasAttribute("open") : true);
}
function $645f2e67b85a24c9$export$e989c0fffaa6b27a(element, childElement) {
  return element.nodeName !== "#comment" && $645f2e67b85a24c9$var$isStyleVisible(element) && $645f2e67b85a24c9$var$isAttributeVisible(element, childElement) && (!element.parentElement || $645f2e67b85a24c9$export$e989c0fffaa6b27a(element.parentElement, element));
}
var $9bf71ea28793e738$var$FocusContext = /* @__PURE__ */ (0, yn).createContext(null);
var $9bf71ea28793e738$var$activeScope = null;
function $9bf71ea28793e738$export$20e40289641fbbb6(props) {
  let { children, contain, restoreFocus, autoFocus } = props;
  let startRef = (0, ie)();
  let endRef = (0, ie)();
  let scopeRef = (0, ie)([]);
  let { parentNode } = (0, ce)($9bf71ea28793e738$var$FocusContext) || {};
  let node = (0, j)(() => new $9bf71ea28793e738$var$TreeNode({
    scopeRef
  }), [
    scopeRef
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    let parent = parentNode || $9bf71ea28793e738$export$d06fae2ee68b101e.root;
    if ($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parent.scopeRef) && $9bf71ea28793e738$var$activeScope && !$9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, parent.scopeRef)) {
      let activeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);
      if (activeNode)
        parent = activeNode;
    }
    parent.addChild(node);
    $9bf71ea28793e738$export$d06fae2ee68b101e.addNode(node);
  }, [
    node,
    parentNode
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    let node2 = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);
    node2.contain = contain;
  }, [
    contain
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    let node2 = startRef.current.nextSibling;
    let nodes = [];
    while (node2 && node2 !== endRef.current) {
      nodes.push(node2);
      node2 = node2.nextSibling;
    }
    scopeRef.current = nodes;
  }, [
    children
  ]);
  $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restoreFocus, contain);
  $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain);
  $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain);
  $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus);
  (0, K)(() => {
    if (scopeRef) {
      let activeElement = document.activeElement;
      let scope = null;
      if ($9bf71ea28793e738$var$isElementInScope(activeElement, scopeRef.current)) {
        for (let node2 of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse())
          if ($9bf71ea28793e738$var$isElementInScope(activeElement, node2.scopeRef.current))
            scope = node2;
        if (scope === $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef))
          $9bf71ea28793e738$var$activeScope = scope.scopeRef;
      }
      return () => {
        let parentScope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).parent.scopeRef;
        if ((scopeRef === $9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope(scopeRef, $9bf71ea28793e738$var$activeScope)) && (!parentScope || $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parentScope)))
          $9bf71ea28793e738$var$activeScope = parentScope;
        $9bf71ea28793e738$export$d06fae2ee68b101e.removeTreeNode(scopeRef);
      };
    }
  }, [
    scopeRef
  ]);
  let focusManager = (0, j)(() => $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef), []);
  let value = (0, j)(() => ({
    focusManager,
    parentNode: node
  }), [
    node,
    focusManager
  ]);
  return /* @__PURE__ */ (0, yn).createElement($9bf71ea28793e738$var$FocusContext.Provider, {
    value
  }, /* @__PURE__ */ (0, yn).createElement("span", {
    "data-focus-scope-start": true,
    hidden: true,
    ref: startRef
  }), children, /* @__PURE__ */ (0, yn).createElement("span", {
    "data-focus-scope-end": true,
    hidden: true,
    ref: endRef
  }));
}
function $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef) {
  return {
    focusNext(opts = {}) {
      let scope = scopeRef.current;
      let { from, tabbable, wrap, accept } = opts;
      let node = from || document.activeElement;
      let sentinel = scope[0].previousElementSibling;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {
        tabbable,
        accept
      }, scope);
      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;
      let nextNode = walker.nextNode();
      if (!nextNode && wrap) {
        walker.currentNode = sentinel;
        nextNode = walker.nextNode();
      }
      if (nextNode)
        $9bf71ea28793e738$var$focusElement(nextNode, true);
      return nextNode;
    },
    focusPrevious(opts = {}) {
      let scope = scopeRef.current;
      let { from, tabbable, wrap, accept } = opts;
      let node = from || document.activeElement;
      let sentinel = scope[scope.length - 1].nextElementSibling;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {
        tabbable,
        accept
      }, scope);
      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;
      let previousNode = walker.previousNode();
      if (!previousNode && wrap) {
        walker.currentNode = sentinel;
        previousNode = walker.previousNode();
      }
      if (previousNode)
        $9bf71ea28793e738$var$focusElement(previousNode, true);
      return previousNode;
    },
    focusFirst(opts = {}) {
      let scope = scopeRef.current;
      let { tabbable, accept } = opts;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {
        tabbable,
        accept
      }, scope);
      walker.currentNode = scope[0].previousElementSibling;
      let nextNode = walker.nextNode();
      if (nextNode)
        $9bf71ea28793e738$var$focusElement(nextNode, true);
      return nextNode;
    },
    focusLast(opts = {}) {
      let scope = scopeRef.current;
      let { tabbable, accept } = opts;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {
        tabbable,
        accept
      }, scope);
      walker.currentNode = scope[scope.length - 1].nextElementSibling;
      let previousNode = walker.previousNode();
      if (previousNode)
        $9bf71ea28793e738$var$focusElement(previousNode, true);
      return previousNode;
    }
  };
}
var $9bf71ea28793e738$var$focusableElements = [
  "input:not([disabled]):not([type=hidden])",
  "select:not([disabled])",
  "textarea:not([disabled])",
  "button:not([disabled])",
  "a[href]",
  "area[href]",
  "summary",
  "iframe",
  "object",
  "embed",
  "audio[controls]",
  "video[controls]",
  "[contenteditable]"
];
var $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(":not([hidden]),") + ",[tabindex]:not([disabled]):not([hidden])";
$9bf71ea28793e738$var$focusableElements.push('[tabindex]:not([tabindex="-1"]):not([disabled])');
var $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(':not([hidden]):not([tabindex="-1"]),');
function $9bf71ea28793e738$var$getScopeRoot(scope) {
  return scope[0].parentElement;
}
function $9bf71ea28793e738$var$shouldContainFocus(scopeRef) {
  let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);
  while (scope && scope.scopeRef !== scopeRef) {
    if (scope.contain)
      return false;
    scope = scope.parent;
  }
  return true;
}
function $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain) {
  let focusedNode = (0, ie)();
  let raf = (0, ie)(null);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    let scope = scopeRef.current;
    if (!contain) {
      if (raf.current) {
        cancelAnimationFrame(raf.current);
        raf.current = null;
      }
      return;
    }
    let onKeyDown = (e) => {
      if (e.key !== "Tab" || e.altKey || e.ctrlKey || e.metaKey || !$9bf71ea28793e738$var$shouldContainFocus(scopeRef))
        return;
      let focusedElement = document.activeElement;
      let scope2 = scopeRef.current;
      if (!$9bf71ea28793e738$var$isElementInScope(focusedElement, scope2))
        return;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope2), {
        tabbable: true
      }, scope2);
      walker.currentNode = focusedElement;
      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
      if (!nextElement) {
        walker.currentNode = e.shiftKey ? scope2[scope2.length - 1].nextElementSibling : scope2[0].previousElementSibling;
        nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
      }
      e.preventDefault();
      if (nextElement)
        $9bf71ea28793e738$var$focusElement(nextElement, true);
    };
    let onFocus = (e) => {
      if ((!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) && $9bf71ea28793e738$var$isElementInScope(e.target, scopeRef.current)) {
        $9bf71ea28793e738$var$activeScope = scopeRef;
        focusedNode.current = e.target;
      } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope(e.target, scopeRef)) {
        if (focusedNode.current)
          focusedNode.current.focus();
        else if ($9bf71ea28793e738$var$activeScope)
          $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);
      } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef))
        focusedNode.current = e.target;
    };
    let onBlur = (e) => {
      if (raf.current)
        cancelAnimationFrame(raf.current);
      raf.current = requestAnimationFrame(() => {
        if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope(document.activeElement, scopeRef)) {
          $9bf71ea28793e738$var$activeScope = scopeRef;
          if (document.body.contains(e.target)) {
            focusedNode.current = e.target;
            focusedNode.current.focus();
          } else if ($9bf71ea28793e738$var$activeScope)
            $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);
        }
      });
    };
    document.addEventListener("keydown", onKeyDown, false);
    document.addEventListener("focusin", onFocus, false);
    scope.forEach((element) => element.addEventListener("focusin", onFocus, false));
    scope.forEach((element) => element.addEventListener("focusout", onBlur, false));
    return () => {
      document.removeEventListener("keydown", onKeyDown, false);
      document.removeEventListener("focusin", onFocus, false);
      scope.forEach((element) => element.removeEventListener("focusin", onFocus, false));
      scope.forEach((element) => element.removeEventListener("focusout", onBlur, false));
    };
  }, [
    scopeRef,
    contain
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    return () => {
      if (raf.current)
        cancelAnimationFrame(raf.current);
    };
  }, [
    raf
  ]);
}
function $9bf71ea28793e738$var$isElementInAnyScope(element) {
  return $9bf71ea28793e738$var$isElementInChildScope(element);
}
function $9bf71ea28793e738$var$isElementInScope(element, scope) {
  return scope.some((node) => node.contains(element));
}
function $9bf71ea28793e738$var$isElementInChildScope(element, scope = null) {
  if (element instanceof Element && element.closest("[data-react-aria-top-layer]"))
    return true;
  for (let { scopeRef: s } of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope))) {
    if ($9bf71ea28793e738$var$isElementInScope(element, s.current))
      return true;
  }
  return false;
}
function $9bf71ea28793e738$export$1258395f99bf9cbf(element) {
  return $9bf71ea28793e738$var$isElementInChildScope(element, $9bf71ea28793e738$var$activeScope);
}
function $9bf71ea28793e738$var$isAncestorScope(ancestor, scope) {
  var _focusScopeTree_getTreeNode;
  let parent = (_focusScopeTree_getTreeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope)) === null || _focusScopeTree_getTreeNode === void 0 ? void 0 : _focusScopeTree_getTreeNode.parent;
  while (parent) {
    if (parent.scopeRef === ancestor)
      return true;
    parent = parent.parent;
  }
  return false;
}
function $9bf71ea28793e738$var$focusElement(element, scroll = false) {
  if (element != null && !scroll)
    try {
      (0, $6a99195332edec8b$export$80f3e147d781571c)(element);
    } catch (err) {
    }
  else if (element != null)
    try {
      element.focus();
    } catch (err) {
    }
}
function $9bf71ea28793e738$var$focusFirstInScope(scope, tabbable = true) {
  let sentinel = scope[0].previousElementSibling;
  let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {
    tabbable
  }, scope);
  walker.currentNode = sentinel;
  let nextNode = walker.nextNode();
  if (tabbable && !nextNode) {
    walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {
      tabbable: false
    }, scope);
    walker.currentNode = sentinel;
    nextNode = walker.nextNode();
  }
  $9bf71ea28793e738$var$focusElement(nextNode);
}
function $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus) {
  const autoFocusRef = (0, yn).useRef(autoFocus);
  (0, K)(() => {
    if (autoFocusRef.current) {
      $9bf71ea28793e738$var$activeScope = scopeRef;
      if (!$9bf71ea28793e738$var$isElementInScope(document.activeElement, $9bf71ea28793e738$var$activeScope.current))
        $9bf71ea28793e738$var$focusFirstInScope(scopeRef.current);
    }
    autoFocusRef.current = false;
  }, [
    scopeRef
  ]);
}
function $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restore, contain) {
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (restore || contain)
      return;
    let scope = scopeRef.current;
    let onFocus = (e) => {
      let target = e.target;
      if ($9bf71ea28793e738$var$isElementInScope(target, scopeRef.current))
        $9bf71ea28793e738$var$activeScope = scopeRef;
      else if (!$9bf71ea28793e738$var$isElementInAnyScope(target))
        $9bf71ea28793e738$var$activeScope = null;
    };
    document.addEventListener("focusin", onFocus, false);
    scope.forEach((element) => element.addEventListener("focusin", onFocus, false));
    return () => {
      document.removeEventListener("focusin", onFocus, false);
      scope.forEach((element) => element.removeEventListener("focusin", onFocus, false));
    };
  }, [
    scopeRef,
    restore,
    contain
  ]);
}
function $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef) {
  let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);
  while (scope && scope.scopeRef !== scopeRef) {
    if (scope.nodeToRestore)
      return false;
    scope = scope.parent;
  }
  return (scope === null || scope === void 0 ? void 0 : scope.scopeRef) === scopeRef;
}
function $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain) {
  const nodeToRestoreRef = (0, ie)(typeof document !== "undefined" ? document.activeElement : null);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    let scope = scopeRef.current;
    if (!restoreFocus || contain)
      return;
    let onFocus = () => {
      if ((!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) && $9bf71ea28793e738$var$isElementInScope(document.activeElement, scopeRef.current))
        $9bf71ea28793e738$var$activeScope = scopeRef;
    };
    document.addEventListener("focusin", onFocus, false);
    scope.forEach((element) => element.addEventListener("focusin", onFocus, false));
    return () => {
      document.removeEventListener("focusin", onFocus, false);
      scope.forEach((element) => element.removeEventListener("focusin", onFocus, false));
    };
  }, [
    scopeRef,
    contain
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (!restoreFocus)
      return;
    $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore = nodeToRestoreRef.current;
    let onKeyDown = (e) => {
      if (e.key !== "Tab" || e.altKey || e.ctrlKey || e.metaKey || !$9bf71ea28793e738$var$shouldContainFocus(scopeRef))
        return;
      let focusedElement = document.activeElement;
      if (!$9bf71ea28793e738$var$isElementInScope(focusedElement, scopeRef.current))
        return;
      let nodeToRestore = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(document.body, {
        tabbable: true
      });
      walker.currentNode = focusedElement;
      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
      if (!document.body.contains(nodeToRestore) || nodeToRestore === document.body) {
        nodeToRestore = null;
        $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore = null;
      }
      if ((!nextElement || !$9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current)) && nodeToRestore) {
        walker.currentNode = nodeToRestore;
        do
          nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
        while ($9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current));
        e.preventDefault();
        e.stopPropagation();
        if (nextElement)
          $9bf71ea28793e738$var$focusElement(nextElement, true);
        else if (!$9bf71ea28793e738$var$isElementInAnyScope(nodeToRestore))
          focusedElement.blur();
        else
          $9bf71ea28793e738$var$focusElement(nodeToRestore, true);
      }
    };
    if (!contain)
      document.addEventListener("keydown", onKeyDown, true);
    return () => {
      if (!contain)
        document.removeEventListener("keydown", onKeyDown, true);
      let nodeToRestore = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore;
      if (restoreFocus && nodeToRestore && // eslint-disable-next-line react-hooks/exhaustive-deps
      ($9bf71ea28793e738$var$isElementInScope(document.activeElement, scopeRef.current) || document.activeElement === document.body && $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef))) {
        let clonedTree = $9bf71ea28793e738$export$d06fae2ee68b101e.clone();
        requestAnimationFrame(() => {
          if (document.activeElement === document.body) {
            let treeNode = clonedTree.getTreeNode(scopeRef);
            while (treeNode) {
              if (treeNode.nodeToRestore && document.body.contains(treeNode.nodeToRestore)) {
                $9bf71ea28793e738$var$focusElement(treeNode.nodeToRestore);
                return;
              }
              treeNode = treeNode.parent;
            }
            treeNode = clonedTree.getTreeNode(scopeRef);
            while (treeNode) {
              if (treeNode.scopeRef && $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(treeNode.scopeRef)) {
                $9bf71ea28793e738$var$focusFirstInScope(treeNode.scopeRef.current, true);
                return;
              }
              treeNode = treeNode.parent;
            }
          }
        });
      }
    };
  }, [
    scopeRef,
    restoreFocus,
    contain
  ]);
}
function $9bf71ea28793e738$export$2d6ec8fc375ceafa(root3, opts, scope) {
  let selector = (opts === null || opts === void 0 ? void 0 : opts.tabbable) ? $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR : $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR;
  let walker = document.createTreeWalker(root3, NodeFilter.SHOW_ELEMENT, {
    acceptNode(node) {
      var _opts_from;
      if (opts === null || opts === void 0 ? void 0 : (_opts_from = opts.from) === null || _opts_from === void 0 ? void 0 : _opts_from.contains(node))
        return NodeFilter.FILTER_REJECT;
      if (node.matches(selector) && (0, $645f2e67b85a24c9$export$e989c0fffaa6b27a)(node) && (!scope || $9bf71ea28793e738$var$isElementInScope(node, scope)) && (!(opts === null || opts === void 0 ? void 0 : opts.accept) || opts.accept(node)))
        return NodeFilter.FILTER_ACCEPT;
      return NodeFilter.FILTER_SKIP;
    }
  });
  if (opts === null || opts === void 0 ? void 0 : opts.from)
    walker.currentNode = opts.from;
  return walker;
}
var $9bf71ea28793e738$var$Tree = class _$9bf71ea28793e738$var$Tree {
  get size() {
    return this.fastMap.size;
  }
  getTreeNode(data) {
    return this.fastMap.get(data);
  }
  addTreeNode(scopeRef, parent, nodeToRestore) {
    let parentNode = this.fastMap.get(parent !== null && parent !== void 0 ? parent : null);
    let node = new $9bf71ea28793e738$var$TreeNode({
      scopeRef
    });
    parentNode.addChild(node);
    node.parent = parentNode;
    this.fastMap.set(scopeRef, node);
    if (nodeToRestore)
      node.nodeToRestore = nodeToRestore;
  }
  addNode(node) {
    this.fastMap.set(node.scopeRef, node);
  }
  removeTreeNode(scopeRef) {
    if (scopeRef === null)
      return;
    let node = this.fastMap.get(scopeRef);
    let parentNode = node.parent;
    for (let current of this.traverse())
      if (current !== node && node.nodeToRestore && current.nodeToRestore && node.scopeRef.current && $9bf71ea28793e738$var$isElementInScope(current.nodeToRestore, node.scopeRef.current))
        current.nodeToRestore = node.nodeToRestore;
    let children = node.children;
    parentNode.removeChild(node);
    if (children.size > 0)
      children.forEach((child) => parentNode.addChild(child));
    this.fastMap.delete(node.scopeRef);
  }
  // Pre Order Depth First
  *traverse(node = this.root) {
    if (node.scopeRef != null)
      yield node;
    if (node.children.size > 0)
      for (let child of node.children)
        yield* this.traverse(child);
  }
  clone() {
    let newTree = new _$9bf71ea28793e738$var$Tree();
    for (let node of this.traverse())
      newTree.addTreeNode(node.scopeRef, node.parent.scopeRef, node.nodeToRestore);
    return newTree;
  }
  constructor() {
    this.fastMap = /* @__PURE__ */ new Map();
    this.root = new $9bf71ea28793e738$var$TreeNode({
      scopeRef: null
    });
    this.fastMap.set(null, this.root);
  }
};
var $9bf71ea28793e738$var$TreeNode = class {
  addChild(node) {
    this.children.add(node);
    node.parent = this;
  }
  removeChild(node) {
    this.children.delete(node);
    node.parent = void 0;
  }
  constructor(props) {
    this.children = /* @__PURE__ */ new Set();
    this.contain = false;
    this.scopeRef = props.scopeRef;
  }
};
var $9bf71ea28793e738$export$d06fae2ee68b101e = new $9bf71ea28793e738$var$Tree();
function $f7dceffc5ad7768b$export$4e328f61c538687f(props = {}) {
  let { autoFocus = false, isTextInput, within } = props;
  let state = (0, ie)({
    isFocused: false,
    isFocusVisible: autoFocus || (0, $507fabe10e71c6fb$export$b9b3dfddab17db27)()
  });
  let [isFocused, setFocused] = (0, z)(false);
  let [isFocusVisibleState, setFocusVisible] = (0, z)(() => state.current.isFocused && state.current.isFocusVisible);
  let updateState = (0, ae)(() => setFocusVisible(state.current.isFocused && state.current.isFocusVisible), []);
  let onFocusChange = (0, ae)((isFocused2) => {
    state.current.isFocused = isFocused2;
    setFocused(isFocused2);
    updateState();
  }, [
    updateState
  ]);
  (0, $507fabe10e71c6fb$export$ec71b4b83ac08ec3)((isFocusVisible) => {
    state.current.isFocusVisible = isFocusVisible;
    updateState();
  }, [], {
    isTextInput
  });
  let { focusProps } = (0, $a1ea59d68270f0dd$export$f8168d8dd8fd66e6)({
    isDisabled: within,
    onFocusChange
  });
  let { focusWithinProps } = (0, $9ab94262bd0047c7$export$420e68273165f4ec)({
    isDisabled: !within,
    onFocusWithinChange: onFocusChange
  });
  return {
    isFocused,
    isFocusVisible: isFocusVisibleState,
    focusProps: within ? focusWithinProps : focusProps
  };
}
function $907718708eab68af$export$1a38b4ad7f578e1d(props) {
  let { children, focusClass, focusRingClass } = props;
  let { isFocused, isFocusVisible, focusProps } = (0, $f7dceffc5ad7768b$export$4e328f61c538687f)(props);
  let child = (0, yn).Children.only(children);
  return /* @__PURE__ */ (0, yn).cloneElement(child, (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(child.props, {
    ...focusProps,
    className: (0, clsx_m_default)({
      [focusClass || ""]: isFocused,
      [focusRingClass || ""]: isFocusVisible
    })
  }));
}
var $e6afbd83fe6ebbd2$var$FocusableContext = /* @__PURE__ */ (0, yn).createContext(null);
function $e6afbd83fe6ebbd2$var$useFocusableContext(ref) {
  let context = (0, ce)($e6afbd83fe6ebbd2$var$FocusableContext) || {};
  (0, $e7801be82b4b2a53$export$4debdb1a3f0fa79e)(context, ref);
  let { ref: _14, ...otherProps } = context;
  return otherProps;
}
function $e6afbd83fe6ebbd2$export$4c014de7c8940b4c(props, domRef) {
  let { focusProps } = (0, $a1ea59d68270f0dd$export$f8168d8dd8fd66e6)(props);
  let { keyboardProps } = (0, $46d819fcbaf35654$export$8f71654801c2f7cd)(props);
  let interactions = (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(focusProps, keyboardProps);
  let domProps = $e6afbd83fe6ebbd2$var$useFocusableContext(domRef);
  let interactionProps = props.isDisabled ? {} : domProps;
  let autoFocusRef = (0, ie)(props.autoFocus);
  (0, K)(() => {
    if (autoFocusRef.current && domRef.current)
      (0, $6a99195332edec8b$export$80f3e147d781571c)(domRef.current);
    autoFocusRef.current = false;
  }, [
    domRef
  ]);
  return {
    focusableProps: (0, $3ef42575df84b30b$export$9d1611c77c2fe928)({
      ...interactions,
      tabIndex: props.excludeFromTabOrder && !props.isDisabled ? -1 : void 0
    }, interactionProps)
  };
}
function $83013635b024ae3d$export$eac1895992b9f3d6(ref, options) {
  let isDisabled = options === null || options === void 0 ? void 0 : options.isDisabled;
  let [hasTabbableChild, setHasTabbableChild] = (0, z)(false);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if ((ref === null || ref === void 0 ? void 0 : ref.current) && !isDisabled) {
      let update = () => {
        if (ref.current) {
          let walker = (0, $9bf71ea28793e738$export$2d6ec8fc375ceafa)(ref.current, {
            tabbable: true
          });
          setHasTabbableChild(!!walker.nextNode());
        }
      };
      update();
      let observer2 = new MutationObserver(update);
      observer2.observe(ref.current, {
        subtree: true,
        childList: true,
        attributes: true,
        attributeFilter: [
          "tabIndex",
          "disabled"
        ]
      });
      return () => {
        observer2.disconnect();
      };
    }
  });
  return isDisabled ? false : hasTabbableChild;
}

// ../../node_modules/@react-spectrum/button/dist/import.mjs
init_preact_min();

// ../../node_modules/@react-spectrum/text/dist/import.mjs
init_preact_min();
function $cd449e8defa988f0$var$Text(props, ref) {
  props = (0, $59d09bcc83651bf9$export$1e5c9e6e4e15efe3)(props, "text");
  let { children, ...otherProps } = props;
  let { styleProps } = (0, $380ed8f3903c3931$export$b8e6fb9d2dff3f41)(otherProps);
  let domRef = (0, $98e5a8ae0e6415af$export$c2c55ef9111cafd8)(ref);
  return /* @__PURE__ */ (0, yn).createElement("span", {
    ...(0, $65484d02dcb7eb3e$export$457c3d6518dd4c6f)(otherProps),
    ...styleProps,
    ref: domRef
  }, children);
}
var $cd449e8defa988f0$export$5f1af8db9871e1d6 = /* @__PURE__ */ (0, Pe)($cd449e8defa988f0$var$Text);

// ../../node_modules/@react-aria/button/dist/import.mjs
function $701a24aa0da5b062$export$ea18c227d4417cc3(props, ref) {
  let {
    elementType = "button",
    isDisabled,
    onPress,
    onPressStart,
    onPressEnd,
    onPressChange,
    preventFocusOnPress,
    allowFocusWhenDisabled,
    // @ts-ignore
    onClick: deprecatedOnClick,
    href,
    target,
    rel,
    type = "button"
  } = props;
  let additionalProps;
  if (elementType === "button")
    additionalProps = {
      type,
      disabled: isDisabled
    };
  else
    additionalProps = {
      role: "button",
      tabIndex: isDisabled ? void 0 : 0,
      href: elementType === "a" && isDisabled ? void 0 : href,
      target: elementType === "a" ? target : void 0,
      type: elementType === "input" ? type : void 0,
      disabled: elementType === "input" ? isDisabled : void 0,
      "aria-disabled": !isDisabled || elementType === "input" ? void 0 : isDisabled,
      rel: elementType === "a" ? rel : void 0
    };
  let { pressProps, isPressed } = (0, $f6c31cce2adf654f$export$45712eceda6fad21)({
    onPressStart,
    onPressEnd,
    onPressChange,
    onPress,
    isDisabled,
    preventFocusOnPress,
    ref
  });
  let { focusableProps } = (0, $e6afbd83fe6ebbd2$export$4c014de7c8940b4c)(props, ref);
  if (allowFocusWhenDisabled)
    focusableProps.tabIndex = isDisabled ? -1 : focusableProps.tabIndex;
  let buttonProps = (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(focusableProps, pressProps, (0, $65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
    labelable: true
  }));
  return {
    isPressed,
    buttonProps: (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(additionalProps, buttonProps, {
      "aria-haspopup": props["aria-haspopup"],
      "aria-expanded": props["aria-expanded"],
      "aria-controls": props["aria-controls"],
      "aria-pressed": props["aria-pressed"],
      onClick: (e) => {
        if (deprecatedOnClick) {
          deprecatedOnClick(e);
          console.warn("onClick is deprecated, please use onPress");
        }
      }
    })
  };
}

// ../../node_modules/@react-aria/overlays/dist/import.mjs
init_preact_min();
init_preact_min();

// ../../node_modules/@react-aria/visually-hidden/dist/import.mjs
init_preact_min();
var $5c3e21d68f1c4674$var$styles = {
  border: 0,
  clip: "rect(0 0 0 0)",
  clipPath: "inset(50%)",
  height: "1px",
  margin: "-1px",
  overflow: "hidden",
  padding: 0,
  position: "absolute",
  width: "1px",
  whiteSpace: "nowrap"
};
function $5c3e21d68f1c4674$export$a966af930f325cab(props = {}) {
  let { style, isFocusable } = props;
  let [isFocused, setFocused] = (0, z)(false);
  let { focusWithinProps } = (0, $9ab94262bd0047c7$export$420e68273165f4ec)({
    isDisabled: !isFocusable,
    onFocusWithinChange: (val) => setFocused(val)
  });
  let combinedStyles = (0, j)(() => {
    if (isFocused)
      return style;
    else if (style)
      return {
        ...$5c3e21d68f1c4674$var$styles,
        ...style
      };
    else
      return $5c3e21d68f1c4674$var$styles;
  }, [
    isFocused
  ]);
  return {
    visuallyHiddenProps: {
      ...focusWithinProps,
      style: combinedStyles
    }
  };
}
function $5c3e21d68f1c4674$export$439d29a4e110a164(props) {
  let { children, elementType: Element2 = "div", isFocusable, style, ...otherProps } = props;
  let { visuallyHiddenProps } = $5c3e21d68f1c4674$export$a966af930f325cab(props);
  return /* @__PURE__ */ (0, yn).createElement(Element2, (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(otherProps, visuallyHiddenProps), children);
}

// ../../node_modules/@react-aria/overlays/dist/import.mjs
function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
var $edcf132a9284368a$var$AXIS = {
  top: "top",
  bottom: "top",
  left: "left",
  right: "left"
};
var $edcf132a9284368a$var$FLIPPED_DIRECTION = {
  top: "bottom",
  bottom: "top",
  left: "right",
  right: "left"
};
var $edcf132a9284368a$var$CROSS_AXIS = {
  top: "left",
  left: "top"
};
var $edcf132a9284368a$var$AXIS_SIZE = {
  top: "height",
  left: "width"
};
var $edcf132a9284368a$var$TOTAL_SIZE = {
  width: "totalWidth",
  height: "totalHeight"
};
var $edcf132a9284368a$var$PARSED_PLACEMENT_CACHE = {};
var $edcf132a9284368a$var$visualViewport = typeof window !== "undefined" && window.visualViewport;
function $edcf132a9284368a$var$getContainerDimensions(containerNode) {
  let width = 0, height = 0, totalWidth = 0, totalHeight = 0, top = 0, left = 0;
  let scroll = {};
  if (containerNode.tagName === "BODY") {
    let documentElement = document.documentElement;
    totalWidth = documentElement.clientWidth;
    totalHeight = documentElement.clientHeight;
    var _visualViewport_width;
    width = (_visualViewport_width = $edcf132a9284368a$var$visualViewport === null || $edcf132a9284368a$var$visualViewport === void 0 ? void 0 : $edcf132a9284368a$var$visualViewport.width) !== null && _visualViewport_width !== void 0 ? _visualViewport_width : totalWidth;
    var _visualViewport_height;
    height = (_visualViewport_height = $edcf132a9284368a$var$visualViewport === null || $edcf132a9284368a$var$visualViewport === void 0 ? void 0 : $edcf132a9284368a$var$visualViewport.height) !== null && _visualViewport_height !== void 0 ? _visualViewport_height : totalHeight;
    scroll.top = documentElement.scrollTop || containerNode.scrollTop;
    scroll.left = documentElement.scrollLeft || containerNode.scrollLeft;
  } else {
    ({ width, height, top, left } = $edcf132a9284368a$var$getOffset(containerNode));
    scroll.top = containerNode.scrollTop;
    scroll.left = containerNode.scrollLeft;
    totalWidth = width;
    totalHeight = height;
  }
  return {
    width,
    height,
    totalWidth,
    totalHeight,
    scroll,
    top,
    left
  };
}
function $edcf132a9284368a$var$getScroll(node) {
  return {
    top: node.scrollTop,
    left: node.scrollLeft,
    width: node.scrollWidth,
    height: node.scrollHeight
  };
}
function $edcf132a9284368a$var$getDelta(axis, offset, size, containerDimensions, padding) {
  let containerScroll = containerDimensions.scroll[axis];
  let containerHeight = containerDimensions[$edcf132a9284368a$var$AXIS_SIZE[axis]];
  let startEdgeOffset = offset - padding - containerScroll;
  let endEdgeOffset = offset + padding - containerScroll + size;
  if (startEdgeOffset < 0)
    return -startEdgeOffset;
  else if (endEdgeOffset > containerHeight)
    return Math.max(containerHeight - endEdgeOffset, -startEdgeOffset);
  else
    return 0;
}
function $edcf132a9284368a$var$getMargins(node) {
  let style = window.getComputedStyle(node);
  return {
    top: parseInt(style.marginTop, 10) || 0,
    bottom: parseInt(style.marginBottom, 10) || 0,
    left: parseInt(style.marginLeft, 10) || 0,
    right: parseInt(style.marginRight, 10) || 0
  };
}
function $edcf132a9284368a$var$parsePlacement(input) {
  if ($edcf132a9284368a$var$PARSED_PLACEMENT_CACHE[input])
    return $edcf132a9284368a$var$PARSED_PLACEMENT_CACHE[input];
  let [placement, crossPlacement] = input.split(" ");
  let axis = $edcf132a9284368a$var$AXIS[placement] || "right";
  let crossAxis = $edcf132a9284368a$var$CROSS_AXIS[axis];
  if (!$edcf132a9284368a$var$AXIS[crossPlacement])
    crossPlacement = "center";
  let size = $edcf132a9284368a$var$AXIS_SIZE[axis];
  let crossSize = $edcf132a9284368a$var$AXIS_SIZE[crossAxis];
  $edcf132a9284368a$var$PARSED_PLACEMENT_CACHE[input] = {
    placement,
    crossPlacement,
    axis,
    crossAxis,
    size,
    crossSize
  };
  return $edcf132a9284368a$var$PARSED_PLACEMENT_CACHE[input];
}
function $edcf132a9284368a$var$computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned, arrowSize, arrowBoundaryOffset) {
  let { placement, crossPlacement, axis, crossAxis, size, crossSize } = placementInfo;
  let position = {};
  position[crossAxis] = childOffset[crossAxis];
  if (crossPlacement === "center")
    position[crossAxis] += (childOffset[crossSize] - overlaySize[crossSize]) / 2;
  else if (crossPlacement !== crossAxis)
    position[crossAxis] += childOffset[crossSize] - overlaySize[crossSize];
  position[crossAxis] += crossOffset;
  const minPosition = childOffset[crossAxis] - overlaySize[crossSize] + arrowSize + arrowBoundaryOffset;
  const maxPosition = childOffset[crossAxis] + childOffset[crossSize] - arrowSize - arrowBoundaryOffset;
  position[crossAxis] = (0, $9446cca9a3875146$export$7d15b64cf5a3a4c4)(position[crossAxis], minPosition, maxPosition);
  if (placement === axis) {
    const containerHeight = isContainerPositioned ? containerOffsetWithBoundary[size] : boundaryDimensions[$edcf132a9284368a$var$TOTAL_SIZE[size]];
    position[$edcf132a9284368a$var$FLIPPED_DIRECTION[axis]] = Math.floor(containerHeight - childOffset[axis] + offset);
  } else
    position[axis] = Math.floor(childOffset[axis] + childOffset[size] + offset);
  return position;
}
function $edcf132a9284368a$var$getMaxHeight(position, boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding) {
  return position.top != null ? Math.max(0, boundaryDimensions.height + boundaryDimensions.top + boundaryDimensions.scroll.top - (containerOffsetWithBoundary.top + position.top) - (margins.top + margins.bottom + padding)) : Math.max(0, childOffset.top + containerOffsetWithBoundary.top - (boundaryDimensions.top + boundaryDimensions.scroll.top) - (margins.top + margins.bottom + padding));
}
function $edcf132a9284368a$var$getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding, placementInfo) {
  let { placement, axis, size } = placementInfo;
  if (placement === axis)
    return Math.max(0, childOffset[axis] - boundaryDimensions[axis] - boundaryDimensions.scroll[axis] + containerOffsetWithBoundary[axis] - margins[axis] - margins[$edcf132a9284368a$var$FLIPPED_DIRECTION[axis]] - padding);
  return Math.max(0, boundaryDimensions[size] + boundaryDimensions[axis] + boundaryDimensions.scroll[axis] - containerOffsetWithBoundary[axis] - childOffset[axis] - childOffset[size] - margins[axis] - margins[$edcf132a9284368a$var$FLIPPED_DIRECTION[axis]] - padding);
}
function $edcf132a9284368a$export$6839422d1f33cee9(placementInput, childOffset, overlaySize, scrollSize, margins, padding, flip, boundaryDimensions, containerOffsetWithBoundary, offset, crossOffset, isContainerPositioned, userSetMaxHeight, arrowSize, arrowBoundaryOffset) {
  let placementInfo = $edcf132a9284368a$var$parsePlacement(placementInput);
  let { size, crossAxis, crossSize, placement, crossPlacement } = placementInfo;
  let position = $edcf132a9284368a$var$computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned, arrowSize, arrowBoundaryOffset);
  let normalizedOffset = offset;
  let space = $edcf132a9284368a$var$getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding + offset, placementInfo);
  if (flip && scrollSize[size] > space) {
    let flippedPlacementInfo = $edcf132a9284368a$var$parsePlacement(`${$edcf132a9284368a$var$FLIPPED_DIRECTION[placement]} ${crossPlacement}`);
    let flippedPosition = $edcf132a9284368a$var$computePosition(childOffset, boundaryDimensions, overlaySize, flippedPlacementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned, arrowSize, arrowBoundaryOffset);
    let flippedSpace = $edcf132a9284368a$var$getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding + offset, flippedPlacementInfo);
    if (flippedSpace > space) {
      placementInfo = flippedPlacementInfo;
      position = flippedPosition;
      normalizedOffset = offset;
    }
  }
  let delta = $edcf132a9284368a$var$getDelta(crossAxis, position[crossAxis], overlaySize[crossSize], boundaryDimensions, padding);
  position[crossAxis] += delta;
  let maxHeight = $edcf132a9284368a$var$getMaxHeight(position, boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding);
  if (userSetMaxHeight && userSetMaxHeight < maxHeight)
    maxHeight = userSetMaxHeight;
  overlaySize.height = Math.min(overlaySize.height, maxHeight);
  position = $edcf132a9284368a$var$computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, normalizedOffset, crossOffset, containerOffsetWithBoundary, isContainerPositioned, arrowSize, arrowBoundaryOffset);
  delta = $edcf132a9284368a$var$getDelta(crossAxis, position[crossAxis], overlaySize[crossSize], boundaryDimensions, padding);
  position[crossAxis] += delta;
  let arrowPosition = {};
  let preferredArrowPosition = childOffset[crossAxis] + 0.5 * childOffset[crossSize] - overlaySize[crossAxis];
  const arrowMinPosition = arrowSize / 2 + arrowBoundaryOffset;
  const arrowMaxPosition = overlaySize[crossSize] - arrowSize / 2 - arrowBoundaryOffset;
  const arrowOverlappingChildMinEdge = childOffset[crossAxis] - overlaySize[crossAxis] + arrowSize / 2;
  const arrowOverlappingChildMaxEdge = childOffset[crossAxis] + childOffset[crossSize] - overlaySize[crossAxis] - arrowSize / 2;
  const arrowPositionOverlappingChild = (0, $9446cca9a3875146$export$7d15b64cf5a3a4c4)(preferredArrowPosition, arrowOverlappingChildMinEdge, arrowOverlappingChildMaxEdge);
  arrowPosition[crossAxis] = (0, $9446cca9a3875146$export$7d15b64cf5a3a4c4)(arrowPositionOverlappingChild, arrowMinPosition, arrowMaxPosition);
  return {
    position,
    maxHeight,
    arrowOffsetLeft: arrowPosition.left,
    arrowOffsetTop: arrowPosition.top,
    placement: placementInfo.placement
  };
}
function $edcf132a9284368a$export$b3ceb0cbf1056d98(opts) {
  let { placement, targetNode, overlayNode, scrollNode, padding, shouldFlip, boundaryElement, offset, crossOffset, maxHeight, arrowSize, arrowBoundaryOffset = 0 } = opts;
  let container = overlayNode instanceof HTMLElement ? $edcf132a9284368a$var$getContainingBlock(overlayNode) : document.documentElement;
  let isViewportContainer = container === document.documentElement;
  const containerPositionStyle = window.getComputedStyle(container).position;
  let isContainerPositioned = !!containerPositionStyle && containerPositionStyle !== "static";
  let childOffset = isViewportContainer ? $edcf132a9284368a$var$getOffset(targetNode) : $edcf132a9284368a$var$getPosition(targetNode, container);
  if (!isViewportContainer) {
    let { marginTop, marginLeft } = window.getComputedStyle(targetNode);
    childOffset.top += parseInt(marginTop, 10) || 0;
    childOffset.left += parseInt(marginLeft, 10) || 0;
  }
  let overlaySize = $edcf132a9284368a$var$getOffset(overlayNode);
  let margins = $edcf132a9284368a$var$getMargins(overlayNode);
  overlaySize.width += margins.left + margins.right;
  overlaySize.height += margins.top + margins.bottom;
  let scrollSize = $edcf132a9284368a$var$getScroll(scrollNode);
  let boundaryDimensions = $edcf132a9284368a$var$getContainerDimensions(boundaryElement);
  let containerOffsetWithBoundary = boundaryElement.tagName === "BODY" ? $edcf132a9284368a$var$getOffset(container) : $edcf132a9284368a$var$getPosition(container, boundaryElement);
  return $edcf132a9284368a$export$6839422d1f33cee9(placement, childOffset, overlaySize, scrollSize, margins, padding, shouldFlip, boundaryDimensions, containerOffsetWithBoundary, offset, crossOffset, isContainerPositioned, maxHeight, arrowSize, arrowBoundaryOffset);
}
function $edcf132a9284368a$var$getOffset(node) {
  let { top, left, width, height } = node.getBoundingClientRect();
  let { scrollTop, scrollLeft, clientTop, clientLeft } = document.documentElement;
  return {
    top: top + scrollTop - clientTop,
    left: left + scrollLeft - clientLeft,
    width,
    height
  };
}
function $edcf132a9284368a$var$getPosition(node, parent) {
  let style = window.getComputedStyle(node);
  let offset;
  if (style.position === "fixed") {
    let { top, left, width, height } = node.getBoundingClientRect();
    offset = {
      top,
      left,
      width,
      height
    };
  } else {
    offset = $edcf132a9284368a$var$getOffset(node);
    let parentOffset = $edcf132a9284368a$var$getOffset(parent);
    let parentStyle = window.getComputedStyle(parent);
    parentOffset.top += (parseInt(parentStyle.borderTopWidth, 10) || 0) - parent.scrollTop;
    parentOffset.left += (parseInt(parentStyle.borderLeftWidth, 10) || 0) - parent.scrollLeft;
    offset.top -= parentOffset.top;
    offset.left -= parentOffset.left;
  }
  offset.top -= parseInt(style.marginTop, 10) || 0;
  offset.left -= parseInt(style.marginLeft, 10) || 0;
  return offset;
}
function $edcf132a9284368a$var$getContainingBlock(node) {
  let offsetParent = node.offsetParent;
  if (offsetParent && offsetParent === document.body && window.getComputedStyle(offsetParent).position === "static" && !$edcf132a9284368a$var$isContainingBlock(offsetParent))
    offsetParent = document.documentElement;
  if (offsetParent == null) {
    offsetParent = node.parentElement;
    while (offsetParent && !$edcf132a9284368a$var$isContainingBlock(offsetParent))
      offsetParent = offsetParent.parentElement;
  }
  return offsetParent || document.documentElement;
}
function $edcf132a9284368a$var$isContainingBlock(node) {
  let style = window.getComputedStyle(node);
  return style.transform !== "none" || /transform|perspective/.test(style.willChange) || style.filter !== "none" || style.contain === "paint" || // @ts-ignore
  "backdropFilter" in style && style.backdropFilter !== "none" || // @ts-ignore
  "WebkitBackdropFilter" in style && style.WebkitBackdropFilter !== "none";
}
var $dd149f63282afbbf$export$f6211563215e3b37 = /* @__PURE__ */ new WeakMap();
function $dd149f63282afbbf$export$18fc8428861184da(opts) {
  let { triggerRef, isOpen, onClose } = opts;
  (0, K)(() => {
    if (!isOpen || onClose === null)
      return;
    let onScroll = (e) => {
      let target = e.target;
      if (!triggerRef.current || target instanceof Node && !target.contains(triggerRef.current))
        return;
      let onCloseHandler = onClose || $dd149f63282afbbf$export$f6211563215e3b37.get(triggerRef.current);
      if (onCloseHandler)
        onCloseHandler();
    };
    window.addEventListener("scroll", onScroll, true);
    return () => {
      window.removeEventListener("scroll", onScroll, true);
    };
  }, [
    isOpen,
    onClose,
    triggerRef
  ]);
}
var $2a41e45df1593e64$var$visualViewport = typeof window !== "undefined" && window.visualViewport;
function $2a41e45df1593e64$export$d39e1813b3bdd0e1(props) {
  let { direction } = (0, $18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  let { arrowSize = 0, targetRef, overlayRef, scrollRef = overlayRef, placement = "bottom", containerPadding = 12, shouldFlip = true, boundaryElement = typeof document !== "undefined" ? document.body : null, offset = 0, crossOffset = 0, shouldUpdatePosition = true, isOpen = true, onClose, maxHeight, arrowBoundaryOffset = 0 } = props;
  let [position, setPosition] = (0, z)({
    position: {},
    arrowOffsetLeft: void 0,
    arrowOffsetTop: void 0,
    maxHeight: void 0,
    placement: void 0
  });
  let deps = [
    shouldUpdatePosition,
    placement,
    overlayRef.current,
    targetRef.current,
    scrollRef.current,
    containerPadding,
    shouldFlip,
    boundaryElement,
    offset,
    crossOffset,
    isOpen,
    direction,
    maxHeight,
    arrowBoundaryOffset,
    arrowSize
  ];
  let updatePosition = (0, ae)(() => {
    if (shouldUpdatePosition === false || !isOpen || !overlayRef.current || !targetRef.current || !scrollRef.current || !boundaryElement)
      return;
    let position2 = (0, $edcf132a9284368a$export$b3ceb0cbf1056d98)({
      placement: $2a41e45df1593e64$var$translateRTL(placement, direction),
      overlayNode: overlayRef.current,
      targetNode: targetRef.current,
      scrollNode: scrollRef.current,
      padding: containerPadding,
      shouldFlip,
      boundaryElement,
      offset,
      crossOffset,
      maxHeight,
      arrowSize,
      arrowBoundaryOffset
    });
    Object.keys(position2.position).forEach((key) => overlayRef.current.style[key] = position2.position[key] + "px");
    overlayRef.current.style.maxHeight = position2.maxHeight != null ? position2.maxHeight + "px" : void 0;
    setPosition(position2);
  }, deps);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(updatePosition, deps);
  $2a41e45df1593e64$var$useResize(updatePosition);
  (0, $9daab02d461809db$export$683480f191c0e3ea)({
    ref: overlayRef,
    onResize: updatePosition
  });
  let isResizing = (0, ie)(false);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    let timeout2;
    let onResize = () => {
      isResizing.current = true;
      clearTimeout(timeout2);
      timeout2 = setTimeout(() => {
        isResizing.current = false;
      }, 500);
      updatePosition();
    };
    $2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.addEventListener("resize", onResize);
    $2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.addEventListener("scroll", onResize);
    return () => {
      $2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.removeEventListener("resize", onResize);
      $2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.removeEventListener("scroll", onResize);
    };
  }, [
    updatePosition
  ]);
  let close = (0, ae)(() => {
    if (!isResizing.current)
      onClose();
  }, [
    onClose,
    isResizing
  ]);
  (0, $dd149f63282afbbf$export$18fc8428861184da)({
    triggerRef: targetRef,
    isOpen,
    onClose: onClose && close
  });
  return {
    overlayProps: {
      style: {
        position: "absolute",
        zIndex: 1e5,
        ...position.position,
        maxHeight: position.maxHeight
      }
    },
    placement: position.placement,
    arrowProps: {
      style: {
        left: position.arrowOffsetLeft,
        top: position.arrowOffsetTop
      }
    },
    updatePosition
  };
}
function $2a41e45df1593e64$var$useResize(onResize) {
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    window.addEventListener("resize", onResize, false);
    return () => {
      window.removeEventListener("resize", onResize, false);
    };
  }, [
    onResize
  ]);
}
function $2a41e45df1593e64$var$translateRTL(position, direction) {
  if (direction === "rtl")
    return position.replace("start", "right").replace("end", "left");
  return position.replace("start", "left").replace("end", "right");
}
var $a11501f3d1d39e6c$var$visibleOverlays = [];
function $a11501f3d1d39e6c$export$ea8f71083e90600f(props, ref) {
  let { onClose, shouldCloseOnBlur, isOpen, isDismissable = false, isKeyboardDismissDisabled = false, shouldCloseOnInteractOutside } = props;
  (0, K)(() => {
    if (isOpen)
      $a11501f3d1d39e6c$var$visibleOverlays.push(ref);
    return () => {
      let index = $a11501f3d1d39e6c$var$visibleOverlays.indexOf(ref);
      if (index >= 0)
        $a11501f3d1d39e6c$var$visibleOverlays.splice(index, 1);
    };
  }, [
    isOpen,
    ref
  ]);
  let onHide = () => {
    if ($a11501f3d1d39e6c$var$visibleOverlays[$a11501f3d1d39e6c$var$visibleOverlays.length - 1] === ref && onClose)
      onClose();
  };
  let onInteractOutsideStart = (e) => {
    if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.target)) {
      if ($a11501f3d1d39e6c$var$visibleOverlays[$a11501f3d1d39e6c$var$visibleOverlays.length - 1] === ref) {
        e.stopPropagation();
        e.preventDefault();
      }
    }
  };
  let onInteractOutside = (e) => {
    if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.target)) {
      if ($a11501f3d1d39e6c$var$visibleOverlays[$a11501f3d1d39e6c$var$visibleOverlays.length - 1] === ref) {
        e.stopPropagation();
        e.preventDefault();
      }
      onHide();
    }
  };
  let onKeyDown = (e) => {
    if (e.key === "Escape" && !isKeyboardDismissDisabled) {
      e.stopPropagation();
      e.preventDefault();
      onHide();
    }
  };
  (0, $e0b6e0b68ec7f50f$export$872b660ac5a1ff98)({
    ref,
    onInteractOutside: isDismissable ? onInteractOutside : null,
    onInteractOutsideStart
  });
  let { focusWithinProps } = (0, $9ab94262bd0047c7$export$420e68273165f4ec)({
    isDisabled: !shouldCloseOnBlur,
    onBlurWithin: (e) => {
      if (e.relatedTarget && (0, $9bf71ea28793e738$export$1258395f99bf9cbf)(e.relatedTarget))
        return;
      if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.relatedTarget))
        onClose();
    }
  });
  let onPointerDownUnderlay = (e) => {
    if (e.target === e.currentTarget)
      e.preventDefault();
  };
  return {
    overlayProps: {
      onKeyDown,
      ...focusWithinProps
    },
    underlayProps: {
      onPointerDown: onPointerDownUnderlay
    }
  };
}
function $628037886ba31236$export$f9d5c8beee7d008d(props, state, ref) {
  let { type } = props;
  let { isOpen } = state;
  (0, K)(() => {
    if (ref && ref.current)
      (0, $dd149f63282afbbf$export$f6211563215e3b37).set(ref.current, state.close);
  });
  let ariaHasPopup = void 0;
  if (type === "menu")
    ariaHasPopup = true;
  else if (type === "listbox")
    ariaHasPopup = "listbox";
  let overlayId = (0, $bdb11010cef70236$export$f680877a34711e37)();
  return {
    triggerProps: {
      "aria-haspopup": ariaHasPopup,
      "aria-expanded": isOpen,
      "aria-controls": isOpen ? overlayId : null,
      onPress: state.toggle
    },
    overlayProps: {
      id: overlayId
    }
  };
}
var $49c51c25361d4cd2$var$visualViewport = typeof window !== "undefined" && window.visualViewport;
var $49c51c25361d4cd2$var$nonTextInputTypes = /* @__PURE__ */ new Set([
  "checkbox",
  "radio",
  "range",
  "color",
  "file",
  "image",
  "button",
  "submit",
  "reset"
]);
var $49c51c25361d4cd2$var$preventScrollCount = 0;
var $49c51c25361d4cd2$var$restore;
function $49c51c25361d4cd2$export$ee0f7cc6afcd1c18(options = {}) {
  let { isDisabled } = options;
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (isDisabled)
      return;
    $49c51c25361d4cd2$var$preventScrollCount++;
    if ($49c51c25361d4cd2$var$preventScrollCount === 1) {
      if ((0, $c87311424ea30a05$export$fedb369cb70207f1)())
        $49c51c25361d4cd2$var$restore = $49c51c25361d4cd2$var$preventScrollMobileSafari();
      else
        $49c51c25361d4cd2$var$restore = $49c51c25361d4cd2$var$preventScrollStandard();
    }
    return () => {
      $49c51c25361d4cd2$var$preventScrollCount--;
      if ($49c51c25361d4cd2$var$preventScrollCount === 0)
        $49c51c25361d4cd2$var$restore();
    };
  }, [
    isDisabled
  ]);
}
function $49c51c25361d4cd2$var$preventScrollStandard() {
  return (0, $ff5963eb1fccf552$export$e08e3b67e392101e)($49c51c25361d4cd2$var$setStyle(document.documentElement, "paddingRight", `${window.innerWidth - document.documentElement.clientWidth}px`), $49c51c25361d4cd2$var$setStyle(document.documentElement, "overflow", "hidden"));
}
function $49c51c25361d4cd2$var$preventScrollMobileSafari() {
  let scrollable;
  let lastY = 0;
  let onTouchStart = (e) => {
    scrollable = (0, $62d8ded9296f3872$export$cfa2225e87938781)(e.target);
    if (scrollable === document.documentElement && scrollable === document.body)
      return;
    lastY = e.changedTouches[0].pageY;
  };
  let onTouchMove = (e) => {
    if (!scrollable || scrollable === document.documentElement || scrollable === document.body) {
      e.preventDefault();
      return;
    }
    let y = e.changedTouches[0].pageY;
    let scrollTop = scrollable.scrollTop;
    let bottom = scrollable.scrollHeight - scrollable.clientHeight;
    if (bottom === 0)
      return;
    if (scrollTop <= 0 && y > lastY || scrollTop >= bottom && y < lastY)
      e.preventDefault();
    lastY = y;
  };
  let onTouchEnd = (e) => {
    let target = e.target;
    if ($49c51c25361d4cd2$var$willOpenKeyboard(target) && target !== document.activeElement) {
      e.preventDefault();
      target.style.transform = "translateY(-2000px)";
      target.focus();
      requestAnimationFrame(() => {
        target.style.transform = "";
      });
    }
  };
  let onFocus = (e) => {
    let target = e.target;
    if ($49c51c25361d4cd2$var$willOpenKeyboard(target)) {
      target.style.transform = "translateY(-2000px)";
      requestAnimationFrame(() => {
        target.style.transform = "";
        if ($49c51c25361d4cd2$var$visualViewport) {
          if ($49c51c25361d4cd2$var$visualViewport.height < window.innerHeight)
            requestAnimationFrame(() => {
              $49c51c25361d4cd2$var$scrollIntoView(target);
            });
          else
            $49c51c25361d4cd2$var$visualViewport.addEventListener("resize", () => $49c51c25361d4cd2$var$scrollIntoView(target), {
              once: true
            });
        }
      });
    }
  };
  let onWindowScroll = () => {
    window.scrollTo(0, 0);
  };
  let scrollX = window.pageXOffset;
  let scrollY = window.pageYOffset;
  let restoreStyles = (0, $ff5963eb1fccf552$export$e08e3b67e392101e)($49c51c25361d4cd2$var$setStyle(document.documentElement, "paddingRight", `${window.innerWidth - document.documentElement.clientWidth}px`), $49c51c25361d4cd2$var$setStyle(document.documentElement, "overflow", "hidden"), $49c51c25361d4cd2$var$setStyle(document.body, "marginTop", `-${scrollY}px`));
  window.scrollTo(0, 0);
  let removeEvents = (0, $ff5963eb1fccf552$export$e08e3b67e392101e)($49c51c25361d4cd2$var$addEvent(document, "touchstart", onTouchStart, {
    passive: false,
    capture: true
  }), $49c51c25361d4cd2$var$addEvent(document, "touchmove", onTouchMove, {
    passive: false,
    capture: true
  }), $49c51c25361d4cd2$var$addEvent(document, "touchend", onTouchEnd, {
    passive: false,
    capture: true
  }), $49c51c25361d4cd2$var$addEvent(document, "focus", onFocus, true), $49c51c25361d4cd2$var$addEvent(window, "scroll", onWindowScroll));
  return () => {
    restoreStyles();
    removeEvents();
    window.scrollTo(scrollX, scrollY);
  };
}
function $49c51c25361d4cd2$var$setStyle(element, style, value) {
  let cur = element.style[style];
  element.style[style] = value;
  return () => {
    element.style[style] = cur;
  };
}
function $49c51c25361d4cd2$var$addEvent(target, event, handler, options) {
  target.addEventListener(event, handler, options);
  return () => {
    target.removeEventListener(event, handler, options);
  };
}
function $49c51c25361d4cd2$var$scrollIntoView(target) {
  let root3 = document.scrollingElement || document.documentElement;
  while (target && target !== root3) {
    let scrollable = (0, $62d8ded9296f3872$export$cfa2225e87938781)(target);
    if (scrollable !== document.documentElement && scrollable !== document.body && scrollable !== target) {
      let scrollableTop = scrollable.getBoundingClientRect().top;
      let targetTop = target.getBoundingClientRect().top;
      if (targetTop > scrollableTop + target.clientHeight)
        scrollable.scrollTop += targetTop - scrollableTop;
    }
    target = scrollable.parentElement;
  }
}
function $49c51c25361d4cd2$var$willOpenKeyboard(target) {
  return target instanceof HTMLInputElement && !$49c51c25361d4cd2$var$nonTextInputTypes.has(target.type) || target instanceof HTMLTextAreaElement || target instanceof HTMLElement && target.isContentEditable;
}
var $f57aed4a881a3485$var$Context = /* @__PURE__ */ (0, yn).createContext(null);
function $f57aed4a881a3485$export$178405afcd8c5eb(props) {
  let { children } = props;
  let parent = (0, ce)($f57aed4a881a3485$var$Context);
  let [modalCount, setModalCount] = (0, z)(0);
  let context = (0, j)(() => ({
    parent,
    modalCount,
    addModal() {
      setModalCount((count) => count + 1);
      if (parent)
        parent.addModal();
    },
    removeModal() {
      setModalCount((count) => count - 1);
      if (parent)
        parent.removeModal();
    }
  }), [
    parent,
    modalCount
  ]);
  return /* @__PURE__ */ (0, yn).createElement($f57aed4a881a3485$var$Context.Provider, {
    value: context
  }, children);
}
function $f57aed4a881a3485$export$d9aaed4c3ece1bc0() {
  let context = (0, ce)($f57aed4a881a3485$var$Context);
  return {
    modalProviderProps: {
      "aria-hidden": context && context.modalCount > 0 ? true : null
    }
  };
}
var $a2f21f5f14f60553$exports = {};
var $773d5888b972f1cf$exports = {};
$773d5888b972f1cf$exports = {
  "dismiss": `\u062A\u062C\u0627\u0647\u0644`
};
var $d11f19852b941573$exports = {};
$d11f19852b941573$exports = {
  "dismiss": `\u041E\u0442\u0445\u0432\u044A\u0440\u043B\u044F\u043D\u0435`
};
var $b983974c2ee1efb3$exports = {};
$b983974c2ee1efb3$exports = {
  "dismiss": `Odstranit`
};
var $5809cc9d4e92de73$exports = {};
$5809cc9d4e92de73$exports = {
  "dismiss": `Luk`
};
var $c68c2e4fc74398d1$exports = {};
$c68c2e4fc74398d1$exports = {
  "dismiss": `Schlie\xDFen`
};
var $0898b4c153db2b77$exports = {};
$0898b4c153db2b77$exports = {
  "dismiss": `\u0391\u03C0\u03CC\u03C1\u03C1\u03B9\u03C8\u03B7`
};
var $6d74810286a15183$exports = {};
$6d74810286a15183$exports = {
  "dismiss": `Dismiss`
};
var $309d73dc65f78055$exports = {};
$309d73dc65f78055$exports = {
  "dismiss": `Descartar`
};
var $44ad94f7205cf593$exports = {};
$44ad94f7205cf593$exports = {
  "dismiss": `L\xF5peta`
};
var $7c28f5687f0779a9$exports = {};
$7c28f5687f0779a9$exports = {
  "dismiss": `Hylk\xE4\xE4`
};
var $e6d75df4b68bd73a$exports = {};
$e6d75df4b68bd73a$exports = {
  "dismiss": `Rejeter`
};
var $87505c9dab186d0f$exports = {};
$87505c9dab186d0f$exports = {
  "dismiss": `\u05D4\u05EA\u05E2\u05DC\u05DD`
};
var $553439c3ffb3e492$exports = {};
$553439c3ffb3e492$exports = {
  "dismiss": `Odbaci`
};
var $74cf411061b983a2$exports = {};
$74cf411061b983a2$exports = {
  "dismiss": `Elutas\xEDt\xE1s`
};
var $e933f298574dc435$exports = {};
$e933f298574dc435$exports = {
  "dismiss": `Ignora`
};
var $ac91fc9fe02f71f6$exports = {};
$ac91fc9fe02f71f6$exports = {
  "dismiss": `\u9589\u3058\u308B`
};
var $52b96f86422025af$exports = {};
$52b96f86422025af$exports = {
  "dismiss": `\uBB34\uC2DC`
};
var $c0d724c3e51dafa6$exports = {};
$c0d724c3e51dafa6$exports = {
  "dismiss": `Atmesti`
};
var $c92899672a3fe72e$exports = {};
$c92899672a3fe72e$exports = {
  "dismiss": `Ner\u0101d\u012Bt`
};
var $9f576b39d8e7a9d6$exports = {};
$9f576b39d8e7a9d6$exports = {
  "dismiss": `Lukk`
};
var $9d025808aeec81a7$exports = {};
$9d025808aeec81a7$exports = {
  "dismiss": `Negeren`
};
var $fce709921e2c0fa6$exports = {};
$fce709921e2c0fa6$exports = {
  "dismiss": `Zignoruj`
};
var $2599cf0c4ab37f59$exports = {};
$2599cf0c4ab37f59$exports = {
  "dismiss": `Descartar`
};
var $3c220ae7ef8a35fd$exports = {};
$3c220ae7ef8a35fd$exports = {
  "dismiss": `Dispensar`
};
var $93562b5094072f54$exports = {};
$93562b5094072f54$exports = {
  "dismiss": `Revocare`
};
var $cd9e2abd0d06c7b4$exports = {};
$cd9e2abd0d06c7b4$exports = {
  "dismiss": `\u041F\u0440\u043E\u043F\u0443\u0441\u0442\u0438\u0442\u044C`
};
var $45375701f409adf1$exports = {};
$45375701f409adf1$exports = {
  "dismiss": `Zru\u0161i\u0165`
};
var $27fab53a576de9dd$exports = {};
$27fab53a576de9dd$exports = {
  "dismiss": `Opusti`
};
var $4438748d9952e7c7$exports = {};
$4438748d9952e7c7$exports = {
  "dismiss": `Odbaci`
};
var $0936d7347ef4da4c$exports = {};
$0936d7347ef4da4c$exports = {
  "dismiss": `Avvisa`
};
var $29700c92185d38f8$exports = {};
$29700c92185d38f8$exports = {
  "dismiss": `Kapat`
};
var $662ccaf2be4c25b3$exports = {};
$662ccaf2be4c25b3$exports = {
  "dismiss": `\u0421\u043A\u0430\u0441\u0443\u0432\u0430\u0442\u0438`
};
var $d80a27deda7cdb3c$exports = {};
$d80a27deda7cdb3c$exports = {
  "dismiss": `\u53D6\u6D88`
};
var $2b2734393847c884$exports = {};
$2b2734393847c884$exports = {
  "dismiss": `\u95DC\u9589`
};
$a2f21f5f14f60553$exports = {
  "ar-AE": $773d5888b972f1cf$exports,
  "bg-BG": $d11f19852b941573$exports,
  "cs-CZ": $b983974c2ee1efb3$exports,
  "da-DK": $5809cc9d4e92de73$exports,
  "de-DE": $c68c2e4fc74398d1$exports,
  "el-GR": $0898b4c153db2b77$exports,
  "en-US": $6d74810286a15183$exports,
  "es-ES": $309d73dc65f78055$exports,
  "et-EE": $44ad94f7205cf593$exports,
  "fi-FI": $7c28f5687f0779a9$exports,
  "fr-FR": $e6d75df4b68bd73a$exports,
  "he-IL": $87505c9dab186d0f$exports,
  "hr-HR": $553439c3ffb3e492$exports,
  "hu-HU": $74cf411061b983a2$exports,
  "it-IT": $e933f298574dc435$exports,
  "ja-JP": $ac91fc9fe02f71f6$exports,
  "ko-KR": $52b96f86422025af$exports,
  "lt-LT": $c0d724c3e51dafa6$exports,
  "lv-LV": $c92899672a3fe72e$exports,
  "nb-NO": $9f576b39d8e7a9d6$exports,
  "nl-NL": $9d025808aeec81a7$exports,
  "pl-PL": $fce709921e2c0fa6$exports,
  "pt-BR": $2599cf0c4ab37f59$exports,
  "pt-PT": $3c220ae7ef8a35fd$exports,
  "ro-RO": $93562b5094072f54$exports,
  "ru-RU": $cd9e2abd0d06c7b4$exports,
  "sk-SK": $45375701f409adf1$exports,
  "sl-SI": $27fab53a576de9dd$exports,
  "sr-SP": $4438748d9952e7c7$exports,
  "sv-SE": $0936d7347ef4da4c$exports,
  "tr-TR": $29700c92185d38f8$exports,
  "uk-UA": $662ccaf2be4c25b3$exports,
  "zh-CN": $d80a27deda7cdb3c$exports,
  "zh-TW": $2b2734393847c884$exports
};
function $86ea4cb521eb2e37$export$2317d149ed6f78c4(props) {
  let { onDismiss, ...otherProps } = props;
  let stringFormatter = (0, $fca6afa0e843324b$export$f12b703ca79dfbb1)((0, /* @__PURE__ */ $parcel$interopDefault($a2f21f5f14f60553$exports)));
  let labels = (0, $313b98861ee5dd6c$export$d6875122194c7b44)(otherProps, stringFormatter.format("dismiss"));
  let onClick = () => {
    if (onDismiss)
      onDismiss();
  };
  return /* @__PURE__ */ (0, yn).createElement((0, $5c3e21d68f1c4674$export$439d29a4e110a164), null, /* @__PURE__ */ (0, yn).createElement("button", {
    ...labels,
    tabIndex: -1,
    onClick
  }));
}
var $5e3802645cc19319$var$refCountMap = /* @__PURE__ */ new WeakMap();
var $5e3802645cc19319$var$observerStack = [];
function $5e3802645cc19319$export$1c3ebcada18427bf(targets, root3 = document.body) {
  let visibleNodes = new Set(targets);
  let hiddenNodes = /* @__PURE__ */ new Set();
  let walk = (root4) => {
    for (let element of root4.querySelectorAll("[data-live-announcer], [data-react-aria-top-layer]"))
      visibleNodes.add(element);
    let acceptNode = (node) => {
      if (visibleNodes.has(node) || hiddenNodes.has(node.parentElement) && node.parentElement.getAttribute("role") !== "row")
        return NodeFilter.FILTER_REJECT;
      for (let target of visibleNodes) {
        if (node.contains(target))
          return NodeFilter.FILTER_SKIP;
      }
      return NodeFilter.FILTER_ACCEPT;
    };
    let walker = document.createTreeWalker(root4, NodeFilter.SHOW_ELEMENT, {
      acceptNode
    });
    let acceptRoot = acceptNode(root4);
    if (acceptRoot === NodeFilter.FILTER_ACCEPT)
      hide(root4);
    if (acceptRoot !== NodeFilter.FILTER_REJECT) {
      let node = walker.nextNode();
      while (node != null) {
        hide(node);
        node = walker.nextNode();
      }
    }
  };
  let hide = (node) => {
    var _refCountMap_get;
    let refCount = (_refCountMap_get = $5e3802645cc19319$var$refCountMap.get(node)) !== null && _refCountMap_get !== void 0 ? _refCountMap_get : 0;
    if (node.getAttribute("aria-hidden") === "true" && refCount === 0)
      return;
    if (refCount === 0)
      node.setAttribute("aria-hidden", "true");
    hiddenNodes.add(node);
    $5e3802645cc19319$var$refCountMap.set(node, refCount + 1);
  };
  if ($5e3802645cc19319$var$observerStack.length)
    $5e3802645cc19319$var$observerStack[$5e3802645cc19319$var$observerStack.length - 1].disconnect();
  walk(root3);
  let observer2 = new MutationObserver((changes) => {
    for (let change of changes) {
      if (change.type !== "childList" || change.addedNodes.length === 0)
        continue;
      if (![
        ...visibleNodes,
        ...hiddenNodes
      ].some((node) => node.contains(change.target))) {
        for (let node of change.removedNodes)
          if (node instanceof Element) {
            visibleNodes.delete(node);
            hiddenNodes.delete(node);
          }
        for (let node of change.addedNodes) {
          if ((node instanceof HTMLElement || node instanceof SVGElement) && (node.dataset.liveAnnouncer === "true" || node.dataset.reactAriaTopLayer === "true"))
            visibleNodes.add(node);
          else if (node instanceof Element)
            walk(node);
        }
      }
    }
  });
  observer2.observe(root3, {
    childList: true,
    subtree: true
  });
  let observerWrapper = {
    observe() {
      observer2.observe(root3, {
        childList: true,
        subtree: true
      });
    },
    disconnect() {
      observer2.disconnect();
    }
  };
  $5e3802645cc19319$var$observerStack.push(observerWrapper);
  return () => {
    observer2.disconnect();
    for (let node of hiddenNodes) {
      let count = $5e3802645cc19319$var$refCountMap.get(node);
      if (count === 1) {
        node.removeAttribute("aria-hidden");
        $5e3802645cc19319$var$refCountMap.delete(node);
      } else
        $5e3802645cc19319$var$refCountMap.set(node, count - 1);
    }
    if (observerWrapper === $5e3802645cc19319$var$observerStack[$5e3802645cc19319$var$observerStack.length - 1]) {
      $5e3802645cc19319$var$observerStack.pop();
      if ($5e3802645cc19319$var$observerStack.length)
        $5e3802645cc19319$var$observerStack[$5e3802645cc19319$var$observerStack.length - 1].observe();
    } else
      $5e3802645cc19319$var$observerStack.splice($5e3802645cc19319$var$observerStack.indexOf(observerWrapper), 1);
  };
}
function $f2f8a6077418541e$export$542a6fd13ac93354(props, state) {
  let { triggerRef, popoverRef, isNonModal, isKeyboardDismissDisabled, ...otherProps } = props;
  let { overlayProps, underlayProps } = (0, $a11501f3d1d39e6c$export$ea8f71083e90600f)({
    isOpen: state.isOpen,
    onClose: state.close,
    shouldCloseOnBlur: true,
    isDismissable: !isNonModal,
    isKeyboardDismissDisabled
  }, popoverRef);
  let { overlayProps: positionProps, arrowProps, placement } = (0, $2a41e45df1593e64$export$d39e1813b3bdd0e1)({
    ...otherProps,
    targetRef: triggerRef,
    overlayRef: popoverRef,
    isOpen: state.isOpen,
    onClose: null
  });
  (0, $49c51c25361d4cd2$export$ee0f7cc6afcd1c18)({
    isDisabled: isNonModal
  });
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (state.isOpen && !isNonModal && popoverRef.current)
      return (0, $5e3802645cc19319$export$1c3ebcada18427bf)([
        popoverRef.current
      ]);
  }, [
    isNonModal,
    state.isOpen,
    popoverRef
  ]);
  return {
    popoverProps: (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(overlayProps, positionProps),
    arrowProps,
    underlayProps,
    placement
  };
}
var $337b884510726a0d$export$a2200b96afd16271 = /* @__PURE__ */ (0, yn).createContext(null);
function $337b884510726a0d$export$c6fdb837b070b4ff(props) {
  let isSSR = (0, $704cf1d3b684cc5c$export$535bd6ca7f90a273)();
  let { portalContainer = isSSR ? null : document.body } = props;
  let [contain, setContain] = (0, z)(false);
  let contextValue = (0, j)(() => ({
    contain,
    setContain
  }), [
    contain,
    setContain
  ]);
  if (!portalContainer)
    return null;
  let contents;
  if (!props.disableFocusManagement)
    contents = /* @__PURE__ */ (0, yn).createElement($337b884510726a0d$export$a2200b96afd16271.Provider, {
      value: contextValue
    }, /* @__PURE__ */ (0, yn).createElement((0, $9bf71ea28793e738$export$20e40289641fbbb6), {
      restoreFocus: true,
      contain
    }, props.children));
  else
    contents = /* @__PURE__ */ (0, yn).createElement($337b884510726a0d$export$a2200b96afd16271.Provider, {
      value: contextValue
    }, props.children);
  return /* @__PURE__ */ (0, yn).createPortal(contents, portalContainer);
}
function $337b884510726a0d$export$14c98a7594375490() {
  let ctx = (0, ce)($337b884510726a0d$export$a2200b96afd16271);
  let setContain = ctx === null || ctx === void 0 ? void 0 : ctx.setContain;
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    setContain === null || setContain === void 0 ? void 0 : setContain(true);
  }, [
    setContain
  ]);
}
function $8ac8429251c45e4b$export$dbc0f175b25fb0fb(props, state, ref) {
  let { overlayProps, underlayProps } = (0, $a11501f3d1d39e6c$export$ea8f71083e90600f)({
    ...props,
    isOpen: state.isOpen,
    onClose: state.close
  }, ref);
  (0, $49c51c25361d4cd2$export$ee0f7cc6afcd1c18)({
    isDisabled: !state.isOpen
  });
  (0, $337b884510726a0d$export$14c98a7594375490)();
  (0, K)(() => {
    if (state.isOpen)
      return (0, $5e3802645cc19319$export$1c3ebcada18427bf)([
        ref.current
      ]);
  }, [
    state.isOpen,
    ref
  ]);
  return {
    modalProps: (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(overlayProps),
    underlayProps
  };
}

// ../../node_modules/@react-spectrum/provider/dist/import.mjs
init_preact_min();
function $parcel$interopDefault2(a) {
  return a && a.__esModule ? a.default : a;
}
function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $a8430f637b4ccbce$export$841858b892ce1f4c = (0, yn).createContext(null);
$a8430f637b4ccbce$export$841858b892ce1f4c.displayName = "ProviderContext";
var $698974e9dd92c2ec$exports = {};
$parcel$export($698974e9dd92c2ec$exports, "spectrum", () => $698974e9dd92c2ec$export$3311ab3a441bc141, (v) => $698974e9dd92c2ec$export$3311ab3a441bc141 = v);
var $698974e9dd92c2ec$export$3311ab3a441bc141;
$698974e9dd92c2ec$export$3311ab3a441bc141 = "spectrum_b37d53";
var $5cac98e4c80e6707$exports = {};
$parcel$export($5cac98e4c80e6707$exports, "spectrum", () => $5cac98e4c80e6707$export$3311ab3a441bc141, (v) => $5cac98e4c80e6707$export$3311ab3a441bc141 = v);
$parcel$export($5cac98e4c80e6707$exports, "spectrum-Body", () => $5cac98e4c80e6707$export$a30bf7810c8453d1, (v) => $5cac98e4c80e6707$export$a30bf7810c8453d1 = v);
$parcel$export($5cac98e4c80e6707$exports, "spectrum-Body--italic", () => $5cac98e4c80e6707$export$7b2dac1166f6ec4c, (v) => $5cac98e4c80e6707$export$7b2dac1166f6ec4c = v);
var $5cac98e4c80e6707$export$3311ab3a441bc141;
var $5cac98e4c80e6707$export$a30bf7810c8453d1;
var $5cac98e4c80e6707$export$7b2dac1166f6ec4c;
$5cac98e4c80e6707$export$3311ab3a441bc141 = "spectrum_2a241c";
$5cac98e4c80e6707$export$a30bf7810c8453d1 = "spectrum-Body_2a241c";
$5cac98e4c80e6707$export$7b2dac1166f6ec4c = "spectrum-Body--italic_2a241c";
function $d8453c5ae7fac713$export$6343629ee1b29116(theme, defaultColorScheme) {
  let matchesDark = (0, $3df547e395c4522f$export$32d5543ab307c01)("(prefers-color-scheme: dark)");
  let matchesLight = (0, $3df547e395c4522f$export$32d5543ab307c01)("(prefers-color-scheme: light)");
  if (theme.dark && matchesDark)
    return "dark";
  if (theme.light && matchesLight)
    return "light";
  if (theme.dark && defaultColorScheme === "dark")
    return "dark";
  if (theme.light && defaultColorScheme === "light")
    return "light";
  if (!theme.dark)
    return "light";
  if (!theme.light)
    return "dark";
  return "light";
}
function $d8453c5ae7fac713$export$a8d2043b2d807f4d(theme) {
  let matchesFine = (0, $3df547e395c4522f$export$32d5543ab307c01)("(any-pointer: fine)");
  if (matchesFine && theme.medium)
    return "medium";
  if (theme.large)
    return "large";
  return "medium";
}
var $7b22e09dddddd7da$exports = {};
$7b22e09dddddd7da$exports = JSON.parse('{"name":"@react-spectrum/provider","version":"3.8.0","description":"Spectrum UI components in React","license":"Apache-2.0","main":"dist/main.js","module":"dist/module.js","exports":{"types":"./dist/types.d.ts","import":"./dist/import.mjs","require":"./dist/main.js"},"types":"dist/types.d.ts","source":"src/index.ts","files":["dist","src"],"sideEffects":["*.css"],"targets":{"main":{"includeNodeModules":["@adobe/spectrum-css-temp"]},"module":{"includeNodeModules":["@adobe/spectrum-css-temp"]}},"repository":{"type":"git","url":"https://github.com/adobe/react-spectrum"},"dependencies":{"@react-aria/i18n":"^3.8.0","@react-aria/overlays":"^3.15.0","@react-aria/utils":"^3.18.0","@react-spectrum/utils":"^3.10.0","@react-types/provider":"^3.6.2","@react-types/shared":"^3.18.1","@swc/helpers":"^0.5.0","clsx":"^1.1.1"},"devDependencies":{"@adobe/spectrum-css-temp":"3.0.0-alpha.1"},"peerDependencies":{"react":"^16.8.0 || ^17.0.0-rc.1 || ^18.0.0","react-dom":"^16.8.0 || ^17.0.0-rc.1 || ^18.0.0"},"publishConfig":{"access":"public"}}');
var $7167f8da3cce35e4$var$DEFAULT_BREAKPOINTS = {
  S: 640,
  M: 768,
  L: 1024,
  XL: 1280,
  XXL: 1536
};
function $7167f8da3cce35e4$var$Provider(props, ref) {
  let prevContext = $7167f8da3cce35e4$export$693cdb10cec23617();
  let prevColorScheme = prevContext && prevContext.colorScheme;
  let prevBreakpoints = prevContext && prevContext.breakpoints;
  let { theme = prevContext && prevContext.theme, defaultColorScheme } = props;
  if (!theme)
    throw new Error("theme not found, the parent provider must have a theme provided");
  let autoColorScheme = (0, $d8453c5ae7fac713$export$6343629ee1b29116)(theme, defaultColorScheme);
  let autoScale = (0, $d8453c5ae7fac713$export$a8d2043b2d807f4d)(theme);
  let { locale: prevLocale } = (0, $18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  let usePrevColorScheme = !!theme[prevColorScheme];
  let { colorScheme = usePrevColorScheme ? prevColorScheme : autoColorScheme, scale = prevContext ? prevContext.scale : autoScale, locale = prevContext ? prevLocale : null, breakpoints = prevContext ? prevBreakpoints : $7167f8da3cce35e4$var$DEFAULT_BREAKPOINTS, children, isQuiet, isEmphasized, isDisabled, isRequired, isReadOnly, validationState, ...otherProps } = props;
  let currentProps = {
    version: $7b22e09dddddd7da$exports.version,
    theme,
    breakpoints,
    colorScheme,
    scale,
    isQuiet,
    isEmphasized,
    isDisabled,
    isRequired,
    isReadOnly,
    validationState
  };
  let matchedBreakpoints = (0, $1051245f87c5981d$export$140ae7baa51cca23)(breakpoints);
  let filteredProps = {};
  Object.entries(currentProps).forEach(([key, value]) => value !== void 0 && (filteredProps[key] = value));
  let context = Object.assign({}, prevContext, filteredProps);
  let contents = children;
  let domProps = (0, $65484d02dcb7eb3e$export$457c3d6518dd4c6f)(otherProps);
  let { styleProps } = (0, $380ed8f3903c3931$export$b8e6fb9d2dff3f41)(otherProps, void 0, {
    matchedBreakpoints
  });
  if (!prevContext || props.locale || theme !== prevContext.theme || colorScheme !== prevContext.colorScheme || scale !== prevContext.scale || Object.keys(domProps).length > 0 || otherProps.UNSAFE_className || Object.keys(styleProps.style).length > 0)
    contents = /* @__PURE__ */ (0, yn).createElement($7167f8da3cce35e4$var$ProviderWrapper, {
      ...props,
      UNSAFE_style: {
        isolation: !prevContext ? "isolate" : void 0,
        ...styleProps.style
      },
      ref
    }, contents);
  return /* @__PURE__ */ (0, yn).createElement((0, $a8430f637b4ccbce$export$841858b892ce1f4c).Provider, {
    value: context
  }, /* @__PURE__ */ (0, yn).createElement((0, $18f2051aff69b9bf$export$a54013f0d02a8f82), {
    locale
  }, /* @__PURE__ */ (0, yn).createElement((0, $1051245f87c5981d$export$8214320346cf5104), {
    matchedBreakpoints
  }, /* @__PURE__ */ (0, yn).createElement((0, $f57aed4a881a3485$export$178405afcd8c5eb), null, contents))));
}
var $7167f8da3cce35e4$export$2881499e37b75b9a = /* @__PURE__ */ (0, yn).forwardRef($7167f8da3cce35e4$var$Provider);
var $7167f8da3cce35e4$var$ProviderWrapper = /* @__PURE__ */ (0, yn).forwardRef(function ProviderWrapper(props, ref) {
  let { children, ...otherProps } = props;
  let { locale, direction } = (0, $18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  let { theme, colorScheme, scale } = $7167f8da3cce35e4$export$693cdb10cec23617();
  let { modalProviderProps } = (0, $f57aed4a881a3485$export$d9aaed4c3ece1bc0)();
  let { styleProps } = (0, $380ed8f3903c3931$export$b8e6fb9d2dff3f41)(otherProps);
  let domRef = (0, $98e5a8ae0e6415af$export$c2c55ef9111cafd8)(ref);
  let themeKey = Object.keys(theme[colorScheme])[0];
  let scaleKey = Object.keys(theme[scale])[0];
  let className = (0, clsx_m_default)(styleProps.className, (0, /* @__PURE__ */ $parcel$interopDefault2($698974e9dd92c2ec$exports))["spectrum"], (0, /* @__PURE__ */ $parcel$interopDefault2($5cac98e4c80e6707$exports))["spectrum"], Object.values(theme[colorScheme]), Object.values(theme[scale]), theme.global ? Object.values(theme.global) : null, {
    "react-spectrum-provider": (0, $fd933927dbac1f15$export$46d604dce8bf8724),
    spectrum: (0, $fd933927dbac1f15$export$46d604dce8bf8724),
    [themeKey]: (0, $fd933927dbac1f15$export$46d604dce8bf8724),
    [scaleKey]: (0, $fd933927dbac1f15$export$46d604dce8bf8724)
  });
  var _props_colorScheme, _ref;
  let style = {
    ...styleProps.style,
    // This ensures that browser native UI like scrollbars are rendered in the right color scheme.
    // See https://web.dev/color-scheme/.
    colorScheme: (_ref = (_props_colorScheme = props.colorScheme) !== null && _props_colorScheme !== void 0 ? _props_colorScheme : colorScheme) !== null && _ref !== void 0 ? _ref : Object.keys(theme).filter((k) => k === "light" || k === "dark").join(" ")
  };
  let hasWarned = (0, ie)(false);
  (0, K)(() => {
    if (direction && domRef.current) {
      let closestDir = domRef.current.parentElement.closest("[dir]");
      let dir = closestDir && closestDir.getAttribute("dir");
      if (dir && dir !== direction && !hasWarned.current) {
        console.warn(`Language directions cannot be nested. ${direction} inside ${dir}.`);
        hasWarned.current = true;
      }
    }
  }, [
    direction,
    domRef,
    hasWarned
  ]);
  return /* @__PURE__ */ (0, yn).createElement("div", {
    ...(0, $65484d02dcb7eb3e$export$457c3d6518dd4c6f)(otherProps),
    ...styleProps,
    ...modalProviderProps,
    className,
    style,
    lang: locale,
    dir: direction,
    ref: domRef
  }, children);
});
function $7167f8da3cce35e4$export$693cdb10cec23617() {
  return (0, ce)((0, $a8430f637b4ccbce$export$841858b892ce1f4c));
}
function $7167f8da3cce35e4$export$521c373ccc32c300(props) {
  let context = $7167f8da3cce35e4$export$693cdb10cec23617();
  if (!context)
    return props;
  return Object.assign({}, {
    isQuiet: context.isQuiet,
    isEmphasized: context.isEmphasized,
    isDisabled: context.isDisabled,
    isRequired: context.isRequired,
    isReadOnly: context.isReadOnly,
    validationState: context.validationState
  }, props);
}

// ../../node_modules/@spectrum-icons/ui/CornerTriangle.module.mjs
var import_CornerTriangle = __toESM(require_CornerTriangle(), 1);

// ../../node_modules/@react-spectrum/icon/dist/import.mjs
init_preact_min();
function $parcel$interopDefault3(a) {
  return a && a.__esModule ? a.default : a;
}
function $parcel$export2(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $6edfbdaffbc9baf9$exports = {};
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-Icon", () => $6edfbdaffbc9baf9$export$d374b04f30360026, (v) => $6edfbdaffbc9baf9$export$d374b04f30360026 = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon", () => $6edfbdaffbc9baf9$export$c7db7fdc5aac13aa, (v) => $6edfbdaffbc9baf9$export$c7db7fdc5aac13aa = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-Icon--sizeXXS", () => $6edfbdaffbc9baf9$export$cab8448604b31f43, (v) => $6edfbdaffbc9baf9$export$cab8448604b31f43 = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-Icon--sizeXS", () => $6edfbdaffbc9baf9$export$557c0af6873b4222, (v) => $6edfbdaffbc9baf9$export$557c0af6873b4222 = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-Icon--sizeS", () => $6edfbdaffbc9baf9$export$34ce05647f0c65e, (v) => $6edfbdaffbc9baf9$export$34ce05647f0c65e = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-Icon--sizeM", () => $6edfbdaffbc9baf9$export$8f1693ac47916bbf, (v) => $6edfbdaffbc9baf9$export$8f1693ac47916bbf = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-Icon--sizeL", () => $6edfbdaffbc9baf9$export$8d23c37ef2a4f13e, (v) => $6edfbdaffbc9baf9$export$8d23c37ef2a4f13e = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-Icon--sizeXL", () => $6edfbdaffbc9baf9$export$c6e70a22e841bc1b, (v) => $6edfbdaffbc9baf9$export$c6e70a22e841bc1b = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-Icon--sizeXXL", () => $6edfbdaffbc9baf9$export$b37777493a27e620, (v) => $6edfbdaffbc9baf9$export$b37777493a27e620 = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum--medium", () => $6edfbdaffbc9baf9$export$4c0c83b3f4303ef8, (v) => $6edfbdaffbc9baf9$export$4c0c83b3f4303ef8 = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon--large", () => $6edfbdaffbc9baf9$export$2265a487ad399d8b, (v) => $6edfbdaffbc9baf9$export$2265a487ad399d8b = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon--medium", () => $6edfbdaffbc9baf9$export$a6044013cf72ddc9, (v) => $6edfbdaffbc9baf9$export$a6044013cf72ddc9 = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum--large", () => $6edfbdaffbc9baf9$export$a88a8dbe29386d31, (v) => $6edfbdaffbc9baf9$export$a88a8dbe29386d31 = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-AlertMedium", () => $6edfbdaffbc9baf9$export$83be8302c01b6478, (v) => $6edfbdaffbc9baf9$export$83be8302c01b6478 = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-AlertSmall", () => $6edfbdaffbc9baf9$export$57b49d6ee2e9f187, (v) => $6edfbdaffbc9baf9$export$57b49d6ee2e9f187 = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-ArrowDownSmall", () => $6edfbdaffbc9baf9$export$81968d05e3681b3f, (v) => $6edfbdaffbc9baf9$export$81968d05e3681b3f = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-ArrowLeftMedium", () => $6edfbdaffbc9baf9$export$c0d655f335b5bc31, (v) => $6edfbdaffbc9baf9$export$c0d655f335b5bc31 = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-Asterisk", () => $6edfbdaffbc9baf9$export$cca4342eca45562, (v) => $6edfbdaffbc9baf9$export$cca4342eca45562 = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-CheckmarkMedium", () => $6edfbdaffbc9baf9$export$edc4a2e9af971b26, (v) => $6edfbdaffbc9baf9$export$edc4a2e9af971b26 = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-CheckmarkSmall", () => $6edfbdaffbc9baf9$export$9e665cb12e71e037, (v) => $6edfbdaffbc9baf9$export$9e665cb12e71e037 = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-ChevronDownMedium", () => $6edfbdaffbc9baf9$export$2f91b7a7627906d5, (v) => $6edfbdaffbc9baf9$export$2f91b7a7627906d5 = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-ChevronDownSmall", () => $6edfbdaffbc9baf9$export$56efb4ec9eb35c07, (v) => $6edfbdaffbc9baf9$export$56efb4ec9eb35c07 = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-ChevronLeftLarge", () => $6edfbdaffbc9baf9$export$5861dfe1d581a528, (v) => $6edfbdaffbc9baf9$export$5861dfe1d581a528 = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-ChevronLeftMedium", () => $6edfbdaffbc9baf9$export$595a122b60890c78, (v) => $6edfbdaffbc9baf9$export$595a122b60890c78 = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-ChevronRightLarge", () => $6edfbdaffbc9baf9$export$596373794435f8bc, (v) => $6edfbdaffbc9baf9$export$596373794435f8bc = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-ChevronRightMedium", () => $6edfbdaffbc9baf9$export$32b379a02cafbfb3, (v) => $6edfbdaffbc9baf9$export$32b379a02cafbfb3 = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-ChevronRightSmall", () => $6edfbdaffbc9baf9$export$ee5de2c4d7c8faa4, (v) => $6edfbdaffbc9baf9$export$ee5de2c4d7c8faa4 = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-ChevronUpSmall", () => $6edfbdaffbc9baf9$export$c1cbae72fd236fd9, (v) => $6edfbdaffbc9baf9$export$c1cbae72fd236fd9 = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-CornerTriangle", () => $6edfbdaffbc9baf9$export$636d8cde4f6b7e6, (v) => $6edfbdaffbc9baf9$export$636d8cde4f6b7e6 = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-CrossLarge", () => $6edfbdaffbc9baf9$export$1f0ad4082256e3df, (v) => $6edfbdaffbc9baf9$export$1f0ad4082256e3df = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-CrossMedium", () => $6edfbdaffbc9baf9$export$1e0848411e254295, (v) => $6edfbdaffbc9baf9$export$1e0848411e254295 = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-CrossSmall", () => $6edfbdaffbc9baf9$export$1c1bddac0ae5fbe5, (v) => $6edfbdaffbc9baf9$export$1c1bddac0ae5fbe5 = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-DashSmall", () => $6edfbdaffbc9baf9$export$98de2b9917cd3b6a, (v) => $6edfbdaffbc9baf9$export$98de2b9917cd3b6a = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-DoubleGripper", () => $6edfbdaffbc9baf9$export$3c956876cb11c1e1, (v) => $6edfbdaffbc9baf9$export$3c956876cb11c1e1 = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-FolderBreadcrumb", () => $6edfbdaffbc9baf9$export$55cf2795737352fc, (v) => $6edfbdaffbc9baf9$export$55cf2795737352fc = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-HelpMedium", () => $6edfbdaffbc9baf9$export$d5d1e3e09ea6cd5, (v) => $6edfbdaffbc9baf9$export$d5d1e3e09ea6cd5 = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-HelpSmall", () => $6edfbdaffbc9baf9$export$f51b22382127207d, (v) => $6edfbdaffbc9baf9$export$f51b22382127207d = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-InfoMedium", () => $6edfbdaffbc9baf9$export$825a6c2340d3b7e5, (v) => $6edfbdaffbc9baf9$export$825a6c2340d3b7e5 = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-InfoSmall", () => $6edfbdaffbc9baf9$export$4828f4a6bfd26c04, (v) => $6edfbdaffbc9baf9$export$4828f4a6bfd26c04 = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-ListGripper", () => $6edfbdaffbc9baf9$export$1254ece141a8dac6, (v) => $6edfbdaffbc9baf9$export$1254ece141a8dac6 = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-Magnifier", () => $6edfbdaffbc9baf9$export$a33650c9f4cc191e, (v) => $6edfbdaffbc9baf9$export$a33650c9f4cc191e = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-SkipLeft", () => $6edfbdaffbc9baf9$export$9eb19533e4b8cc28, (v) => $6edfbdaffbc9baf9$export$9eb19533e4b8cc28 = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-SkipRight", () => $6edfbdaffbc9baf9$export$67704939e41f705a, (v) => $6edfbdaffbc9baf9$export$67704939e41f705a = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-Star", () => $6edfbdaffbc9baf9$export$c4d219c150b98c92, (v) => $6edfbdaffbc9baf9$export$c4d219c150b98c92 = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-StarOutline", () => $6edfbdaffbc9baf9$export$bcda0a6a6d7202af, (v) => $6edfbdaffbc9baf9$export$bcda0a6a6d7202af = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-SuccessMedium", () => $6edfbdaffbc9baf9$export$d18d2d837989a797, (v) => $6edfbdaffbc9baf9$export$d18d2d837989a797 = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-SuccessSmall", () => $6edfbdaffbc9baf9$export$506ac7a1a72a2c65, (v) => $6edfbdaffbc9baf9$export$506ac7a1a72a2c65 = v);
$parcel$export2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-TripleGripper", () => $6edfbdaffbc9baf9$export$12b8600bcd969018, (v) => $6edfbdaffbc9baf9$export$12b8600bcd969018 = v);
var $6edfbdaffbc9baf9$export$d374b04f30360026;
var $6edfbdaffbc9baf9$export$c7db7fdc5aac13aa;
var $6edfbdaffbc9baf9$export$cab8448604b31f43;
var $6edfbdaffbc9baf9$export$557c0af6873b4222;
var $6edfbdaffbc9baf9$export$34ce05647f0c65e;
var $6edfbdaffbc9baf9$export$8f1693ac47916bbf;
var $6edfbdaffbc9baf9$export$8d23c37ef2a4f13e;
var $6edfbdaffbc9baf9$export$c6e70a22e841bc1b;
var $6edfbdaffbc9baf9$export$b37777493a27e620;
var $6edfbdaffbc9baf9$export$4c0c83b3f4303ef8;
var $6edfbdaffbc9baf9$export$2265a487ad399d8b;
var $6edfbdaffbc9baf9$export$a6044013cf72ddc9;
var $6edfbdaffbc9baf9$export$a88a8dbe29386d31;
var $6edfbdaffbc9baf9$export$83be8302c01b6478;
var $6edfbdaffbc9baf9$export$57b49d6ee2e9f187;
var $6edfbdaffbc9baf9$export$81968d05e3681b3f;
var $6edfbdaffbc9baf9$export$c0d655f335b5bc31;
var $6edfbdaffbc9baf9$export$cca4342eca45562;
var $6edfbdaffbc9baf9$export$edc4a2e9af971b26;
var $6edfbdaffbc9baf9$export$9e665cb12e71e037;
var $6edfbdaffbc9baf9$export$2f91b7a7627906d5;
var $6edfbdaffbc9baf9$export$56efb4ec9eb35c07;
var $6edfbdaffbc9baf9$export$5861dfe1d581a528;
var $6edfbdaffbc9baf9$export$595a122b60890c78;
var $6edfbdaffbc9baf9$export$596373794435f8bc;
var $6edfbdaffbc9baf9$export$32b379a02cafbfb3;
var $6edfbdaffbc9baf9$export$ee5de2c4d7c8faa4;
var $6edfbdaffbc9baf9$export$c1cbae72fd236fd9;
var $6edfbdaffbc9baf9$export$636d8cde4f6b7e6;
var $6edfbdaffbc9baf9$export$1f0ad4082256e3df;
var $6edfbdaffbc9baf9$export$1e0848411e254295;
var $6edfbdaffbc9baf9$export$1c1bddac0ae5fbe5;
var $6edfbdaffbc9baf9$export$98de2b9917cd3b6a;
var $6edfbdaffbc9baf9$export$3c956876cb11c1e1;
var $6edfbdaffbc9baf9$export$55cf2795737352fc;
var $6edfbdaffbc9baf9$export$d5d1e3e09ea6cd5;
var $6edfbdaffbc9baf9$export$f51b22382127207d;
var $6edfbdaffbc9baf9$export$825a6c2340d3b7e5;
var $6edfbdaffbc9baf9$export$4828f4a6bfd26c04;
var $6edfbdaffbc9baf9$export$1254ece141a8dac6;
var $6edfbdaffbc9baf9$export$a33650c9f4cc191e;
var $6edfbdaffbc9baf9$export$9eb19533e4b8cc28;
var $6edfbdaffbc9baf9$export$67704939e41f705a;
var $6edfbdaffbc9baf9$export$c4d219c150b98c92;
var $6edfbdaffbc9baf9$export$bcda0a6a6d7202af;
var $6edfbdaffbc9baf9$export$d18d2d837989a797;
var $6edfbdaffbc9baf9$export$506ac7a1a72a2c65;
var $6edfbdaffbc9baf9$export$12b8600bcd969018;
$6edfbdaffbc9baf9$export$d374b04f30360026 = "spectrum-Icon_368b34";
$6edfbdaffbc9baf9$export$c7db7fdc5aac13aa = "spectrum-UIIcon_368b34";
$6edfbdaffbc9baf9$export$cab8448604b31f43 = "spectrum-Icon--sizeXXS_368b34";
$6edfbdaffbc9baf9$export$557c0af6873b4222 = "spectrum-Icon--sizeXS_368b34";
$6edfbdaffbc9baf9$export$34ce05647f0c65e = "spectrum-Icon--sizeS_368b34";
$6edfbdaffbc9baf9$export$8f1693ac47916bbf = "spectrum-Icon--sizeM_368b34";
$6edfbdaffbc9baf9$export$8d23c37ef2a4f13e = "spectrum-Icon--sizeL_368b34";
$6edfbdaffbc9baf9$export$c6e70a22e841bc1b = "spectrum-Icon--sizeXL_368b34";
$6edfbdaffbc9baf9$export$b37777493a27e620 = "spectrum-Icon--sizeXXL_368b34";
$6edfbdaffbc9baf9$export$4c0c83b3f4303ef8 = "spectrum--medium_368b34";
$6edfbdaffbc9baf9$export$2265a487ad399d8b = "spectrum-UIIcon--large_368b34";
$6edfbdaffbc9baf9$export$a6044013cf72ddc9 = "spectrum-UIIcon--medium_368b34";
$6edfbdaffbc9baf9$export$a88a8dbe29386d31 = "spectrum--large_368b34";
$6edfbdaffbc9baf9$export$83be8302c01b6478 = "spectrum-UIIcon-AlertMedium_368b34";
$6edfbdaffbc9baf9$export$57b49d6ee2e9f187 = "spectrum-UIIcon-AlertSmall_368b34";
$6edfbdaffbc9baf9$export$81968d05e3681b3f = "spectrum-UIIcon-ArrowDownSmall_368b34";
$6edfbdaffbc9baf9$export$c0d655f335b5bc31 = "spectrum-UIIcon-ArrowLeftMedium_368b34";
$6edfbdaffbc9baf9$export$cca4342eca45562 = "spectrum-UIIcon-Asterisk_368b34";
$6edfbdaffbc9baf9$export$edc4a2e9af971b26 = "spectrum-UIIcon-CheckmarkMedium_368b34";
$6edfbdaffbc9baf9$export$9e665cb12e71e037 = "spectrum-UIIcon-CheckmarkSmall_368b34";
$6edfbdaffbc9baf9$export$2f91b7a7627906d5 = "spectrum-UIIcon-ChevronDownMedium_368b34";
$6edfbdaffbc9baf9$export$56efb4ec9eb35c07 = "spectrum-UIIcon-ChevronDownSmall_368b34";
$6edfbdaffbc9baf9$export$5861dfe1d581a528 = "spectrum-UIIcon-ChevronLeftLarge_368b34";
$6edfbdaffbc9baf9$export$595a122b60890c78 = "spectrum-UIIcon-ChevronLeftMedium_368b34";
$6edfbdaffbc9baf9$export$596373794435f8bc = "spectrum-UIIcon-ChevronRightLarge_368b34";
$6edfbdaffbc9baf9$export$32b379a02cafbfb3 = "spectrum-UIIcon-ChevronRightMedium_368b34";
$6edfbdaffbc9baf9$export$ee5de2c4d7c8faa4 = "spectrum-UIIcon-ChevronRightSmall_368b34";
$6edfbdaffbc9baf9$export$c1cbae72fd236fd9 = "spectrum-UIIcon-ChevronUpSmall_368b34";
$6edfbdaffbc9baf9$export$636d8cde4f6b7e6 = "spectrum-UIIcon-CornerTriangle_368b34";
$6edfbdaffbc9baf9$export$1f0ad4082256e3df = "spectrum-UIIcon-CrossLarge_368b34";
$6edfbdaffbc9baf9$export$1e0848411e254295 = "spectrum-UIIcon-CrossMedium_368b34";
$6edfbdaffbc9baf9$export$1c1bddac0ae5fbe5 = "spectrum-UIIcon-CrossSmall_368b34";
$6edfbdaffbc9baf9$export$98de2b9917cd3b6a = "spectrum-UIIcon-DashSmall_368b34";
$6edfbdaffbc9baf9$export$3c956876cb11c1e1 = "spectrum-UIIcon-DoubleGripper_368b34";
$6edfbdaffbc9baf9$export$55cf2795737352fc = "spectrum-UIIcon-FolderBreadcrumb_368b34";
$6edfbdaffbc9baf9$export$d5d1e3e09ea6cd5 = "spectrum-UIIcon-HelpMedium_368b34";
$6edfbdaffbc9baf9$export$f51b22382127207d = "spectrum-UIIcon-HelpSmall_368b34";
$6edfbdaffbc9baf9$export$825a6c2340d3b7e5 = "spectrum-UIIcon-InfoMedium_368b34";
$6edfbdaffbc9baf9$export$4828f4a6bfd26c04 = "spectrum-UIIcon-InfoSmall_368b34";
$6edfbdaffbc9baf9$export$1254ece141a8dac6 = "spectrum-UIIcon-ListGripper_368b34";
$6edfbdaffbc9baf9$export$a33650c9f4cc191e = "spectrum-UIIcon-Magnifier_368b34";
$6edfbdaffbc9baf9$export$9eb19533e4b8cc28 = "spectrum-UIIcon-SkipLeft_368b34";
$6edfbdaffbc9baf9$export$67704939e41f705a = "spectrum-UIIcon-SkipRight_368b34";
$6edfbdaffbc9baf9$export$c4d219c150b98c92 = "spectrum-UIIcon-Star_368b34";
$6edfbdaffbc9baf9$export$bcda0a6a6d7202af = "spectrum-UIIcon-StarOutline_368b34";
$6edfbdaffbc9baf9$export$d18d2d837989a797 = "spectrum-UIIcon-SuccessMedium_368b34";
$6edfbdaffbc9baf9$export$506ac7a1a72a2c65 = "spectrum-UIIcon-SuccessSmall_368b34";
$6edfbdaffbc9baf9$export$12b8600bcd969018 = "spectrum-UIIcon-TripleGripper_368b34";
function $6bfb67578ee6effd$var$iconColorValue(value) {
  return `var(--spectrum-semantic-${value}-color-icon)`;
}
var $6bfb67578ee6effd$var$iconStyleProps = {
  ...(0, $380ed8f3903c3931$export$fe9c6e915565b4e8),
  color: [
    "color",
    $6bfb67578ee6effd$var$iconColorValue
  ]
};
function $6bfb67578ee6effd$export$f04a61298a47a40f(props) {
  props = (0, $59d09bcc83651bf9$export$1e5c9e6e4e15efe3)(props, "icon");
  let { children, size, "aria-label": ariaLabel, "aria-hidden": ariaHidden, ...otherProps } = props;
  let { styleProps } = (0, $380ed8f3903c3931$export$b8e6fb9d2dff3f41)(otherProps, $6bfb67578ee6effd$var$iconStyleProps);
  let provider = (0, $7167f8da3cce35e4$export$693cdb10cec23617)();
  let scale = "M";
  if (provider !== null)
    scale = provider.scale === "large" ? "L" : "M";
  if (!ariaHidden)
    ariaHidden = void 0;
  let iconSize = size ? size : scale;
  return /* @__PURE__ */ (0, yn).cloneElement(children, {
    ...(0, $65484d02dcb7eb3e$export$457c3d6518dd4c6f)(otherProps),
    ...styleProps,
    focusable: "false",
    "aria-label": ariaLabel,
    "aria-hidden": ariaLabel ? ariaHidden || void 0 : true,
    role: "img",
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault3($6edfbdaffbc9baf9$exports)), children.props.className, "spectrum-Icon", `spectrum-Icon--size${iconSize}`, styleProps.className)
  });
}
function $9ba43a63383852e3$export$906cc5990ff10700(props) {
  props = (0, $59d09bcc83651bf9$export$1e5c9e6e4e15efe3)(props, "icon");
  let { children, "aria-label": ariaLabel, "aria-hidden": ariaHidden, ...otherProps } = props;
  let { styleProps } = (0, $380ed8f3903c3931$export$b8e6fb9d2dff3f41)(otherProps);
  let provider = (0, $7167f8da3cce35e4$export$693cdb10cec23617)();
  let scale = "M";
  if (provider !== null)
    scale = provider.scale === "large" ? "L" : "M";
  if (!ariaHidden)
    ariaHidden = void 0;
  return /* @__PURE__ */ (0, yn).cloneElement(children, {
    ...(0, $65484d02dcb7eb3e$export$457c3d6518dd4c6f)(otherProps),
    ...styleProps,
    scale,
    focusable: "false",
    "aria-label": ariaLabel,
    "aria-hidden": ariaLabel ? ariaHidden || void 0 : true,
    role: "img",
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault3($6edfbdaffbc9baf9$exports)), children.props.className, "spectrum-Icon", {
      [`spectrum-UIIcon-${children.type["displayName"]}`]: children.type["displayName"]
    }, styleProps.className)
  });
}

// ../../node_modules/@spectrum-icons/ui/CornerTriangle.module.mjs
init_preact_min();
function CornerTriangle(props) {
  return /* @__PURE__ */ yn.createElement($9ba43a63383852e3$export$906cc5990ff10700, props, /* @__PURE__ */ yn.createElement(import_CornerTriangle.CornerTriangle, null));
}

// ../../node_modules/@spectrum-icons/ui/CrossSmall.module.mjs
var import_CrossSmall = __toESM(require_CrossSmall(), 1);
init_preact_min();

// ../../node_modules/@react-spectrum/button/dist/import.mjs
function $parcel$interopDefault4(a) {
  return a && a.__esModule ? a.default : a;
}
function $parcel$export3(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $086e93d2352a4536$exports = {};
$parcel$export3($086e93d2352a4536$exports, "spectrum-Button", () => $086e93d2352a4536$export$1db4cca5b4ade39a, (v) => $086e93d2352a4536$export$1db4cca5b4ade39a = v);
$parcel$export3($086e93d2352a4536$exports, "spectrum-ActionButton", () => $086e93d2352a4536$export$53da69f51b770d3, (v) => $086e93d2352a4536$export$53da69f51b770d3 = v);
$parcel$export3($086e93d2352a4536$exports, "spectrum-LogicButton", () => $086e93d2352a4536$export$36ae67a131730482, (v) => $086e93d2352a4536$export$36ae67a131730482 = v);
$parcel$export3($086e93d2352a4536$exports, "spectrum-FieldButton", () => $086e93d2352a4536$export$a024c99ecf6b5741, (v) => $086e93d2352a4536$export$a024c99ecf6b5741 = v);
$parcel$export3($086e93d2352a4536$exports, "spectrum-ClearButton", () => $086e93d2352a4536$export$b752ce409e5660c, (v) => $086e93d2352a4536$export$b752ce409e5660c = v);
$parcel$export3($086e93d2352a4536$exports, "focus-ring", () => $086e93d2352a4536$export$f39a09f249340e2a, (v) => $086e93d2352a4536$export$f39a09f249340e2a = v);
$parcel$export3($086e93d2352a4536$exports, "spectrum-FieldButton--quiet", () => $086e93d2352a4536$export$5ca7b274e4fff9fc, (v) => $086e93d2352a4536$export$5ca7b274e4fff9fc = v);
$parcel$export3($086e93d2352a4536$exports, "spectrum-Icon", () => $086e93d2352a4536$export$d374b04f30360026, (v) => $086e93d2352a4536$export$d374b04f30360026 = v);
$parcel$export3($086e93d2352a4536$exports, "is-hovered", () => $086e93d2352a4536$export$b8813cd5d7824ce7, (v) => $086e93d2352a4536$export$b8813cd5d7824ce7 = v);
$parcel$export3($086e93d2352a4536$exports, "spectrum-Button-label", () => $086e93d2352a4536$export$c081ba562e204942, (v) => $086e93d2352a4536$export$c081ba562e204942 = v);
$parcel$export3($086e93d2352a4536$exports, "spectrum-Button--iconOnly", () => $086e93d2352a4536$export$c1d306ec0fae3838, (v) => $086e93d2352a4536$export$c1d306ec0fae3838 = v);
$parcel$export3($086e93d2352a4536$exports, "spectrum-ActionButton-label", () => $086e93d2352a4536$export$ebb4635c66bacdb9, (v) => $086e93d2352a4536$export$ebb4635c66bacdb9 = v);
$parcel$export3($086e93d2352a4536$exports, "spectrum-ActionButton-hold", () => $086e93d2352a4536$export$4a4f01c443eff992, (v) => $086e93d2352a4536$export$4a4f01c443eff992 = v);
$parcel$export3($086e93d2352a4536$exports, "spectrum-ActionButton--quiet", () => $086e93d2352a4536$export$40e1f009544bacf3, (v) => $086e93d2352a4536$export$40e1f009544bacf3 = v);
$parcel$export3($086e93d2352a4536$exports, "is-disabled", () => $086e93d2352a4536$export$d35bc1e505d1ebbf, (v) => $086e93d2352a4536$export$d35bc1e505d1ebbf = v);
$parcel$export3($086e93d2352a4536$exports, "is-open", () => $086e93d2352a4536$export$a9781837241c946d, (v) => $086e93d2352a4536$export$a9781837241c946d = v);
$parcel$export3($086e93d2352a4536$exports, "spectrum-ClearButton--small", () => $086e93d2352a4536$export$49280ffa5236ba8b, (v) => $086e93d2352a4536$export$49280ffa5236ba8b = v);
$parcel$export3($086e93d2352a4536$exports, "is-active", () => $086e93d2352a4536$export$20fd0f7cd4e6112f, (v) => $086e93d2352a4536$export$20fd0f7cd4e6112f = v);
$parcel$export3($086e93d2352a4536$exports, "spectrum-ClearButton--overBackground", () => $086e93d2352a4536$export$116f2fccf941d34d, (v) => $086e93d2352a4536$export$116f2fccf941d34d = v);
$parcel$export3($086e93d2352a4536$exports, "is-selected", () => $086e93d2352a4536$export$1e0fb04f31d3c22a, (v) => $086e93d2352a4536$export$1e0fb04f31d3c22a = v);
$parcel$export3($086e93d2352a4536$exports, "spectrum-ActionButton--emphasized", () => $086e93d2352a4536$export$5aabb61a966e266f, (v) => $086e93d2352a4536$export$5aabb61a966e266f = v);
$parcel$export3($086e93d2352a4536$exports, "spectrum-ActionButton--staticWhite", () => $086e93d2352a4536$export$ccc536e1adbdc059, (v) => $086e93d2352a4536$export$ccc536e1adbdc059 = v);
$parcel$export3($086e93d2352a4536$exports, "spectrum-ActionButton--staticBlack", () => $086e93d2352a4536$export$8f7c9db66978d20f, (v) => $086e93d2352a4536$export$8f7c9db66978d20f = v);
$parcel$export3($086e93d2352a4536$exports, "spectrum-ActionButton--staticColor", () => $086e93d2352a4536$export$29b7b5d6a5a497c5, (v) => $086e93d2352a4536$export$29b7b5d6a5a497c5 = v);
$parcel$export3($086e93d2352a4536$exports, "spectrum-LogicButton--and", () => $086e93d2352a4536$export$e52daab43a62c528, (v) => $086e93d2352a4536$export$e52daab43a62c528 = v);
$parcel$export3($086e93d2352a4536$exports, "spectrum-LogicButton--or", () => $086e93d2352a4536$export$da76be6126aaa633, (v) => $086e93d2352a4536$export$da76be6126aaa633 = v);
$parcel$export3($086e93d2352a4536$exports, "is-focused", () => $086e93d2352a4536$export$e7dc768d35940237, (v) => $086e93d2352a4536$export$e7dc768d35940237 = v);
$parcel$export3($086e93d2352a4536$exports, "is-placeholder", () => $086e93d2352a4536$export$e5b2f5233e4e5194, (v) => $086e93d2352a4536$export$e5b2f5233e4e5194 = v);
$parcel$export3($086e93d2352a4536$exports, "spectrum-FieldButton--invalid", () => $086e93d2352a4536$export$c9f503f672e8a3c1, (v) => $086e93d2352a4536$export$c9f503f672e8a3c1 = v);
$parcel$export3($086e93d2352a4536$exports, "spectrum-Button--overBackground", () => $086e93d2352a4536$export$5cda1128f9112d2e, (v) => $086e93d2352a4536$export$5cda1128f9112d2e = v);
var $086e93d2352a4536$export$1db4cca5b4ade39a;
var $086e93d2352a4536$export$53da69f51b770d3;
var $086e93d2352a4536$export$36ae67a131730482;
var $086e93d2352a4536$export$a024c99ecf6b5741;
var $086e93d2352a4536$export$b752ce409e5660c;
var $086e93d2352a4536$export$f39a09f249340e2a;
var $086e93d2352a4536$export$5ca7b274e4fff9fc;
var $086e93d2352a4536$export$d374b04f30360026;
var $086e93d2352a4536$export$b8813cd5d7824ce7;
var $086e93d2352a4536$export$c081ba562e204942;
var $086e93d2352a4536$export$c1d306ec0fae3838;
var $086e93d2352a4536$export$ebb4635c66bacdb9;
var $086e93d2352a4536$export$4a4f01c443eff992;
var $086e93d2352a4536$export$40e1f009544bacf3;
var $086e93d2352a4536$export$d35bc1e505d1ebbf;
var $086e93d2352a4536$export$a9781837241c946d;
var $086e93d2352a4536$export$49280ffa5236ba8b;
var $086e93d2352a4536$export$20fd0f7cd4e6112f;
var $086e93d2352a4536$export$116f2fccf941d34d;
var $086e93d2352a4536$export$1e0fb04f31d3c22a;
var $086e93d2352a4536$export$5aabb61a966e266f;
var $086e93d2352a4536$export$ccc536e1adbdc059;
var $086e93d2352a4536$export$8f7c9db66978d20f;
var $086e93d2352a4536$export$29b7b5d6a5a497c5;
var $086e93d2352a4536$export$e52daab43a62c528;
var $086e93d2352a4536$export$da76be6126aaa633;
var $086e93d2352a4536$export$e7dc768d35940237;
var $086e93d2352a4536$export$e5b2f5233e4e5194;
var $086e93d2352a4536$export$c9f503f672e8a3c1;
var $086e93d2352a4536$export$5cda1128f9112d2e;
$086e93d2352a4536$export$1db4cca5b4ade39a = "spectrum-Button_e2d99e";
$086e93d2352a4536$export$53da69f51b770d3 = "spectrum-ActionButton_e2d99e";
$086e93d2352a4536$export$36ae67a131730482 = "spectrum-LogicButton_e2d99e";
$086e93d2352a4536$export$a024c99ecf6b5741 = "spectrum-FieldButton_e2d99e";
$086e93d2352a4536$export$b752ce409e5660c = "spectrum-ClearButton_e2d99e";
$086e93d2352a4536$export$f39a09f249340e2a = "focus-ring_e2d99e";
$086e93d2352a4536$export$5ca7b274e4fff9fc = "spectrum-FieldButton--quiet_e2d99e";
$086e93d2352a4536$export$d374b04f30360026 = "spectrum-Icon_e2d99e";
$086e93d2352a4536$export$b8813cd5d7824ce7 = "is-hovered_e2d99e";
$086e93d2352a4536$export$c081ba562e204942 = "spectrum-Button-label_e2d99e";
$086e93d2352a4536$export$c1d306ec0fae3838 = "spectrum-Button--iconOnly_e2d99e";
$086e93d2352a4536$export$ebb4635c66bacdb9 = "spectrum-ActionButton-label_e2d99e";
$086e93d2352a4536$export$4a4f01c443eff992 = "spectrum-ActionButton-hold_e2d99e";
$086e93d2352a4536$export$40e1f009544bacf3 = "spectrum-ActionButton--quiet_e2d99e";
$086e93d2352a4536$export$d35bc1e505d1ebbf = "is-disabled_e2d99e";
$086e93d2352a4536$export$a9781837241c946d = "is-open_e2d99e";
$086e93d2352a4536$export$49280ffa5236ba8b = "spectrum-ClearButton--small_e2d99e";
$086e93d2352a4536$export$20fd0f7cd4e6112f = "is-active_e2d99e";
$086e93d2352a4536$export$116f2fccf941d34d = "spectrum-ClearButton--overBackground_e2d99e";
$086e93d2352a4536$export$1e0fb04f31d3c22a = "is-selected_e2d99e";
$086e93d2352a4536$export$5aabb61a966e266f = "spectrum-ActionButton--emphasized_e2d99e";
$086e93d2352a4536$export$ccc536e1adbdc059 = "spectrum-ActionButton--staticWhite_e2d99e";
$086e93d2352a4536$export$8f7c9db66978d20f = "spectrum-ActionButton--staticBlack_e2d99e";
$086e93d2352a4536$export$29b7b5d6a5a497c5 = "spectrum-ActionButton--staticColor_e2d99e";
$086e93d2352a4536$export$e52daab43a62c528 = "spectrum-LogicButton--and_e2d99e";
$086e93d2352a4536$export$da76be6126aaa633 = "spectrum-LogicButton--or_e2d99e";
$086e93d2352a4536$export$e7dc768d35940237 = "is-focused_e2d99e";
$086e93d2352a4536$export$e5b2f5233e4e5194 = "is-placeholder_e2d99e";
$086e93d2352a4536$export$c9f503f672e8a3c1 = "spectrum-FieldButton--invalid_e2d99e";
$086e93d2352a4536$export$5cda1128f9112d2e = "spectrum-Button--overBackground_e2d99e";
function $b865a6f0049e2d66$var$Button(props, ref) {
  props = (0, $7167f8da3cce35e4$export$521c373ccc32c300)(props);
  props = (0, $59d09bcc83651bf9$export$1e5c9e6e4e15efe3)(props, "button");
  let { elementType: ElementType = "button", children, variant, style = variant === "accent" || variant === "cta" ? "fill" : "outline", staticColor, isDisabled, autoFocus, ...otherProps } = props;
  let domRef = (0, $98e5a8ae0e6415af$export$96a734597687c040)(ref);
  let { buttonProps, isPressed } = (0, $701a24aa0da5b062$export$ea18c227d4417cc3)(props, domRef);
  let { hoverProps, isHovered } = (0, $6179b936705e76d3$export$ae780daf29e6d456)({
    isDisabled
  });
  let { styleProps } = (0, $380ed8f3903c3931$export$b8e6fb9d2dff3f41)(otherProps);
  let hasLabel = (0, $54cda195bd4173fb$export$e52e2242b6d0f1d4)(`.${(0, /* @__PURE__ */ $parcel$interopDefault4($086e93d2352a4536$exports))["spectrum-Button-label"]}`, domRef);
  let hasIcon = (0, $54cda195bd4173fb$export$e52e2242b6d0f1d4)(`.${(0, /* @__PURE__ */ $parcel$interopDefault4($086e93d2352a4536$exports))["spectrum-Icon"]}`, domRef);
  if (variant === "cta")
    variant = "accent";
  else if (variant === "overBackground") {
    variant = "primary";
    staticColor = "white";
  }
  return /* @__PURE__ */ (0, yn).createElement((0, $907718708eab68af$export$1a38b4ad7f578e1d), {
    focusRingClass: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault4($086e93d2352a4536$exports)), "focus-ring"),
    autoFocus
  }, /* @__PURE__ */ (0, yn).createElement(ElementType, {
    ...styleProps,
    ...(0, $3ef42575df84b30b$export$9d1611c77c2fe928)(buttonProps, hoverProps),
    ref: domRef,
    "data-variant": variant,
    "data-style": style,
    "data-static-color": staticColor || void 0,
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault4($086e93d2352a4536$exports)), "spectrum-Button", {
      "spectrum-Button--iconOnly": hasIcon && !hasLabel,
      "is-disabled": isDisabled,
      "is-active": isPressed,
      "is-hovered": isHovered
    }, styleProps.className)
  }, /* @__PURE__ */ (0, yn).createElement((0, $59d09bcc83651bf9$export$8107b24b91795686), {
    slots: {
      icon: {
        size: "S",
        UNSAFE_className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault4($086e93d2352a4536$exports)), "spectrum-Icon")
      },
      text: {
        UNSAFE_className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault4($086e93d2352a4536$exports)), "spectrum-Button-label")
      }
    }
  }, typeof children === "string" ? /* @__PURE__ */ (0, yn).createElement((0, $cd449e8defa988f0$export$5f1af8db9871e1d6), null, children) : children)));
}
var $b865a6f0049e2d66$export$353f5b6fc5456de1 = /* @__PURE__ */ (0, yn).forwardRef($b865a6f0049e2d66$var$Button);
function $042ad0b3a4a55b33$var$ActionButton(props, ref) {
  props = (0, $7167f8da3cce35e4$export$521c373ccc32c300)(props);
  props = (0, $59d09bcc83651bf9$export$1e5c9e6e4e15efe3)(props, "actionButton");
  let { isQuiet, isDisabled, staticColor, children, autoFocus, holdAffordance, ...otherProps } = props;
  let domRef = (0, $98e5a8ae0e6415af$export$96a734597687c040)(ref);
  let { buttonProps, isPressed } = (0, $701a24aa0da5b062$export$ea18c227d4417cc3)(props, domRef);
  let { hoverProps, isHovered } = (0, $6179b936705e76d3$export$ae780daf29e6d456)({
    isDisabled
  });
  let { styleProps } = (0, $380ed8f3903c3931$export$b8e6fb9d2dff3f41)(otherProps);
  let isTextOnly = (0, yn).Children.toArray(props.children).every((c2) => !/* @__PURE__ */ (0, yn).isValidElement(c2));
  return /* @__PURE__ */ (0, yn).createElement((0, $907718708eab68af$export$1a38b4ad7f578e1d), {
    focusRingClass: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault4($086e93d2352a4536$exports)), "focus-ring"),
    autoFocus
  }, /* @__PURE__ */ (0, yn).createElement("button", {
    ...styleProps,
    ...(0, $3ef42575df84b30b$export$9d1611c77c2fe928)(buttonProps, hoverProps),
    ref: domRef,
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault4($086e93d2352a4536$exports)), "spectrum-ActionButton", {
      "spectrum-ActionButton--quiet": isQuiet,
      "spectrum-ActionButton--staticColor": !!staticColor,
      "spectrum-ActionButton--staticWhite": staticColor === "white",
      "spectrum-ActionButton--staticBlack": staticColor === "black",
      "is-active": isPressed,
      "is-disabled": isDisabled,
      "is-hovered": isHovered
    }, styleProps.className)
  }, holdAffordance && /* @__PURE__ */ (0, yn).createElement((0, CornerTriangle), {
    UNSAFE_className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault4($086e93d2352a4536$exports)), "spectrum-ActionButton-hold")
  }), /* @__PURE__ */ (0, yn).createElement((0, $59d09bcc83651bf9$export$8107b24b91795686), {
    slots: {
      icon: {
        size: "S",
        UNSAFE_className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault4($086e93d2352a4536$exports)), "spectrum-Icon")
      },
      text: {
        UNSAFE_className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault4($086e93d2352a4536$exports)), "spectrum-ActionButton-label")
      }
    }
  }, typeof children === "string" || isTextOnly ? /* @__PURE__ */ (0, yn).createElement((0, $cd449e8defa988f0$export$5f1af8db9871e1d6), null, children) : children)));
}
var $042ad0b3a4a55b33$export$cfc7921d29ef7b80 = /* @__PURE__ */ (0, yn).forwardRef($042ad0b3a4a55b33$var$ActionButton);
function $b43bd559b476d0c4$var$FieldButton(props, ref) {
  props = (0, $59d09bcc83651bf9$export$1e5c9e6e4e15efe3)(props, "button");
  let { isQuiet, isDisabled, validationState, children, autoFocus, isActive, focusRingClass, ...otherProps } = props;
  let domRef = (0, $98e5a8ae0e6415af$export$96a734597687c040)(ref);
  let { buttonProps, isPressed } = (0, $701a24aa0da5b062$export$ea18c227d4417cc3)(props, domRef);
  let { hoverProps, isHovered } = (0, $6179b936705e76d3$export$ae780daf29e6d456)({
    isDisabled
  });
  let { styleProps } = (0, $380ed8f3903c3931$export$b8e6fb9d2dff3f41)(otherProps);
  return /* @__PURE__ */ (0, yn).createElement((0, $907718708eab68af$export$1a38b4ad7f578e1d), {
    focusRingClass: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault4($086e93d2352a4536$exports)), "focus-ring", focusRingClass),
    autoFocus
  }, /* @__PURE__ */ (0, yn).createElement("button", {
    ...(0, $3ef42575df84b30b$export$9d1611c77c2fe928)(buttonProps, hoverProps),
    ref: domRef,
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault4($086e93d2352a4536$exports)), "spectrum-FieldButton", {
      "spectrum-FieldButton--quiet": isQuiet,
      "is-active": isActive || isPressed,
      "is-disabled": isDisabled,
      "spectrum-FieldButton--invalid": validationState === "invalid",
      "is-hovered": isHovered
    }, styleProps.className)
  }, /* @__PURE__ */ (0, yn).createElement((0, $59d09bcc83651bf9$export$8107b24b91795686), {
    slots: {
      icon: {
        size: "S",
        UNSAFE_className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault4($086e93d2352a4536$exports)), "spectrum-Icon")
      }
    }
  }, children)));
}
var $b43bd559b476d0c4$export$47dc48f595b075da = /* @__PURE__ */ (0, yn).forwardRef($b43bd559b476d0c4$var$FieldButton);

// ../../node_modules/@spectrum-icons/ui/ChevronDownMedium.module.mjs
var import_ChevronDownMedium = __toESM(require_ChevronDownMedium(), 1);
init_preact_min();
function ChevronDownMedium(props) {
  return /* @__PURE__ */ yn.createElement($9ba43a63383852e3$export$906cc5990ff10700, props, /* @__PURE__ */ yn.createElement(import_ChevronDownMedium.ChevronDownMedium, null));
}

// ../../node_modules/@react-spectrum/overlays/dist/import.mjs
init_preact_min();

// ../../node_modules/@babel/runtime/helpers/esm/extends.js
function _extends2() {
  _extends2 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}

// ../../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i2;
  for (i2 = 0; i2 < sourceKeys.length; i2++) {
    key = sourceKeys[i2];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}

// ../../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
function _setPrototypeOf2(o, p) {
  _setPrototypeOf2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf3(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf2(o, p);
}

// ../../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
function _inheritsLoose2(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf2(subClass, superClass);
}

// ../../node_modules/react-transition-group/esm/Transition.js
var import_prop_types2 = __toESM(require_prop_types());
init_preact_min();
init_preact_min();

// ../../node_modules/react-transition-group/esm/config.js
var config_default = {
  disabled: false
};

// ../../node_modules/react-transition-group/esm/utils/PropTypes.js
var import_prop_types = __toESM(require_prop_types());
var timeoutsShape = true ? import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.shape({
  enter: import_prop_types.default.number,
  exit: import_prop_types.default.number,
  appear: import_prop_types.default.number
}).isRequired]) : null;
var classNamesShape = true ? import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.shape({
  enter: import_prop_types.default.string,
  exit: import_prop_types.default.string,
  active: import_prop_types.default.string
}), import_prop_types.default.shape({
  enter: import_prop_types.default.string,
  enterDone: import_prop_types.default.string,
  enterActive: import_prop_types.default.string,
  exit: import_prop_types.default.string,
  exitDone: import_prop_types.default.string,
  exitActive: import_prop_types.default.string
})]) : null;

// ../../node_modules/react-transition-group/esm/TransitionGroupContext.js
init_preact_min();
var TransitionGroupContext_default = yn.createContext(null);

// ../../node_modules/react-transition-group/esm/utils/reflow.js
var forceReflow = function forceReflow2(node) {
  return node.scrollTop;
};

// ../../node_modules/react-transition-group/esm/Transition.js
var UNMOUNTED = "unmounted";
var EXITED = "exited";
var ENTERING = "entering";
var ENTERED = "entered";
var EXITING = "exiting";
var Transition = /* @__PURE__ */ function(_React$Component) {
  _inheritsLoose2(Transition2, _React$Component);
  function Transition2(props, context) {
    var _this;
    _this = _React$Component.call(this, props, context) || this;
    var parentGroup = context;
    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
    var initialStatus;
    _this.appearStatus = null;
    if (props.in) {
      if (appear) {
        initialStatus = EXITED;
        _this.appearStatus = ENTERING;
      } else {
        initialStatus = ENTERED;
      }
    } else {
      if (props.unmountOnExit || props.mountOnEnter) {
        initialStatus = UNMOUNTED;
      } else {
        initialStatus = EXITED;
      }
    }
    _this.state = {
      status: initialStatus
    };
    _this.nextCallback = null;
    return _this;
  }
  Transition2.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
    var nextIn = _ref.in;
    if (nextIn && prevState.status === UNMOUNTED) {
      return {
        status: EXITED
      };
    }
    return null;
  };
  var _proto = Transition2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this.updateStatus(true, this.appearStatus);
  };
  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var nextStatus = null;
    if (prevProps !== this.props) {
      var status = this.state.status;
      if (this.props.in) {
        if (status !== ENTERING && status !== ENTERED) {
          nextStatus = ENTERING;
        }
      } else {
        if (status === ENTERING || status === ENTERED) {
          nextStatus = EXITING;
        }
      }
    }
    this.updateStatus(false, nextStatus);
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.cancelNextCallback();
  };
  _proto.getTimeouts = function getTimeouts() {
    var timeout2 = this.props.timeout;
    var exit, enter, appear;
    exit = enter = appear = timeout2;
    if (timeout2 != null && typeof timeout2 !== "number") {
      exit = timeout2.exit;
      enter = timeout2.enter;
      appear = timeout2.appear !== void 0 ? timeout2.appear : enter;
    }
    return {
      exit,
      enter,
      appear
    };
  };
  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
    if (mounting === void 0) {
      mounting = false;
    }
    if (nextStatus !== null) {
      this.cancelNextCallback();
      if (nextStatus === ENTERING) {
        if (this.props.unmountOnExit || this.props.mountOnEnter) {
          var node = this.props.nodeRef ? this.props.nodeRef.current : yn.findDOMNode(this);
          if (node)
            forceReflow(node);
        }
        this.performEnter(mounting);
      } else {
        this.performExit();
      }
    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
      this.setState({
        status: UNMOUNTED
      });
    }
  };
  _proto.performEnter = function performEnter(mounting) {
    var _this2 = this;
    var enter = this.props.enter;
    var appearing = this.context ? this.context.isMounting : mounting;
    var _ref2 = this.props.nodeRef ? [appearing] : [yn.findDOMNode(this), appearing], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
    var timeouts = this.getTimeouts();
    var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
    if (!mounting && !enter || config_default.disabled) {
      this.safeSetState({
        status: ENTERED
      }, function() {
        _this2.props.onEntered(maybeNode);
      });
      return;
    }
    this.props.onEnter(maybeNode, maybeAppearing);
    this.safeSetState({
      status: ENTERING
    }, function() {
      _this2.props.onEntering(maybeNode, maybeAppearing);
      _this2.onTransitionEnd(enterTimeout, function() {
        _this2.safeSetState({
          status: ENTERED
        }, function() {
          _this2.props.onEntered(maybeNode, maybeAppearing);
        });
      });
    });
  };
  _proto.performExit = function performExit() {
    var _this3 = this;
    var exit = this.props.exit;
    var timeouts = this.getTimeouts();
    var maybeNode = this.props.nodeRef ? void 0 : yn.findDOMNode(this);
    if (!exit || config_default.disabled) {
      this.safeSetState({
        status: EXITED
      }, function() {
        _this3.props.onExited(maybeNode);
      });
      return;
    }
    this.props.onExit(maybeNode);
    this.safeSetState({
      status: EXITING
    }, function() {
      _this3.props.onExiting(maybeNode);
      _this3.onTransitionEnd(timeouts.exit, function() {
        _this3.safeSetState({
          status: EXITED
        }, function() {
          _this3.props.onExited(maybeNode);
        });
      });
    });
  };
  _proto.cancelNextCallback = function cancelNextCallback() {
    if (this.nextCallback !== null) {
      this.nextCallback.cancel();
      this.nextCallback = null;
    }
  };
  _proto.safeSetState = function safeSetState(nextState, callback) {
    callback = this.setNextCallback(callback);
    this.setState(nextState, callback);
  };
  _proto.setNextCallback = function setNextCallback(callback) {
    var _this4 = this;
    var active = true;
    this.nextCallback = function(event) {
      if (active) {
        active = false;
        _this4.nextCallback = null;
        callback(event);
      }
    };
    this.nextCallback.cancel = function() {
      active = false;
    };
    return this.nextCallback;
  };
  _proto.onTransitionEnd = function onTransitionEnd(timeout2, handler) {
    this.setNextCallback(handler);
    var node = this.props.nodeRef ? this.props.nodeRef.current : yn.findDOMNode(this);
    var doesNotHaveTimeoutOrListener = timeout2 == null && !this.props.addEndListener;
    if (!node || doesNotHaveTimeoutOrListener) {
      setTimeout(this.nextCallback, 0);
      return;
    }
    if (this.props.addEndListener) {
      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
      this.props.addEndListener(maybeNode, maybeNextCallback);
    }
    if (timeout2 != null) {
      setTimeout(this.nextCallback, timeout2);
    }
  };
  _proto.render = function render() {
    var status = this.state.status;
    if (status === UNMOUNTED) {
      return null;
    }
    var _this$props = this.props, children = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
    return (
      // allows for nested Transitions
      /* @__PURE__ */ yn.createElement(TransitionGroupContext_default.Provider, {
        value: null
      }, typeof children === "function" ? children(status, childProps) : yn.cloneElement(yn.Children.only(children), childProps))
    );
  };
  return Transition2;
}(yn.Component);
Transition.contextType = TransitionGroupContext_default;
Transition.propTypes = true ? {
  /**
   * A React reference to DOM element that need to transition:
   * https://stackoverflow.com/a/51127130/4671932
   *
   *   - When `nodeRef` prop is used, `node` is not passed to callback functions
   *      (e.g. `onEnter`) because user already has direct access to the node.
   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
   *     `nodeRef` need to be provided to `Transition` with changed `key` prop
   *     (see
   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
   */
  nodeRef: import_prop_types2.default.shape({
    current: typeof Element === "undefined" ? import_prop_types2.default.any : function(propValue, key, componentName, location, propFullName, secret) {
      var value = propValue[key];
      return import_prop_types2.default.instanceOf(value && "ownerDocument" in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
    }
  }),
  /**
   * A `function` child can be used instead of a React element. This function is
   * called with the current transition status (`'entering'`, `'entered'`,
   * `'exiting'`, `'exited'`), which can be used to apply context
   * specific props to a component.
   *
   * ```jsx
   * <Transition in={this.state.in} timeout={150}>
   *   {state => (
   *     <MyComponent className={`fade fade-${state}`} />
   *   )}
   * </Transition>
   * ```
   */
  children: import_prop_types2.default.oneOfType([import_prop_types2.default.func.isRequired, import_prop_types2.default.element.isRequired]).isRequired,
  /**
   * Show the component; triggers the enter or exit states
   */
  in: import_prop_types2.default.bool,
  /**
   * By default the child component is mounted immediately along with
   * the parent `Transition` component. If you want to "lazy mount" the component on the
   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
   * mounted, even on "exited", unless you also specify `unmountOnExit`.
   */
  mountOnEnter: import_prop_types2.default.bool,
  /**
   * By default the child component stays mounted after it reaches the `'exited'` state.
   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
   */
  unmountOnExit: import_prop_types2.default.bool,
  /**
   * By default the child component does not perform the enter transition when
   * it first mounts, regardless of the value of `in`. If you want this
   * behavior, set both `appear` and `in` to `true`.
   *
   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
   * > only adds an additional enter transition. However, in the
   * > `<CSSTransition>` component that first enter transition does result in
   * > additional `.appear-*` classes, that way you can choose to style it
   * > differently.
   */
  appear: import_prop_types2.default.bool,
  /**
   * Enable or disable enter transitions.
   */
  enter: import_prop_types2.default.bool,
  /**
   * Enable or disable exit transitions.
   */
  exit: import_prop_types2.default.bool,
  /**
   * The duration of the transition, in milliseconds.
   * Required unless `addEndListener` is provided.
   *
   * You may specify a single timeout for all transitions:
   *
   * ```jsx
   * timeout={500}
   * ```
   *
   * or individually:
   *
   * ```jsx
   * timeout={{
   *  appear: 500,
   *  enter: 300,
   *  exit: 500,
   * }}
   * ```
   *
   * - `appear` defaults to the value of `enter`
   * - `enter` defaults to `0`
   * - `exit` defaults to `0`
   *
   * @type {number | { enter?: number, exit?: number, appear?: number }}
   */
  timeout: function timeout(props) {
    var pt2 = timeoutsShape;
    if (!props.addEndListener)
      pt2 = pt2.isRequired;
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return pt2.apply(void 0, [props].concat(args));
  },
  /**
   * Add a custom transition end trigger. Called with the transitioning
   * DOM node and a `done` callback. Allows for more fine grained transition end
   * logic. Timeouts are still used as a fallback if provided.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * ```jsx
   * addEndListener={(node, done) => {
   *   // use the css transitionend event to mark the finish of a transition
   *   node.addEventListener('transitionend', done, false);
   * }}
   * ```
   */
  addEndListener: import_prop_types2.default.func,
  /**
   * Callback fired before the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEnter: import_prop_types2.default.func,
  /**
   * Callback fired after the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntering: import_prop_types2.default.func,
  /**
   * Callback fired after the "entered" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEntered: import_prop_types2.default.func,
  /**
   * Callback fired before the "exiting" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExit: import_prop_types2.default.func,
  /**
   * Callback fired after the "exiting" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExiting: import_prop_types2.default.func,
  /**
   * Callback fired after the "exited" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExited: import_prop_types2.default.func
} : {};
function noop3() {
}
Transition.defaultProps = {
  in: false,
  mountOnEnter: false,
  unmountOnExit: false,
  appear: false,
  enter: true,
  exit: true,
  onEnter: noop3,
  onEntering: noop3,
  onEntered: noop3,
  onExit: noop3,
  onExiting: noop3,
  onExited: noop3
};
Transition.UNMOUNTED = UNMOUNTED;
Transition.EXITED = EXITED;
Transition.ENTERING = ENTERING;
Transition.ENTERED = ENTERED;
Transition.EXITING = EXITING;
var Transition_default = Transition;

// ../../node_modules/@react-spectrum/overlays/dist/import.mjs
function $parcel$interopDefault5(a) {
  return a && a.__esModule ? a.default : a;
}
function $parcel$export4(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $bc765a7a041310da$var$OPEN_STATES = {
  entering: false,
  entered: true
};
function $bc765a7a041310da$export$b847a40ee92eff38(props) {
  var child;
  return /* @__PURE__ */ (0, yn).createElement((0, Transition_default), {
    timeout: {
      enter: 0,
      exit: 350
    },
    ...props
  }, (state) => (0, yn).Children.map(props.children, (child2) => child2 && /* @__PURE__ */ (0, yn).cloneElement(child2, {
    isOpen: !!$bc765a7a041310da$var$OPEN_STATES[state]
  })));
}
function $70305dc5fb729c3b$var$Overlay(props, ref) {
  let { children, isOpen, disableFocusManagement, container, onEnter, onEntering, onEntered, onExit, onExiting, onExited, nodeRef } = props;
  let [exited, setExited] = (0, z)(!isOpen);
  let handleEntered = (0, ae)(() => {
    setExited(false);
    if (onEntered)
      onEntered();
  }, [
    onEntered
  ]);
  let handleExited = (0, ae)(() => {
    setExited(true);
    if (onExited)
      onExited();
  }, [
    onExited
  ]);
  let mountOverlay = isOpen || !exited;
  if (!mountOverlay)
    return null;
  return /* @__PURE__ */ (0, yn).createElement((0, $337b884510726a0d$export$c6fdb837b070b4ff), {
    portalContainer: container,
    disableFocusManagement
  }, /* @__PURE__ */ (0, yn).createElement((0, $7167f8da3cce35e4$export$2881499e37b75b9a), {
    ref,
    UNSAFE_style: {
      background: "transparent",
      isolation: "isolate"
    },
    isDisabled: false
  }, /* @__PURE__ */ (0, yn).createElement((0, $bc765a7a041310da$export$b847a40ee92eff38), {
    in: isOpen,
    appear: true,
    onExit,
    onExiting,
    onExited: handleExited,
    onEnter,
    onEntering,
    onEntered: handleEntered,
    nodeRef
  }, children)));
}
var $70305dc5fb729c3b$export$c6fdb837b070b4ff = /* @__PURE__ */ (0, yn).forwardRef($70305dc5fb729c3b$var$Overlay);
var $853e19557ad8790f$exports = {};
$parcel$export4($853e19557ad8790f$exports, "spectrum-Popover", () => $853e19557ad8790f$export$a62dc1b6ab23a7bb, (v) => $853e19557ad8790f$export$a62dc1b6ab23a7bb = v);
$parcel$export4($853e19557ad8790f$exports, "react-spectrum-Popover", () => $853e19557ad8790f$export$884f6b5065bdc41a, (v) => $853e19557ad8790f$export$884f6b5065bdc41a = v);
$parcel$export4($853e19557ad8790f$exports, "spectrum-Dialog-content", () => $853e19557ad8790f$export$cb8eccd0f3639238, (v) => $853e19557ad8790f$export$cb8eccd0f3639238 = v);
$parcel$export4($853e19557ad8790f$exports, "spectrum-Modal-wrapper", () => $853e19557ad8790f$export$35bea187ff802494, (v) => $853e19557ad8790f$export$35bea187ff802494 = v);
$parcel$export4($853e19557ad8790f$exports, "react-spectrum-Modal-wrapper", () => $853e19557ad8790f$export$e088717c213c31d7, (v) => $853e19557ad8790f$export$e088717c213c31d7 = v);
$parcel$export4($853e19557ad8790f$exports, "spectrum-Modal", () => $853e19557ad8790f$export$4c0b1e44c3834c85, (v) => $853e19557ad8790f$export$4c0b1e44c3834c85 = v);
$parcel$export4($853e19557ad8790f$exports, "react-spectrum-Modal", () => $853e19557ad8790f$export$f8edeb62d7fed8c1, (v) => $853e19557ad8790f$export$f8edeb62d7fed8c1 = v);
$parcel$export4($853e19557ad8790f$exports, "spectrum-Tray", () => $853e19557ad8790f$export$ce0704cd084c4f0d, (v) => $853e19557ad8790f$export$ce0704cd084c4f0d = v);
$parcel$export4($853e19557ad8790f$exports, "react-spectrum-Tray", () => $853e19557ad8790f$export$69dafa24343974dd, (v) => $853e19557ad8790f$export$69dafa24343974dd = v);
var $853e19557ad8790f$export$a62dc1b6ab23a7bb;
var $853e19557ad8790f$export$884f6b5065bdc41a;
var $853e19557ad8790f$export$cb8eccd0f3639238;
var $853e19557ad8790f$export$35bea187ff802494;
var $853e19557ad8790f$export$e088717c213c31d7;
var $853e19557ad8790f$export$4c0b1e44c3834c85;
var $853e19557ad8790f$export$f8edeb62d7fed8c1;
var $853e19557ad8790f$export$ce0704cd084c4f0d;
var $853e19557ad8790f$export$69dafa24343974dd;
$853e19557ad8790f$export$a62dc1b6ab23a7bb = "spectrum-Popover_38efea";
$853e19557ad8790f$export$884f6b5065bdc41a = "react-spectrum-Popover_38efea";
$853e19557ad8790f$export$cb8eccd0f3639238 = "spectrum-Dialog-content_38efea";
$853e19557ad8790f$export$35bea187ff802494 = "spectrum-Modal-wrapper_38efea";
$853e19557ad8790f$export$e088717c213c31d7 = "react-spectrum-Modal-wrapper_38efea";
$853e19557ad8790f$export$4c0b1e44c3834c85 = "spectrum-Modal_38efea";
$853e19557ad8790f$export$f8edeb62d7fed8c1 = "react-spectrum-Modal_38efea";
$853e19557ad8790f$export$ce0704cd084c4f0d = "spectrum-Tray_38efea";
$853e19557ad8790f$export$69dafa24343974dd = "react-spectrum-Tray_38efea";
var $645594d913f34a2a$exports = {};
$parcel$export4($645594d913f34a2a$exports, "spectrum-Popover", () => $645594d913f34a2a$export$a62dc1b6ab23a7bb, (v) => $645594d913f34a2a$export$a62dc1b6ab23a7bb = v);
$parcel$export4($645594d913f34a2a$exports, "is-open", () => $645594d913f34a2a$export$a9781837241c946d, (v) => $645594d913f34a2a$export$a9781837241c946d = v);
$parcel$export4($645594d913f34a2a$exports, "spectrum-Popover--bottom", () => $645594d913f34a2a$export$6a19b19b14780d4a, (v) => $645594d913f34a2a$export$6a19b19b14780d4a = v);
$parcel$export4($645594d913f34a2a$exports, "spectrum-Popover--top", () => $645594d913f34a2a$export$f30becfb1df0cae4, (v) => $645594d913f34a2a$export$f30becfb1df0cae4 = v);
$parcel$export4($645594d913f34a2a$exports, "spectrum-Popover--right", () => $645594d913f34a2a$export$5fc8b429396c9f58, (v) => $645594d913f34a2a$export$5fc8b429396c9f58 = v);
$parcel$export4($645594d913f34a2a$exports, "spectrum-Popover--left", () => $645594d913f34a2a$export$79cc55906ac5b00, (v) => $645594d913f34a2a$export$79cc55906ac5b00 = v);
$parcel$export4($645594d913f34a2a$exports, "spectrum-Popover-tip", () => $645594d913f34a2a$export$3100ec4dc1668df1, (v) => $645594d913f34a2a$export$3100ec4dc1668df1 = v);
$parcel$export4($645594d913f34a2a$exports, "spectrum-Popover-tip-triangle", () => $645594d913f34a2a$export$ed733fa6cf19ab80, (v) => $645594d913f34a2a$export$ed733fa6cf19ab80 = v);
$parcel$export4($645594d913f34a2a$exports, "spectrum-Popover--dialog", () => $645594d913f34a2a$export$cf634262e726cd19, (v) => $645594d913f34a2a$export$cf634262e726cd19 = v);
$parcel$export4($645594d913f34a2a$exports, "spectrum-Popover--withTip", () => $645594d913f34a2a$export$d8b16c5377728262, (v) => $645594d913f34a2a$export$d8b16c5377728262 = v);
var $645594d913f34a2a$export$a62dc1b6ab23a7bb;
var $645594d913f34a2a$export$a9781837241c946d;
var $645594d913f34a2a$export$6a19b19b14780d4a;
var $645594d913f34a2a$export$f30becfb1df0cae4;
var $645594d913f34a2a$export$5fc8b429396c9f58;
var $645594d913f34a2a$export$79cc55906ac5b00;
var $645594d913f34a2a$export$3100ec4dc1668df1;
var $645594d913f34a2a$export$ed733fa6cf19ab80;
var $645594d913f34a2a$export$cf634262e726cd19;
var $645594d913f34a2a$export$d8b16c5377728262;
$645594d913f34a2a$export$a62dc1b6ab23a7bb = "spectrum-Popover_6115b8";
$645594d913f34a2a$export$a9781837241c946d = "is-open_6115b8";
$645594d913f34a2a$export$6a19b19b14780d4a = "spectrum-Popover--bottom_6115b8";
$645594d913f34a2a$export$f30becfb1df0cae4 = "spectrum-Popover--top_6115b8";
$645594d913f34a2a$export$5fc8b429396c9f58 = "spectrum-Popover--right_6115b8";
$645594d913f34a2a$export$79cc55906ac5b00 = "spectrum-Popover--left_6115b8";
$645594d913f34a2a$export$3100ec4dc1668df1 = "spectrum-Popover-tip_6115b8";
$645594d913f34a2a$export$ed733fa6cf19ab80 = "spectrum-Popover-tip-triangle_6115b8";
$645594d913f34a2a$export$cf634262e726cd19 = "spectrum-Popover--dialog_6115b8";
$645594d913f34a2a$export$d8b16c5377728262 = "spectrum-Popover--withTip_6115b8";
var $c77d7b73b2bbd0fb$exports = {};
$parcel$export4($c77d7b73b2bbd0fb$exports, "spectrum-Underlay", () => $c77d7b73b2bbd0fb$export$74470528f463af97, (v) => $c77d7b73b2bbd0fb$export$74470528f463af97 = v);
$parcel$export4($c77d7b73b2bbd0fb$exports, "is-open", () => $c77d7b73b2bbd0fb$export$a9781837241c946d, (v) => $c77d7b73b2bbd0fb$export$a9781837241c946d = v);
$parcel$export4($c77d7b73b2bbd0fb$exports, "spectrum-Underlay--transparent", () => $c77d7b73b2bbd0fb$export$8eb3860104039b44, (v) => $c77d7b73b2bbd0fb$export$8eb3860104039b44 = v);
var $c77d7b73b2bbd0fb$export$74470528f463af97;
var $c77d7b73b2bbd0fb$export$a9781837241c946d;
var $c77d7b73b2bbd0fb$export$8eb3860104039b44;
$c77d7b73b2bbd0fb$export$74470528f463af97 = "spectrum-Underlay_eb7615";
$c77d7b73b2bbd0fb$export$a9781837241c946d = "is-open_eb7615";
$c77d7b73b2bbd0fb$export$8eb3860104039b44 = "spectrum-Underlay--transparent_eb7615";
function $76a452f4e3df11be$export$f360afc887607b02({ isOpen, isTransparent }) {
  return /* @__PURE__ */ (0, yn).createElement("div", {
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault5($c77d7b73b2bbd0fb$exports)), "spectrum-Underlay", {
      "is-open": isOpen,
      "spectrum-Underlay--transparent": isTransparent
    })
  });
}
var $17b503f7de08fecc$var$arrowPlacement = {
  left: "right",
  right: "right",
  top: "bottom",
  bottom: "bottom"
};
function $17b503f7de08fecc$var$Popover(props, ref) {
  let { children, state, ...otherProps } = props;
  let domRef = (0, $98e5a8ae0e6415af$export$c2c55ef9111cafd8)(ref);
  let wrapperRef = (0, ie)(null);
  return /* @__PURE__ */ (0, yn).createElement((0, $70305dc5fb729c3b$export$c6fdb837b070b4ff), {
    ...otherProps,
    isOpen: state.isOpen,
    nodeRef: wrapperRef
  }, /* @__PURE__ */ (0, yn).createElement($17b503f7de08fecc$var$PopoverWrapper, {
    ref: domRef,
    ...props,
    wrapperRef
  }, children));
}
var $17b503f7de08fecc$var$PopoverWrapper = /* @__PURE__ */ (0, Pe)((props, ref) => {
  let { children, isOpen, hideArrow, isNonModal, enableBothDismissButtons, state, wrapperRef } = props;
  let { styleProps } = (0, $380ed8f3903c3931$export$b8e6fb9d2dff3f41)(props);
  let { size, borderWidth, arrowRef } = $17b503f7de08fecc$var$useArrowSize();
  const borderRadius = $17b503f7de08fecc$var$usePopoverBorderRadius(ref);
  let borderDiagonal = borderWidth * Math.SQRT2;
  let primary = size + borderDiagonal;
  let secondary = primary * 2;
  let { popoverProps, arrowProps, underlayProps, placement } = (0, $f2f8a6077418541e$export$542a6fd13ac93354)({
    ...props,
    popoverRef: ref,
    maxHeight: null,
    arrowSize: hideArrow ? 0 : secondary,
    arrowBoundaryOffset: borderRadius
  }, state);
  let { focusWithinProps } = (0, $9ab94262bd0047c7$export$420e68273165f4ec)(props);
  return /* @__PURE__ */ (0, yn).createElement("div", {
    ref: wrapperRef
  }, !isNonModal && /* @__PURE__ */ (0, yn).createElement((0, $76a452f4e3df11be$export$f360afc887607b02), {
    isTransparent: true,
    ...underlayProps,
    isOpen
  }), /* @__PURE__ */ (0, yn).createElement("div", {
    ...styleProps,
    ...(0, $3ef42575df84b30b$export$9d1611c77c2fe928)(popoverProps, focusWithinProps),
    style: {
      ...styleProps.style,
      ...popoverProps.style
    },
    ref,
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault5($645594d913f34a2a$exports)), "spectrum-Popover", `spectrum-Popover--${placement}`, {
      "spectrum-Popover--withTip": !hideArrow,
      "is-open": isOpen
    }, (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault5($853e19557ad8790f$exports)), "spectrum-Popover", "react-spectrum-Popover"), styleProps.className),
    role: "presentation",
    "data-testid": "popover"
  }, (!isNonModal || enableBothDismissButtons) && /* @__PURE__ */ (0, yn).createElement((0, $86ea4cb521eb2e37$export$2317d149ed6f78c4), {
    onDismiss: state.close
  }), children, hideArrow ? null : /* @__PURE__ */ (0, yn).createElement($17b503f7de08fecc$var$Arrow, {
    arrowProps,
    isLandscape: $17b503f7de08fecc$var$arrowPlacement[placement] === "bottom",
    arrowRef,
    primary,
    secondary,
    borderDiagonal
  }), /* @__PURE__ */ (0, yn).createElement((0, $86ea4cb521eb2e37$export$2317d149ed6f78c4), {
    onDismiss: state.close
  })));
});
function $17b503f7de08fecc$var$usePopoverBorderRadius(popoverRef) {
  let [borderRadius, setBorderRadius] = (0, z)(0);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (popoverRef.current) {
      let spectrumBorderRadius = window.getComputedStyle(popoverRef.current).borderRadius;
      if (spectrumBorderRadius !== "")
        setBorderRadius(parseInt(spectrumBorderRadius, 10));
    }
  }, [
    popoverRef
  ]);
  return borderRadius;
}
function $17b503f7de08fecc$var$useArrowSize() {
  let [size, setSize] = (0, z)(20);
  let [borderWidth, setBorderWidth] = (0, z)(1);
  let arrowRef = (0, ie)(null);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (arrowRef.current) {
      let spectrumTipWidth = window.getComputedStyle(arrowRef.current).getPropertyValue("--spectrum-popover-tip-size");
      if (spectrumTipWidth !== "")
        setSize(parseInt(spectrumTipWidth, 10) / 2);
      let spectrumBorderWidth = window.getComputedStyle(arrowRef.current).getPropertyValue("--spectrum-popover-tip-borderWidth");
      if (spectrumBorderWidth !== "")
        setBorderWidth(parseInt(spectrumBorderWidth, 10));
    }
  }, []);
  return {
    size,
    borderWidth,
    arrowRef
  };
}
function $17b503f7de08fecc$var$Arrow(props) {
  let { primary, secondary, isLandscape, arrowProps, borderDiagonal, arrowRef } = props;
  let halfBorderDiagonal = borderDiagonal / 2;
  let primaryStart = 0;
  let primaryEnd = primary - halfBorderDiagonal;
  let secondaryStart = halfBorderDiagonal;
  let secondaryMiddle = secondary / 2;
  let secondaryEnd = secondary - halfBorderDiagonal;
  let pathData = isLandscape ? [
    "M",
    secondaryStart,
    primaryStart,
    "L",
    secondaryMiddle,
    primaryEnd,
    "L",
    secondaryEnd,
    primaryStart
  ] : [
    "M",
    primaryStart,
    secondaryStart,
    "L",
    primaryEnd,
    secondaryMiddle,
    "L",
    primaryStart,
    secondaryEnd
  ];
  return /* @__PURE__ */ (0, yn).createElement("svg", {
    xmlns: "http://www.w3.org/svg/2000",
    width: Math.ceil(isLandscape ? secondary : primary),
    height: Math.ceil(isLandscape ? primary : secondary),
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault5($645594d913f34a2a$exports)), "spectrum-Popover-tip"),
    ref: arrowRef,
    ...arrowProps
  }, /* @__PURE__ */ (0, yn).createElement("path", {
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault5($645594d913f34a2a$exports)), "spectrum-Popover-tip-triangle"),
    d: pathData.join(" ")
  }));
}
var $17b503f7de08fecc$export$5b6b19405a83ff9d = /* @__PURE__ */ (0, Pe)($17b503f7de08fecc$var$Popover);
var $f7ed9f5201273840$exports = {};
$parcel$export4($f7ed9f5201273840$exports, "spectrum-Modal", () => $f7ed9f5201273840$export$4c0b1e44c3834c85, (v) => $f7ed9f5201273840$export$4c0b1e44c3834c85 = v);
$parcel$export4($f7ed9f5201273840$exports, "is-open", () => $f7ed9f5201273840$export$a9781837241c946d, (v) => $f7ed9f5201273840$export$a9781837241c946d = v);
$parcel$export4($f7ed9f5201273840$exports, "spectrum-Modal-wrapper", () => $f7ed9f5201273840$export$35bea187ff802494, (v) => $f7ed9f5201273840$export$35bea187ff802494 = v);
$parcel$export4($f7ed9f5201273840$exports, "spectrum-Modal--responsive", () => $f7ed9f5201273840$export$fd1e42aa8ea02a1, (v) => $f7ed9f5201273840$export$fd1e42aa8ea02a1 = v);
$parcel$export4($f7ed9f5201273840$exports, "spectrum-Modal--fullscreen", () => $f7ed9f5201273840$export$a4423fa77727431a, (v) => $f7ed9f5201273840$export$a4423fa77727431a = v);
$parcel$export4($f7ed9f5201273840$exports, "spectrum-Modal--fullscreenTakeover", () => $f7ed9f5201273840$export$175dd699720b5fb7, (v) => $f7ed9f5201273840$export$175dd699720b5fb7 = v);
var $f7ed9f5201273840$export$4c0b1e44c3834c85;
var $f7ed9f5201273840$export$a9781837241c946d;
var $f7ed9f5201273840$export$35bea187ff802494;
var $f7ed9f5201273840$export$fd1e42aa8ea02a1;
var $f7ed9f5201273840$export$a4423fa77727431a;
var $f7ed9f5201273840$export$175dd699720b5fb7;
$f7ed9f5201273840$export$4c0b1e44c3834c85 = "spectrum-Modal_f81956";
$f7ed9f5201273840$export$a9781837241c946d = "is-open_f81956";
$f7ed9f5201273840$export$35bea187ff802494 = "spectrum-Modal-wrapper_f81956";
$f7ed9f5201273840$export$fd1e42aa8ea02a1 = "spectrum-Modal--responsive_f81956";
$f7ed9f5201273840$export$a4423fa77727431a = "spectrum-Modal--fullscreen_f81956";
$f7ed9f5201273840$export$175dd699720b5fb7 = "spectrum-Modal--fullscreenTakeover_f81956";
var $930b2f4095bb11d1$exports = {};
$parcel$export4($930b2f4095bb11d1$exports, "spectrum-Tray", () => $930b2f4095bb11d1$export$ce0704cd084c4f0d, (v) => $930b2f4095bb11d1$export$ce0704cd084c4f0d = v);
$parcel$export4($930b2f4095bb11d1$exports, "is-open", () => $930b2f4095bb11d1$export$a9781837241c946d, (v) => $930b2f4095bb11d1$export$a9781837241c946d = v);
$parcel$export4($930b2f4095bb11d1$exports, "spectrum-Tray-wrapper", () => $930b2f4095bb11d1$export$641b9b70c23dce66, (v) => $930b2f4095bb11d1$export$641b9b70c23dce66 = v);
$parcel$export4($930b2f4095bb11d1$exports, "spectrum-Tray--fixedHeight", () => $930b2f4095bb11d1$export$79bfb05e59a300b, (v) => $930b2f4095bb11d1$export$79bfb05e59a300b = v);
var $930b2f4095bb11d1$export$ce0704cd084c4f0d;
var $930b2f4095bb11d1$export$a9781837241c946d;
var $930b2f4095bb11d1$export$641b9b70c23dce66;
var $930b2f4095bb11d1$export$79bfb05e59a300b;
$930b2f4095bb11d1$export$ce0704cd084c4f0d = "spectrum-Tray_23bf66";
$930b2f4095bb11d1$export$a9781837241c946d = "is-open_23bf66";
$930b2f4095bb11d1$export$641b9b70c23dce66 = "spectrum-Tray-wrapper_23bf66";
$930b2f4095bb11d1$export$79bfb05e59a300b = "spectrum-Tray--fixedHeight_23bf66";
function $1afc87f3d16a5a1c$var$Tray(props, ref) {
  let { children, state, ...otherProps } = props;
  let domRef = (0, $98e5a8ae0e6415af$export$c2c55ef9111cafd8)(ref);
  let wrapperRef = (0, ie)(null);
  return /* @__PURE__ */ (0, yn).createElement((0, $70305dc5fb729c3b$export$c6fdb837b070b4ff), {
    ...otherProps,
    isOpen: state.isOpen,
    nodeRef: wrapperRef
  }, /* @__PURE__ */ (0, yn).createElement($1afc87f3d16a5a1c$var$TrayWrapper, {
    ...props,
    wrapperRef,
    ref: domRef
  }, children));
}
var $1afc87f3d16a5a1c$var$TrayWrapper = /* @__PURE__ */ (0, Pe)(function(props, ref) {
  let { children, isOpen, isFixedHeight, state, wrapperRef } = props;
  let { styleProps } = (0, $380ed8f3903c3931$export$b8e6fb9d2dff3f41)(props);
  let { modalProps, underlayProps } = (0, $8ac8429251c45e4b$export$dbc0f175b25fb0fb)({
    ...props,
    isDismissable: true
  }, state, ref);
  let viewport = (0, $5df64b3807dc15ee$export$d699905dd57c73ca)();
  let wrapperStyle = {
    "--spectrum-visual-viewport-height": viewport.height + "px"
  };
  let wrapperClassName = (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault5($930b2f4095bb11d1$exports)), "spectrum-Tray-wrapper");
  let className = (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault5($930b2f4095bb11d1$exports)), "spectrum-Tray", {
    "is-open": isOpen,
    "spectrum-Tray--fixedHeight": isFixedHeight
  }, (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault5($853e19557ad8790f$exports)), "spectrum-Tray", "react-spectrum-Tray"), styleProps.className);
  return /* @__PURE__ */ (0, yn).createElement("div", {
    ref: wrapperRef
  }, /* @__PURE__ */ (0, yn).createElement((0, $76a452f4e3df11be$export$f360afc887607b02), {
    ...underlayProps,
    isOpen
  }), /* @__PURE__ */ (0, yn).createElement("div", {
    className: wrapperClassName,
    style: wrapperStyle
  }, /* @__PURE__ */ (0, yn).createElement("div", {
    ...styleProps,
    ...modalProps,
    className,
    ref,
    "data-testid": "tray"
  }, /* @__PURE__ */ (0, yn).createElement((0, $86ea4cb521eb2e37$export$2317d149ed6f78c4), {
    onDismiss: state.close
  }), children, /* @__PURE__ */ (0, yn).createElement((0, $86ea4cb521eb2e37$export$2317d149ed6f78c4), {
    onDismiss: state.close
  }))));
});
var $1afc87f3d16a5a1c$export$4589ed81930b555c = /* @__PURE__ */ (0, Pe)($1afc87f3d16a5a1c$var$Tray);

// ../../node_modules/@react-aria/selection/dist/import.mjs
init_preact_min();
function $feb5ffebff200149$export$d3e3bd3e26688c04(e) {
  return (0, $c87311424ea30a05$export$e1865c3bedcd822b)() ? e.altKey : e.ctrlKey;
}
function $feb5ffebff200149$export$16792effe837dba3(e) {
  if ((0, $c87311424ea30a05$export$9ac100e40613ea10)())
    return e.metaKey;
  return e.ctrlKey;
}
var $fb3050f43d946246$var$TYPEAHEAD_DEBOUNCE_WAIT_MS = 1e3;
function $fb3050f43d946246$export$e32c88dfddc6e1d8(options) {
  let { keyboardDelegate, selectionManager, onTypeSelect } = options;
  let state = (0, ie)({
    search: "",
    timeout: null
  }).current;
  let onKeyDown = (e) => {
    let character = $fb3050f43d946246$var$getStringForKey(e.key);
    if (!character || e.ctrlKey || e.metaKey || !e.currentTarget.contains(e.target))
      return;
    if (character === " " && state.search.trim().length > 0) {
      e.preventDefault();
      if (!("continuePropagation" in e))
        e.stopPropagation();
    }
    state.search += character;
    let key = keyboardDelegate.getKeyForSearch(state.search, selectionManager.focusedKey);
    if (key == null)
      key = keyboardDelegate.getKeyForSearch(state.search);
    if (key != null) {
      selectionManager.setFocusedKey(key);
      if (onTypeSelect)
        onTypeSelect(key);
    }
    clearTimeout(state.timeout);
    state.timeout = setTimeout(() => {
      state.search = "";
    }, $fb3050f43d946246$var$TYPEAHEAD_DEBOUNCE_WAIT_MS);
  };
  return {
    typeSelectProps: {
      // Using a capturing listener to catch the keydown event before
      // other hooks in order to handle the Spacebar event.
      onKeyDownCapture: keyboardDelegate.getKeyForSearch ? onKeyDown : null
    }
  };
}
function $fb3050f43d946246$var$getStringForKey(key) {
  if (key.length === 1 || !/^[A-Z]/i.test(key))
    return key;
  return "";
}
function $ae20dd8cbca75726$export$d6daf82dcd84e87c(options) {
  let { selectionManager: manager, keyboardDelegate: delegate, ref, autoFocus = false, shouldFocusWrap = false, disallowEmptySelection = false, disallowSelectAll = false, selectOnFocus = manager.selectionBehavior === "replace", disallowTypeAhead = false, shouldUseVirtualFocus, allowsTabNavigation = false, isVirtualized, scrollRef = ref } = options;
  let { direction } = (0, $18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  let onKeyDown = (e) => {
    if (e.altKey && e.key === "Tab")
      e.preventDefault();
    if (!ref.current.contains(e.target))
      return;
    const navigateToKey = (key, childFocus) => {
      if (key != null) {
        manager.setFocusedKey(key, childFocus);
        if (e.shiftKey && manager.selectionMode === "multiple")
          manager.extendSelection(key);
        else if (selectOnFocus && !(0, $feb5ffebff200149$export$d3e3bd3e26688c04)(e))
          manager.replaceSelection(key);
      }
    };
    switch (e.key) {
      case "ArrowDown":
        if (delegate.getKeyBelow) {
          var _delegate_getFirstKey, _delegate_getFirstKey1;
          e.preventDefault();
          let nextKey = manager.focusedKey != null ? delegate.getKeyBelow(manager.focusedKey) : (_delegate_getFirstKey = delegate.getFirstKey) === null || _delegate_getFirstKey === void 0 ? void 0 : _delegate_getFirstKey.call(delegate);
          if (nextKey == null && shouldFocusWrap)
            nextKey = (_delegate_getFirstKey1 = delegate.getFirstKey) === null || _delegate_getFirstKey1 === void 0 ? void 0 : _delegate_getFirstKey1.call(delegate, manager.focusedKey);
          navigateToKey(nextKey);
        }
        break;
      case "ArrowUp":
        if (delegate.getKeyAbove) {
          var _delegate_getLastKey, _delegate_getLastKey1;
          e.preventDefault();
          let nextKey = manager.focusedKey != null ? delegate.getKeyAbove(manager.focusedKey) : (_delegate_getLastKey = delegate.getLastKey) === null || _delegate_getLastKey === void 0 ? void 0 : _delegate_getLastKey.call(delegate);
          if (nextKey == null && shouldFocusWrap)
            nextKey = (_delegate_getLastKey1 = delegate.getLastKey) === null || _delegate_getLastKey1 === void 0 ? void 0 : _delegate_getLastKey1.call(delegate, manager.focusedKey);
          navigateToKey(nextKey);
        }
        break;
      case "ArrowLeft":
        if (delegate.getKeyLeftOf) {
          var _delegate_getFirstKey2, _delegate_getLastKey2;
          e.preventDefault();
          let nextKey = delegate.getKeyLeftOf(manager.focusedKey);
          if (nextKey == null && shouldFocusWrap)
            nextKey = direction === "rtl" ? (_delegate_getFirstKey2 = delegate.getFirstKey) === null || _delegate_getFirstKey2 === void 0 ? void 0 : _delegate_getFirstKey2.call(delegate, manager.focusedKey) : (_delegate_getLastKey2 = delegate.getLastKey) === null || _delegate_getLastKey2 === void 0 ? void 0 : _delegate_getLastKey2.call(delegate, manager.focusedKey);
          navigateToKey(nextKey, direction === "rtl" ? "first" : "last");
        }
        break;
      case "ArrowRight":
        if (delegate.getKeyRightOf) {
          var _delegate_getLastKey3, _delegate_getFirstKey3;
          e.preventDefault();
          let nextKey = delegate.getKeyRightOf(manager.focusedKey);
          if (nextKey == null && shouldFocusWrap)
            nextKey = direction === "rtl" ? (_delegate_getLastKey3 = delegate.getLastKey) === null || _delegate_getLastKey3 === void 0 ? void 0 : _delegate_getLastKey3.call(delegate, manager.focusedKey) : (_delegate_getFirstKey3 = delegate.getFirstKey) === null || _delegate_getFirstKey3 === void 0 ? void 0 : _delegate_getFirstKey3.call(delegate, manager.focusedKey);
          navigateToKey(nextKey, direction === "rtl" ? "last" : "first");
        }
        break;
      case "Home":
        if (delegate.getFirstKey) {
          e.preventDefault();
          let firstKey = delegate.getFirstKey(manager.focusedKey, (0, $feb5ffebff200149$export$16792effe837dba3)(e));
          manager.setFocusedKey(firstKey);
          if ((0, $feb5ffebff200149$export$16792effe837dba3)(e) && e.shiftKey && manager.selectionMode === "multiple")
            manager.extendSelection(firstKey);
          else if (selectOnFocus)
            manager.replaceSelection(firstKey);
        }
        break;
      case "End":
        if (delegate.getLastKey) {
          e.preventDefault();
          let lastKey = delegate.getLastKey(manager.focusedKey, (0, $feb5ffebff200149$export$16792effe837dba3)(e));
          manager.setFocusedKey(lastKey);
          if ((0, $feb5ffebff200149$export$16792effe837dba3)(e) && e.shiftKey && manager.selectionMode === "multiple")
            manager.extendSelection(lastKey);
          else if (selectOnFocus)
            manager.replaceSelection(lastKey);
        }
        break;
      case "PageDown":
        if (delegate.getKeyPageBelow) {
          e.preventDefault();
          let nextKey = delegate.getKeyPageBelow(manager.focusedKey);
          navigateToKey(nextKey);
        }
        break;
      case "PageUp":
        if (delegate.getKeyPageAbove) {
          e.preventDefault();
          let nextKey = delegate.getKeyPageAbove(manager.focusedKey);
          navigateToKey(nextKey);
        }
        break;
      case "a":
        if ((0, $feb5ffebff200149$export$16792effe837dba3)(e) && manager.selectionMode === "multiple" && disallowSelectAll !== true) {
          e.preventDefault();
          manager.selectAll();
        }
        break;
      case "Escape":
        e.preventDefault();
        if (!disallowEmptySelection)
          manager.clearSelection();
        break;
      case "Tab":
        if (!allowsTabNavigation) {
          if (e.shiftKey)
            ref.current.focus();
          else {
            let walker = (0, $9bf71ea28793e738$export$2d6ec8fc375ceafa)(ref.current, {
              tabbable: true
            });
            let next;
            let last;
            do {
              last = walker.lastChild();
              if (last)
                next = last;
            } while (last);
            if (next && !next.contains(document.activeElement))
              (0, $7215afc6de606d6b$export$de79e2c695e052f3)(next);
          }
          break;
        }
    }
  };
  let scrollPos = (0, ie)({
    top: 0,
    left: 0
  });
  (0, $e9faafb641e167db$export$90fc3a17d93f704c)(scrollRef, "scroll", isVirtualized ? null : () => {
    scrollPos.current = {
      top: scrollRef.current.scrollTop,
      left: scrollRef.current.scrollLeft
    };
  });
  let onFocus = (e) => {
    if (manager.isFocused) {
      if (!e.currentTarget.contains(e.target))
        manager.setFocused(false);
      return;
    }
    if (!e.currentTarget.contains(e.target))
      return;
    manager.setFocused(true);
    if (manager.focusedKey == null) {
      let navigateToFirstKey = (key) => {
        if (key != null) {
          manager.setFocusedKey(key);
          if (selectOnFocus)
            manager.replaceSelection(key);
        }
      };
      let relatedTarget = e.relatedTarget;
      var _manager_lastSelectedKey, _manager_firstSelectedKey;
      if (relatedTarget && e.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING)
        navigateToFirstKey((_manager_lastSelectedKey = manager.lastSelectedKey) !== null && _manager_lastSelectedKey !== void 0 ? _manager_lastSelectedKey : delegate.getLastKey());
      else
        navigateToFirstKey((_manager_firstSelectedKey = manager.firstSelectedKey) !== null && _manager_firstSelectedKey !== void 0 ? _manager_firstSelectedKey : delegate.getFirstKey());
    } else if (!isVirtualized) {
      scrollRef.current.scrollTop = scrollPos.current.top;
      scrollRef.current.scrollLeft = scrollPos.current.left;
    }
    if (!isVirtualized && manager.focusedKey != null) {
      let element = scrollRef.current.querySelector(`[data-key="${manager.focusedKey}"]`);
      if (element) {
        (0, $7215afc6de606d6b$export$de79e2c695e052f3)(element);
        let modality = (0, $507fabe10e71c6fb$export$630ff653c5ada6a9)();
        if (modality === "keyboard")
          (0, $2f04cbc44ee30ce0$export$c826860796309d1b)(element, {
            containingElement: ref.current
          });
      }
    }
  };
  let onBlur = (e) => {
    if (!e.currentTarget.contains(e.relatedTarget))
      manager.setFocused(false);
  };
  const autoFocusRef = (0, ie)(autoFocus);
  (0, K)(() => {
    if (autoFocusRef.current) {
      let focusedKey = null;
      if (autoFocus === "first")
        focusedKey = delegate.getFirstKey();
      if (autoFocus === "last")
        focusedKey = delegate.getLastKey();
      let selectedKeys = manager.selectedKeys;
      if (selectedKeys.size)
        focusedKey = selectedKeys.values().next().value;
      manager.setFocused(true);
      manager.setFocusedKey(focusedKey);
      if (focusedKey == null && !shouldUseVirtualFocus)
        (0, $6a99195332edec8b$export$80f3e147d781571c)(ref.current);
    }
    autoFocusRef.current = false;
  }, []);
  let lastFocusedKey = (0, ie)(manager.focusedKey);
  (0, K)(() => {
    let modality = (0, $507fabe10e71c6fb$export$630ff653c5ada6a9)();
    if (manager.isFocused && manager.focusedKey != null && (scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current)) {
      let element = scrollRef.current.querySelector(`[data-key="${manager.focusedKey}"]`);
      if (element && modality === "keyboard") {
        if (!isVirtualized)
          (0, $2f04cbc44ee30ce0$export$53a0910f038337bd)(scrollRef.current, element);
        (0, $2f04cbc44ee30ce0$export$c826860796309d1b)(element, {
          containingElement: ref.current
        });
      }
    }
    if (manager.isFocused && manager.focusedKey == null && lastFocusedKey.current != null)
      (0, $6a99195332edec8b$export$80f3e147d781571c)(ref.current);
    lastFocusedKey.current = manager.focusedKey;
  }, [
    isVirtualized,
    scrollRef,
    manager.focusedKey,
    manager.isFocused,
    ref
  ]);
  let handlers = {
    onKeyDown,
    onFocus,
    onBlur,
    onMouseDown(e) {
      if (scrollRef.current === e.target)
        e.preventDefault();
    }
  };
  let { typeSelectProps } = (0, $fb3050f43d946246$export$e32c88dfddc6e1d8)({
    keyboardDelegate: delegate,
    selectionManager: manager
  });
  if (!disallowTypeAhead)
    handlers = (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(typeSelectProps, handlers);
  let tabIndex;
  if (!shouldUseVirtualFocus)
    tabIndex = manager.focusedKey == null ? 0 : -1;
  return {
    collectionProps: {
      ...handlers,
      tabIndex
    }
  };
}
function $880e95eb8b93ba9a$export$ecf600387e221c37(options) {
  let { selectionManager: manager, key, ref, shouldSelectOnPressUp, shouldUseVirtualFocus, focus, isDisabled, onAction, allowsDifferentPressOrigin } = options;
  let onSelect = (e) => {
    if (e.pointerType === "keyboard" && (0, $feb5ffebff200149$export$d3e3bd3e26688c04)(e))
      manager.toggleSelection(key);
    else {
      if (manager.selectionMode === "none")
        return;
      if (manager.selectionMode === "single") {
        if (manager.isSelected(key) && !manager.disallowEmptySelection)
          manager.toggleSelection(key);
        else
          manager.replaceSelection(key);
      } else if (e && e.shiftKey)
        manager.extendSelection(key);
      else if (manager.selectionBehavior === "toggle" || e && ((0, $feb5ffebff200149$export$16792effe837dba3)(e) || e.pointerType === "touch" || e.pointerType === "virtual"))
        manager.toggleSelection(key);
      else
        manager.replaceSelection(key);
    }
  };
  (0, K)(() => {
    let isFocused = key === manager.focusedKey;
    if (isFocused && manager.isFocused && !shouldUseVirtualFocus) {
      if (focus)
        focus();
      else if (document.activeElement !== ref.current)
        (0, $6a99195332edec8b$export$80f3e147d781571c)(ref.current);
    }
  }, [
    ref,
    key,
    manager.focusedKey,
    manager.childFocusStrategy,
    manager.isFocused,
    shouldUseVirtualFocus
  ]);
  isDisabled = isDisabled || manager.isDisabled(key);
  let itemProps = {};
  if (!shouldUseVirtualFocus && !isDisabled)
    itemProps = {
      tabIndex: key === manager.focusedKey ? 0 : -1,
      onFocus(e) {
        if (e.target === ref.current)
          manager.setFocusedKey(key);
      }
    };
  else if (isDisabled)
    itemProps.onMouseDown = (e) => {
      e.preventDefault();
    };
  let allowsSelection = !isDisabled && manager.canSelectItem(key);
  let allowsActions = onAction && !isDisabled;
  let hasPrimaryAction = allowsActions && (manager.selectionBehavior === "replace" ? !allowsSelection : manager.isEmpty);
  let hasSecondaryAction = allowsActions && allowsSelection && manager.selectionBehavior === "replace";
  let hasAction = hasPrimaryAction || hasSecondaryAction;
  let modality = (0, ie)(null);
  let longPressEnabled = hasAction && allowsSelection;
  let longPressEnabledOnPressStart = (0, ie)(false);
  let hadPrimaryActionOnPressStart = (0, ie)(false);
  let itemPressProps = {};
  if (shouldSelectOnPressUp) {
    itemPressProps.onPressStart = (e) => {
      modality.current = e.pointerType;
      longPressEnabledOnPressStart.current = longPressEnabled;
      if (e.pointerType === "keyboard" && (!hasAction || $880e95eb8b93ba9a$var$isSelectionKey()))
        onSelect(e);
    };
    if (!allowsDifferentPressOrigin)
      itemPressProps.onPress = (e) => {
        if (hasPrimaryAction || hasSecondaryAction && e.pointerType !== "mouse") {
          if (e.pointerType === "keyboard" && !$880e95eb8b93ba9a$var$isActionKey())
            return;
          onAction();
        } else if (e.pointerType !== "keyboard")
          onSelect(e);
      };
    else {
      itemPressProps.onPressUp = (e) => {
        if (e.pointerType !== "keyboard")
          onSelect(e);
      };
      itemPressProps.onPress = hasPrimaryAction ? () => onAction() : null;
    }
  } else {
    itemPressProps.onPressStart = (e) => {
      modality.current = e.pointerType;
      longPressEnabledOnPressStart.current = longPressEnabled;
      hadPrimaryActionOnPressStart.current = hasPrimaryAction;
      if (e.pointerType === "mouse" && !hasPrimaryAction || e.pointerType === "keyboard" && (!onAction || $880e95eb8b93ba9a$var$isSelectionKey()))
        onSelect(e);
    };
    itemPressProps.onPress = (e) => {
      if (e.pointerType === "touch" || e.pointerType === "pen" || e.pointerType === "virtual" || e.pointerType === "keyboard" && hasAction && $880e95eb8b93ba9a$var$isActionKey() || e.pointerType === "mouse" && hadPrimaryActionOnPressStart.current) {
        if (hasAction)
          onAction();
        else
          onSelect(e);
      }
    };
  }
  itemProps["data-key"] = key;
  itemPressProps.preventFocusOnPress = shouldUseVirtualFocus;
  let { pressProps, isPressed } = (0, $f6c31cce2adf654f$export$45712eceda6fad21)(itemPressProps);
  let onDoubleClick = hasSecondaryAction ? (e) => {
    if (modality.current === "mouse") {
      e.stopPropagation();
      e.preventDefault();
      onAction();
    }
  } : void 0;
  let { longPressProps } = (0, $8a26561d2877236e$export$c24ed0104d07eab9)({
    isDisabled: !longPressEnabled,
    onLongPress(e) {
      if (e.pointerType === "touch") {
        onSelect(e);
        manager.setSelectionBehavior("toggle");
      }
    }
  });
  let onDragStartCapture = (e) => {
    if (modality.current === "touch" && longPressEnabledOnPressStart.current)
      e.preventDefault();
  };
  return {
    itemProps: (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(itemProps, allowsSelection || hasPrimaryAction ? pressProps : {}, longPressEnabled ? longPressProps : {}, {
      onDoubleClick,
      onDragStartCapture
    }),
    isPressed,
    isSelected: manager.isSelected(key),
    isFocused: manager.isFocused && manager.focusedKey === key,
    isDisabled,
    allowsSelection,
    hasAction
  };
}
function $880e95eb8b93ba9a$var$isActionKey() {
  let event = window.event;
  return (event === null || event === void 0 ? void 0 : event.key) === "Enter";
}
function $880e95eb8b93ba9a$var$isSelectionKey() {
  let event = window.event;
  return (event === null || event === void 0 ? void 0 : event.key) === " " || (event === null || event === void 0 ? void 0 : event.code) === "Space";
}
var $2a25aae57d74318e$export$a05409b8bb224a5a = class {
  getNextKey(key) {
    key = this.collection.getKeyAfter(key);
    while (key != null) {
      let item = this.collection.getItem(key);
      if (item.type === "item" && !this.disabledKeys.has(key))
        return key;
      key = this.collection.getKeyAfter(key);
    }
    return null;
  }
  getPreviousKey(key) {
    key = this.collection.getKeyBefore(key);
    while (key != null) {
      let item = this.collection.getItem(key);
      if (item.type === "item" && !this.disabledKeys.has(key))
        return key;
      key = this.collection.getKeyBefore(key);
    }
    return null;
  }
  findKey(key, nextKey, shouldSkip) {
    let item = this.getItem(key);
    if (!item)
      return null;
    let prevRect = item.getBoundingClientRect();
    do {
      key = nextKey(key);
      item = this.getItem(key);
    } while (item && shouldSkip(prevRect, item.getBoundingClientRect()));
    return key;
  }
  isSameRow(prevRect, itemRect) {
    return prevRect.top === itemRect.top || prevRect.left !== itemRect.left;
  }
  isSameColumn(prevRect, itemRect) {
    return prevRect.left === itemRect.left || prevRect.top !== itemRect.top;
  }
  getKeyBelow(key) {
    if (this.layout === "grid" && this.orientation === "vertical")
      return this.findKey(key, (key2) => this.getNextKey(key2), this.isSameRow);
    else
      return this.getNextKey(key);
  }
  getKeyAbove(key) {
    if (this.layout === "grid" && this.orientation === "vertical")
      return this.findKey(key, (key2) => this.getPreviousKey(key2), this.isSameRow);
    else
      return this.getPreviousKey(key);
  }
  getNextColumn(key, right) {
    return right ? this.getPreviousKey(key) : this.getNextKey(key);
  }
  getKeyRightOf(key) {
    if (this.layout === "grid") {
      if (this.orientation === "vertical")
        return this.getNextColumn(key, this.direction === "rtl");
      else
        return this.findKey(key, (key2) => this.getNextColumn(key2, this.direction === "rtl"), this.isSameColumn);
    } else if (this.orientation === "horizontal")
      return this.getNextColumn(key, this.direction === "rtl");
    return null;
  }
  getKeyLeftOf(key) {
    if (this.layout === "grid") {
      if (this.orientation === "vertical")
        return this.getNextColumn(key, this.direction === "ltr");
      else
        return this.findKey(key, (key2) => this.getNextColumn(key2, this.direction === "ltr"), this.isSameColumn);
    } else if (this.orientation === "horizontal")
      return this.getNextColumn(key, this.direction === "ltr");
    return null;
  }
  getFirstKey() {
    let key = this.collection.getFirstKey();
    while (key != null) {
      let item = this.collection.getItem(key);
      if (item.type === "item" && !this.disabledKeys.has(key))
        return key;
      key = this.collection.getKeyAfter(key);
    }
    return null;
  }
  getLastKey() {
    let key = this.collection.getLastKey();
    while (key != null) {
      let item = this.collection.getItem(key);
      if (item.type === "item" && !this.disabledKeys.has(key))
        return key;
      key = this.collection.getKeyBefore(key);
    }
    return null;
  }
  getItem(key) {
    return this.ref.current.querySelector(`[data-key="${key}"]`);
  }
  getKeyPageAbove(key) {
    let menu = this.ref.current;
    let item = this.getItem(key);
    if (!item)
      return null;
    if (!(0, $62d8ded9296f3872$export$2bb74740c4e19def)(menu))
      return this.getFirstKey();
    let containerRect = menu.getBoundingClientRect();
    let itemRect = item.getBoundingClientRect();
    if (this.orientation === "horizontal") {
      let containerX = containerRect.x - menu.scrollLeft;
      let pageX = Math.max(0, itemRect.x - containerX + itemRect.width - containerRect.width);
      while (item && itemRect.x - containerX > pageX) {
        key = this.getKeyAbove(key);
        item = key == null ? null : this.getItem(key);
        itemRect = item === null || item === void 0 ? void 0 : item.getBoundingClientRect();
      }
    } else {
      let containerY = containerRect.y - menu.scrollTop;
      let pageY = Math.max(0, itemRect.y - containerY + itemRect.height - containerRect.height);
      while (item && itemRect.y - containerY > pageY) {
        key = this.getKeyAbove(key);
        item = key == null ? null : this.getItem(key);
        itemRect = item === null || item === void 0 ? void 0 : item.getBoundingClientRect();
      }
    }
    return key !== null && key !== void 0 ? key : this.getFirstKey();
  }
  getKeyPageBelow(key) {
    let menu = this.ref.current;
    let item = this.getItem(key);
    if (!item)
      return null;
    if (!(0, $62d8ded9296f3872$export$2bb74740c4e19def)(menu))
      return this.getLastKey();
    let containerRect = menu.getBoundingClientRect();
    let itemRect = item.getBoundingClientRect();
    if (this.orientation === "horizontal") {
      let containerX = containerRect.x - menu.scrollLeft;
      let pageX = Math.min(menu.scrollWidth, itemRect.x - containerX - itemRect.width + containerRect.width);
      while (item && itemRect.x - containerX < pageX) {
        key = this.getKeyBelow(key);
        item = key == null ? null : this.getItem(key);
        itemRect = item === null || item === void 0 ? void 0 : item.getBoundingClientRect();
      }
    } else {
      let containerY = containerRect.y - menu.scrollTop;
      let pageY = Math.min(menu.scrollHeight, itemRect.y - containerY - itemRect.height + containerRect.height);
      while (item && itemRect.y - containerY < pageY) {
        key = this.getKeyBelow(key);
        item = key == null ? null : this.getItem(key);
        itemRect = item === null || item === void 0 ? void 0 : item.getBoundingClientRect();
      }
    }
    return key !== null && key !== void 0 ? key : this.getLastKey();
  }
  getKeyForSearch(search, fromKey) {
    if (!this.collator)
      return null;
    let collection = this.collection;
    let key = fromKey || this.getFirstKey();
    while (key != null) {
      let item = collection.getItem(key);
      let substring = item.textValue.slice(0, search.length);
      if (item.textValue && this.collator.compare(substring, search) === 0)
        return key;
      key = this.getKeyBelow(key);
    }
    return null;
  }
  constructor(...args) {
    if (args.length === 1) {
      let opts = args[0];
      this.collection = opts.collection;
      this.ref = opts.ref;
      this.disabledKeys = opts.disabledKeys || /* @__PURE__ */ new Set();
      this.orientation = opts.orientation;
      this.direction = opts.direction;
      this.layout = opts.layout || "stack";
    } else {
      this.collection = args[0];
      this.disabledKeys = args[1];
      this.ref = args[2];
      this.collator = args[3];
      this.layout = "stack";
      this.orientation = "vertical";
    }
    if (this.layout === "stack" && this.orientation === "vertical") {
      this.getKeyLeftOf = void 0;
      this.getKeyRightOf = void 0;
    }
  }
};
function $982254629710d113$export$b95089534ab7c1fd(props) {
  let { selectionManager, collection, disabledKeys, ref, keyboardDelegate, autoFocus, shouldFocusWrap, isVirtualized, disallowEmptySelection, selectOnFocus = selectionManager.selectionBehavior === "replace", disallowTypeAhead, shouldUseVirtualFocus, allowsTabNavigation } = props;
  let collator = (0, $325a3faab7a68acd$export$a16aca283550c30d)({
    usage: "search",
    sensitivity: "base"
  });
  let disabledBehavior = selectionManager.disabledBehavior;
  let delegate = (0, j)(() => keyboardDelegate || new (0, $2a25aae57d74318e$export$a05409b8bb224a5a)(collection, disabledBehavior === "selection" ? /* @__PURE__ */ new Set() : disabledKeys, ref, collator), [
    keyboardDelegate,
    collection,
    disabledKeys,
    ref,
    collator,
    disabledBehavior
  ]);
  let { collectionProps } = (0, $ae20dd8cbca75726$export$d6daf82dcd84e87c)({
    ref,
    selectionManager,
    keyboardDelegate: delegate,
    autoFocus,
    shouldFocusWrap,
    disallowEmptySelection,
    selectOnFocus,
    disallowTypeAhead,
    shouldUseVirtualFocus,
    allowsTabNavigation,
    isVirtualized,
    scrollRef: ref
  });
  return {
    listProps: collectionProps
  };
}

// ../../node_modules/@react-aria/menu/dist/import.mjs
init_preact_min();
function $parcel$interopDefault6(a) {
  return a && a.__esModule ? a.default : a;
}
var $2cbb7ca666678a14$exports = {};
var $c0398ad35c3639b7$exports = {};
$c0398ad35c3639b7$exports = {
  "longPressMessage": `\u0627\u0636\u063A\u0637 \u0645\u0637\u0648\u0644\u0627\u064B \u0623\u0648 \u0627\u0636\u063A\u0637 \u0639\u0644\u0649 Alt + \u0627\u0644\u0633\u0647\u0645 \u0644\u0623\u0633\u0641\u0644 \u0644\u0641\u062A\u062D \u0627\u0644\u0642\u0627\u0626\u0645\u0629`
};
var $7af657c4165927c3$exports = {};
$7af657c4165927c3$exports = {
  "longPressMessage": `\u041D\u0430\u0442\u0438\u0441\u043D\u0435\u0442\u0435 \u043F\u0440\u043E\u0434\u044A\u043B\u0436\u0438\u0442\u0435\u043B\u043D\u043E \u0438\u043B\u0438 \u043D\u0430\u0442\u0438\u0441\u043D\u0435\u0442\u0435 Alt+ \u0441\u0442\u0440\u0435\u043B\u043A\u0430 \u043D\u0430\u0434\u043E\u043B\u0443, \u0437\u0430 \u0434\u0430 \u043E\u0442\u0432\u043E\u0440\u0438\u0442\u0435 \u043C\u0435\u043D\u044E\u0442\u043E`
};
var $d95d4da6d531ab81$exports = {};
$d95d4da6d531ab81$exports = {
  "longPressMessage": `Dlouh\xFDm stiskem nebo stisknut\xEDm kl\xE1ves Alt + \u0161ipka dol\u016F otev\u0159ete nab\xEDdku`
};
var $24ebda9c775dca17$exports = {};
$24ebda9c775dca17$exports = {
  "longPressMessage": `Langt tryk eller tryk p\xE5 Alt + pil ned for at \xE5bne menuen`
};
var $743e0dfca6cab1e9$exports = {};
$743e0dfca6cab1e9$exports = {
  "longPressMessage": `Dr\xFCcken Sie lange oder dr\xFCcken Sie Alt + Nach-unten, um das Men\xFC zu \xF6ffnen`
};
var $a2f41026e05f1c84$exports = {};
$a2f41026e05f1c84$exports = {
  "longPressMessage": `\u03A0\u03B9\u03AD\u03C3\u03C4\u03B5 \u03C0\u03B1\u03C1\u03B1\u03C4\u03B5\u03C4\u03B1\u03BC\u03AD\u03BD\u03B1 \u03AE \u03C0\u03B1\u03C4\u03AE\u03C3\u03C4\u03B5 Alt + \u03BA\u03AC\u03C4\u03C9 \u03B2\u03AD\u03BB\u03BF\u03C2 \u03B3\u03B9\u03B1 \u03BD\u03B1 \u03B1\u03BD\u03BF\u03AF\u03BE\u03B5\u03C4\u03B5 \u03C4\u03BF \u03BC\u03B5\u03BD\u03BF\u03CD`
};
var $43b800e97c901737$exports = {};
$43b800e97c901737$exports = {
  "longPressMessage": `Long press or press Alt + ArrowDown to open menu`
};
var $442f5f6ac211e29f$exports = {};
$442f5f6ac211e29f$exports = {
  "longPressMessage": `Mantenga pulsado o pulse Alt + flecha abajo para abrir el men\xFA`
};
var $dff280acfeb2d8ac$exports = {};
$dff280acfeb2d8ac$exports = {
  "longPressMessage": `Men\xFC\xFC avamiseks vajutage pikalt v\xF5i vajutage klahve Alt + allanool`
};
var $51608325613944d7$exports = {};
$51608325613944d7$exports = {
  "longPressMessage": `Avaa valikko painamalla pohjassa tai n\xE4pp\xE4inyhdistelm\xE4ll\xE4 Alt + Alanuoli`
};
var $c4a1b1eabeaa87be$exports = {};
$c4a1b1eabeaa87be$exports = {
  "longPressMessage": `Appuyez de mani\xE8re prolong\xE9e ou appuyez sur Alt\xA0+\xA0Fl\xE8che vers le bas pour ouvrir le menu.`
};
var $8c74815cdee18d1b$exports = {};
$8c74815cdee18d1b$exports = {
  "longPressMessage": `\u05DC\u05D7\u05E5 \u05DC\u05D7\u05D9\u05E6\u05D4 \u05D0\u05E8\u05D5\u05DB\u05D4 \u05D0\u05D5 \u05D4\u05E7\u05E9 Alt + ArrowDown \u05DB\u05D3\u05D9 \u05DC\u05E4\u05EA\u05D5\u05D7 \u05D0\u05EA \u05D4\u05EA\u05E4\u05E8\u05D9\u05D8`
};
var $fd0e9ef6a7fe0ec9$exports = {};
$fd0e9ef6a7fe0ec9$exports = {
  "longPressMessage": `Dugo pritisnite ili pritisnite Alt + strelicu prema dolje za otvaranje izbornika`
};
var $a89a74a39eba465a$exports = {};
$a89a74a39eba465a$exports = {
  "longPressMessage": `Nyomja meg hosszan, vagy nyomja meg az Alt + lefele ny\xEDl gombot a men\xFC megnyit\xE1s\xE1hoz`
};
var $edc7c66594a0ae8a$exports = {};
$edc7c66594a0ae8a$exports = {
  "longPressMessage": `Premere a lungo o premere Alt + Freccia gi\xF9 per aprire il menu`
};
var $f1ab51510712db52$exports = {};
$f1ab51510712db52$exports = {
  "longPressMessage": `\u9577\u62BC\u3057\u307E\u305F\u306F Alt+\u4E0B\u77E2\u5370\u30AD\u30FC\u3067\u30E1\u30CB\u30E5\u30FC\u3092\u958B\u304F`
};
var $f9b672d9b82fa3d6$exports = {};
$f9b672d9b82fa3d6$exports = {
  "longPressMessage": `\uAE38\uAC8C \uB204\uB974\uAC70\uB098 Alt + \uC544\uB798\uCABD \uD654\uC0B4\uD45C\uB97C \uB20C\uB7EC \uBA54\uB274 \uC5F4\uAE30`
};
var $a385f3910feda499$exports = {};
$a385f3910feda499$exports = {
  "longPressMessage": `Nor\u0117dami atidaryti meniu, nuspaud\u0119 palaikykite arba paspauskite \u201EAlt + ArrowDown\u201C.`
};
var $4f1bde932c441789$exports = {};
$4f1bde932c441789$exports = {
  "longPressMessage": `Lai atv\u0113rtu izv\u0113lni, turiet nospiestu vai nospiediet tausti\u0146u kombin\u0101ciju Alt + lejupv\u0113rst\u0101 bulti\u0146a`
};
var $914a51a8a594d5be$exports = {};
$914a51a8a594d5be$exports = {
  "longPressMessage": `Langt trykk eller trykk Alt + PilNed for \xE5 \xE5pne menyen`
};
var $89aaf803103bb500$exports = {};
$89aaf803103bb500$exports = {
  "longPressMessage": `Druk lang op Alt + pijl-omlaag of druk op Alt om het menu te openen`
};
var $c685891476dbaaca$exports = {};
$c685891476dbaaca$exports = {
  "longPressMessage": `Naci\u015Bnij i przytrzymaj lub naci\u015Bnij klawisze Alt + Strza\u0142ka w d\xF3\u0142, aby otworzy\u0107 menu`
};
var $885879b9b10c2959$exports = {};
$885879b9b10c2959$exports = {
  "longPressMessage": `Pressione e segure ou pressione Alt + Seta para baixo para abrir o menu`
};
var $6b39616688a51692$exports = {};
$6b39616688a51692$exports = {
  "longPressMessage": `Prima continuamente ou prima Alt + Seta Para Baixo para abrir o menu`
};
var $f26362aed63f47e2$exports = {};
$f26362aed63f47e2$exports = {
  "longPressMessage": `Ap\u0103sa\u021Bi lung sau ap\u0103sa\u021Bi pe Alt + s\u0103geat\u0103 \xEEn jos pentru a deschide meniul`
};
var $06cbade644558bf0$exports = {};
$06cbade644558bf0$exports = {
  "longPressMessage": `\u041D\u0430\u0436\u043C\u0438\u0442\u0435 \u0438 \u0443\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0439\u0442\u0435 \u0438\u043B\u0438 \u043D\u0430\u0436\u043C\u0438\u0442\u0435 Alt + \u0421\u0442\u0440\u0435\u043B\u043A\u0430 \u0432\u043D\u0438\u0437, \u0447\u0442\u043E\u0431\u044B \u043E\u0442\u043A\u0440\u044B\u0442\u044C \u043C\u0435\u043D\u044E`
};
var $0a391ff68f9d59b1$exports = {};
$0a391ff68f9d59b1$exports = {
  "longPressMessage": `Ponuku otvor\xEDte dlh\xFDm stla\u010Den\xEDm alebo stla\u010Den\xEDm kl\xE1vesu Alt + kl\xE1vesu so \u0161\xEDpkou nadol`
};
var $8193cf0e649c7928$exports = {};
$8193cf0e649c7928$exports = {
  "longPressMessage": `Za odprtje menija pritisnite in dr\u017Eite gumb ali pritisnite Alt+pu\u0161\u010Dica navzdol`
};
var $f398debcce5a5c55$exports = {};
$f398debcce5a5c55$exports = {
  "longPressMessage": `Dugo pritisnite ili pritisnite Alt + strelicu prema dole da otvorite meni`
};
var $9e9fef000aa4c013$exports = {};
$9e9fef000aa4c013$exports = {
  "longPressMessage": `H\xE5ll nedtryckt eller tryck p\xE5 Alt + pil ned\xE5t f\xF6r att \xF6ppna menyn`
};
var $c016c8183bbe3d68$exports = {};
$c016c8183bbe3d68$exports = {
  "longPressMessage": `Men\xFCy\xFC a\xE7mak i\xE7in uzun bas\u0131n veya Alt + A\u015Fa\u011F\u0131 Ok tu\u015Funa bas\u0131n`
};
var $ca4f6c8462244e62$exports = {};
$ca4f6c8462244e62$exports = {
  "longPressMessage": `\u0414\u043E\u0432\u0433\u043E \u0430\u0431\u043E \u0437\u0432\u0438\u0447\u0430\u0439\u043D\u043E \u043D\u0430\u0442\u0438\u0441\u043D\u0456\u0442\u044C \u043A\u043E\u043C\u0431\u0456\u043D\u0430\u0446\u0456\u044E \u043A\u043B\u0430\u0432\u0456\u0448 Alt \u0456 \u0441\u0442\u0440\u0456\u043B\u043A\u0430 \u0432\u043D\u0438\u0437, \u0449\u043E\u0431 \u0432\u0456\u0434\u043A\u0440\u0438\u0442\u0438 \u043C\u0435\u043D\u044E`
};
var $2d9960c02ccac927$exports = {};
$2d9960c02ccac927$exports = {
  "longPressMessage": `\u957F\u6309\u6216\u6309 Alt + \u5411\u4E0B\u65B9\u5411\u952E\u4EE5\u6253\u5F00\u83DC\u5355`
};
var $f1b682a4c8c5631c$exports = {};
$f1b682a4c8c5631c$exports = {
  "longPressMessage": `\u9577\u6309\u6216\u6309 Alt+\u5411\u4E0B\u9375\u4EE5\u958B\u555F\u529F\u80FD\u8868`
};
$2cbb7ca666678a14$exports = {
  "ar-AE": $c0398ad35c3639b7$exports,
  "bg-BG": $7af657c4165927c3$exports,
  "cs-CZ": $d95d4da6d531ab81$exports,
  "da-DK": $24ebda9c775dca17$exports,
  "de-DE": $743e0dfca6cab1e9$exports,
  "el-GR": $a2f41026e05f1c84$exports,
  "en-US": $43b800e97c901737$exports,
  "es-ES": $442f5f6ac211e29f$exports,
  "et-EE": $dff280acfeb2d8ac$exports,
  "fi-FI": $51608325613944d7$exports,
  "fr-FR": $c4a1b1eabeaa87be$exports,
  "he-IL": $8c74815cdee18d1b$exports,
  "hr-HR": $fd0e9ef6a7fe0ec9$exports,
  "hu-HU": $a89a74a39eba465a$exports,
  "it-IT": $edc7c66594a0ae8a$exports,
  "ja-JP": $f1ab51510712db52$exports,
  "ko-KR": $f9b672d9b82fa3d6$exports,
  "lt-LT": $a385f3910feda499$exports,
  "lv-LV": $4f1bde932c441789$exports,
  "nb-NO": $914a51a8a594d5be$exports,
  "nl-NL": $89aaf803103bb500$exports,
  "pl-PL": $c685891476dbaaca$exports,
  "pt-BR": $885879b9b10c2959$exports,
  "pt-PT": $6b39616688a51692$exports,
  "ro-RO": $f26362aed63f47e2$exports,
  "ru-RU": $06cbade644558bf0$exports,
  "sk-SK": $0a391ff68f9d59b1$exports,
  "sl-SI": $8193cf0e649c7928$exports,
  "sr-SP": $f398debcce5a5c55$exports,
  "sv-SE": $9e9fef000aa4c013$exports,
  "tr-TR": $c016c8183bbe3d68$exports,
  "uk-UA": $ca4f6c8462244e62$exports,
  "zh-CN": $2d9960c02ccac927$exports,
  "zh-TW": $f1b682a4c8c5631c$exports
};
function $168583247155ddda$export$dc9c12ed27dd1b49(props, state, ref) {
  let { type = "menu", isDisabled, trigger = "press" } = props;
  let menuTriggerId = (0, $bdb11010cef70236$export$f680877a34711e37)();
  let { triggerProps, overlayProps } = (0, $628037886ba31236$export$f9d5c8beee7d008d)({
    type
  }, state, ref);
  let onKeyDown = (e) => {
    if (isDisabled)
      return;
    if (trigger === "longPress" && !e.altKey)
      return;
    if (ref && ref.current)
      switch (e.key) {
        case "Enter":
        case " ":
          if (trigger === "longPress")
            return;
        case "ArrowDown":
          if (!("continuePropagation" in e))
            e.stopPropagation();
          e.preventDefault();
          state.toggle("first");
          break;
        case "ArrowUp":
          if (!("continuePropagation" in e))
            e.stopPropagation();
          e.preventDefault();
          state.toggle("last");
          break;
      }
  };
  let stringFormatter = (0, $fca6afa0e843324b$export$f12b703ca79dfbb1)((0, /* @__PURE__ */ $parcel$interopDefault6($2cbb7ca666678a14$exports)));
  let { longPressProps } = (0, $8a26561d2877236e$export$c24ed0104d07eab9)({
    isDisabled: isDisabled || trigger !== "longPress",
    accessibilityDescription: stringFormatter.format("longPressMessage"),
    onLongPressStart() {
      state.close();
    },
    onLongPress() {
      state.open("first");
    }
  });
  let pressProps = {
    onPressStart(e) {
      if (e.pointerType !== "touch" && e.pointerType !== "keyboard" && !isDisabled)
        state.toggle(e.pointerType === "virtual" ? "first" : null);
    },
    onPress(e) {
      if (e.pointerType === "touch" && !isDisabled)
        state.toggle();
    }
  };
  delete triggerProps.onPress;
  return {
    menuTriggerProps: {
      ...triggerProps,
      ...trigger === "press" ? pressProps : longPressProps,
      id: menuTriggerId,
      onKeyDown
    },
    menuProps: {
      ...overlayProps,
      "aria-labelledby": menuTriggerId,
      autoFocus: state.focusStrategy || true,
      onClose: state.close
    }
  };
}

// ../../node_modules/@react-stately/overlays/dist/import.mjs
init_preact_min();
function $fc909762b330b746$export$61c6a8c84e605fb6(props) {
  let [isOpen, setOpen] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.isOpen, props.defaultOpen || false, props.onOpenChange);
  const open = (0, ae)(() => {
    setOpen(true);
  }, [
    setOpen
  ]);
  const close = (0, ae)(() => {
    setOpen(false);
  }, [
    setOpen
  ]);
  const toggle = (0, ae)(() => {
    setOpen(!isOpen);
  }, [
    setOpen,
    isOpen
  ]);
  return {
    isOpen,
    setOpen,
    open,
    close,
    toggle
  };
}

// ../../node_modules/@react-stately/menu/dist/import.mjs
init_preact_min();
function $a28c903ee9ad8dc5$export$79fefeb1c2091ac3(props) {
  let overlayTriggerState = (0, $fc909762b330b746$export$61c6a8c84e605fb6)(props);
  let [focusStrategy, setFocusStrategy] = (0, z)(null);
  return {
    focusStrategy,
    ...overlayTriggerState,
    open(focusStrategy2 = null) {
      setFocusStrategy(focusStrategy2);
      overlayTriggerState.open();
    },
    toggle(focusStrategy2 = null) {
      setFocusStrategy(focusStrategy2);
      overlayTriggerState.toggle();
    }
  };
}

// ../../node_modules/@react-stately/selection/dist/import.mjs
init_preact_min();
var $e40ea825a81a3709$export$52baac22726c72bf = class _$e40ea825a81a3709$export$52baac22726c72bf extends Set {
  constructor(keys, anchorKey, currentKey) {
    super(keys);
    if (keys instanceof _$e40ea825a81a3709$export$52baac22726c72bf) {
      this.anchorKey = anchorKey || keys.anchorKey;
      this.currentKey = currentKey || keys.currentKey;
    } else {
      this.anchorKey = anchorKey;
      this.currentKey = currentKey;
    }
  }
};
function $7af3f5b51489e0b5$var$equalSets(setA, setB) {
  if (setA.size !== setB.size)
    return false;
  for (let item of setA) {
    if (!setB.has(item))
      return false;
  }
  return true;
}
function $7af3f5b51489e0b5$export$253fe78d46329472(props) {
  let { selectionMode = "none", disallowEmptySelection, allowDuplicateSelectionEvents, selectionBehavior: selectionBehaviorProp = "toggle", disabledBehavior = "all" } = props;
  let isFocusedRef = (0, ie)(false);
  let [, setFocused] = (0, z)(false);
  let focusedKeyRef = (0, ie)(null);
  let childFocusStrategyRef = (0, ie)(null);
  let [, setFocusedKey] = (0, z)(null);
  let selectedKeysProp = (0, j)(() => $7af3f5b51489e0b5$var$convertSelection(props.selectedKeys), [
    props.selectedKeys
  ]);
  let defaultSelectedKeys = (0, j)(() => $7af3f5b51489e0b5$var$convertSelection(props.defaultSelectedKeys, new (0, $e40ea825a81a3709$export$52baac22726c72bf)()), [
    props.defaultSelectedKeys
  ]);
  let [selectedKeys, setSelectedKeys] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(selectedKeysProp, defaultSelectedKeys, props.onSelectionChange);
  let disabledKeysProp = (0, j)(() => props.disabledKeys ? new Set(props.disabledKeys) : /* @__PURE__ */ new Set(), [
    props.disabledKeys
  ]);
  let [selectionBehavior, setSelectionBehavior] = (0, z)(selectionBehaviorProp);
  if (selectionBehaviorProp === "replace" && selectionBehavior === "toggle" && typeof selectedKeys === "object" && selectedKeys.size === 0)
    setSelectionBehavior("replace");
  let lastSelectionBehavior = (0, ie)(selectionBehaviorProp);
  (0, K)(() => {
    if (selectionBehaviorProp !== lastSelectionBehavior.current) {
      setSelectionBehavior(selectionBehaviorProp);
      lastSelectionBehavior.current = selectionBehaviorProp;
    }
  }, [
    selectionBehaviorProp
  ]);
  return {
    selectionMode,
    disallowEmptySelection,
    selectionBehavior,
    setSelectionBehavior,
    get isFocused() {
      return isFocusedRef.current;
    },
    setFocused(f) {
      isFocusedRef.current = f;
      setFocused(f);
    },
    get focusedKey() {
      return focusedKeyRef.current;
    },
    get childFocusStrategy() {
      return childFocusStrategyRef.current;
    },
    setFocusedKey(k, childFocusStrategy = "first") {
      focusedKeyRef.current = k;
      childFocusStrategyRef.current = childFocusStrategy;
      setFocusedKey(k);
    },
    selectedKeys,
    setSelectedKeys(keys) {
      if (allowDuplicateSelectionEvents || !$7af3f5b51489e0b5$var$equalSets(keys, selectedKeys))
        setSelectedKeys(keys);
    },
    disabledKeys: disabledKeysProp,
    disabledBehavior
  };
}
function $7af3f5b51489e0b5$var$convertSelection(selection, defaultValue) {
  if (!selection)
    return defaultValue;
  return selection === "all" ? "all" : new (0, $e40ea825a81a3709$export$52baac22726c72bf)(selection);
}
var $d496c0a20b6e58ec$export$6c8a5aaad13c9852 = class {
  /**
  * The type of selection that is allowed in the collection.
  */
  get selectionMode() {
    return this.state.selectionMode;
  }
  /**
  * Whether the collection allows empty selection.
  */
  get disallowEmptySelection() {
    return this.state.disallowEmptySelection;
  }
  /**
  * The selection behavior for the collection.
  */
  get selectionBehavior() {
    return this.state.selectionBehavior;
  }
  /**
  * Sets the selection behavior for the collection.
  */
  setSelectionBehavior(selectionBehavior) {
    this.state.setSelectionBehavior(selectionBehavior);
  }
  /**
  * Whether the collection is currently focused.
  */
  get isFocused() {
    return this.state.isFocused;
  }
  /**
  * Sets whether the collection is focused.
  */
  setFocused(isFocused) {
    this.state.setFocused(isFocused);
  }
  /**
  * The current focused key in the collection.
  */
  get focusedKey() {
    return this.state.focusedKey;
  }
  /** Whether the first or last child of the focused key should receive focus. */
  get childFocusStrategy() {
    return this.state.childFocusStrategy;
  }
  /**
  * Sets the focused key.
  */
  setFocusedKey(key, childFocusStrategy) {
    if (key == null || this.collection.getItem(key))
      this.state.setFocusedKey(key, childFocusStrategy);
  }
  /**
  * The currently selected keys in the collection.
  */
  get selectedKeys() {
    return this.state.selectedKeys === "all" ? new Set(this.getSelectAllKeys()) : this.state.selectedKeys;
  }
  /**
  * The raw selection value for the collection.
  * Either 'all' for select all, or a set of keys.
  */
  get rawSelection() {
    return this.state.selectedKeys;
  }
  /**
  * Returns whether a key is selected.
  */
  isSelected(key) {
    if (this.state.selectionMode === "none")
      return false;
    key = this.getKey(key);
    return this.state.selectedKeys === "all" ? this.canSelectItem(key) : this.state.selectedKeys.has(key);
  }
  /**
  * Whether the selection is empty.
  */
  get isEmpty() {
    return this.state.selectedKeys !== "all" && this.state.selectedKeys.size === 0;
  }
  /**
  * Whether all items in the collection are selected.
  */
  get isSelectAll() {
    if (this.isEmpty)
      return false;
    if (this.state.selectedKeys === "all")
      return true;
    if (this._isSelectAll != null)
      return this._isSelectAll;
    let allKeys = this.getSelectAllKeys();
    let selectedKeys = this.state.selectedKeys;
    this._isSelectAll = allKeys.every((k) => selectedKeys.has(k));
    return this._isSelectAll;
  }
  get firstSelectedKey() {
    let first = null;
    for (let key of this.state.selectedKeys) {
      let item = this.collection.getItem(key);
      if (!first || item && (0, $c5a24bc478652b5f$export$8c434b3a7a4dad6)(this.collection, item, first) < 0)
        first = item;
    }
    return first === null || first === void 0 ? void 0 : first.key;
  }
  get lastSelectedKey() {
    let last = null;
    for (let key of this.state.selectedKeys) {
      let item = this.collection.getItem(key);
      if (!last || item && (0, $c5a24bc478652b5f$export$8c434b3a7a4dad6)(this.collection, item, last) > 0)
        last = item;
    }
    return last === null || last === void 0 ? void 0 : last.key;
  }
  get disabledKeys() {
    return this.state.disabledKeys;
  }
  get disabledBehavior() {
    return this.state.disabledBehavior;
  }
  /**
  * Extends the selection to the given key.
  */
  extendSelection(toKey) {
    if (this.selectionMode === "none")
      return;
    if (this.selectionMode === "single") {
      this.replaceSelection(toKey);
      return;
    }
    toKey = this.getKey(toKey);
    let selection;
    if (this.state.selectedKeys === "all")
      selection = new (0, $e40ea825a81a3709$export$52baac22726c72bf)([
        toKey
      ], toKey, toKey);
    else {
      let selectedKeys = this.state.selectedKeys;
      let anchorKey = selectedKeys.anchorKey || toKey;
      selection = new (0, $e40ea825a81a3709$export$52baac22726c72bf)(selectedKeys, anchorKey, toKey);
      for (let key of this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey))
        selection.delete(key);
      for (let key of this.getKeyRange(toKey, anchorKey))
        if (this.canSelectItem(key))
          selection.add(key);
    }
    this.state.setSelectedKeys(selection);
  }
  getKeyRange(from, to) {
    let fromItem = this.collection.getItem(from);
    let toItem = this.collection.getItem(to);
    if (fromItem && toItem) {
      if ((0, $c5a24bc478652b5f$export$8c434b3a7a4dad6)(this.collection, fromItem, toItem) <= 0)
        return this.getKeyRangeInternal(from, to);
      return this.getKeyRangeInternal(to, from);
    }
    return [];
  }
  getKeyRangeInternal(from, to) {
    let keys = [];
    let key = from;
    while (key) {
      let item = this.collection.getItem(key);
      if (item && item.type === "item" || item.type === "cell" && this.allowsCellSelection)
        keys.push(key);
      if (key === to)
        return keys;
      key = this.collection.getKeyAfter(key);
    }
    return [];
  }
  getKey(key) {
    let item = this.collection.getItem(key);
    if (!item)
      return key;
    if (item.type === "cell" && this.allowsCellSelection)
      return key;
    while (item.type !== "item" && item.parentKey != null)
      item = this.collection.getItem(item.parentKey);
    if (!item || item.type !== "item")
      return null;
    return item.key;
  }
  /**
  * Toggles whether the given key is selected.
  */
  toggleSelection(key) {
    if (this.selectionMode === "none")
      return;
    if (this.selectionMode === "single" && !this.isSelected(key)) {
      this.replaceSelection(key);
      return;
    }
    key = this.getKey(key);
    if (key == null)
      return;
    let keys = new (0, $e40ea825a81a3709$export$52baac22726c72bf)(this.state.selectedKeys === "all" ? this.getSelectAllKeys() : this.state.selectedKeys);
    if (keys.has(key))
      keys.delete(key);
    else if (this.canSelectItem(key)) {
      keys.add(key);
      keys.anchorKey = key;
      keys.currentKey = key;
    }
    if (this.disallowEmptySelection && keys.size === 0)
      return;
    this.state.setSelectedKeys(keys);
  }
  /**
  * Replaces the selection with only the given key.
  */
  replaceSelection(key) {
    if (this.selectionMode === "none")
      return;
    key = this.getKey(key);
    if (key == null)
      return;
    let selection = this.canSelectItem(key) ? new (0, $e40ea825a81a3709$export$52baac22726c72bf)([
      key
    ], key, key) : new (0, $e40ea825a81a3709$export$52baac22726c72bf)();
    this.state.setSelectedKeys(selection);
  }
  /**
  * Replaces the selection with the given keys.
  */
  setSelectedKeys(keys) {
    if (this.selectionMode === "none")
      return;
    let selection = new (0, $e40ea825a81a3709$export$52baac22726c72bf)();
    for (let key of keys) {
      key = this.getKey(key);
      if (key != null) {
        selection.add(key);
        if (this.selectionMode === "single")
          break;
      }
    }
    this.state.setSelectedKeys(selection);
  }
  getSelectAllKeys() {
    let keys = [];
    let addKeys = (key) => {
      while (key) {
        if (this.canSelectItem(key)) {
          let item = this.collection.getItem(key);
          if (item.type === "item")
            keys.push(key);
          if (item.hasChildNodes && (this.allowsCellSelection || item.type !== "item"))
            addKeys((0, $c5a24bc478652b5f$export$fbdeaa6a76694f71)((0, $c5a24bc478652b5f$export$1005530eda016c13)(item, this.collection)).key);
        }
        key = this.collection.getKeyAfter(key);
      }
    };
    addKeys(this.collection.getFirstKey());
    return keys;
  }
  /**
  * Selects all items in the collection.
  */
  selectAll() {
    if (!this.isSelectAll && this.selectionMode === "multiple")
      this.state.setSelectedKeys("all");
  }
  /**
  * Removes all keys from the selection.
  */
  clearSelection() {
    if (!this.disallowEmptySelection && (this.state.selectedKeys === "all" || this.state.selectedKeys.size > 0))
      this.state.setSelectedKeys(new (0, $e40ea825a81a3709$export$52baac22726c72bf)());
  }
  /**
  * Toggles between select all and an empty selection.
  */
  toggleSelectAll() {
    if (this.isSelectAll)
      this.clearSelection();
    else
      this.selectAll();
  }
  select(key, e) {
    if (this.selectionMode === "none")
      return;
    if (this.selectionMode === "single") {
      if (this.isSelected(key) && !this.disallowEmptySelection)
        this.toggleSelection(key);
      else
        this.replaceSelection(key);
    } else if (this.selectionBehavior === "toggle" || e && (e.pointerType === "touch" || e.pointerType === "virtual"))
      this.toggleSelection(key);
    else
      this.replaceSelection(key);
  }
  /**
  * Returns whether the current selection is equal to the given selection.
  */
  isSelectionEqual(selection) {
    if (selection === this.state.selectedKeys)
      return true;
    let selectedKeys = this.selectedKeys;
    if (selection.size !== selectedKeys.size)
      return false;
    for (let key of selection) {
      if (!selectedKeys.has(key))
        return false;
    }
    for (let key of selectedKeys) {
      if (!selection.has(key))
        return false;
    }
    return true;
  }
  canSelectItem(key) {
    if (this.state.selectionMode === "none" || this.state.disabledKeys.has(key))
      return false;
    let item = this.collection.getItem(key);
    if (!item || item.type === "cell" && !this.allowsCellSelection)
      return false;
    return true;
  }
  isDisabled(key) {
    return this.state.disabledKeys.has(key) && this.state.disabledBehavior === "all";
  }
  constructor(collection, state, options) {
    this.collection = collection;
    this.state = state;
    var _options_allowsCellSelection;
    this.allowsCellSelection = (_options_allowsCellSelection = options === null || options === void 0 ? void 0 : options.allowsCellSelection) !== null && _options_allowsCellSelection !== void 0 ? _options_allowsCellSelection : false;
    this._isSelectAll = null;
  }
};

// ../../node_modules/@spectrum-icons/ui/CheckmarkMedium.module.mjs
var import_CheckmarkMedium = __toESM(require_CheckmarkMedium(), 1);
init_preact_min();
function CheckmarkMedium(props) {
  return /* @__PURE__ */ yn.createElement($9ba43a63383852e3$export$906cc5990ff10700, props, /* @__PURE__ */ yn.createElement(import_CheckmarkMedium.CheckmarkMedium, null));
}

// ../../node_modules/@react-spectrum/layout/dist/import.mjs
init_preact_min();
function $parcel$interopDefault7(a) {
  return a && a.__esModule ? a.default : a;
}
function $parcel$export5(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $994c48bfb00b620b$var$gridStyleProps = {
  ...(0, $380ed8f3903c3931$export$fe9c6e915565b4e8),
  autoFlow: [
    "gridAutoFlow",
    (0, $380ed8f3903c3931$export$46b6c81d11d2c30a)
  ],
  autoColumns: [
    "gridAutoColumns",
    $994c48bfb00b620b$var$gridDimensionValue
  ],
  autoRows: [
    "gridAutoRows",
    $994c48bfb00b620b$var$gridDimensionValue
  ],
  areas: [
    "gridTemplateAreas",
    $994c48bfb00b620b$var$gridTemplateAreasValue
  ],
  columns: [
    "gridTemplateColumns",
    $994c48bfb00b620b$var$gridTemplateValue
  ],
  rows: [
    "gridTemplateRows",
    $994c48bfb00b620b$var$gridTemplateValue
  ],
  gap: [
    "gap",
    (0, $380ed8f3903c3931$export$abc24f5b99744ea6)
  ],
  rowGap: [
    "rowGap",
    (0, $380ed8f3903c3931$export$abc24f5b99744ea6)
  ],
  columnGap: [
    "columnGap",
    (0, $380ed8f3903c3931$export$abc24f5b99744ea6)
  ],
  justifyItems: [
    "justifyItems",
    (0, $380ed8f3903c3931$export$46b6c81d11d2c30a)
  ],
  justifyContent: [
    "justifyContent",
    (0, $380ed8f3903c3931$export$46b6c81d11d2c30a)
  ],
  alignItems: [
    "alignItems",
    (0, $380ed8f3903c3931$export$46b6c81d11d2c30a)
  ],
  alignContent: [
    "alignContent",
    (0, $380ed8f3903c3931$export$46b6c81d11d2c30a)
  ]
};
function $994c48bfb00b620b$var$Grid(props, ref) {
  let { children, ...otherProps } = props;
  let { styleProps } = (0, $380ed8f3903c3931$export$b8e6fb9d2dff3f41)(otherProps, $994c48bfb00b620b$var$gridStyleProps);
  styleProps.style.display = "grid";
  let domRef = (0, $98e5a8ae0e6415af$export$c2c55ef9111cafd8)(ref);
  return /* @__PURE__ */ (0, yn).createElement("div", {
    ...(0, $65484d02dcb7eb3e$export$457c3d6518dd4c6f)(otherProps),
    ...styleProps,
    ref: domRef
  }, children);
}
function $994c48bfb00b620b$var$gridTemplateAreasValue(value) {
  return value.map((v) => `"${v}"`).join("\n");
}
function $994c48bfb00b620b$var$gridDimensionValue(value) {
  if (/^max-content|min-content|minmax|auto|fit-content|repeat|subgrid/.test(value))
    return value;
  return (0, $380ed8f3903c3931$export$abc24f5b99744ea6)(value);
}
function $994c48bfb00b620b$var$gridTemplateValue(value) {
  if (Array.isArray(value))
    return value.map($994c48bfb00b620b$var$gridDimensionValue).join(" ");
  return $994c48bfb00b620b$var$gridDimensionValue(value);
}
var $994c48bfb00b620b$export$ef2184bd89960b14 = /* @__PURE__ */ (0, Pe)($994c48bfb00b620b$var$Grid);
var $01dd1839b5376a46$exports = {};
$parcel$export5($01dd1839b5376a46$exports, "flex-container", () => $01dd1839b5376a46$export$69d7a39fa31a000b, (v) => $01dd1839b5376a46$export$69d7a39fa31a000b = v);
$parcel$export5($01dd1839b5376a46$exports, "flex", () => $01dd1839b5376a46$export$97691fbb80847c19, (v) => $01dd1839b5376a46$export$97691fbb80847c19 = v);
$parcel$export5($01dd1839b5376a46$exports, "flex-gap", () => $01dd1839b5376a46$export$31a9da8b58047a44, (v) => $01dd1839b5376a46$export$31a9da8b58047a44 = v);
var $01dd1839b5376a46$export$69d7a39fa31a000b;
var $01dd1839b5376a46$export$97691fbb80847c19;
var $01dd1839b5376a46$export$31a9da8b58047a44;
$01dd1839b5376a46$export$69d7a39fa31a000b = "flex-container_e15493";
$01dd1839b5376a46$export$97691fbb80847c19 = "flex_e15493";
$01dd1839b5376a46$export$31a9da8b58047a44 = "flex-gap_e15493";
var $884c64d19340d345$var$flexStyleProps = {
  direction: [
    "flexDirection",
    (0, $380ed8f3903c3931$export$46b6c81d11d2c30a)
  ],
  wrap: [
    "flexWrap",
    $884c64d19340d345$var$flexWrapValue
  ],
  justifyContent: [
    "justifyContent",
    $884c64d19340d345$var$flexAlignValue
  ],
  alignItems: [
    "alignItems",
    $884c64d19340d345$var$flexAlignValue
  ],
  alignContent: [
    "alignContent",
    $884c64d19340d345$var$flexAlignValue
  ]
};
function $884c64d19340d345$var$Flex(props, ref) {
  let { children, ...otherProps } = props;
  let breakpointProvider = (0, $1051245f87c5981d$export$199d6754bdf4e1e3)();
  let matchedBreakpoints = (breakpointProvider === null || breakpointProvider === void 0 ? void 0 : breakpointProvider.matchedBreakpoints) || [
    "base"
  ];
  let { styleProps } = (0, $380ed8f3903c3931$export$b8e6fb9d2dff3f41)(otherProps);
  let { styleProps: flexStyle } = (0, $380ed8f3903c3931$export$b8e6fb9d2dff3f41)(otherProps, $884c64d19340d345$var$flexStyleProps);
  let domRef = (0, $98e5a8ae0e6415af$export$c2c55ef9111cafd8)(ref);
  let isSSR = (0, $704cf1d3b684cc5c$export$535bd6ca7f90a273)();
  if ((props.gap || props.rowGap || props.columnGap) && (isSSR || !$884c64d19340d345$var$isFlexGapSupported())) {
    let style2 = {
      ...flexStyle.style,
      "--column-gap": props.columnGap != null ? (0, $380ed8f3903c3931$export$f348bec194f2e6b5)(props.columnGap, matchedBreakpoints) : void 0,
      "--row-gap": props.rowGap != null ? (0, $380ed8f3903c3931$export$f348bec194f2e6b5)(props.rowGap, matchedBreakpoints) : void 0,
      "--gap": props.gap != null ? (0, $380ed8f3903c3931$export$f348bec194f2e6b5)(props.gap, matchedBreakpoints) : void 0
    };
    return /* @__PURE__ */ (0, yn).createElement("div", {
      ...(0, $65484d02dcb7eb3e$export$457c3d6518dd4c6f)(otherProps),
      ...styleProps,
      className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault7($01dd1839b5376a46$exports)), "flex-container", styleProps.className),
      ref: domRef
    }, /* @__PURE__ */ (0, yn).createElement("div", {
      className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault7($01dd1839b5376a46$exports)), "flex", "flex-gap"),
      style: style2
    }, children));
  }
  let style = {
    ...styleProps.style,
    ...flexStyle.style
  };
  if (props.gap != null)
    style.gap = (0, $380ed8f3903c3931$export$f348bec194f2e6b5)(props.gap, matchedBreakpoints);
  if (props.columnGap != null)
    style.columnGap = (0, $380ed8f3903c3931$export$f348bec194f2e6b5)(props.columnGap, matchedBreakpoints);
  if (props.rowGap != null)
    style.rowGap = (0, $380ed8f3903c3931$export$f348bec194f2e6b5)(props.rowGap, matchedBreakpoints);
  return /* @__PURE__ */ (0, yn).createElement("div", {
    ...(0, $65484d02dcb7eb3e$export$457c3d6518dd4c6f)(otherProps),
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault7($01dd1839b5376a46$exports)), "flex", styleProps.className),
    style,
    ref: domRef
  }, children);
}
function $884c64d19340d345$var$flexAlignValue(value) {
  if (value === "start")
    return "flex-start";
  if (value === "end")
    return "flex-end";
  return value;
}
function $884c64d19340d345$var$flexWrapValue(value) {
  if (typeof value === "boolean")
    return value ? "wrap" : "nowrap";
  return value;
}
var $884c64d19340d345$var$_isFlexGapSupported = null;
function $884c64d19340d345$var$isFlexGapSupported() {
  if ($884c64d19340d345$var$_isFlexGapSupported != null)
    return $884c64d19340d345$var$_isFlexGapSupported;
  if (typeof document === "undefined")
    return false;
  var flex = document.createElement("div");
  flex.style.display = "flex";
  flex.style.flexDirection = "column";
  flex.style.rowGap = "1px";
  flex.appendChild(document.createElement("div"));
  flex.appendChild(document.createElement("div"));
  document.body.appendChild(flex);
  $884c64d19340d345$var$_isFlexGapSupported = flex.scrollHeight === 1;
  flex.parentNode.removeChild(flex);
  return $884c64d19340d345$var$_isFlexGapSupported;
}
var $884c64d19340d345$export$f51f4c4ede09e011 = /* @__PURE__ */ (0, Pe)($884c64d19340d345$var$Flex);

// ../../node_modules/@react-stately/list/dist/import.mjs
init_preact_min();
var $a02d57049d202695$export$d085fb9e920b5ca7 = class {
  *[Symbol.iterator]() {
    yield* this.iterable;
  }
  get size() {
    return this.keyMap.size;
  }
  getKeys() {
    return this.keyMap.keys();
  }
  getKeyBefore(key) {
    let node = this.keyMap.get(key);
    return node ? node.prevKey : null;
  }
  getKeyAfter(key) {
    let node = this.keyMap.get(key);
    return node ? node.nextKey : null;
  }
  getFirstKey() {
    return this.firstKey;
  }
  getLastKey() {
    return this.lastKey;
  }
  getItem(key) {
    return this.keyMap.get(key);
  }
  at(idx) {
    const keys = [
      ...this.getKeys()
    ];
    return this.getItem(keys[idx]);
  }
  getChildren(key) {
    let node = this.keyMap.get(key);
    return (node === null || node === void 0 ? void 0 : node.childNodes) || [];
  }
  constructor(nodes) {
    this.keyMap = /* @__PURE__ */ new Map();
    this.iterable = nodes;
    let visit = (node) => {
      this.keyMap.set(node.key, node);
      if (node.childNodes && node.type === "section")
        for (let child of node.childNodes)
          visit(child);
    };
    for (let node of nodes)
      visit(node);
    let last;
    let index = 0;
    for (let [key, node] of this.keyMap) {
      if (last) {
        last.nextKey = key;
        node.prevKey = last.key;
      } else {
        this.firstKey = key;
        node.prevKey = void 0;
      }
      if (node.type === "item")
        node.index = index++;
      last = node;
      last.nextKey = void 0;
    }
    this.lastKey = last === null || last === void 0 ? void 0 : last.key;
  }
};
function $e72dd72e1c76a225$export$2f645645f7bca764(props) {
  let { filter } = props;
  let selectionState = (0, $7af3f5b51489e0b5$export$253fe78d46329472)(props);
  let disabledKeys = (0, j)(() => props.disabledKeys ? new Set(props.disabledKeys) : /* @__PURE__ */ new Set(), [
    props.disabledKeys
  ]);
  let factory = (0, ae)((nodes) => filter ? new (0, $a02d57049d202695$export$d085fb9e920b5ca7)(filter(nodes)) : new (0, $a02d57049d202695$export$d085fb9e920b5ca7)(nodes), [
    filter
  ]);
  let context = (0, j)(() => ({
    suppressTextValueWarning: props.suppressTextValueWarning
  }), [
    props.suppressTextValueWarning
  ]);
  let collection = (0, $7613b1592d41b092$export$6cd28814d92fa9c9)(props, factory, context);
  let selectionManager = (0, j)(() => new (0, $d496c0a20b6e58ec$export$6c8a5aaad13c9852)(collection, selectionState), [
    collection,
    selectionState
  ]);
  const cachedCollection = (0, ie)(null);
  (0, K)(() => {
    if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) {
      const startItem = cachedCollection.current.getItem(selectionState.focusedKey);
      const cachedItemNodes = [
        ...cachedCollection.current.getKeys()
      ].map((key) => {
        const itemNode = cachedCollection.current.getItem(key);
        return itemNode.type === "item" ? itemNode : null;
      }).filter((node) => node !== null);
      const itemNodes = [
        ...collection.getKeys()
      ].map((key) => {
        const itemNode = collection.getItem(key);
        return itemNode.type === "item" ? itemNode : null;
      }).filter((node) => node !== null);
      const diff = cachedItemNodes.length - itemNodes.length;
      let index = Math.min(diff > 1 ? Math.max(startItem.index - diff + 1, 0) : startItem.index, itemNodes.length - 1);
      let newNode;
      while (index >= 0) {
        if (!selectionManager.isDisabled(itemNodes[index].key)) {
          newNode = itemNodes[index];
          break;
        }
        if (index < itemNodes.length - 1)
          index++;
        else {
          if (index > startItem.index)
            index = startItem.index;
          index--;
        }
      }
      selectionState.setFocusedKey(newNode ? newNode.key : null);
    }
    cachedCollection.current = collection;
  }, [
    collection,
    selectionManager,
    selectionState,
    selectionState.focusedKey
  ]);
  return {
    collection,
    disabledKeys,
    selectionManager
  };
}
function $a0d645289fe9b86b$export$e7f05e985daf4b5f(props) {
  var _props_defaultSelectedKey;
  let [selectedKey, setSelectedKey] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.selectedKey, (_props_defaultSelectedKey = props.defaultSelectedKey) !== null && _props_defaultSelectedKey !== void 0 ? _props_defaultSelectedKey : null, props.onSelectionChange);
  let selectedKeys = (0, j)(() => selectedKey != null ? [
    selectedKey
  ] : [], [
    selectedKey
  ]);
  let { collection, disabledKeys, selectionManager } = (0, $e72dd72e1c76a225$export$2f645645f7bca764)({
    ...props,
    selectionMode: "single",
    disallowEmptySelection: true,
    allowDuplicateSelectionEvents: true,
    selectedKeys,
    onSelectionChange: (keys) => {
      let key = keys.values().next().value;
      if (key === selectedKey && props.onSelectionChange)
        props.onSelectionChange(key);
      setSelectedKey(key);
    }
  });
  let selectedItem = selectedKey != null ? collection.getItem(selectedKey) : null;
  return {
    collection,
    disabledKeys,
    selectionManager,
    selectedKey,
    setSelectedKey,
    selectedItem
  };
}

// ../../node_modules/@react-spectrum/buttongroup/dist/import.mjs
init_preact_min();
function $parcel$interopDefault8(a) {
  return a && a.__esModule ? a.default : a;
}
function $parcel$export6(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $fddc5368d2db28a6$exports = {};
$parcel$export6($fddc5368d2db28a6$exports, "spectrum-ButtonGroup", () => $fddc5368d2db28a6$export$a92faf51352ac608, (v) => $fddc5368d2db28a6$export$a92faf51352ac608 = v);
$parcel$export6($fddc5368d2db28a6$exports, "spectrum-ButtonGroup-Button", () => $fddc5368d2db28a6$export$7184de2337c1927f, (v) => $fddc5368d2db28a6$export$7184de2337c1927f = v);
$parcel$export6($fddc5368d2db28a6$exports, "spectrum-ButtonGroup--alignEnd", () => $fddc5368d2db28a6$export$30e96c53d7beca11, (v) => $fddc5368d2db28a6$export$30e96c53d7beca11 = v);
$parcel$export6($fddc5368d2db28a6$exports, "spectrum-ButtonGroup--alignCenter", () => $fddc5368d2db28a6$export$252bc7c4ae05757, (v) => $fddc5368d2db28a6$export$252bc7c4ae05757 = v);
$parcel$export6($fddc5368d2db28a6$exports, "spectrum-ButtonGroup--vertical", () => $fddc5368d2db28a6$export$84d9c0e1917a4eaf, (v) => $fddc5368d2db28a6$export$84d9c0e1917a4eaf = v);
var $fddc5368d2db28a6$export$a92faf51352ac608;
var $fddc5368d2db28a6$export$7184de2337c1927f;
var $fddc5368d2db28a6$export$30e96c53d7beca11;
var $fddc5368d2db28a6$export$252bc7c4ae05757;
var $fddc5368d2db28a6$export$84d9c0e1917a4eaf;
$fddc5368d2db28a6$export$a92faf51352ac608 = "spectrum-ButtonGroup_b10c2f";
$fddc5368d2db28a6$export$7184de2337c1927f = "spectrum-ButtonGroup-Button_b10c2f";
$fddc5368d2db28a6$export$30e96c53d7beca11 = "spectrum-ButtonGroup--alignEnd_b10c2f";
$fddc5368d2db28a6$export$252bc7c4ae05757 = "spectrum-ButtonGroup--alignCenter_b10c2f";
$fddc5368d2db28a6$export$84d9c0e1917a4eaf = "spectrum-ButtonGroup--vertical_b10c2f";
function $bd4bfa55854eb3bf$var$ButtonGroup(props, ref) {
  let { scale } = (0, $7167f8da3cce35e4$export$693cdb10cec23617)();
  props = (0, $7167f8da3cce35e4$export$521c373ccc32c300)(props);
  props = (0, $59d09bcc83651bf9$export$1e5c9e6e4e15efe3)(props, "buttonGroup");
  let { children, orientation = "horizontal", isDisabled, align = "start", ...otherProps } = props;
  let { styleProps } = (0, $380ed8f3903c3931$export$b8e6fb9d2dff3f41)(otherProps);
  let domRef = (0, $98e5a8ae0e6415af$export$c2c55ef9111cafd8)(ref);
  let [hasOverflow, setHasOverflow] = (0, $1dbecbe27a04f9af$export$14d238f342723f25)(false);
  let checkForOverflow = (0, ae)(() => {
    let computeHasOverflow = () => {
      if (domRef.current && orientation === "horizontal") {
        let buttonGroupChildren = Array.from(domRef.current.children);
        let maxX = domRef.current.offsetWidth + 1;
        if (buttonGroupChildren.some((child) => child.offsetLeft < 0 || child.offsetLeft + child.offsetWidth > maxX))
          return true;
        return false;
      }
    };
    if (orientation === "horizontal")
      setHasOverflow(function* () {
        yield false;
        yield computeHasOverflow();
      });
  }, [
    domRef,
    orientation,
    scale,
    setHasOverflow,
    children
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    checkForOverflow();
  }, [
    checkForOverflow
  ]);
  let parent = (0, ie)();
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (domRef.current)
      parent.current = domRef.current.parentElement;
  }, [
    domRef.current
  ]);
  (0, $9daab02d461809db$export$683480f191c0e3ea)({
    ref: parent,
    onResize: checkForOverflow
  });
  return /* @__PURE__ */ (0, yn).createElement("div", {
    ...(0, $65484d02dcb7eb3e$export$457c3d6518dd4c6f)(otherProps),
    ...styleProps,
    ref: domRef,
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault8($fddc5368d2db28a6$exports)), "spectrum-ButtonGroup", {
      "spectrum-ButtonGroup--vertical": orientation === "vertical" || hasOverflow,
      "spectrum-ButtonGroup--alignEnd": align === "end",
      "spectrum-ButtonGroup--alignCenter": align === "center"
    }, styleProps.className)
  }, /* @__PURE__ */ (0, yn).createElement((0, $59d09bcc83651bf9$export$8107b24b91795686), {
    slots: {
      button: {
        UNSAFE_className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault8($fddc5368d2db28a6$exports)), "spectrum-ButtonGroup-Button")
      }
    }
  }, /* @__PURE__ */ (0, yn).createElement((0, $7167f8da3cce35e4$export$2881499e37b75b9a), {
    isDisabled
  }, children)));
}
var $bd4bfa55854eb3bf$export$69b1032f2ecdf404 = /* @__PURE__ */ (0, yn).forwardRef($bd4bfa55854eb3bf$var$ButtonGroup);

// ../../node_modules/@react-spectrum/label/dist/import.mjs
init_preact_min();

// ../../node_modules/@react-spectrum/form/dist/import.mjs
init_preact_min();
function $parcel$interopDefault9(a) {
  return a && a.__esModule ? a.default : a;
}
function $parcel$export7(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $cd231e464c886c86$exports = {};
$parcel$export7($cd231e464c886c86$exports, "spectrum-FieldLabel", () => $cd231e464c886c86$export$493d18e796ae054, (v) => $cd231e464c886c86$export$493d18e796ae054 = v);
$parcel$export7($cd231e464c886c86$exports, "spectrum-FieldLabel--positionSide", () => $cd231e464c886c86$export$9e6f19dc21f22f2e, (v) => $cd231e464c886c86$export$9e6f19dc21f22f2e = v);
$parcel$export7($cd231e464c886c86$exports, "spectrum-FieldLabel-requiredIcon", () => $cd231e464c886c86$export$7c47642c7d46f3c9, (v) => $cd231e464c886c86$export$7c47642c7d46f3c9 = v);
$parcel$export7($cd231e464c886c86$exports, "spectrum-FieldLabel--alignEnd", () => $cd231e464c886c86$export$885efcc08143a987, (v) => $cd231e464c886c86$export$885efcc08143a987 = v);
$parcel$export7($cd231e464c886c86$exports, "spectrum-Field", () => $cd231e464c886c86$export$f6d480ae1e56eba0, (v) => $cd231e464c886c86$export$f6d480ae1e56eba0 = v);
$parcel$export7($cd231e464c886c86$exports, "spectrum-Field-contextualHelp", () => $cd231e464c886c86$export$24fb860d16dd2d3f, (v) => $cd231e464c886c86$export$24fb860d16dd2d3f = v);
$parcel$export7($cd231e464c886c86$exports, "spectrum-Field--positionTop", () => $cd231e464c886c86$export$a4ea780a9064d7f9, (v) => $cd231e464c886c86$export$a4ea780a9064d7f9 = v);
$parcel$export7($cd231e464c886c86$exports, "spectrum-Field-field", () => $cd231e464c886c86$export$3ab8a3dc7f0563d, (v) => $cd231e464c886c86$export$3ab8a3dc7f0563d = v);
$parcel$export7($cd231e464c886c86$exports, "spectrum-Field--alignEnd", () => $cd231e464c886c86$export$5354c9be7ada5f83, (v) => $cd231e464c886c86$export$5354c9be7ada5f83 = v);
$parcel$export7($cd231e464c886c86$exports, "spectrum-Field--positionSide", () => $cd231e464c886c86$export$2963225c91179589, (v) => $cd231e464c886c86$export$2963225c91179589 = v);
$parcel$export7($cd231e464c886c86$exports, "spectrum-Field-wrapper", () => $cd231e464c886c86$export$127df0b7290eb8ef, (v) => $cd231e464c886c86$export$127df0b7290eb8ef = v);
$parcel$export7($cd231e464c886c86$exports, "spectrum-Field--hasContextualHelp", () => $cd231e464c886c86$export$9ba23707a252cdd4, (v) => $cd231e464c886c86$export$9ba23707a252cdd4 = v);
$parcel$export7($cd231e464c886c86$exports, "spectrum-Form", () => $cd231e464c886c86$export$94d2bcc94afabd89, (v) => $cd231e464c886c86$export$94d2bcc94afabd89 = v);
$parcel$export7($cd231e464c886c86$exports, "spectrum-Form--positionSide", () => $cd231e464c886c86$export$7f44db659563c8f4, (v) => $cd231e464c886c86$export$7f44db659563c8f4 = v);
$parcel$export7($cd231e464c886c86$exports, "spectrum-Field-labelCell", () => $cd231e464c886c86$export$9cde5aecff012641, (v) => $cd231e464c886c86$export$9cde5aecff012641 = v);
$parcel$export7($cd231e464c886c86$exports, "spectrum-Field-labelWrapper", () => $cd231e464c886c86$export$a872a8c78b26c9e0, (v) => $cd231e464c886c86$export$a872a8c78b26c9e0 = v);
$parcel$export7($cd231e464c886c86$exports, "spectrum-Form--positionTop", () => $cd231e464c886c86$export$11b8bc81fe551057, (v) => $cd231e464c886c86$export$11b8bc81fe551057 = v);
$parcel$export7($cd231e464c886c86$exports, "spectrum-LabeledValue", () => $cd231e464c886c86$export$79f9a5e9dd010c8d, (v) => $cd231e464c886c86$export$79f9a5e9dd010c8d = v);
$parcel$export7($cd231e464c886c86$exports, "spectrum-Form-itemLabel", () => $cd231e464c886c86$export$51ec27881a1e3928, (v) => $cd231e464c886c86$export$51ec27881a1e3928 = v);
$parcel$export7($cd231e464c886c86$exports, "is-disabled", () => $cd231e464c886c86$export$d35bc1e505d1ebbf, (v) => $cd231e464c886c86$export$d35bc1e505d1ebbf = v);
var $cd231e464c886c86$export$493d18e796ae054;
var $cd231e464c886c86$export$9e6f19dc21f22f2e;
var $cd231e464c886c86$export$7c47642c7d46f3c9;
var $cd231e464c886c86$export$885efcc08143a987;
var $cd231e464c886c86$export$f6d480ae1e56eba0;
var $cd231e464c886c86$export$24fb860d16dd2d3f;
var $cd231e464c886c86$export$a4ea780a9064d7f9;
var $cd231e464c886c86$export$3ab8a3dc7f0563d;
var $cd231e464c886c86$export$5354c9be7ada5f83;
var $cd231e464c886c86$export$2963225c91179589;
var $cd231e464c886c86$export$127df0b7290eb8ef;
var $cd231e464c886c86$export$9ba23707a252cdd4;
var $cd231e464c886c86$export$94d2bcc94afabd89;
var $cd231e464c886c86$export$7f44db659563c8f4;
var $cd231e464c886c86$export$9cde5aecff012641;
var $cd231e464c886c86$export$a872a8c78b26c9e0;
var $cd231e464c886c86$export$11b8bc81fe551057;
var $cd231e464c886c86$export$79f9a5e9dd010c8d;
var $cd231e464c886c86$export$51ec27881a1e3928;
var $cd231e464c886c86$export$d35bc1e505d1ebbf;
$cd231e464c886c86$export$493d18e796ae054 = "spectrum-FieldLabel_d2db1f";
$cd231e464c886c86$export$9e6f19dc21f22f2e = "spectrum-FieldLabel--positionSide_d2db1f";
$cd231e464c886c86$export$7c47642c7d46f3c9 = "spectrum-FieldLabel-requiredIcon_d2db1f";
$cd231e464c886c86$export$885efcc08143a987 = "spectrum-FieldLabel--alignEnd_d2db1f";
$cd231e464c886c86$export$f6d480ae1e56eba0 = "spectrum-Field_d2db1f";
$cd231e464c886c86$export$24fb860d16dd2d3f = "spectrum-Field-contextualHelp_d2db1f";
$cd231e464c886c86$export$a4ea780a9064d7f9 = "spectrum-Field--positionTop_d2db1f";
$cd231e464c886c86$export$3ab8a3dc7f0563d = "spectrum-Field-field_d2db1f";
$cd231e464c886c86$export$5354c9be7ada5f83 = "spectrum-Field--alignEnd_d2db1f";
$cd231e464c886c86$export$2963225c91179589 = "spectrum-Field--positionSide_d2db1f";
$cd231e464c886c86$export$127df0b7290eb8ef = "spectrum-Field-wrapper_d2db1f";
$cd231e464c886c86$export$9ba23707a252cdd4 = "spectrum-Field--hasContextualHelp_d2db1f";
$cd231e464c886c86$export$94d2bcc94afabd89 = "spectrum-Form_d2db1f";
$cd231e464c886c86$export$7f44db659563c8f4 = "spectrum-Form--positionSide_d2db1f";
$cd231e464c886c86$export$9cde5aecff012641 = "spectrum-Field-labelCell_d2db1f";
$cd231e464c886c86$export$a872a8c78b26c9e0 = "spectrum-Field-labelWrapper_d2db1f";
$cd231e464c886c86$export$11b8bc81fe551057 = "spectrum-Form--positionTop_d2db1f";
$cd231e464c886c86$export$79f9a5e9dd010c8d = "spectrum-LabeledValue_d2db1f";
$cd231e464c886c86$export$51ec27881a1e3928 = "spectrum-Form-itemLabel_d2db1f";
$cd231e464c886c86$export$d35bc1e505d1ebbf = "is-disabled_d2db1f";
var $ac118ceca79b8650$var$FormContext = /* @__PURE__ */ (0, yn).createContext(null);
function $ac118ceca79b8650$export$a6b5be5c6b451665(props) {
  let ctx = (0, ce)($ac118ceca79b8650$var$FormContext);
  if (ctx)
    return {
      ...ctx,
      ...props
    };
  return props;
}
var $ac118ceca79b8650$var$formPropNames = /* @__PURE__ */ new Set([
  "action",
  "autoComplete",
  "encType",
  "method",
  "target",
  "onSubmit"
]);
function $ac118ceca79b8650$var$Form(props, ref) {
  props = (0, $7167f8da3cce35e4$export$521c373ccc32c300)(props);
  let { children, labelPosition = "top", labelAlign = "start", isRequired, necessityIndicator, isQuiet, isEmphasized, isDisabled, isReadOnly, validationState, ...otherProps } = props;
  let { styleProps } = (0, $380ed8f3903c3931$export$b8e6fb9d2dff3f41)(otherProps);
  let domRef = (0, $98e5a8ae0e6415af$export$c2c55ef9111cafd8)(ref);
  let ctx = {
    labelPosition,
    labelAlign,
    necessityIndicator
  };
  return /* @__PURE__ */ (0, yn).createElement("form", {
    ...(0, $65484d02dcb7eb3e$export$457c3d6518dd4c6f)(otherProps, {
      labelable: true,
      propNames: $ac118ceca79b8650$var$formPropNames
    }),
    ...styleProps,
    noValidate: true,
    ref: domRef,
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault9($cd231e464c886c86$exports)), "spectrum-Form", {
      "spectrum-Form--positionSide": labelPosition === "side",
      "spectrum-Form--positionTop": labelPosition === "top"
    }, styleProps.className)
  }, /* @__PURE__ */ (0, yn).createElement($ac118ceca79b8650$var$FormContext.Provider, {
    value: ctx
  }, /* @__PURE__ */ (0, yn).createElement((0, $7167f8da3cce35e4$export$2881499e37b75b9a), {
    isQuiet,
    isEmphasized,
    isDisabled,
    isReadOnly,
    isRequired,
    validationState
  }, children)));
}
var $ac118ceca79b8650$export$a7fed597f4b8afd8 = /* @__PURE__ */ (0, yn).forwardRef($ac118ceca79b8650$var$Form);

// ../../node_modules/@spectrum-icons/ui/AlertMedium.module.mjs
var import_AlertMedium = __toESM(require_AlertMedium(), 1);
init_preact_min();
var ExpressIcon = (props) => /* @__PURE__ */ yn.createElement("svg", _extends2({
  viewBox: "0 0 18 18"
}, props), /* @__PURE__ */ yn.createElement("path", {
  d: "M9 10.5a1 1 0 0 1-1-1V5a1 1 0 1 1 2 0v4.5a1 1 0 0 1-1 1Zm0 1.25A1.25 1.25 0 1 0 10.25 13 1.25 1.25 0 0 0 9 11.75Zm8.497 3.589a3.49 3.49 0 0 0 .079-3.474L12 1.815a3.385 3.385 0 0 0-5.994-.007L.416 11.88a3.485 3.485 0 0 0 .089 3.459A3.375 3.375 0 0 0 3.416 17h11.169a3.375 3.375 0 0 0 2.912-1.661ZM10.244 2.77l5.575 10.05a1.497 1.497 0 0 1-.037 1.489 1.374 1.374 0 0 1-1.197.69H3.416a1.374 1.374 0 0 1-1.197-.69 1.493 1.493 0 0 1-.046-1.474l5.593-10.08a1.386 1.386 0 0 1 2.478.015Z"
}));
ExpressIcon.displayName = import_AlertMedium.AlertMedium.displayName;
function AlertMedium(props) {
  var _provider$theme, _provider$theme$globa;
  let provider = $7167f8da3cce35e4$export$693cdb10cec23617();
  return /* @__PURE__ */ yn.createElement($9ba43a63383852e3$export$906cc5990ff10700, props, provider != null && (_provider$theme = provider.theme) != null && (_provider$theme$globa = _provider$theme.global) != null && _provider$theme$globa.express ? /* @__PURE__ */ yn.createElement(ExpressIcon, null) : /* @__PURE__ */ yn.createElement(import_AlertMedium.AlertMedium, null));
}

// ../../node_modules/@spectrum-icons/ui/Asterisk.module.mjs
var import_Asterisk = __toESM(require_Asterisk(), 1);
init_preact_min();
function Asterisk(props) {
  return /* @__PURE__ */ yn.createElement($9ba43a63383852e3$export$906cc5990ff10700, props, /* @__PURE__ */ yn.createElement(import_Asterisk.Asterisk, null));
}

// ../../node_modules/@react-spectrum/label/dist/import.mjs
function $parcel$interopDefault10(a) {
  return a && a.__esModule ? a.default : a;
}
function $parcel$export8(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $beda4304297005df$exports = {};
$parcel$export8($beda4304297005df$exports, "spectrum-HelpText", () => $beda4304297005df$export$c0875e83c57c7736, (v) => $beda4304297005df$export$c0875e83c57c7736 = v);
$parcel$export8($beda4304297005df$exports, "spectrum-HelpText-validationIcon", () => $beda4304297005df$export$527776642b333691, (v) => $beda4304297005df$export$527776642b333691 = v);
$parcel$export8($beda4304297005df$exports, "spectrum-HelpText-text", () => $beda4304297005df$export$a512452beb4231bf, (v) => $beda4304297005df$export$a512452beb4231bf = v);
$parcel$export8($beda4304297005df$exports, "spectrum-HelpText--neutral", () => $beda4304297005df$export$6e9351b1ad13c, (v) => $beda4304297005df$export$6e9351b1ad13c = v);
$parcel$export8($beda4304297005df$exports, "is-disabled", () => $beda4304297005df$export$d35bc1e505d1ebbf, (v) => $beda4304297005df$export$d35bc1e505d1ebbf = v);
$parcel$export8($beda4304297005df$exports, "spectrum-HelpText--negative", () => $beda4304297005df$export$d31dd875d69daee0, (v) => $beda4304297005df$export$d31dd875d69daee0 = v);
var $beda4304297005df$export$c0875e83c57c7736;
var $beda4304297005df$export$527776642b333691;
var $beda4304297005df$export$a512452beb4231bf;
var $beda4304297005df$export$6e9351b1ad13c;
var $beda4304297005df$export$d35bc1e505d1ebbf;
var $beda4304297005df$export$d31dd875d69daee0;
$beda4304297005df$export$c0875e83c57c7736 = "spectrum-HelpText_f395de";
$beda4304297005df$export$527776642b333691 = "spectrum-HelpText-validationIcon_f395de";
$beda4304297005df$export$a512452beb4231bf = "spectrum-HelpText-text_f395de";
$beda4304297005df$export$6e9351b1ad13c = "spectrum-HelpText--neutral_f395de";
$beda4304297005df$export$d35bc1e505d1ebbf = "is-disabled_f395de";
$beda4304297005df$export$d31dd875d69daee0 = "spectrum-HelpText--negative_f395de";
function $8e50676506611310$var$HelpText(props, ref) {
  let { description, errorMessage, validationState, isDisabled, showErrorIcon, descriptionProps, errorMessageProps } = props;
  let domRef = (0, $98e5a8ae0e6415af$export$c2c55ef9111cafd8)(ref);
  let isErrorMessage = errorMessage && validationState === "invalid";
  let { styleProps } = (0, $380ed8f3903c3931$export$b8e6fb9d2dff3f41)(props);
  return /* @__PURE__ */ (0, yn).createElement("div", {
    ...styleProps,
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault10($beda4304297005df$exports)), "spectrum-HelpText", `spectrum-HelpText--${isErrorMessage ? "negative" : "neutral"}`, {
      "is-disabled": isDisabled
    }, styleProps.className),
    ref: domRef
  }, isErrorMessage ? /* @__PURE__ */ (0, yn).createElement((0, yn).Fragment, null, showErrorIcon && /* @__PURE__ */ (0, yn).createElement((0, AlertMedium), {
    UNSAFE_className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault10($beda4304297005df$exports)), "spectrum-HelpText-validationIcon")
  }), /* @__PURE__ */ (0, yn).createElement("div", {
    ...errorMessageProps,
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault10($beda4304297005df$exports)), "spectrum-HelpText-text")
  }, errorMessage)) : /* @__PURE__ */ (0, yn).createElement("div", {
    ...descriptionProps,
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault10($beda4304297005df$exports)), "spectrum-HelpText-text")
  }, description));
}
var $8e50676506611310$export$a67c0bc59081311a = /* @__PURE__ */ (0, yn).forwardRef($8e50676506611310$var$HelpText);
var $42a96ba05489ca64$exports = {};
var $dfe96401c0c81db3$exports = {};
$dfe96401c0c81db3$exports = {
  "(optional)": `(\u0627\u062E\u062A\u064A\u0627\u0631\u064A)`,
  "(required)": `(\u0645\u0637\u0644\u0648\u0628)`
};
var $f504605657ece833$exports = {};
$f504605657ece833$exports = {
  "(optional)": `(\u043D\u0435\u0437\u0430\u0434\u044A\u043B\u0436\u0438\u0442\u0435\u043B\u043D\u043E)`,
  "(required)": `(\u0437\u0430\u0434\u044A\u043B\u0436\u0438\u0442\u0435\u043B\u043D\u043E)`
};
var $ed0ab9e7c53f9351$exports = {};
$ed0ab9e7c53f9351$exports = {
  "(optional)": `(voliteln\u011B)`,
  "(required)": `(po\u017Eadov\xE1no)`
};
var $59d9df99e04ee555$exports = {};
$59d9df99e04ee555$exports = {
  "(optional)": `(valgfrit)`,
  "(required)": `(obligatorisk)`
};
var $c5df0169c370d169$exports = {};
$c5df0169c370d169$exports = {
  "(optional)": `(optional)`,
  "(required)": `(erforderlich)`
};
var $3c9af509a01a8d08$exports = {};
$3c9af509a01a8d08$exports = {
  "(optional)": `(\u03C0\u03C1\u03BF\u03B1\u03B9\u03C1\u03B5\u03C4\u03B9\u03BA\u03CC)`,
  "(required)": `(\u03B1\u03C0\u03B1\u03B9\u03C4\u03B5\u03AF\u03C4\u03B1\u03B9)`
};
var $aa36476f91664a08$exports = {};
$aa36476f91664a08$exports = {
  "(required)": `(required)`,
  "(optional)": `(optional)`
};
var $d96f2251ced25e45$exports = {};
$d96f2251ced25e45$exports = {
  "(optional)": `(opcional)`,
  "(required)": `(obligatorio)`
};
var $16ec4ffbd4b2ca4b$exports = {};
$16ec4ffbd4b2ca4b$exports = {
  "(optional)": `(valikuline)`,
  "(required)": `(n\xF5utav)`
};
var $60f372f660e937e4$exports = {};
$60f372f660e937e4$exports = {
  "(optional)": `(valinnainen)`,
  "(required)": `(pakollinen)`
};
var $d87c5f1e899f6af1$exports = {};
$d87c5f1e899f6af1$exports = {
  "(optional)": `(facultatif)`,
  "(required)": `(requis)`
};
var $6899669fa63c7816$exports = {};
$6899669fa63c7816$exports = {
  "(optional)": `(\u05D0\u05D5\u05E4\u05E6\u05D9\u05D5\u05E0\u05DC\u05D9)`,
  "(required)": `(\u05E0\u05D3\u05E8\u05E9)`
};
var $3597d722a30a8081$exports = {};
$3597d722a30a8081$exports = {
  "(optional)": `(opcionalno)`,
  "(required)": `(obvezno)`
};
var $3ef905a2ce0921cb$exports = {};
$3ef905a2ce0921cb$exports = {
  "(optional)": `(opcion\xE1lis)`,
  "(required)": `(k\xF6telez\u0151)`
};
var $e59d2e4af9ff1c28$exports = {};
$e59d2e4af9ff1c28$exports = {
  "(optional)": `(facoltativo)`,
  "(required)": `(obbligatorio)`
};
var $422a7013ab2cb36d$exports = {};
$422a7013ab2cb36d$exports = {
  "(optional)": `\uFF08\u30AA\u30D7\u30B7\u30E7\u30F3\uFF09`,
  "(required)": `\uFF08\u5FC5\u9808\uFF09`
};
var $a58a7ab9570c5a18$exports = {};
$a58a7ab9570c5a18$exports = {
  "(optional)": `(\uC120\uD0DD \uC0AC\uD56D)`,
  "(required)": `(\uD544\uC218 \uC0AC\uD56D)`
};
var $24e660c5a5be82af$exports = {};
$24e660c5a5be82af$exports = {
  "(optional)": `(pasirenkama)`,
  "(required)": `(privaloma)`
};
var $a222e05de6d8dce8$exports = {};
$a222e05de6d8dce8$exports = {
  "(optional)": `(neoblig\u0101ti)`,
  "(required)": `(oblig\u0101ti)`
};
var $524caea23ab94ad7$exports = {};
$524caea23ab94ad7$exports = {
  "(optional)": `(valgfritt)`,
  "(required)": `(obligatorisk)`
};
var $572079ed86210ca9$exports = {};
$572079ed86210ca9$exports = {
  "(optional)": `(optioneel)`,
  "(required)": `(vereist)`
};
var $6a0777ee77a74b18$exports = {};
$6a0777ee77a74b18$exports = {
  "(optional)": `(opcjonalne)`,
  "(required)": `(wymagane)`
};
var $ea0401974d81b469$exports = {};
$ea0401974d81b469$exports = {
  "(optional)": `(opcional)`,
  "(required)": `(obrigat\xF3rio)`
};
var $701d0854e4f18979$exports = {};
$701d0854e4f18979$exports = {
  "(optional)": `(opcional)`,
  "(required)": `(obrigat\xF3rio)`
};
var $dd9fccd10d0a4be3$exports = {};
$dd9fccd10d0a4be3$exports = {
  "(optional)": `(op\u0163ional)`,
  "(required)": `(obligatoriu)`
};
var $3cd1eab3b0ecc980$exports = {};
$3cd1eab3b0ecc980$exports = {
  "(optional)": `(\u0434\u043E\u043F\u043E\u043B\u043D\u0438\u0442\u0435\u043B\u044C\u043D\u043E)`,
  "(required)": `(\u043E\u0431\u044F\u0437\u0430\u0442\u0435\u043B\u044C\u043D\u043E)`
};
var $d109f3d68ba24ffc$exports = {};
$d109f3d68ba24ffc$exports = {
  "(optional)": `(nepovinn\xE9)`,
  "(required)": `(povinn\xE9)`
};
var $6382c2117e9fd1b6$exports = {};
$6382c2117e9fd1b6$exports = {
  "(optional)": `(opcijsko)`,
  "(required)": `(obvezno)`
};
var $ba796dd79114e2d4$exports = {};
$ba796dd79114e2d4$exports = {
  "(optional)": `(opciono)`,
  "(required)": `(obavezno)`
};
var $916521e9800ac46c$exports = {};
$916521e9800ac46c$exports = {
  "(optional)": `(valfritt)`,
  "(required)": `(kr\xE4vs)`
};
var $acd72b88f580fe64$exports = {};
$acd72b88f580fe64$exports = {
  "(optional)": `(iste\u011Fe ba\u011Fl\u0131)`,
  "(required)": `(gerekli)`
};
var $bd065904f1420f31$exports = {};
$bd065904f1420f31$exports = {
  "(optional)": `(\u043D\u0435\u043E\u0431\u043E\u0432\u2019\u044F\u0437\u043A\u043E\u0432\u043E)`,
  "(required)": `(\u043E\u0431\u043E\u0432\u2019\u044F\u0437\u043A\u043E\u0432\u043E)`
};
var $0128cc194bc107bb$exports = {};
$0128cc194bc107bb$exports = {
  "(optional)": `\uFF08\u53EF\u9009\uFF09`,
  "(required)": `\uFF08\u5FC5\u586B\uFF09`
};
var $c57738f6094a3d25$exports = {};
$c57738f6094a3d25$exports = {
  "(optional)": `(\u9078\u586B)`,
  "(required)": `(\u5FC5\u586B)`
};
$42a96ba05489ca64$exports = {
  "ar-AE": $dfe96401c0c81db3$exports,
  "bg-BG": $f504605657ece833$exports,
  "cs-CZ": $ed0ab9e7c53f9351$exports,
  "da-DK": $59d9df99e04ee555$exports,
  "de-DE": $c5df0169c370d169$exports,
  "el-GR": $3c9af509a01a8d08$exports,
  "en-US": $aa36476f91664a08$exports,
  "es-ES": $d96f2251ced25e45$exports,
  "et-EE": $16ec4ffbd4b2ca4b$exports,
  "fi-FI": $60f372f660e937e4$exports,
  "fr-FR": $d87c5f1e899f6af1$exports,
  "he-IL": $6899669fa63c7816$exports,
  "hr-HR": $3597d722a30a8081$exports,
  "hu-HU": $3ef905a2ce0921cb$exports,
  "it-IT": $e59d2e4af9ff1c28$exports,
  "ja-JP": $422a7013ab2cb36d$exports,
  "ko-KR": $a58a7ab9570c5a18$exports,
  "lt-LT": $24e660c5a5be82af$exports,
  "lv-LV": $a222e05de6d8dce8$exports,
  "nb-NO": $524caea23ab94ad7$exports,
  "nl-NL": $572079ed86210ca9$exports,
  "pl-PL": $6a0777ee77a74b18$exports,
  "pt-BR": $ea0401974d81b469$exports,
  "pt-PT": $701d0854e4f18979$exports,
  "ro-RO": $dd9fccd10d0a4be3$exports,
  "ru-RU": $3cd1eab3b0ecc980$exports,
  "sk-SK": $d109f3d68ba24ffc$exports,
  "sl-SI": $6382c2117e9fd1b6$exports,
  "sr-SP": $ba796dd79114e2d4$exports,
  "sv-SE": $916521e9800ac46c$exports,
  "tr-TR": $acd72b88f580fe64$exports,
  "uk-UA": $bd065904f1420f31$exports,
  "zh-CN": $0128cc194bc107bb$exports,
  "zh-TW": $c57738f6094a3d25$exports
};
var $cd231e464c886c86$exports2 = {};
$parcel$export8($cd231e464c886c86$exports2, "spectrum-FieldLabel", () => $cd231e464c886c86$export$493d18e796ae0542, (v) => $cd231e464c886c86$export$493d18e796ae0542 = v);
$parcel$export8($cd231e464c886c86$exports2, "spectrum-FieldLabel--positionSide", () => $cd231e464c886c86$export$9e6f19dc21f22f2e2, (v) => $cd231e464c886c86$export$9e6f19dc21f22f2e2 = v);
$parcel$export8($cd231e464c886c86$exports2, "spectrum-FieldLabel-requiredIcon", () => $cd231e464c886c86$export$7c47642c7d46f3c92, (v) => $cd231e464c886c86$export$7c47642c7d46f3c92 = v);
$parcel$export8($cd231e464c886c86$exports2, "spectrum-FieldLabel--alignEnd", () => $cd231e464c886c86$export$885efcc08143a9872, (v) => $cd231e464c886c86$export$885efcc08143a9872 = v);
$parcel$export8($cd231e464c886c86$exports2, "spectrum-Field", () => $cd231e464c886c86$export$f6d480ae1e56eba02, (v) => $cd231e464c886c86$export$f6d480ae1e56eba02 = v);
$parcel$export8($cd231e464c886c86$exports2, "spectrum-Field-contextualHelp", () => $cd231e464c886c86$export$24fb860d16dd2d3f2, (v) => $cd231e464c886c86$export$24fb860d16dd2d3f2 = v);
$parcel$export8($cd231e464c886c86$exports2, "spectrum-Field--positionTop", () => $cd231e464c886c86$export$a4ea780a9064d7f92, (v) => $cd231e464c886c86$export$a4ea780a9064d7f92 = v);
$parcel$export8($cd231e464c886c86$exports2, "spectrum-Field-field", () => $cd231e464c886c86$export$3ab8a3dc7f0563d2, (v) => $cd231e464c886c86$export$3ab8a3dc7f0563d2 = v);
$parcel$export8($cd231e464c886c86$exports2, "spectrum-Field--alignEnd", () => $cd231e464c886c86$export$5354c9be7ada5f832, (v) => $cd231e464c886c86$export$5354c9be7ada5f832 = v);
$parcel$export8($cd231e464c886c86$exports2, "spectrum-Field--positionSide", () => $cd231e464c886c86$export$2963225c911795892, (v) => $cd231e464c886c86$export$2963225c911795892 = v);
$parcel$export8($cd231e464c886c86$exports2, "spectrum-Field-wrapper", () => $cd231e464c886c86$export$127df0b7290eb8ef2, (v) => $cd231e464c886c86$export$127df0b7290eb8ef2 = v);
$parcel$export8($cd231e464c886c86$exports2, "spectrum-Field--hasContextualHelp", () => $cd231e464c886c86$export$9ba23707a252cdd42, (v) => $cd231e464c886c86$export$9ba23707a252cdd42 = v);
$parcel$export8($cd231e464c886c86$exports2, "spectrum-Form", () => $cd231e464c886c86$export$94d2bcc94afabd892, (v) => $cd231e464c886c86$export$94d2bcc94afabd892 = v);
$parcel$export8($cd231e464c886c86$exports2, "spectrum-Form--positionSide", () => $cd231e464c886c86$export$7f44db659563c8f42, (v) => $cd231e464c886c86$export$7f44db659563c8f42 = v);
$parcel$export8($cd231e464c886c86$exports2, "spectrum-Field-labelCell", () => $cd231e464c886c86$export$9cde5aecff0126412, (v) => $cd231e464c886c86$export$9cde5aecff0126412 = v);
$parcel$export8($cd231e464c886c86$exports2, "spectrum-Field-labelWrapper", () => $cd231e464c886c86$export$a872a8c78b26c9e02, (v) => $cd231e464c886c86$export$a872a8c78b26c9e02 = v);
$parcel$export8($cd231e464c886c86$exports2, "spectrum-Form--positionTop", () => $cd231e464c886c86$export$11b8bc81fe5510572, (v) => $cd231e464c886c86$export$11b8bc81fe5510572 = v);
$parcel$export8($cd231e464c886c86$exports2, "spectrum-LabeledValue", () => $cd231e464c886c86$export$79f9a5e9dd010c8d2, (v) => $cd231e464c886c86$export$79f9a5e9dd010c8d2 = v);
$parcel$export8($cd231e464c886c86$exports2, "spectrum-Form-itemLabel", () => $cd231e464c886c86$export$51ec27881a1e39282, (v) => $cd231e464c886c86$export$51ec27881a1e39282 = v);
$parcel$export8($cd231e464c886c86$exports2, "is-disabled", () => $cd231e464c886c86$export$d35bc1e505d1ebbf2, (v) => $cd231e464c886c86$export$d35bc1e505d1ebbf2 = v);
var $cd231e464c886c86$export$493d18e796ae0542;
var $cd231e464c886c86$export$9e6f19dc21f22f2e2;
var $cd231e464c886c86$export$7c47642c7d46f3c92;
var $cd231e464c886c86$export$885efcc08143a9872;
var $cd231e464c886c86$export$f6d480ae1e56eba02;
var $cd231e464c886c86$export$24fb860d16dd2d3f2;
var $cd231e464c886c86$export$a4ea780a9064d7f92;
var $cd231e464c886c86$export$3ab8a3dc7f0563d2;
var $cd231e464c886c86$export$5354c9be7ada5f832;
var $cd231e464c886c86$export$2963225c911795892;
var $cd231e464c886c86$export$127df0b7290eb8ef2;
var $cd231e464c886c86$export$9ba23707a252cdd42;
var $cd231e464c886c86$export$94d2bcc94afabd892;
var $cd231e464c886c86$export$7f44db659563c8f42;
var $cd231e464c886c86$export$9cde5aecff0126412;
var $cd231e464c886c86$export$a872a8c78b26c9e02;
var $cd231e464c886c86$export$11b8bc81fe5510572;
var $cd231e464c886c86$export$79f9a5e9dd010c8d2;
var $cd231e464c886c86$export$51ec27881a1e39282;
var $cd231e464c886c86$export$d35bc1e505d1ebbf2;
$cd231e464c886c86$export$493d18e796ae0542 = "spectrum-FieldLabel_d2db1f";
$cd231e464c886c86$export$9e6f19dc21f22f2e2 = "spectrum-FieldLabel--positionSide_d2db1f";
$cd231e464c886c86$export$7c47642c7d46f3c92 = "spectrum-FieldLabel-requiredIcon_d2db1f";
$cd231e464c886c86$export$885efcc08143a9872 = "spectrum-FieldLabel--alignEnd_d2db1f";
$cd231e464c886c86$export$f6d480ae1e56eba02 = "spectrum-Field_d2db1f";
$cd231e464c886c86$export$24fb860d16dd2d3f2 = "spectrum-Field-contextualHelp_d2db1f";
$cd231e464c886c86$export$a4ea780a9064d7f92 = "spectrum-Field--positionTop_d2db1f";
$cd231e464c886c86$export$3ab8a3dc7f0563d2 = "spectrum-Field-field_d2db1f";
$cd231e464c886c86$export$5354c9be7ada5f832 = "spectrum-Field--alignEnd_d2db1f";
$cd231e464c886c86$export$2963225c911795892 = "spectrum-Field--positionSide_d2db1f";
$cd231e464c886c86$export$127df0b7290eb8ef2 = "spectrum-Field-wrapper_d2db1f";
$cd231e464c886c86$export$9ba23707a252cdd42 = "spectrum-Field--hasContextualHelp_d2db1f";
$cd231e464c886c86$export$94d2bcc94afabd892 = "spectrum-Form_d2db1f";
$cd231e464c886c86$export$7f44db659563c8f42 = "spectrum-Form--positionSide_d2db1f";
$cd231e464c886c86$export$9cde5aecff0126412 = "spectrum-Field-labelCell_d2db1f";
$cd231e464c886c86$export$a872a8c78b26c9e02 = "spectrum-Field-labelWrapper_d2db1f";
$cd231e464c886c86$export$11b8bc81fe5510572 = "spectrum-Form--positionTop_d2db1f";
$cd231e464c886c86$export$79f9a5e9dd010c8d2 = "spectrum-LabeledValue_d2db1f";
$cd231e464c886c86$export$51ec27881a1e39282 = "spectrum-Form-itemLabel_d2db1f";
$cd231e464c886c86$export$d35bc1e505d1ebbf2 = "is-disabled_d2db1f";
function $00af9ba397a66f43$var$Label(props, ref) {
  props = (0, $7167f8da3cce35e4$export$521c373ccc32c300)(props);
  let { children, labelPosition = "top", labelAlign = labelPosition === "side" ? "start" : null, isRequired, necessityIndicator = isRequired != null ? "icon" : null, includeNecessityIndicatorInAccessibilityName = false, htmlFor, for: labelFor, elementType: ElementType = "label", onClick, ...otherProps } = props;
  let domRef = (0, $98e5a8ae0e6415af$export$c2c55ef9111cafd8)(ref);
  let { styleProps } = (0, $380ed8f3903c3931$export$b8e6fb9d2dff3f41)(otherProps);
  let stringFormatter = (0, $fca6afa0e843324b$export$f12b703ca79dfbb1)((0, /* @__PURE__ */ $parcel$interopDefault10($42a96ba05489ca64$exports)));
  let necessityLabel = isRequired ? stringFormatter.format("(required)") : stringFormatter.format("(optional)");
  let icon = /* @__PURE__ */ (0, yn).createElement((0, Asterisk), {
    UNSAFE_className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault10($cd231e464c886c86$exports2)), "spectrum-FieldLabel-requiredIcon"),
    "aria-label": includeNecessityIndicatorInAccessibilityName ? stringFormatter.format("(required)") : void 0
  });
  let labelClassNames = (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault10($cd231e464c886c86$exports2)), "spectrum-FieldLabel", {
    "spectrum-FieldLabel--positionSide": labelPosition === "side",
    "spectrum-FieldLabel--alignEnd": labelAlign === "end"
  }, styleProps.className);
  return /* @__PURE__ */ (0, yn).createElement(ElementType, {
    ...(0, $65484d02dcb7eb3e$export$457c3d6518dd4c6f)(otherProps),
    ...styleProps,
    onClick,
    ref: domRef,
    className: labelClassNames,
    htmlFor: ElementType === "label" ? labelFor || htmlFor : void 0
  }, children, (necessityIndicator === "label" || necessityIndicator === "icon" && isRequired) && " \u200B", necessityIndicator === "label" && /* @__PURE__ */ (0, yn).createElement("span", {
    "aria-hidden": !includeNecessityIndicatorInAccessibilityName ? isRequired : void 0
  }, necessityLabel), necessityIndicator === "icon" && isRequired && icon);
}
var $00af9ba397a66f43$export$b04be29aa201d4f5 = /* @__PURE__ */ (0, yn).forwardRef($00af9ba397a66f43$var$Label);
function $b7ca5b4454a2009d$var$Field(props, ref) {
  let formProps = (0, $ac118ceca79b8650$export$a6b5be5c6b451665)(props);
  let isInForm = formProps !== props;
  props = formProps;
  let { label, labelPosition = "top", labelAlign, isRequired, necessityIndicator, includeNecessityIndicatorInAccessibilityName, validationState, description, errorMessage, isDisabled, showErrorIcon, contextualHelp, children, labelProps = {}, descriptionProps = {}, errorMessageProps = {}, elementType, wrapperClassName, wrapperProps = {}, ...otherProps } = props;
  let { styleProps } = (0, $380ed8f3903c3931$export$b8e6fb9d2dff3f41)(otherProps);
  let hasHelpText = !!description || errorMessage && validationState === "invalid";
  let contextualHelpId = (0, $bdb11010cef70236$export$f680877a34711e37)();
  let fallbackLabelPropsId = (0, $bdb11010cef70236$export$f680877a34711e37)();
  if (label && contextualHelp && !labelProps.id)
    labelProps.id = fallbackLabelPropsId;
  let labelWrapperClass = (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault10($cd231e464c886c86$exports2)), "spectrum-Field", {
    "spectrum-Field--positionTop": labelPosition === "top",
    "spectrum-Field--positionSide": labelPosition === "side",
    "spectrum-Field--alignEnd": labelAlign === "end",
    "spectrum-Field--hasContextualHelp": !!props.contextualHelp
  }, styleProps.className, wrapperClassName);
  children = /* @__PURE__ */ (0, yn).cloneElement(children, (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(children.props, {
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault10($cd231e464c886c86$exports2)), "spectrum-Field-field")
  }));
  let renderHelpText = () => /* @__PURE__ */ (0, yn).createElement((0, $8e50676506611310$export$a67c0bc59081311a), {
    descriptionProps,
    errorMessageProps,
    description,
    errorMessage,
    validationState,
    isDisabled,
    showErrorIcon,
    gridArea: "helpText"
  });
  let renderChildren = () => {
    if (labelPosition === "side")
      return /* @__PURE__ */ (0, yn).createElement((0, $884c64d19340d345$export$f51f4c4ede09e011), {
        direction: "column",
        UNSAFE_className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault10($cd231e464c886c86$exports2)), "spectrum-Field-wrapper")
      }, children, hasHelpText && renderHelpText());
    return /* @__PURE__ */ (0, yn).createElement((0, yn).Fragment, null, children, hasHelpText && renderHelpText());
  };
  let labelAndContextualHelp = /* @__PURE__ */ (0, yn).createElement((0, yn).Fragment, null, label && /* @__PURE__ */ (0, yn).createElement((0, $00af9ba397a66f43$export$b04be29aa201d4f5), {
    ...labelProps,
    labelPosition,
    labelAlign,
    isRequired,
    necessityIndicator,
    includeNecessityIndicatorInAccessibilityName,
    elementType
  }, label), label && contextualHelp && /* @__PURE__ */ (0, yn).createElement((0, $59d09bcc83651bf9$export$8107b24b91795686), {
    slots: {
      actionButton: {
        UNSAFE_className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault10($cd231e464c886c86$exports2)), "spectrum-Field-contextualHelp"),
        id: contextualHelpId,
        "aria-labelledby": (labelProps === null || labelProps === void 0 ? void 0 : labelProps.id) ? `${labelProps.id} ${contextualHelpId}` : void 0
      }
    }
  }, contextualHelp));
  if (isInForm && labelPosition === "side" && label && contextualHelp)
    labelAndContextualHelp = /* @__PURE__ */ (0, yn).createElement("div", {
      className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault10($cd231e464c886c86$exports2)), "spectrum-Field-labelCell")
    }, /* @__PURE__ */ (0, yn).createElement("div", {
      className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault10($cd231e464c886c86$exports2)), "spectrum-Field-labelWrapper")
    }, labelAndContextualHelp));
  return /* @__PURE__ */ (0, yn).createElement("div", {
    ...styleProps,
    ...wrapperProps,
    ref,
    className: labelWrapperClass
  }, labelAndContextualHelp, renderChildren());
}
var $b7ca5b4454a2009d$export$a455218a85c89869 = /* @__PURE__ */ (0, yn).forwardRef($b7ca5b4454a2009d$var$Field);

// ../../node_modules/@react-aria/label/dist/import.mjs
function $d191a55c9702f145$export$8467354a121f1b9f(props) {
  let { id, label, "aria-labelledby": ariaLabelledby, "aria-label": ariaLabel, labelElementType = "label" } = props;
  id = (0, $bdb11010cef70236$export$f680877a34711e37)(id);
  let labelId = (0, $bdb11010cef70236$export$f680877a34711e37)();
  let labelProps = {};
  if (label) {
    ariaLabelledby = ariaLabelledby ? `${labelId} ${ariaLabelledby}` : labelId;
    labelProps = {
      id: labelId,
      htmlFor: labelElementType === "label" ? id : void 0
    };
  } else if (!ariaLabelledby && !ariaLabel)
    console.warn("If you do not provide a visible label, you must specify an aria-label or aria-labelledby attribute for accessibility");
  let fieldProps = (0, $313b98861ee5dd6c$export$d6875122194c7b44)({
    id,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby
  });
  return {
    labelProps,
    fieldProps
  };
}
function $2baaea4c71418dea$export$294aa081a6c6f55d(props) {
  let { description, errorMessage, validationState } = props;
  let { labelProps, fieldProps } = (0, $d191a55c9702f145$export$8467354a121f1b9f)(props);
  let descriptionId = (0, $bdb11010cef70236$export$b4cc09c592e8fdb8)([
    Boolean(description),
    Boolean(errorMessage),
    validationState
  ]);
  let errorMessageId = (0, $bdb11010cef70236$export$b4cc09c592e8fdb8)([
    Boolean(description),
    Boolean(errorMessage),
    validationState
  ]);
  fieldProps = (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(fieldProps, {
    "aria-describedby": [
      descriptionId,
      // Use aria-describedby for error message because aria-errormessage is unsupported using VoiceOver or NVDA. See https://github.com/adobe/react-spectrum/issues/1346#issuecomment-740136268
      errorMessageId,
      props["aria-describedby"]
    ].filter(Boolean).join(" ") || void 0
  });
  return {
    labelProps,
    fieldProps,
    descriptionProps: {
      id: descriptionId
    },
    errorMessageProps: {
      id: errorMessageId
    }
  };
}

// ../../node_modules/@react-spectrum/listbox/dist/import.mjs
init_preact_min();

// ../../node_modules/@react-aria/listbox/dist/import.mjs
var $b1f0cad8af73213b$export$3585ede4d035bf14 = /* @__PURE__ */ new WeakMap();
function $b1f0cad8af73213b$var$normalizeKey(key) {
  if (typeof key === "string")
    return key.replace(/\s*/g, "");
  return "" + key;
}
function $b1f0cad8af73213b$export$9145995848b05025(state, itemKey) {
  let data = $b1f0cad8af73213b$export$3585ede4d035bf14.get(state);
  if (!data)
    throw new Error("Unknown list");
  return `${data.id}-option-${$b1f0cad8af73213b$var$normalizeKey(itemKey)}`;
}
function $c132121280ec012d$export$50eacbbf140a3141(props, state, ref) {
  let domProps = (0, $65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
    labelable: true
  });
  let { listProps } = (0, $982254629710d113$export$b95089534ab7c1fd)({
    ...props,
    ref,
    selectionManager: state.selectionManager,
    collection: state.collection,
    disabledKeys: state.disabledKeys
  });
  let { focusWithinProps } = (0, $9ab94262bd0047c7$export$420e68273165f4ec)({
    onFocusWithin: props.onFocus,
    onBlurWithin: props.onBlur,
    onFocusWithinChange: props.onFocusChange
  });
  let id = (0, $bdb11010cef70236$export$f680877a34711e37)(props.id);
  (0, $b1f0cad8af73213b$export$3585ede4d035bf14).set(state, {
    id,
    shouldUseVirtualFocus: props.shouldUseVirtualFocus,
    shouldSelectOnPressUp: props.shouldSelectOnPressUp,
    shouldFocusOnHover: props.shouldFocusOnHover,
    isVirtualized: props.isVirtualized,
    onAction: props.onAction
  });
  let { labelProps, fieldProps } = (0, $d191a55c9702f145$export$8467354a121f1b9f)({
    ...props,
    id,
    // listbox is not an HTML input element so it
    // shouldn't be labeled by a <label> element.
    labelElementType: "span"
  });
  return {
    labelProps,
    listBoxProps: (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, focusWithinProps, state.selectionManager.selectionMode === "multiple" ? {
      "aria-multiselectable": "true"
    } : {}, {
      role: "listbox",
      ...(0, $3ef42575df84b30b$export$9d1611c77c2fe928)(fieldProps, listProps)
    })
  };
}
function $293f70390ea03370$export$497855f14858aa34(props, state, ref) {
  let { key } = props;
  let data = (0, $b1f0cad8af73213b$export$3585ede4d035bf14).get(state);
  var _props_isDisabled;
  let isDisabled = (_props_isDisabled = props.isDisabled) !== null && _props_isDisabled !== void 0 ? _props_isDisabled : state.disabledKeys.has(key);
  var _props_isSelected;
  let isSelected = (_props_isSelected = props.isSelected) !== null && _props_isSelected !== void 0 ? _props_isSelected : state.selectionManager.isSelected(key);
  var _props_shouldSelectOnPressUp;
  let shouldSelectOnPressUp = (_props_shouldSelectOnPressUp = props.shouldSelectOnPressUp) !== null && _props_shouldSelectOnPressUp !== void 0 ? _props_shouldSelectOnPressUp : data === null || data === void 0 ? void 0 : data.shouldSelectOnPressUp;
  var _props_shouldFocusOnHover;
  let shouldFocusOnHover = (_props_shouldFocusOnHover = props.shouldFocusOnHover) !== null && _props_shouldFocusOnHover !== void 0 ? _props_shouldFocusOnHover : data === null || data === void 0 ? void 0 : data.shouldFocusOnHover;
  var _props_shouldUseVirtualFocus;
  let shouldUseVirtualFocus = (_props_shouldUseVirtualFocus = props.shouldUseVirtualFocus) !== null && _props_shouldUseVirtualFocus !== void 0 ? _props_shouldUseVirtualFocus : data === null || data === void 0 ? void 0 : data.shouldUseVirtualFocus;
  var _props_isVirtualized;
  let isVirtualized = (_props_isVirtualized = props.isVirtualized) !== null && _props_isVirtualized !== void 0 ? _props_isVirtualized : data === null || data === void 0 ? void 0 : data.isVirtualized;
  let labelId = (0, $bdb11010cef70236$export$b4cc09c592e8fdb8)();
  let descriptionId = (0, $bdb11010cef70236$export$b4cc09c592e8fdb8)();
  let optionProps = {
    role: "option",
    "aria-disabled": isDisabled || void 0,
    "aria-selected": state.selectionManager.selectionMode !== "none" ? isSelected : void 0
  };
  if (!((0, $c87311424ea30a05$export$9ac100e40613ea10)() && (0, $c87311424ea30a05$export$78551043582a6a98)())) {
    optionProps["aria-label"] = props["aria-label"];
    optionProps["aria-labelledby"] = labelId;
    optionProps["aria-describedby"] = descriptionId;
  }
  if (isVirtualized) {
    var _state_collection_getItem;
    let index = Number((_state_collection_getItem = state.collection.getItem(key)) === null || _state_collection_getItem === void 0 ? void 0 : _state_collection_getItem.index);
    optionProps["aria-posinset"] = Number.isNaN(index) ? void 0 : index + 1;
    optionProps["aria-setsize"] = (0, $453cc9f0df89c0a5$export$77d5aafae4e095b2)(state.collection);
  }
  let { itemProps, isPressed, isFocused, hasAction, allowsSelection } = (0, $880e95eb8b93ba9a$export$ecf600387e221c37)({
    selectionManager: state.selectionManager,
    key,
    ref,
    shouldSelectOnPressUp,
    allowsDifferentPressOrigin: shouldSelectOnPressUp && shouldFocusOnHover,
    isVirtualized,
    shouldUseVirtualFocus,
    isDisabled,
    onAction: (data === null || data === void 0 ? void 0 : data.onAction) ? () => {
      var _data_onAction;
      return data === null || data === void 0 ? void 0 : (_data_onAction = data.onAction) === null || _data_onAction === void 0 ? void 0 : _data_onAction.call(data, key);
    } : void 0
  });
  let { hoverProps } = (0, $6179b936705e76d3$export$ae780daf29e6d456)({
    isDisabled: isDisabled || !shouldFocusOnHover,
    onHoverStart() {
      if (!(0, $507fabe10e71c6fb$export$b9b3dfddab17db27)()) {
        state.selectionManager.setFocused(true);
        state.selectionManager.setFocusedKey(key);
      }
    }
  });
  return {
    optionProps: {
      ...optionProps,
      ...(0, $3ef42575df84b30b$export$9d1611c77c2fe928)(itemProps, hoverProps),
      id: (0, $b1f0cad8af73213b$export$9145995848b05025)(state, key)
    },
    labelProps: {
      id: labelId
    },
    descriptionProps: {
      id: descriptionId
    },
    isFocused,
    isFocusVisible: isFocused && (0, $507fabe10e71c6fb$export$b9b3dfddab17db27)(),
    isSelected,
    isDisabled,
    isPressed,
    allowsSelection,
    hasAction
  };
}
function $af383d3bef1cfdc9$export$c3f9f39876e4bc7(props) {
  let { heading, "aria-label": ariaLabel } = props;
  let headingId = (0, $bdb11010cef70236$export$f680877a34711e37)();
  return {
    itemProps: {
      role: "presentation"
    },
    headingProps: heading ? {
      // Techincally, listbox cannot contain headings according to ARIA.
      // We hide the heading from assistive technology, using role="presentation",
      // and only use it as a visual label for the nested group.
      id: headingId,
      role: "presentation"
    } : {},
    groupProps: {
      role: "group",
      "aria-label": ariaLabel,
      "aria-labelledby": heading ? headingId : void 0
    }
  };
}

// ../../node_modules/@react-stately/virtualizer/dist/import.mjs
init_preact_min();
var $c74cda7d31af1253$export$c84671f46d6a1ca = class {
  /**
  * Returns whether the layout should invalidate in response to
  * visible rectangle changes. By default, it only invalidates
  * when the collection view's size changes. Return true always
  * to make the layout invalidate while scrolling (e.g. sticky headers).
  */
  shouldInvalidate(newRect, oldRect) {
    return newRect.width !== oldRect.width || newRect.height !== oldRect.height;
  }
  /**
  * This method allows the layout to perform any pre-computation
  * it needs to in order to prepare {@link LayoutInfo}s for retrieval.
  * Called by the collection view before {@link getVisibleLayoutInfos}
  * or {@link getLayoutInfo} are called.
  */
  validate(invalidationContext) {
  }
  /**
  * Returns a {@link DragTarget} describing a view at the given point to be dragged.
  * Return `null` to cancel the drag. The default implementation returns the view at the given point.
  * @param point The point at which the drag occurred.
  */
  // getDragTarget(point: Point): DragTarget | null {
  //   let target = this.virtualizer.keyAtPoint(point);
  //   if (!target) {
  //     return null;
  //   }
  //   return {
  //     type: 'item',
  //     key: target
  //   };
  // }
  /**
  * Returns a {@link DragTarget} object describing where a drop should occur. Return `null`
  * to reject the drop. The dropped items will be inserted before the resulting target.
  * @param point The point at which the drop occurred.
  */
  // getDropTarget(point: Point): DropTarget | null {
  //   return null;
  // }
  /**
  * Returns the starting attributes for an animated insertion.
  * The view is animated from this {@link LayoutInfo} to the one returned by {@link getLayoutInfo}.
  * The default implementation just returns its input.
  *
  * @param layoutInfo The proposed LayoutInfo for this view.
  */
  getInitialLayoutInfo(layoutInfo) {
    return layoutInfo;
  }
  /**
  * Returns the ending attributes for an animated removal.
  * The view is animated from the {@link LayoutInfo} returned by {@link getLayoutInfo}
  * to the one returned by this method. The default implementation returns its input.
  *
  * @param layoutInfo The original LayoutInfo for this view.
  */
  getFinalLayoutInfo(layoutInfo) {
    return layoutInfo;
  }
};
var $d7fd61009c21d0bb$export$7e0eeb9da702a085 = class _$d7fd61009c21d0bb$export$7e0eeb9da702a085 {
  /**
  * Returns a copy of the LayoutInfo.
  */
  copy() {
    let res = new _$d7fd61009c21d0bb$export$7e0eeb9da702a085(this.type, this.key, this.rect.copy());
    res.estimatedSize = this.estimatedSize;
    res.opacity = this.opacity;
    res.transform = this.transform;
    res.parentKey = this.parentKey;
    res.isSticky = this.isSticky;
    res.zIndex = this.zIndex;
    res.allowOverflow = this.allowOverflow;
    return res;
  }
  /**
  * @param type A string representing the view type. Should be `'item'` for item views.
                           Other types are used by supplementary views.
  * @param key The unique key for this view.
  * @param rect The rectangle describing the size and position of this view.
  */
  constructor(type, key, rect) {
    this.type = type;
    this.key = key;
    this.parentKey = null;
    this.rect = rect;
    this.estimatedSize = false;
    this.isSticky = false;
    this.opacity = 1;
    this.transform = null;
    this.zIndex = 0;
    this.allowOverflow = false;
  }
};
var $3041db3296945e6e$export$baf26146a414f24a = class _$3041db3296945e6e$export$baf26146a414f24a {
  /**
  * Returns a copy of this point.
  */
  copy() {
    return new _$3041db3296945e6e$export$baf26146a414f24a(this.x, this.y);
  }
  /**
  * Checks if two points are equal.
  */
  equals(point) {
    return this.x === point.x && this.y === point.y;
  }
  /**
  * Returns true if this point is the origin.
  */
  isOrigin() {
    return this.x === 0 && this.y === 0;
  }
  constructor(x2 = 0, y = 0) {
    this.x = x2;
    this.y = y;
  }
};
var $60423f92c7f9ad87$export$c79fc6492f3af13d = class _$60423f92c7f9ad87$export$c79fc6492f3af13d {
  /**
  * The maximum x-coordinate in the rectangle.
  */
  get maxX() {
    return this.x + this.width;
  }
  /**
  * The maximum y-coordinate in the rectangle.
  */
  get maxY() {
    return this.y + this.height;
  }
  /**
  * The area of the rectangle.
  */
  get area() {
    return this.width * this.height;
  }
  /**
  * The top left corner of the rectangle.
  */
  get topLeft() {
    return new (0, $3041db3296945e6e$export$baf26146a414f24a)(this.x, this.y);
  }
  /**
  * The top right corner of the rectangle.
  */
  get topRight() {
    return new (0, $3041db3296945e6e$export$baf26146a414f24a)(this.maxX, this.y);
  }
  /**
  * The bottom left corner of the rectangle.
  */
  get bottomLeft() {
    return new (0, $3041db3296945e6e$export$baf26146a414f24a)(this.x, this.maxY);
  }
  /**
  * The bottom right corner of the rectangle.
  */
  get bottomRight() {
    return new (0, $3041db3296945e6e$export$baf26146a414f24a)(this.maxX, this.maxY);
  }
  /**
  * Returns whether this rectangle intersects another rectangle.
  * @param rect - The rectangle to check.
  */
  intersects(rect) {
    return this.x <= rect.x + rect.width && rect.x <= this.x + this.width && this.y <= rect.y + rect.height && rect.y <= this.y + this.height;
  }
  /**
  * Returns whether this rectangle fully contains another rectangle.
  * @param rect - The rectangle to check.
  */
  containsRect(rect) {
    return this.x <= rect.x && this.y <= rect.y && this.maxX >= rect.maxX && this.maxY >= rect.maxY;
  }
  /**
  * Returns whether the rectangle contains the given point.
  * @param point - The point to check.
  */
  containsPoint(point) {
    return this.x <= point.x && this.y <= point.y && this.maxX >= point.x && this.maxY >= point.y;
  }
  /**
  * Returns the first corner of this rectangle (from top to bottom, left to right)
  * that is contained in the given rectangle, or null of the rectangles do not intersect.
  * @param rect - The rectangle to check.
  */
  getCornerInRect(rect) {
    for (let key of [
      "topLeft",
      "topRight",
      "bottomLeft",
      "bottomRight"
    ]) {
      if (rect.containsPoint(this[key]))
        return key;
    }
    return null;
  }
  equals(rect) {
    return rect.x === this.x && rect.y === this.y && rect.width === this.width && rect.height === this.height;
  }
  pointEquals(point) {
    return this.x === point.x && this.y === point.y;
  }
  sizeEquals(size) {
    return this.width === size.width && this.height === size.height;
  }
  /**
  * Returns the union of this Rect and another.
  */
  union(other) {
    let x2 = Math.min(this.x, other.x);
    let y = Math.min(this.y, other.y);
    let width = Math.max(this.maxX, other.maxX) - x2;
    let height = Math.max(this.maxY, other.maxY) - y;
    return new _$60423f92c7f9ad87$export$c79fc6492f3af13d(x2, y, width, height);
  }
  /**
  * Returns the intersection of this Rect with another.
  * If the rectangles do not intersect, an all zero Rect is returned.
  */
  intersection(other) {
    if (!this.intersects(other))
      return new _$60423f92c7f9ad87$export$c79fc6492f3af13d(0, 0, 0, 0);
    let x2 = Math.max(this.x, other.x);
    let y = Math.max(this.y, other.y);
    return new _$60423f92c7f9ad87$export$c79fc6492f3af13d(x2, y, Math.min(this.maxX, other.maxX) - x2, Math.min(this.maxY, other.maxY) - y);
  }
  /**
  * Returns a copy of this rectangle.
  */
  copy() {
    return new _$60423f92c7f9ad87$export$c79fc6492f3af13d(this.x, this.y, this.width, this.height);
  }
  constructor(x2 = 0, y = 0, width = 0, height = 0) {
    this.x = x2;
    this.y = y;
    this.width = width;
    this.height = height;
  }
};
var $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec = class _$ee1bfa90a957fb8a$export$cb6da89c6af1a8ec {
  /**
  * Returns a copy of this size.
  */
  copy() {
    return new _$ee1bfa90a957fb8a$export$cb6da89c6af1a8ec(this.width, this.height);
  }
  /**
  * Returns whether this size is equal to another one.
  */
  equals(other) {
    return this.width === other.width && this.height === other.height;
  }
  /**
  * The total area of the Size.
  */
  get area() {
    return this.width * this.height;
  }
  constructor(width = 0, height = 0) {
    this.width = width;
    this.height = height;
  }
};
var $ad1d98aa8f0c31b4$var$KEY = 0;
var $ad1d98aa8f0c31b4$export$1a5223887c560441 = class {
  /**
  * Prepares the view for reuse. Called just before the view is removed from the DOM.
  */
  prepareForReuse() {
    this.content = null;
    this.rendered = null;
    this.layoutInfo = null;
  }
  constructor(virtualizer) {
    this.virtualizer = virtualizer;
    this.key = ++$ad1d98aa8f0c31b4$var$KEY;
  }
};
var $3eb131dcf37ad5f8$var$perf = typeof window !== "undefined" ? window.performance : null;
var $3eb131dcf37ad5f8$var$perfNow = $3eb131dcf37ad5f8$var$perf && ($3eb131dcf37ad5f8$var$perf.now || $3eb131dcf37ad5f8$var$perf.webkitNow || $3eb131dcf37ad5f8$var$perf.msNow || $3eb131dcf37ad5f8$var$perf.mozNow);
var $3eb131dcf37ad5f8$var$getTime = $3eb131dcf37ad5f8$var$perfNow ? $3eb131dcf37ad5f8$var$perfNow.bind($3eb131dcf37ad5f8$var$perf) : function() {
  return Date.now ? Date.now() : (/* @__PURE__ */ new Date()).getTime();
};
var $3eb131dcf37ad5f8$var$fixTs;
function $3eb131dcf37ad5f8$export$dc0b63720788090c(begin, end, duration, ease, fn) {
  let canceled = false;
  let raf_id;
  let promise = new Promise((resolve) => {
    let start = $3eb131dcf37ad5f8$var$getTime();
    let diffX = end.x - begin.x;
    let diffY = end.y - begin.y;
    raf_id = requestAnimationFrame(function run3(t) {
      if ($3eb131dcf37ad5f8$var$fixTs == null)
        $3eb131dcf37ad5f8$var$fixTs = t > 1e12 !== $3eb131dcf37ad5f8$var$getTime() > 1e12;
      if ($3eb131dcf37ad5f8$var$fixTs)
        t = $3eb131dcf37ad5f8$var$getTime();
      let delta = t - start;
      if (delta > duration) {
        fn(end);
        resolve();
      } else {
        let proceed = fn(new (0, $3041db3296945e6e$export$baf26146a414f24a)(begin.x + diffX * ease(delta / duration), begin.y + diffY * ease(delta / duration)));
        if (proceed !== false && !canceled)
          raf_id = requestAnimationFrame(run3);
      }
    });
  });
  promise.cancel = function() {
    canceled = true;
    cancelAnimationFrame(raf_id);
  };
  return promise;
}
function $3eb131dcf37ad5f8$export$57636bb43b1ccbb0(t) {
  return Math.sin(t * Math.PI / 2);
}
function $fc36f9a046a9ce79$export$37a26b283fd7740e(a, b) {
  let res = /* @__PURE__ */ new Set();
  for (let key of a.keys())
    if (!b.has(key))
      res.add(key);
  return res;
}
function $fc36f9a046a9ce79$export$acaf96a27438246b(a, b) {
  let toRemove = $fc36f9a046a9ce79$export$37a26b283fd7740e(a, b);
  let toAdd = $fc36f9a046a9ce79$export$37a26b283fd7740e(b, a);
  let toUpdate = /* @__PURE__ */ new Set();
  for (let key of a.keys())
    if (b.has(key))
      toUpdate.add(key);
  return {
    toRemove,
    toAdd,
    toUpdate
  };
}
function* $fc36f9a046a9ce79$export$cfc14088dfefce5f(...iterators) {
  for (let iterator of iterators)
    yield* iterator;
}
function $fc36f9a046a9ce79$export$a8d0d0c8d1c5df64(a, b) {
  if (a === b)
    return true;
  if (a.size !== b.size)
    return false;
  for (let key of a) {
    if (!b.has(key))
      return false;
  }
  return true;
}
var $364191b3decf3697$var$RollingAverage = class {
  addSample(sample) {
    this.count++;
    this.value += (sample - this.value) / this.count;
  }
  constructor() {
    this.count = 0;
    this.value = 0;
  }
};
var $364191b3decf3697$export$4455ee6afb38dcbb = class {
  setVisibleRect(rect) {
    let time = performance.now() - this.startTime;
    if (time < 500) {
      this.averageTime.addSample(time);
      if (rect.x !== this.visibleRect.x && time > 0)
        this.velocity.x = (rect.x - this.visibleRect.x) / time;
      if (rect.y !== this.visibleRect.y && time > 0)
        this.velocity.y = (rect.y - this.visibleRect.y) / time;
    }
    this.startTime = performance.now();
    this.visibleRect = rect;
  }
  collectMetrics() {
    let time = performance.now() - this.startTime;
    if (time < 500)
      this.averagePerf.addSample(time);
    if (this.visibleRect.height > 0) {
      let o = Math.abs(this.velocity.y * (this.averageTime.value + this.averagePerf.value));
      this.overscanY.addSample(o);
    }
    if (this.visibleRect.width > 0) {
      let o = Math.abs(this.velocity.x * (this.averageTime.value + this.averagePerf.value));
      this.overscanX.addSample(o);
    }
  }
  getOverscannedRect() {
    let overscanned = this.visibleRect.copy();
    let overscanY = Math.round(Math.min(this.visibleRect.height * 2, this.overscanY.value) / 100) * 100;
    if (this.velocity.y > 0) {
      overscanned.y -= overscanY * 0.2;
      overscanned.height += overscanY + overscanY * 0.2;
    } else {
      overscanned.y -= overscanY;
      overscanned.height += overscanY + overscanY * 0.2;
    }
    let overscanX = Math.round(Math.min(this.visibleRect.width * 2, this.overscanX.value) / 100) * 100;
    if (this.velocity.x > 0) {
      overscanned.x -= overscanX * 0.2;
      overscanned.width += overscanX + overscanX * 0.2;
    } else {
      overscanned.x -= overscanX;
      overscanned.width += overscanX + overscanX * 0.2;
    }
    return overscanned;
  }
  constructor() {
    this.startTime = 0;
    this.averagePerf = new $364191b3decf3697$var$RollingAverage();
    this.averageTime = new $364191b3decf3697$var$RollingAverage();
    this.velocity = new (0, $3041db3296945e6e$export$baf26146a414f24a)(5, 5);
    this.overscanX = new $364191b3decf3697$var$RollingAverage();
    this.overscanY = new $364191b3decf3697$var$RollingAverage();
    this.visibleRect = new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)();
  }
};
var $8e135e531d8dcb66$export$febc5573c75cefb0 = class {
  constructor() {
    this.level = 0;
    this.actions = [];
    this.animated = true;
    this.initialMap = /* @__PURE__ */ new Map();
    this.finalMap = /* @__PURE__ */ new Map();
    this.initialLayoutInfo = /* @__PURE__ */ new Map();
    this.finalLayoutInfo = /* @__PURE__ */ new Map();
    this.removed = /* @__PURE__ */ new Map();
    this.toRemove = /* @__PURE__ */ new Map();
  }
};
var $38b9490c1cca8fc4$export$89be5a243e59c4b2 = class {
  _setContentSize(size) {
    this._contentSize = size;
    this.delegate.setContentSize(size);
  }
  _setContentOffset(offset) {
    let rect = new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(offset.x, offset.y, this._visibleRect.width, this._visibleRect.height);
    this.delegate.setVisibleRect(rect);
  }
  /**
  * Get the size of the scrollable content.
  */
  get contentSize() {
    return this._contentSize;
  }
  /**
  * Get the collection view's currently visible rectangle.
  */
  get visibleRect() {
    return this._visibleRect;
  }
  /**
  * Set the collection view's currently visible rectangle.
  */
  set visibleRect(rect) {
    this._setVisibleRect(rect);
  }
  _setVisibleRect(rect, forceUpdate = false) {
    let current = this._visibleRect;
    if (rect.equals(current))
      return;
    if (this.shouldOverscan)
      this._overscanManager.setVisibleRect(rect);
    let shouldInvalidate = this.layout && this.layout.shouldInvalidate(rect, this._visibleRect);
    this._resetAnimatedContentOffset();
    this._visibleRect = rect;
    if (shouldInvalidate)
      this.relayoutNow({
        offsetChanged: !rect.pointEquals(current),
        sizeChanged: !rect.sizeEquals(current)
      });
    else
      this.updateSubviews(forceUpdate);
  }
  get collection() {
    return this._collection;
  }
  set collection(data) {
    this._setData(data);
  }
  _setData(data) {
    if (data === this._collection)
      return;
    if (this._collection)
      this._runTransaction(() => {
        this._collection = data;
      }, this.transitionDuration > 0);
    else {
      this._collection = data;
      this.reloadData();
    }
  }
  /**
  * Reloads the data from the data source and relayouts the collection view.
  * Does not animate any changes. Equivalent to re-assigning the same data source
  * to the collection view.
  */
  reloadData() {
    this.relayout({
      contentChanged: true
    });
  }
  /**
  * Returns the item with the given key.
  */
  getItem(key) {
    return this._collection ? this._collection.getItem(key) : null;
  }
  /** The set of persisted keys are always present in the DOM, even if not currently in view. */
  get persistedKeys() {
    return this._persistedKeys;
  }
  /** The set of persisted keys are always present in the DOM, even if not currently in view. */
  set persistedKeys(persistedKeys) {
    if (!(0, $fc36f9a046a9ce79$export$a8d0d0c8d1c5df64)(persistedKeys, this._persistedKeys)) {
      this._persistedKeys = persistedKeys;
      this.updateSubviews();
    }
  }
  /** Returns whether the given key, or an ancestor, is persisted. */
  isPersistedKey(key) {
    if (this._persistedKeys.has(key))
      return true;
    for (let k of this._persistedKeys)
      while (k != null) {
        let layoutInfo = this.layout.getLayoutInfo(k);
        if (!layoutInfo)
          break;
        k = layoutInfo.parentKey;
        if (k === key)
          return true;
      }
    return false;
  }
  /**
  * Get the collection view's layout.
  */
  get layout() {
    return this._layout;
  }
  /**
  * Set the collection view's layout.
  */
  set layout(layout) {
    this.setLayout(layout);
  }
  /**
  * Sets the collection view's layout, optionally with an animated transition
  * from the current layout to the new layout.
  * @param layout The layout to switch to.
  * @param animated Whether to animate the layout change.
  */
  setLayout(layout, animated = false) {
    if (layout === this._layout)
      return;
    let applyLayout = () => {
      if (this._layout)
        this._layout.virtualizer = null;
      layout.virtualizer = this;
      this._layout = layout;
    };
    if (animated)
      this._runTransaction(applyLayout);
    else {
      applyLayout();
      this.relayout();
    }
  }
  _getReuseType(layoutInfo, content) {
    if (layoutInfo.type === "item" && content) {
      let type = this.delegate.getType ? this.delegate.getType(content) : "item";
      let reuseType = type === "item" ? "item" : layoutInfo.type + "_" + type;
      return {
        type,
        reuseType
      };
    }
    return {
      type: layoutInfo.type,
      reuseType: layoutInfo.type
    };
  }
  getReusableView(layoutInfo) {
    let content = this.getItem(layoutInfo.key);
    let { reuseType } = this._getReuseType(layoutInfo, content);
    if (!this._reusableViews[reuseType])
      this._reusableViews[reuseType] = [];
    let reusable = this._reusableViews[reuseType];
    let view = reusable.length > 0 ? reusable.pop() : new (0, $ad1d98aa8f0c31b4$export$1a5223887c560441)(this);
    view.viewType = reuseType;
    if (!this._animatedContentOffset.isOrigin()) {
      layoutInfo = layoutInfo.copy();
      layoutInfo.rect.x += this._animatedContentOffset.x;
      layoutInfo.rect.y += this._animatedContentOffset.y;
    }
    view.layoutInfo = layoutInfo;
    this._renderView(view);
    return view;
  }
  _renderView(reusableView) {
    let { type, key } = reusableView.layoutInfo;
    reusableView.content = this.getItem(key);
    reusableView.rendered = this._renderContent(type, reusableView.content);
  }
  _renderContent(type, content) {
    let cached = this._renderedContent.get(content);
    if (cached != null)
      return cached;
    let rendered = this.delegate.renderView(type, content);
    if (content)
      this._renderedContent.set(content, rendered);
    return rendered;
  }
  /**
  * Returns an array of all currently visible views, including both
  * item views and supplementary views.
  */
  get visibleViews() {
    return Array.from(this._visibleViews.values());
  }
  /**
  * Gets the visible view for the given type and key. Returns null if
  * the view is not currently visible.
  *
  * @param key The key of the view to retrieve.
  */
  getView(key) {
    return this._visibleViews.get(key) || null;
  }
  /**
  * Returns an array of visible views matching the given type.
  * @param type The view type to find.
  */
  getViewsOfType(type) {
    return this.visibleViews.filter((v) => v.layoutInfo && v.layoutInfo.type === type);
  }
  /**
  * Returns the key for the given view. Returns null
  * if the view is not currently visible.
  */
  keyForView(view) {
    if (view && view.layoutInfo)
      return view.layoutInfo.key;
    return null;
  }
  /**
  * Returns the key for the item view currently at the given point.
  */
  keyAtPoint(point) {
    let rect = new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(point.x, point.y, 1, 1);
    let layoutInfos = this.layout.getVisibleLayoutInfos(rect);
    for (let layoutInfo of layoutInfos) {
      if (layoutInfo.rect.intersects(rect))
        return layoutInfo.key;
    }
    return null;
  }
  /**
  * Cleanup for when the Virtualizer will be unmounted.
  */
  willUnmount() {
    cancelAnimationFrame(this._relayoutRaf);
  }
  /**
  * Triggers a layout invalidation, and updates the visible subviews.
  */
  relayout(context = {}) {
    if (this._scrollAnimation || typeof requestAnimationFrame === "undefined")
      return;
    if (this._invalidationContext) {
      Object.assign(this._invalidationContext, context);
      return;
    }
    this._invalidationContext = context;
  }
  /**
  * Performs a relayout immediately. Prefer {@link relayout} over this method
  * where possible, since it coalesces multiple layout passes in the same tick.
  */
  relayoutNow(context = this._invalidationContext || {}) {
    if (this._relayoutRaf) {
      cancelAnimationFrame(this._relayoutRaf);
      this._relayoutRaf = null;
      context = {
        ...this._invalidationContext,
        ...context
      };
    }
    this._invalidationContext = null;
    if (!this.layout || !this._collection || this._scrollAnimation)
      return;
    let scrollAnchor = this._getScrollAnchor();
    if (typeof context.beforeLayout === "function")
      context.beforeLayout();
    this.layout.validate(context);
    this._setContentSize(this.layout.getContentSize());
    if (typeof context.afterLayout === "function")
      context.afterLayout();
    let visibleRect = this.getVisibleRect();
    let restoredScrollAnchor = this._restoreScrollAnchor(scrollAnchor, context);
    let contentOffsetX = context.contentChanged ? 0 : restoredScrollAnchor.x;
    let contentOffsetY = context.contentChanged ? 0 : restoredScrollAnchor.y;
    contentOffsetX = Math.max(0, Math.min(this.contentSize.width - visibleRect.width, contentOffsetX));
    contentOffsetY = Math.max(0, Math.min(this.contentSize.height - visibleRect.height, contentOffsetY));
    let hasLayoutUpdates = false;
    if (contentOffsetX !== visibleRect.x || contentOffsetY !== visibleRect.y) {
      if (context.animated || !this._animatedContentOffset.isOrigin()) {
        this._animatedContentOffset.x += visibleRect.x - contentOffsetX;
        this._animatedContentOffset.y += visibleRect.y - contentOffsetY;
        hasLayoutUpdates = this.updateSubviews(context.contentChanged);
      } else
        this._setContentOffset(new (0, $3041db3296945e6e$export$baf26146a414f24a)(contentOffsetX, contentOffsetY));
    } else
      hasLayoutUpdates = this.updateSubviews(context.contentChanged);
    if (!(context.transaction && context.animated))
      this._applyLayoutInfos();
    if (context.animated && hasLayoutUpdates) {
      this._enableTransitions();
      let done = () => {
        this._disableTransitions();
        if (!this._animatedContentOffset.isOrigin()) {
          let { x: x2, y } = this.getVisibleRect();
          this._resetAnimatedContentOffset();
          this._setContentOffset(new (0, $3041db3296945e6e$export$baf26146a414f24a)(x2, y));
        }
        if (typeof context.afterAnimation === "function")
          context.afterAnimation();
      };
      setTimeout(done, this.transitionDuration + 100);
      return;
    } else if (typeof context.afterAnimation === "function")
      context.afterAnimation();
  }
  /**
  * Corrects DOM order of visible views to match item order of collection.
  */
  _correctItemOrder() {
    if (this._isScrolling || this._transaction)
      return;
    for (let key of this._visibleLayoutInfos.keys()) {
      let view = this._visibleViews.get(key);
      this._children.delete(view);
      this._children.add(view);
    }
  }
  _enableTransitions() {
    this.delegate.beginAnimations();
  }
  _disableTransitions() {
    this.delegate.endAnimations();
  }
  _getScrollAnchor() {
    if (!this.anchorScrollPosition)
      return null;
    let visibleRect = this.getVisibleRect();
    if (this.delegate.getScrollAnchor) {
      let key = this.delegate.getScrollAnchor(visibleRect);
      if (key != null) {
        let layoutInfo = this.layout.getLayoutInfo(key);
        let corner = layoutInfo.rect.getCornerInRect(visibleRect);
        if (corner) {
          let key2 = layoutInfo.key;
          let offset = layoutInfo.rect[corner].y - visibleRect.y;
          return {
            key: key2,
            layoutInfo,
            corner,
            offset
          };
        }
      }
    }
    if (visibleRect.y === 0 && !this.anchorScrollPositionAtTop)
      return null;
    let cornerAnchor = null;
    for (let [key, view] of this._visibleViews) {
      let layoutInfo = view.layoutInfo;
      if (layoutInfo && layoutInfo.rect.area > 0) {
        let corner = layoutInfo.rect.getCornerInRect(visibleRect);
        if (corner) {
          let offset = layoutInfo.rect[corner].y - visibleRect.y;
          if (!cornerAnchor || offset < cornerAnchor.offset)
            cornerAnchor = {
              key,
              layoutInfo,
              corner,
              offset
            };
        }
      }
    }
    return cornerAnchor;
  }
  _restoreScrollAnchor(scrollAnchor, context) {
    let contentOffset = this.getVisibleRect();
    if (scrollAnchor) {
      var _context_transaction;
      let finalAnchor = ((_context_transaction = context.transaction) === null || _context_transaction === void 0 ? void 0 : _context_transaction.animated) ? context.transaction.finalMap.get(scrollAnchor.key) : this.layout.getLayoutInfo(scrollAnchor.layoutInfo.key);
      if (finalAnchor) {
        let adjustment = finalAnchor.rect[scrollAnchor.corner].y - contentOffset.y - scrollAnchor.offset;
        contentOffset.y += adjustment;
      }
    }
    return contentOffset;
  }
  getVisibleRect() {
    let v = this.visibleRect;
    let x2 = v.x - this._animatedContentOffset.x;
    let y = v.y - this._animatedContentOffset.y;
    return new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(x2, y, v.width, v.height);
  }
  getVisibleLayoutInfos() {
    let rect = this.shouldOverscan ? this._overscanManager.getOverscannedRect() : this.getVisibleRect();
    this._visibleLayoutInfos = this._getLayoutInfoMap(rect);
    return this._visibleLayoutInfos;
  }
  _getLayoutInfoMap(rect, copy = false) {
    let layoutInfos = this.layout.getVisibleLayoutInfos(rect);
    let map2 = /* @__PURE__ */ new Map();
    for (let layoutInfo of layoutInfos) {
      if (copy)
        layoutInfo = layoutInfo.copy();
      map2.set(layoutInfo.key, layoutInfo);
    }
    return map2;
  }
  updateSubviews(forceUpdate = false) {
    if (!this._collection)
      return;
    let visibleLayoutInfos = this.getVisibleLayoutInfos();
    let currentlyVisible = this._visibleViews;
    let toAdd, toRemove, toUpdate;
    if (forceUpdate) {
      toAdd = visibleLayoutInfos;
      toRemove = currentlyVisible;
      toUpdate = /* @__PURE__ */ new Set();
    } else {
      ({ toAdd, toRemove, toUpdate } = (0, $fc36f9a046a9ce79$export$acaf96a27438246b)(currentlyVisible, visibleLayoutInfos));
      for (let key of toUpdate) {
        let view = currentlyVisible.get(key);
        if (!view || !view.layoutInfo)
          continue;
        let item = this.getItem(visibleLayoutInfos.get(key).key);
        if (view.content === item)
          toUpdate.delete(key);
        else {
          let { reuseType } = this._getReuseType(view.layoutInfo, item);
          if (view.viewType !== reuseType) {
            toUpdate.delete(key);
            toAdd.add(key);
            toRemove.add(key);
          }
        }
      }
      if (toAdd.size === 0 && toRemove.size === 0 && toUpdate.size === 0) {
        if (this._transaction)
          this._applyLayoutInfos();
        return;
      }
    }
    let removed = /* @__PURE__ */ new Set();
    for (let key of toRemove.keys()) {
      let view = this._visibleViews.get(key);
      if (view) {
        removed.add(view);
        this._visibleViews.delete(key);
        if (this._transaction)
          this._transaction.toRemove.set(key, view);
        else
          this.reuseView(view);
      }
    }
    for (let key of toAdd.keys()) {
      let layoutInfo = visibleLayoutInfos.get(key);
      let view;
      if (this._transaction) {
        if (this._transaction.initialLayoutInfo.has(key))
          layoutInfo = this._transaction.initialLayoutInfo.get(key);
        view = this._transaction.toRemove.get(key);
        if (view) {
          this._transaction.toRemove.delete(key);
          this._applyLayoutInfo(view, layoutInfo);
        }
      }
      if (!view) {
        view = this.getReusableView(layoutInfo);
        if (!removed.has(view))
          this._children.add(view);
      }
      this._visibleViews.set(key, view);
      removed.delete(view);
    }
    for (let key of toUpdate) {
      let view = currentlyVisible.get(key);
      this._renderedContent.delete(key);
      this._renderView(view);
    }
    if (!this._transaction)
      this.removeViews(removed);
    this._correctItemOrder();
    this._flushVisibleViews();
    let hasLayoutUpdates = this._transaction && (toAdd.size > 0 || toRemove.size > 0 || this._hasLayoutUpdates());
    if (hasLayoutUpdates)
      requestAnimationFrame(() => {
        if (this._transaction)
          requestAnimationFrame(() => this._applyLayoutInfos());
      });
    return hasLayoutUpdates;
  }
  afterRender() {
    if (this._transactionQueue.length > 0)
      this._processTransactionQueue();
    else if (this._invalidationContext)
      this.relayoutNow();
    if (this.shouldOverscan)
      this._overscanManager.collectMetrics();
  }
  _flushVisibleViews() {
    let viewsByParentKey = /* @__PURE__ */ new Map([
      [
        null,
        []
      ]
    ]);
    for (let view of this._children) {
      var _view_layoutInfo, _viewsByParentKey_get, _view_layoutInfo1, _view_layoutInfo2, _view_layoutInfo3;
      if (((_view_layoutInfo = view.layoutInfo) === null || _view_layoutInfo === void 0 ? void 0 : _view_layoutInfo.parentKey) != null && !viewsByParentKey.has(view.layoutInfo.parentKey))
        viewsByParentKey.set(view.layoutInfo.parentKey, []);
      (_viewsByParentKey_get = viewsByParentKey.get((_view_layoutInfo1 = view.layoutInfo) === null || _view_layoutInfo1 === void 0 ? void 0 : _view_layoutInfo1.parentKey)) === null || _viewsByParentKey_get === void 0 ? void 0 : _viewsByParentKey_get.push(view);
      if (!viewsByParentKey.has((_view_layoutInfo2 = view.layoutInfo) === null || _view_layoutInfo2 === void 0 ? void 0 : _view_layoutInfo2.key))
        viewsByParentKey.set((_view_layoutInfo3 = view.layoutInfo) === null || _view_layoutInfo3 === void 0 ? void 0 : _view_layoutInfo3.key, []);
    }
    let buildTree = (parent, views) => views.map((view) => {
      let children2 = viewsByParentKey.get(view.layoutInfo.key);
      return this.delegate.renderWrapper(parent, view, children2, (childViews) => buildTree(view, childViews));
    });
    let children = buildTree(null, viewsByParentKey.get(null));
    this.delegate.setVisibleViews(children);
  }
  _applyLayoutInfo(view, layoutInfo) {
    if (view.layoutInfo === layoutInfo)
      return false;
    view.layoutInfo = layoutInfo;
    return true;
  }
  _applyLayoutInfos() {
    let updated = false;
    for (let view of this._visibleViews.values()) {
      let cur = view.layoutInfo;
      if ((cur === null || cur === void 0 ? void 0 : cur.key) != null) {
        let layoutInfo = this.layout.getLayoutInfo(cur.key);
        if (this._applyLayoutInfo(view, layoutInfo))
          updated = true;
      }
    }
    if (this._transaction) {
      for (let view of this._transaction.toRemove.values()) {
        let cur = view.layoutInfo;
        if ((cur === null || cur === void 0 ? void 0 : cur.key) != null) {
          let layoutInfo = this.layout.getLayoutInfo(cur.key);
          if (this._applyLayoutInfo(view, layoutInfo))
            updated = true;
        }
      }
      for (let view of this._transaction.removed.values()) {
        let cur = view.layoutInfo;
        let layoutInfo = this._transaction.finalLayoutInfo.get(cur.key) || cur;
        layoutInfo = this.layout.getFinalLayoutInfo(layoutInfo.copy());
        if (this._applyLayoutInfo(view, layoutInfo))
          updated = true;
      }
    }
    if (updated)
      this._flushVisibleViews();
  }
  _hasLayoutUpdates() {
    if (!this._transaction)
      return false;
    for (let view of this._visibleViews.values()) {
      let cur = view.layoutInfo;
      if (!cur)
        return true;
      let layoutInfo = this.layout.getLayoutInfo(cur.key);
      if (
        // Uses equals rather than pointEquals so that width/height changes are taken into account
        !cur.rect.equals(layoutInfo.rect) || cur.opacity !== layoutInfo.opacity || cur.transform !== layoutInfo.transform
      )
        return true;
    }
    return false;
  }
  reuseView(view) {
    view.prepareForReuse();
    this._reusableViews[view.viewType].push(view);
  }
  removeViews(toRemove) {
    for (let view of toRemove)
      this._children.delete(view);
  }
  updateItemSize(key, size) {
    if (!this.layout.updateItemSize)
      return;
    if (this._scrollAnimation) {
      this._sizeUpdateQueue.set(key, size);
      return;
    }
    let changed = this.layout.updateItemSize(key, size);
    if (changed)
      this.relayout();
  }
  startScrolling() {
    this._isScrolling = true;
  }
  endScrolling() {
    this._isScrolling = false;
    this._correctItemOrder();
    this._flushVisibleViews();
  }
  _resetAnimatedContentOffset() {
    if (!this._animatedContentOffset.isOrigin()) {
      this._animatedContentOffset = new (0, $3041db3296945e6e$export$baf26146a414f24a)(0, 0);
      this._applyLayoutInfos();
    }
  }
  /**
  * Scrolls the item with the given key into view, optionally with an animation.
  * @param key The key of the item to scroll into view.
  * @param duration The duration of the scroll animation.
  */
  scrollToItem(key, options) {
    if (key == null)
      return;
    let layoutInfo = this.layout.getLayoutInfo(key);
    if (!layoutInfo)
      return;
    let { duration = 300, shouldScrollX = true, shouldScrollY = true, offsetX = 0, offsetY = 0 } = options;
    let x2 = this.visibleRect.x;
    let y = this.visibleRect.y;
    let minX = layoutInfo.rect.x - offsetX;
    let minY = layoutInfo.rect.y - offsetY;
    let maxX = x2 + this.visibleRect.width;
    let maxY = y + this.visibleRect.height;
    if (shouldScrollX) {
      if (minX <= x2 || maxX === 0)
        x2 = minX;
      else if (layoutInfo.rect.maxX > maxX)
        x2 += layoutInfo.rect.maxX - maxX;
    }
    if (shouldScrollY) {
      if (minY <= y || maxY === 0)
        y = minY;
      else if (layoutInfo.rect.maxY > maxY)
        y += layoutInfo.rect.maxY - maxY;
    }
    return this.scrollTo(new (0, $3041db3296945e6e$export$baf26146a414f24a)(x2, y), duration);
  }
  /**
  * Performs an animated scroll to the given offset.
  * @param offset - The offset to scroll to.
  * @param duration The duration of the animation.
  * @returns A promise that resolves when the animation is complete.
  */
  scrollTo(offset, duration = 300) {
    if (this._scrollAnimation) {
      this._scrollAnimation.cancel();
      this._scrollAnimation = null;
    }
    if (duration <= 0 || this.visibleRect.pointEquals(offset)) {
      this._setContentOffset(offset);
      return Promise.resolve();
    }
    this.startScrolling();
    this._scrollAnimation = (0, $3eb131dcf37ad5f8$export$dc0b63720788090c)(this.visibleRect, offset, duration, (0, $3eb131dcf37ad5f8$export$57636bb43b1ccbb0), (offset2) => {
      this._setContentOffset(offset2);
    });
    this._scrollAnimation.then(() => {
      this._scrollAnimation = null;
      for (let [key, size] of this._sizeUpdateQueue)
        this.updateItemSize(key, size);
      this._sizeUpdateQueue.clear();
      this.relayout();
      this._processTransactionQueue();
      this.endScrolling();
    });
    return this._scrollAnimation;
  }
  _runTransaction(action2, animated) {
    this._startTransaction();
    if (this._nextTransaction)
      this._nextTransaction.actions.push(action2);
    this._endTransaction(animated);
  }
  _startTransaction() {
    if (!this._nextTransaction)
      this._nextTransaction = new (0, $8e135e531d8dcb66$export$febc5573c75cefb0)();
    this._nextTransaction.level++;
  }
  _endTransaction(animated) {
    if (!this._nextTransaction)
      return false;
    if (animated != null)
      this._nextTransaction.animated = animated;
    if (--this._nextTransaction.level > 0)
      return false;
    if (this._nextTransaction.actions.length === 0) {
      this._nextTransaction = null;
      return false;
    }
    if (this._nextTransaction.animated == null)
      this._nextTransaction.animated = true;
    this._transactionQueue.push(this._nextTransaction);
    this._nextTransaction = null;
    return true;
  }
  _processTransactionQueue() {
    if (this._transaction || this._scrollAnimation)
      return;
    let next = this._transactionQueue.shift();
    if (next)
      this._performTransaction(next);
  }
  _getContentRect() {
    return new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(0, 0, this.contentSize.width, this.contentSize.height);
  }
  _performTransaction(transaction2) {
    this._transaction = transaction2;
    this.relayoutNow({
      transaction: transaction2,
      animated: transaction2.animated,
      beforeLayout: () => {
        if (transaction2.animated)
          transaction2.initialMap = this._getLayoutInfoMap(this._getContentRect(), true);
        for (let action2 of transaction2.actions)
          action2();
      },
      afterLayout: () => {
        if (transaction2.animated) {
          transaction2.finalMap = this._getLayoutInfoMap(this._getContentRect());
          this._setupTransactionAnimations(transaction2);
        } else
          this._transaction = null;
      },
      afterAnimation: () => {
        if (transaction2.toRemove.size > 0 || transaction2.removed.size > 0)
          for (let view of (0, $fc36f9a046a9ce79$export$cfc14088dfefce5f)(transaction2.toRemove.values(), transaction2.removed.values())) {
            this._children.delete(view);
            this.reuseView(view);
          }
        this._transaction = null;
        this._correctItemOrder();
        this._flushVisibleViews();
        this._processTransactionQueue();
      }
    });
  }
  _setupTransactionAnimations(transaction2) {
    let { initialMap, finalMap } = transaction2;
    for (let [key, layoutInfo] of initialMap)
      if (finalMap.has(key))
        transaction2.initialLayoutInfo.set(key, layoutInfo);
      else
        transaction2.finalLayoutInfo.set(layoutInfo.key, layoutInfo);
    for (let [key, layoutInfo] of finalMap)
      if (!initialMap.has(key)) {
        let initialLayoutInfo = this.layout.getInitialLayoutInfo(layoutInfo.copy());
        transaction2.initialLayoutInfo.set(key, initialLayoutInfo);
      }
    for (let [key, view] of this._visibleViews)
      if (!finalMap.has(key) && view.layoutInfo.rect.width > 0) {
        transaction2.removed.set(key, view);
        this._visibleViews.delete(key);
        if (view.layoutInfo) {
          if (!transaction2.finalLayoutInfo.has(view.layoutInfo.key))
            transaction2.finalLayoutInfo.set(view.layoutInfo.key, view.layoutInfo);
        }
      }
  }
  constructor(options = {}) {
    this._contentSize = new (0, $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec)();
    this._visibleRect = new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)();
    this._reusableViews = {};
    this._visibleLayoutInfos = /* @__PURE__ */ new Map();
    this._visibleViews = /* @__PURE__ */ new Map();
    this._renderedContent = /* @__PURE__ */ new WeakMap();
    this._children = /* @__PURE__ */ new Set();
    this._invalidationContext = null;
    this._overscanManager = new (0, $364191b3decf3697$export$4455ee6afb38dcbb)();
    this._persistedKeys = /* @__PURE__ */ new Set();
    this._scrollAnimation = null;
    this._isScrolling = false;
    this._sizeUpdateQueue = /* @__PURE__ */ new Map();
    this._animatedContentOffset = new (0, $3041db3296945e6e$export$baf26146a414f24a)(0, 0);
    this._transaction = null;
    this._nextTransaction = null;
    this._transactionQueue = [];
    var _options_transitionDuration;
    this.transitionDuration = (_options_transitionDuration = options.transitionDuration) !== null && _options_transitionDuration !== void 0 ? _options_transitionDuration : 500;
    this.anchorScrollPosition = options.anchorScrollPosition || false;
    this.anchorScrollPositionAtTop = options.anchorScrollPositionAtTop || false;
    this.shouldOverscan = options.shouldOverscan !== false;
    for (let key of [
      "delegate",
      "size",
      "layout",
      "collection"
    ])
      if (options[key])
        this[key] = options[key];
  }
};
function $fc0b13b484ac1194$export$1505db82fe357e65(opts) {
  let [visibleViews, setVisibleViews] = (0, z)([]);
  let [contentSize, setContentSize] = (0, z)(new (0, $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec)());
  let [isAnimating, setAnimating] = (0, z)(false);
  let [isScrolling, setScrolling] = (0, z)(false);
  let virtualizer = (0, j)(() => new (0, $38b9490c1cca8fc4$export$89be5a243e59c4b2)(), []);
  virtualizer.delegate = {
    setVisibleViews,
    setVisibleRect(rect) {
      virtualizer.visibleRect = rect;
      opts.onVisibleRectChange(rect);
    },
    setContentSize,
    renderView: opts.renderView,
    renderWrapper: opts.renderWrapper,
    beginAnimations: () => setAnimating(true),
    endAnimations: () => setAnimating(false),
    getScrollAnchor: opts.getScrollAnchor
  };
  virtualizer.layout = opts.layout;
  virtualizer.collection = opts.collection;
  virtualizer.transitionDuration = opts.transitionDuration;
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    virtualizer.afterRender();
  });
  (0, K)(() => {
    return () => virtualizer.willUnmount();
  }, []);
  let setVisibleRect = (0, ae)((rect) => {
    virtualizer.visibleRect = rect;
  }, [
    virtualizer
  ]);
  let startScrolling = (0, ae)(() => {
    virtualizer.startScrolling();
    setScrolling(true);
  }, [
    virtualizer
  ]);
  let endScrolling = (0, ae)(() => {
    virtualizer.endScrolling();
    setScrolling(false);
  }, [
    virtualizer
  ]);
  let state = (0, j)(() => ({
    virtualizer,
    visibleViews,
    setVisibleRect,
    contentSize,
    isAnimating,
    isScrolling,
    startScrolling,
    endScrolling
  }), [
    virtualizer,
    visibleViews,
    setVisibleRect,
    contentSize,
    isAnimating,
    isScrolling,
    startScrolling,
    endScrolling
  ]);
  return state;
}

// ../../node_modules/@react-stately/layout/dist/import.mjs
var $61ef60fc9b1041f4$var$DEFAULT_HEIGHT = 48;
var $61ef60fc9b1041f4$export$cacbb3924155d68e = class extends (0, $c74cda7d31af1253$export$c84671f46d6a1ca) {
  getLayoutInfo(key) {
    let res = this.layoutInfos.get(key);
    if (!res && this.validRect.area < this.contentSize.area && this.lastCollection) {
      this.lastValidRect = this.validRect;
      this.validRect = new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(0, 0, Infinity, Infinity);
      this.rootNodes = this.buildCollection();
      this.validRect = new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(0, 0, this.contentSize.width, this.contentSize.height);
      res = this.layoutInfos.get(key);
    }
    return res;
  }
  getVisibleLayoutInfos(rect) {
    if (!this.validRect.containsRect(rect) && this.lastCollection) {
      this.lastValidRect = this.validRect;
      this.validRect = this.validRect.union(rect);
      this.rootNodes = this.buildCollection();
    }
    let res = [];
    let addNodes = (nodes) => {
      for (let node of nodes)
        if (this.isVisible(node, rect)) {
          res.push(node.layoutInfo);
          if (node.header)
            res.push(node.header);
          if (node.children)
            addNodes(node.children);
        }
    };
    addNodes(this.rootNodes);
    return res;
  }
  isVisible(node, rect) {
    return node.layoutInfo.rect.intersects(rect) || node.layoutInfo.isSticky || this.virtualizer.isPersistedKey(node.layoutInfo.key);
  }
  shouldInvalidateEverything(invalidationContext) {
    return invalidationContext.sizeChanged;
  }
  validate(invalidationContext) {
    this.collection = this.virtualizer.collection;
    this.invalidateEverything = this.shouldInvalidateEverything(invalidationContext);
    if (this.invalidateEverything) {
      this.lastValidRect = this.validRect;
      this.validRect = this.virtualizer.getVisibleRect();
    }
    this.rootNodes = this.buildCollection();
    if (this.lastCollection && this.collection !== this.lastCollection) {
      for (let key of this.lastCollection.getKeys())
        if (!this.collection.getItem(key)) {
          let layoutNode = this.layoutNodes.get(key);
          if (layoutNode) {
            var _layoutNode_header;
            this.layoutInfos.delete(layoutNode.layoutInfo.key);
            this.layoutInfos.delete((_layoutNode_header = layoutNode.header) === null || _layoutNode_header === void 0 ? void 0 : _layoutNode_header.key);
            this.layoutNodes.delete(key);
          }
        }
    }
    this.lastWidth = this.virtualizer.visibleRect.width;
    this.lastCollection = this.collection;
    this.invalidateEverything = false;
  }
  buildCollection() {
    let y = this.padding;
    let skipped = 0;
    let nodes = [];
    for (let node of this.collection) {
      var _this_rowHeight;
      let rowHeight = (_this_rowHeight = this.rowHeight) !== null && _this_rowHeight !== void 0 ? _this_rowHeight : this.estimatedRowHeight;
      if (node.type === "item" && y + rowHeight < this.validRect.y && !this.isValid(node, y)) {
        y += rowHeight;
        skipped++;
        continue;
      }
      let layoutNode = this.buildChild(node, 0, y);
      y = layoutNode.layoutInfo.rect.maxY;
      nodes.push(layoutNode);
      if (node.type === "item" && y > this.validRect.maxY) {
        y += (this.collection.size - (nodes.length + skipped)) * rowHeight;
        break;
      }
    }
    if (this.isLoading) {
      var _this_loaderHeight;
      let rect = new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(0, y, this.virtualizer.visibleRect.width, (_this_loaderHeight = this.loaderHeight) !== null && _this_loaderHeight !== void 0 ? _this_loaderHeight : this.virtualizer.visibleRect.height);
      let loader = new (0, $d7fd61009c21d0bb$export$7e0eeb9da702a085)("loader", "loader", rect);
      this.layoutInfos.set("loader", loader);
      nodes.push({
        layoutInfo: loader
      });
      y = loader.rect.maxY;
    }
    if (nodes.length === 0) {
      var _this_placeholderHeight;
      let rect = new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(0, y, this.virtualizer.visibleRect.width, (_this_placeholderHeight = this.placeholderHeight) !== null && _this_placeholderHeight !== void 0 ? _this_placeholderHeight : this.virtualizer.visibleRect.height);
      let placeholder = new (0, $d7fd61009c21d0bb$export$7e0eeb9da702a085)("placeholder", "placeholder", rect);
      this.layoutInfos.set("placeholder", placeholder);
      nodes.push({
        layoutInfo: placeholder
      });
      y = placeholder.rect.maxY;
    }
    this.contentSize = new (0, $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec)(this.virtualizer.visibleRect.width, y + this.padding);
    return nodes;
  }
  isValid(node, y) {
    let cached = this.layoutNodes.get(node.key);
    return !this.invalidateEverything && cached && cached.node === node && y === (cached.header || cached.layoutInfo).rect.y && cached.layoutInfo.rect.intersects(this.lastValidRect) && cached.validRect.containsRect(cached.layoutInfo.rect.intersection(this.validRect));
  }
  buildChild(node, x2, y) {
    if (this.isValid(node, y))
      return this.layoutNodes.get(node.key);
    let layoutNode = this.buildNode(node, x2, y);
    layoutNode.node = node;
    var _node_parentKey;
    layoutNode.layoutInfo.parentKey = (_node_parentKey = node.parentKey) !== null && _node_parentKey !== void 0 ? _node_parentKey : null;
    this.layoutInfos.set(layoutNode.layoutInfo.key, layoutNode.layoutInfo);
    if (layoutNode.header)
      this.layoutInfos.set(layoutNode.header.key, layoutNode.header);
    this.layoutNodes.set(node.key, layoutNode);
    return layoutNode;
  }
  buildNode(node, x2, y) {
    switch (node.type) {
      case "section":
        return this.buildSection(node, x2, y);
      case "item":
        return this.buildItem(node, x2, y);
    }
  }
  buildSection(node, x2, y) {
    let width = this.virtualizer.visibleRect.width;
    let rectHeight = this.headingHeight;
    let isEstimated = false;
    if (rectHeight == null) {
      let previousLayoutNode = this.layoutNodes.get(node.key);
      if (previousLayoutNode && previousLayoutNode.header) {
        let curNode = this.collection.getItem(node.key);
        let lastNode = this.lastCollection ? this.lastCollection.getItem(node.key) : null;
        rectHeight = previousLayoutNode.header.rect.height;
        isEstimated = width !== this.lastWidth || curNode !== lastNode || previousLayoutNode.header.estimatedSize;
      } else {
        rectHeight = node.rendered ? this.estimatedHeadingHeight : 0;
        isEstimated = true;
      }
    }
    if (rectHeight == null)
      rectHeight = $61ef60fc9b1041f4$var$DEFAULT_HEIGHT;
    let headerRect = new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(0, y, width, rectHeight);
    let header = new (0, $d7fd61009c21d0bb$export$7e0eeb9da702a085)("header", node.key + ":header", headerRect);
    header.estimatedSize = isEstimated;
    header.parentKey = node.key;
    y += header.rect.height;
    let rect = new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(0, y, width, 0);
    let layoutInfo = new (0, $d7fd61009c21d0bb$export$7e0eeb9da702a085)(node.type, node.key, rect);
    let startY = y;
    let skipped = 0;
    let children = [];
    for (let child of (0, $c5a24bc478652b5f$export$1005530eda016c13)(node, this.collection)) {
      var _this_rowHeight;
      let rowHeight = (_this_rowHeight = this.rowHeight) !== null && _this_rowHeight !== void 0 ? _this_rowHeight : this.estimatedRowHeight;
      if (y + rowHeight < this.validRect.y && !this.isValid(node, y)) {
        y += rowHeight;
        skipped++;
        continue;
      }
      let layoutNode = this.buildChild(child, x2, y);
      y = layoutNode.layoutInfo.rect.maxY;
      children.push(layoutNode);
      if (y > this.validRect.maxY) {
        y += ([
          ...(0, $c5a24bc478652b5f$export$1005530eda016c13)(node, this.collection)
        ].length - (children.length + skipped)) * rowHeight;
        break;
      }
    }
    rect.height = y - startY;
    return {
      header,
      layoutInfo,
      children,
      validRect: layoutInfo.rect.intersection(this.validRect)
    };
  }
  buildItem(node, x2, y) {
    let width = this.virtualizer.visibleRect.width;
    let rectHeight = this.rowHeight;
    let isEstimated = false;
    if (rectHeight == null) {
      let previousLayoutNode = this.layoutNodes.get(node.key);
      if (previousLayoutNode) {
        rectHeight = previousLayoutNode.layoutInfo.rect.height;
        isEstimated = width !== this.lastWidth || node !== previousLayoutNode.node || previousLayoutNode.layoutInfo.estimatedSize;
      } else {
        rectHeight = this.estimatedRowHeight;
        isEstimated = true;
      }
    }
    if (rectHeight == null)
      rectHeight = $61ef60fc9b1041f4$var$DEFAULT_HEIGHT;
    if (typeof this.indentationForItem === "function")
      x2 += this.indentationForItem(this.collection, node.key) || 0;
    let rect = new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(x2, y, width - x2, rectHeight);
    let layoutInfo = new (0, $d7fd61009c21d0bb$export$7e0eeb9da702a085)(node.type, node.key, rect);
    layoutInfo.allowOverflow = true;
    layoutInfo.estimatedSize = isEstimated;
    return {
      layoutInfo,
      validRect: layoutInfo.rect
    };
  }
  updateItemSize(key, size) {
    let layoutInfo = this.layoutInfos.get(key);
    if (!layoutInfo)
      return false;
    layoutInfo.estimatedSize = false;
    if (layoutInfo.rect.height !== size.height) {
      let newLayoutInfo = layoutInfo.copy();
      newLayoutInfo.rect.height = size.height;
      this.layoutInfos.set(key, newLayoutInfo);
      this.updateLayoutNode(key, layoutInfo, newLayoutInfo);
      let node = this.collection.getItem(layoutInfo.parentKey);
      while (node) {
        this.updateLayoutNode(node.key, layoutInfo, newLayoutInfo);
        node = this.collection.getItem(node.parentKey);
      }
      return true;
    }
    return false;
  }
  updateLayoutNode(key, oldLayoutInfo, newLayoutInfo) {
    let n = this.layoutNodes.get(key);
    if (n) {
      n.validRect = new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)();
      if (n.header === oldLayoutInfo)
        n.header = newLayoutInfo;
      else if (n.layoutInfo === oldLayoutInfo)
        n.layoutInfo = newLayoutInfo;
    }
  }
  getContentSize() {
    return this.contentSize;
  }
  getKeyAbove(key) {
    let collection = this.collection;
    key = collection.getKeyBefore(key);
    while (key != null) {
      let item = collection.getItem(key);
      if (item.type === "item" && (this.allowDisabledKeyFocus || !this.disabledKeys.has(item.key)))
        return key;
      key = collection.getKeyBefore(key);
    }
  }
  getKeyBelow(key) {
    let collection = this.collection;
    key = collection.getKeyAfter(key);
    while (key != null) {
      let item = collection.getItem(key);
      if (item.type === "item" && (this.allowDisabledKeyFocus || !this.disabledKeys.has(item.key)))
        return key;
      key = collection.getKeyAfter(key);
    }
  }
  getKeyPageAbove(key) {
    let layoutInfo = this.getLayoutInfo(key);
    if (layoutInfo) {
      let pageY = Math.max(0, layoutInfo.rect.y + layoutInfo.rect.height - this.virtualizer.visibleRect.height);
      while (layoutInfo && layoutInfo.rect.y > pageY) {
        let keyAbove = this.getKeyAbove(layoutInfo.key);
        layoutInfo = this.getLayoutInfo(keyAbove);
      }
      if (layoutInfo)
        return layoutInfo.key;
    }
    return this.getFirstKey();
  }
  getKeyPageBelow(key) {
    let layoutInfo = this.getLayoutInfo(key != null ? key : this.getFirstKey());
    if (layoutInfo) {
      let pageY = Math.min(this.virtualizer.contentSize.height, layoutInfo.rect.y - layoutInfo.rect.height + this.virtualizer.visibleRect.height);
      while (layoutInfo && layoutInfo.rect.y < pageY) {
        let keyBelow = this.getKeyBelow(layoutInfo.key);
        layoutInfo = this.getLayoutInfo(keyBelow);
      }
      if (layoutInfo)
        return layoutInfo.key;
    }
    return this.getLastKey();
  }
  getFirstKey() {
    let collection = this.collection;
    let key = collection.getFirstKey();
    while (key != null) {
      let item = collection.getItem(key);
      if (item.type === "item" && (this.allowDisabledKeyFocus || !this.disabledKeys.has(item.key)))
        return key;
      key = collection.getKeyAfter(key);
    }
  }
  getLastKey() {
    let collection = this.collection;
    let key = collection.getLastKey();
    while (key != null) {
      let item = collection.getItem(key);
      if (item.type === "item" && (this.allowDisabledKeyFocus || !this.disabledKeys.has(item.key)))
        return key;
      key = collection.getKeyBefore(key);
    }
  }
  getKeyForSearch(search, fromKey) {
    if (!this.collator)
      return null;
    let collection = this.collection;
    let key = fromKey || this.getFirstKey();
    while (key != null) {
      let item = collection.getItem(key);
      let substring = item.textValue.slice(0, search.length);
      if (item.textValue && this.collator.compare(substring, search) === 0)
        return key;
      key = this.getKeyBelow(key);
    }
    return null;
  }
  getInitialLayoutInfo(layoutInfo) {
    layoutInfo.opacity = 0;
    layoutInfo.transform = "scale3d(0.8, 0.8, 0.8)";
    return layoutInfo;
  }
  getFinalLayoutInfo(layoutInfo) {
    layoutInfo.opacity = 0;
    layoutInfo.transform = "scale3d(0.8, 0.8, 0.8)";
    return layoutInfo;
  }
  getDropTargetFromPoint(x2, y, isValidDropTarget) {
    x2 += this.virtualizer.visibleRect.x;
    y += this.virtualizer.visibleRect.y;
    let key = this.virtualizer.keyAtPoint(new (0, $3041db3296945e6e$export$baf26146a414f24a)(x2, y));
    if (key == null || this.collection.size === 0)
      return {
        type: "root"
      };
    let layoutInfo = this.getLayoutInfo(key);
    let rect = layoutInfo.rect;
    let target = {
      type: "item",
      key: layoutInfo.key,
      dropPosition: "on"
    };
    if (!isValidDropTarget(target)) {
      if (y <= rect.y + rect.height / 2 && isValidDropTarget({
        ...target,
        dropPosition: "before"
      }))
        target.dropPosition = "before";
      else if (isValidDropTarget({
        ...target,
        dropPosition: "after"
      }))
        target.dropPosition = "after";
    } else if (y <= rect.y + 10 && isValidDropTarget({
      ...target,
      dropPosition: "before"
    }))
      target.dropPosition = "before";
    else if (y >= rect.maxY - 10 && isValidDropTarget({
      ...target,
      dropPosition: "after"
    }))
      target.dropPosition = "after";
    return target;
  }
  /**
  * Creates a new ListLayout with options. See the list of properties below for a description
  * of the options that can be provided.
  */
  constructor(options = {}) {
    super();
    this.disabledKeys = /* @__PURE__ */ new Set();
    this.allowDisabledKeyFocus = false;
    this.rowHeight = options.rowHeight;
    this.estimatedRowHeight = options.estimatedRowHeight;
    this.headingHeight = options.headingHeight;
    this.estimatedHeadingHeight = options.estimatedHeadingHeight;
    this.padding = options.padding || 0;
    this.indentationForItem = options.indentationForItem;
    this.collator = options.collator;
    this.loaderHeight = options.loaderHeight;
    this.placeholderHeight = options.placeholderHeight;
    this.layoutInfos = /* @__PURE__ */ new Map();
    this.layoutNodes = /* @__PURE__ */ new Map();
    this.rootNodes = [];
    this.lastWidth = 0;
    this.lastCollection = null;
    this.allowDisabledKeyFocus = options.allowDisabledKeyFocus;
    this.lastValidRect = new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)();
    this.validRect = new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)();
    this.contentSize = new (0, $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec)();
  }
};

// ../../node_modules/@react-spectrum/progress/dist/import.mjs
init_preact_min();

// ../../node_modules/@react-aria/progress/dist/import.mjs
function $204d9ebcedfb8806$export$ed5abd763a836edc(props) {
  let { value = 0, minValue = 0, maxValue = 100, valueLabel, isIndeterminate, formatOptions = {
    style: "percent"
  } } = props;
  let domProps = (0, $65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
    labelable: true
  });
  let { labelProps, fieldProps } = (0, $d191a55c9702f145$export$8467354a121f1b9f)({
    ...props,
    // Progress bar is not an HTML input element so it
    // shouldn't be labeled by a <label> element.
    labelElementType: "span"
  });
  value = (0, $9446cca9a3875146$export$7d15b64cf5a3a4c4)(value, minValue, maxValue);
  let percentage = (value - minValue) / (maxValue - minValue);
  let formatter = (0, $a916eb452884faea$export$b7a616150fdb9f44)(formatOptions);
  if (!isIndeterminate && !valueLabel) {
    let valueToFormat = formatOptions.style === "percent" ? percentage : value;
    valueLabel = formatter.format(valueToFormat);
  }
  return {
    progressBarProps: (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, {
      ...fieldProps,
      "aria-valuenow": isIndeterminate ? void 0 : value,
      "aria-valuemin": minValue,
      "aria-valuemax": maxValue,
      "aria-valuetext": isIndeterminate ? void 0 : valueLabel,
      role: "progressbar"
    }),
    labelProps
  };
}

// ../../node_modules/@react-spectrum/progress/dist/import.mjs
function $parcel$interopDefault11(a) {
  return a && a.__esModule ? a.default : a;
}
function $parcel$export9(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $a43f840f49ffbe32$exports = {};
$parcel$export9($a43f840f49ffbe32$exports, "spectrum-BarLoader", () => $a43f840f49ffbe32$export$162ba336fb0c239f, (v) => $a43f840f49ffbe32$export$162ba336fb0c239f = v);
$parcel$export9($a43f840f49ffbe32$exports, "spectrum-BarLoader--indeterminate", () => $a43f840f49ffbe32$export$1249dfbb98223794, (v) => $a43f840f49ffbe32$export$1249dfbb98223794 = v);
$parcel$export9($a43f840f49ffbe32$exports, "spectrum-BarLoader--sideLabel", () => $a43f840f49ffbe32$export$99af8802cc2a10dc, (v) => $a43f840f49ffbe32$export$99af8802cc2a10dc = v);
$parcel$export9($a43f840f49ffbe32$exports, "spectrum-BarLoader-track", () => $a43f840f49ffbe32$export$3e2e13fb57b5c74b, (v) => $a43f840f49ffbe32$export$3e2e13fb57b5c74b = v);
$parcel$export9($a43f840f49ffbe32$exports, "spectrum-BarLoader-fill", () => $a43f840f49ffbe32$export$84c9ee7bc724b71b, (v) => $a43f840f49ffbe32$export$84c9ee7bc724b71b = v);
$parcel$export9($a43f840f49ffbe32$exports, "spectrum-BarLoader-label", () => $a43f840f49ffbe32$export$5379ba198163be86, (v) => $a43f840f49ffbe32$export$5379ba198163be86 = v);
$parcel$export9($a43f840f49ffbe32$exports, "spectrum-BarLoader-percentage", () => $a43f840f49ffbe32$export$ecc9c825de9d1a18, (v) => $a43f840f49ffbe32$export$ecc9c825de9d1a18 = v);
$parcel$export9($a43f840f49ffbe32$exports, "spectrum-BarLoader--small", () => $a43f840f49ffbe32$export$b945305960ad74a7, (v) => $a43f840f49ffbe32$export$b945305960ad74a7 = v);
$parcel$export9($a43f840f49ffbe32$exports, "indeterminate-loop-ltr", () => $a43f840f49ffbe32$export$a889038a25113dd4, (v) => $a43f840f49ffbe32$export$a889038a25113dd4 = v);
$parcel$export9($a43f840f49ffbe32$exports, "indeterminate-loop-rtl", () => $a43f840f49ffbe32$export$aeff243cf3356f00, (v) => $a43f840f49ffbe32$export$aeff243cf3356f00 = v);
$parcel$export9($a43f840f49ffbe32$exports, "spectrum-BarLoader--overBackground", () => $a43f840f49ffbe32$export$55612d0bd9b5d41, (v) => $a43f840f49ffbe32$export$55612d0bd9b5d41 = v);
$parcel$export9($a43f840f49ffbe32$exports, "is-positive", () => $a43f840f49ffbe32$export$aea9fd919467f03a, (v) => $a43f840f49ffbe32$export$aea9fd919467f03a = v);
$parcel$export9($a43f840f49ffbe32$exports, "is-warning", () => $a43f840f49ffbe32$export$d4ebda6218901908, (v) => $a43f840f49ffbe32$export$d4ebda6218901908 = v);
$parcel$export9($a43f840f49ffbe32$exports, "is-critical", () => $a43f840f49ffbe32$export$a1f608a9810da50f, (v) => $a43f840f49ffbe32$export$a1f608a9810da50f = v);
var $a43f840f49ffbe32$export$162ba336fb0c239f;
var $a43f840f49ffbe32$export$1249dfbb98223794;
var $a43f840f49ffbe32$export$99af8802cc2a10dc;
var $a43f840f49ffbe32$export$3e2e13fb57b5c74b;
var $a43f840f49ffbe32$export$84c9ee7bc724b71b;
var $a43f840f49ffbe32$export$5379ba198163be86;
var $a43f840f49ffbe32$export$ecc9c825de9d1a18;
var $a43f840f49ffbe32$export$b945305960ad74a7;
var $a43f840f49ffbe32$export$a889038a25113dd4;
var $a43f840f49ffbe32$export$aeff243cf3356f00;
var $a43f840f49ffbe32$export$55612d0bd9b5d41;
var $a43f840f49ffbe32$export$aea9fd919467f03a;
var $a43f840f49ffbe32$export$d4ebda6218901908;
var $a43f840f49ffbe32$export$a1f608a9810da50f;
$a43f840f49ffbe32$export$162ba336fb0c239f = "spectrum-BarLoader_48541f";
$a43f840f49ffbe32$export$1249dfbb98223794 = "spectrum-BarLoader--indeterminate_48541f";
$a43f840f49ffbe32$export$99af8802cc2a10dc = "spectrum-BarLoader--sideLabel_48541f";
$a43f840f49ffbe32$export$3e2e13fb57b5c74b = "spectrum-BarLoader-track_48541f";
$a43f840f49ffbe32$export$84c9ee7bc724b71b = "spectrum-BarLoader-fill_48541f";
$a43f840f49ffbe32$export$5379ba198163be86 = "spectrum-BarLoader-label_48541f";
$a43f840f49ffbe32$export$ecc9c825de9d1a18 = "spectrum-BarLoader-percentage_48541f";
$a43f840f49ffbe32$export$b945305960ad74a7 = "spectrum-BarLoader--small_48541f";
$a43f840f49ffbe32$export$a889038a25113dd4 = "indeterminate-loop-ltr_48541f";
$a43f840f49ffbe32$export$aeff243cf3356f00 = "indeterminate-loop-rtl_48541f";
$a43f840f49ffbe32$export$55612d0bd9b5d41 = "spectrum-BarLoader--overBackground_48541f";
$a43f840f49ffbe32$export$aea9fd919467f03a = "is-positive_48541f";
$a43f840f49ffbe32$export$d4ebda6218901908 = "is-warning_48541f";
$a43f840f49ffbe32$export$a1f608a9810da50f = "is-critical_48541f";
function $ddf9337e928b5fe6$var$ProgressBarBase(props, ref) {
  let { value = 0, minValue = 0, maxValue = 100, size = "L", label, barClassName, showValueLabel = !!label, labelPosition = "top", isIndeterminate = false, barProps, labelProps, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, ...otherProps } = props;
  let domRef = (0, $98e5a8ae0e6415af$export$c2c55ef9111cafd8)(ref);
  let { styleProps } = (0, $380ed8f3903c3931$export$b8e6fb9d2dff3f41)(otherProps);
  value = (0, $9446cca9a3875146$export$7d15b64cf5a3a4c4)(value, minValue, maxValue);
  let barStyle = {};
  if (!isIndeterminate) {
    let percentage = (value - minValue) / (maxValue - minValue);
    barStyle.width = `${Math.round(percentage * 100)}%`;
  }
  if (!label && !ariaLabel && !ariaLabelledby)
    console.warn("If you do not provide a visible label via children, you must specify an aria-label or aria-labelledby attribute for accessibility");
  return /* @__PURE__ */ (0, yn).createElement("div", {
    ...barProps,
    ref: domRef,
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault11($a43f840f49ffbe32$exports)), "spectrum-BarLoader", {
      "spectrum-BarLoader--small": size === "S",
      "spectrum-BarLoader--large": size === "L",
      "spectrum-BarLoader--indeterminate": isIndeterminate,
      "spectrum-BarLoader--sideLabel": labelPosition === "side"
    }, barClassName, styleProps.className),
    style: {
      minWidth: "-moz-fit-content",
      ...styleProps.style
    }
  }, label && /* @__PURE__ */ (0, yn).createElement("span", {
    ...labelProps,
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault11($a43f840f49ffbe32$exports)), "spectrum-BarLoader-label")
  }, label), showValueLabel && /* @__PURE__ */ (0, yn).createElement("div", {
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault11($a43f840f49ffbe32$exports)), "spectrum-BarLoader-percentage")
  }, barProps["aria-valuetext"]), /* @__PURE__ */ (0, yn).createElement("div", {
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault11($a43f840f49ffbe32$exports)), "spectrum-BarLoader-track")
  }, /* @__PURE__ */ (0, yn).createElement("div", {
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault11($a43f840f49ffbe32$exports)), "spectrum-BarLoader-fill"),
    style: barStyle
  })));
}
var $ddf9337e928b5fe6$export$7c6ed87244065f3a = /* @__PURE__ */ (0, yn).forwardRef($ddf9337e928b5fe6$var$ProgressBarBase);
function $551ca31cb687f352$var$ProgressBar(props, ref) {
  let { variant, ...otherProps } = props;
  const { progressBarProps, labelProps } = (0, $204d9ebcedfb8806$export$ed5abd763a836edc)(props);
  return /* @__PURE__ */ (0, yn).createElement((0, $ddf9337e928b5fe6$export$7c6ed87244065f3a), {
    ...otherProps,
    ref,
    barProps: progressBarProps,
    labelProps,
    barClassName: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault11($a43f840f49ffbe32$exports)), {
      "spectrum-BarLoader--overBackground": variant === "overBackground"
    })
  });
}
var $551ca31cb687f352$export$c17561cb55d4db30 = /* @__PURE__ */ (0, yn).forwardRef($551ca31cb687f352$var$ProgressBar);
var $91c958cb2e66ca21$exports = {};
$parcel$export9($91c958cb2e66ca21$exports, "spectrum-CircleLoader--indeterminate-fill-submask-2", () => $91c958cb2e66ca21$export$f7083dbeadcbb2bd, (v) => $91c958cb2e66ca21$export$f7083dbeadcbb2bd = v);
$parcel$export9($91c958cb2e66ca21$exports, "spectrum-fill-mask-2", () => $91c958cb2e66ca21$export$7219832bea80eb54, (v) => $91c958cb2e66ca21$export$7219832bea80eb54 = v);
$parcel$export9($91c958cb2e66ca21$exports, "spectrum-CircleLoader", () => $91c958cb2e66ca21$export$9633d311d6d6830b, (v) => $91c958cb2e66ca21$export$9633d311d6d6830b = v);
$parcel$export9($91c958cb2e66ca21$exports, "spectrum-CircleLoader-track", () => $91c958cb2e66ca21$export$278efdb85ed802da, (v) => $91c958cb2e66ca21$export$278efdb85ed802da = v);
$parcel$export9($91c958cb2e66ca21$exports, "spectrum-CircleLoader-fills", () => $91c958cb2e66ca21$export$3038f4c0c86f539b, (v) => $91c958cb2e66ca21$export$3038f4c0c86f539b = v);
$parcel$export9($91c958cb2e66ca21$exports, "spectrum-CircleLoader-fill", () => $91c958cb2e66ca21$export$58fb9ac68cf8e784, (v) => $91c958cb2e66ca21$export$58fb9ac68cf8e784 = v);
$parcel$export9($91c958cb2e66ca21$exports, "spectrum-CircleLoader-fillMask1", () => $91c958cb2e66ca21$export$b676cd958401a736, (v) => $91c958cb2e66ca21$export$b676cd958401a736 = v);
$parcel$export9($91c958cb2e66ca21$exports, "spectrum-CircleLoader-fillMask2", () => $91c958cb2e66ca21$export$8c428f4f13e424b, (v) => $91c958cb2e66ca21$export$8c428f4f13e424b = v);
$parcel$export9($91c958cb2e66ca21$exports, "spectrum-CircleLoader-fillSubMask1", () => $91c958cb2e66ca21$export$98ba5ef650aeb8ca, (v) => $91c958cb2e66ca21$export$98ba5ef650aeb8ca = v);
$parcel$export9($91c958cb2e66ca21$exports, "spectrum-CircleLoader-fillSubMask2", () => $91c958cb2e66ca21$export$dc70b48c897b0f1a, (v) => $91c958cb2e66ca21$export$dc70b48c897b0f1a = v);
$parcel$export9($91c958cb2e66ca21$exports, "spectrum-CircleLoader--small", () => $91c958cb2e66ca21$export$79819ab9844dbe9b, (v) => $91c958cb2e66ca21$export$79819ab9844dbe9b = v);
$parcel$export9($91c958cb2e66ca21$exports, "spectrum-CircleLoader--large", () => $91c958cb2e66ca21$export$c8c34e5e37bf511c, (v) => $91c958cb2e66ca21$export$c8c34e5e37bf511c = v);
$parcel$export9($91c958cb2e66ca21$exports, "spectrum-CircleLoader--indeterminate", () => $91c958cb2e66ca21$export$79b7e5abeef5134f, (v) => $91c958cb2e66ca21$export$79b7e5abeef5134f = v);
$parcel$export9($91c958cb2e66ca21$exports, "spectrum-fills-rotate", () => $91c958cb2e66ca21$export$3663cbdb240663ec, (v) => $91c958cb2e66ca21$export$3663cbdb240663ec = v);
$parcel$export9($91c958cb2e66ca21$exports, "spectrum-fill-mask-1", () => $91c958cb2e66ca21$export$524c81e63e1d64f5, (v) => $91c958cb2e66ca21$export$524c81e63e1d64f5 = v);
$parcel$export9($91c958cb2e66ca21$exports, "spectrum-CircleLoader--overBackground", () => $91c958cb2e66ca21$export$6668708cb539f403, (v) => $91c958cb2e66ca21$export$6668708cb539f403 = v);
var $91c958cb2e66ca21$export$f7083dbeadcbb2bd;
var $91c958cb2e66ca21$export$7219832bea80eb54;
var $91c958cb2e66ca21$export$9633d311d6d6830b;
var $91c958cb2e66ca21$export$278efdb85ed802da;
var $91c958cb2e66ca21$export$3038f4c0c86f539b;
var $91c958cb2e66ca21$export$58fb9ac68cf8e784;
var $91c958cb2e66ca21$export$b676cd958401a736;
var $91c958cb2e66ca21$export$8c428f4f13e424b;
var $91c958cb2e66ca21$export$98ba5ef650aeb8ca;
var $91c958cb2e66ca21$export$dc70b48c897b0f1a;
var $91c958cb2e66ca21$export$79819ab9844dbe9b;
var $91c958cb2e66ca21$export$c8c34e5e37bf511c;
var $91c958cb2e66ca21$export$79b7e5abeef5134f;
var $91c958cb2e66ca21$export$3663cbdb240663ec;
var $91c958cb2e66ca21$export$524c81e63e1d64f5;
var $91c958cb2e66ca21$export$6668708cb539f403;
$91c958cb2e66ca21$export$f7083dbeadcbb2bd = "spectrum-CircleLoader--indeterminate-fill-submask-2_7c1153";
$91c958cb2e66ca21$export$7219832bea80eb54 = "spectrum-fill-mask-2_7c1153";
$91c958cb2e66ca21$export$9633d311d6d6830b = "spectrum-CircleLoader_7c1153";
$91c958cb2e66ca21$export$278efdb85ed802da = "spectrum-CircleLoader-track_7c1153";
$91c958cb2e66ca21$export$3038f4c0c86f539b = "spectrum-CircleLoader-fills_7c1153";
$91c958cb2e66ca21$export$58fb9ac68cf8e784 = "spectrum-CircleLoader-fill_7c1153";
$91c958cb2e66ca21$export$b676cd958401a736 = "spectrum-CircleLoader-fillMask1_7c1153";
$91c958cb2e66ca21$export$8c428f4f13e424b = "spectrum-CircleLoader-fillMask2_7c1153";
$91c958cb2e66ca21$export$98ba5ef650aeb8ca = "spectrum-CircleLoader-fillSubMask1_7c1153";
$91c958cb2e66ca21$export$dc70b48c897b0f1a = "spectrum-CircleLoader-fillSubMask2_7c1153";
$91c958cb2e66ca21$export$79819ab9844dbe9b = "spectrum-CircleLoader--small_7c1153";
$91c958cb2e66ca21$export$c8c34e5e37bf511c = "spectrum-CircleLoader--large_7c1153";
$91c958cb2e66ca21$export$79b7e5abeef5134f = "spectrum-CircleLoader--indeterminate_7c1153";
$91c958cb2e66ca21$export$3663cbdb240663ec = "spectrum-fills-rotate_7c1153";
$91c958cb2e66ca21$export$524c81e63e1d64f5 = "spectrum-fill-mask-1_7c1153";
$91c958cb2e66ca21$export$6668708cb539f403 = "spectrum-CircleLoader--overBackground_7c1153";
function $79c16f64960b6385$var$ProgressCircle(props, ref) {
  let { value = 0, minValue = 0, maxValue = 100, size = "M", variant, isIndeterminate = false, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, ...otherProps } = props;
  let domRef = (0, $98e5a8ae0e6415af$export$c2c55ef9111cafd8)(ref);
  let { styleProps } = (0, $380ed8f3903c3931$export$b8e6fb9d2dff3f41)(otherProps);
  value = (0, $9446cca9a3875146$export$7d15b64cf5a3a4c4)(value, minValue, maxValue);
  let { progressBarProps } = (0, $204d9ebcedfb8806$export$ed5abd763a836edc)({
    ...props,
    value
  });
  let subMask1Style = {};
  let subMask2Style = {};
  if (!isIndeterminate) {
    let percentage = (value - minValue) / (maxValue - minValue) * 100;
    let angle;
    if (percentage > 0 && percentage <= 50) {
      angle = -180 + percentage / 50 * 180;
      subMask1Style.transform = `rotate(${angle}deg)`;
      subMask2Style.transform = "rotate(-180deg)";
    } else if (percentage > 50) {
      angle = -180 + (percentage - 50) / 50 * 180;
      subMask1Style.transform = "rotate(0deg)";
      subMask2Style.transform = `rotate(${angle}deg)`;
    }
  }
  if (!ariaLabel && !ariaLabelledby)
    console.warn("ProgressCircle requires an aria-label or aria-labelledby attribute for accessibility");
  return /* @__PURE__ */ (0, yn).createElement("div", {
    ...styleProps,
    ...progressBarProps,
    ref: domRef,
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault11($91c958cb2e66ca21$exports)), "spectrum-CircleLoader", {
      "spectrum-CircleLoader--indeterminate": isIndeterminate,
      "spectrum-CircleLoader--small": size === "S",
      "spectrum-CircleLoader--large": size === "L",
      "spectrum-CircleLoader--overBackground": variant === "overBackground"
    }, styleProps.className)
  }, /* @__PURE__ */ (0, yn).createElement("div", {
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault11($91c958cb2e66ca21$exports)), "spectrum-CircleLoader-track")
  }), /* @__PURE__ */ (0, yn).createElement("div", {
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault11($91c958cb2e66ca21$exports)), "spectrum-CircleLoader-fills")
  }, /* @__PURE__ */ (0, yn).createElement("div", {
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault11($91c958cb2e66ca21$exports)), "spectrum-CircleLoader-fillMask1")
  }, /* @__PURE__ */ (0, yn).createElement("div", {
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault11($91c958cb2e66ca21$exports)), "spectrum-CircleLoader-fillSubMask1"),
    "data-testid": "fillSubMask1",
    style: subMask1Style
  }, /* @__PURE__ */ (0, yn).createElement("div", {
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault11($91c958cb2e66ca21$exports)), "spectrum-CircleLoader-fill")
  }))), /* @__PURE__ */ (0, yn).createElement("div", {
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault11($91c958cb2e66ca21$exports)), "spectrum-CircleLoader-fillMask2")
  }, /* @__PURE__ */ (0, yn).createElement("div", {
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault11($91c958cb2e66ca21$exports)), "spectrum-CircleLoader-fillSubMask2"),
    "data-testid": "fillSubMask2",
    style: subMask2Style
  }, /* @__PURE__ */ (0, yn).createElement("div", {
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault11($91c958cb2e66ca21$exports)), "spectrum-CircleLoader-fill")
  })))));
}
var $79c16f64960b6385$export$c79b9d6b4cc92af7 = /* @__PURE__ */ (0, yn).forwardRef($79c16f64960b6385$var$ProgressCircle);

// ../../node_modules/@react-aria/virtualizer/dist/import.mjs
init_preact_min();
init_preact_min();
var $ce415dc67314b753$var$cachedRTLResult = null;
function $ce415dc67314b753$export$faf7630257ad4304(recalculate = false) {
  if ($ce415dc67314b753$var$cachedRTLResult === null || recalculate) {
    const outerDiv = document.createElement("div");
    const outerStyle = outerDiv.style;
    outerStyle.width = "50px";
    outerStyle.height = "50px";
    outerStyle.overflow = "scroll";
    outerStyle.direction = "rtl";
    const innerDiv = document.createElement("div");
    const innerStyle = innerDiv.style;
    innerStyle.width = "100px";
    innerStyle.height = "100px";
    outerDiv.appendChild(innerDiv);
    document.body.appendChild(outerDiv);
    if (outerDiv.scrollLeft > 0)
      $ce415dc67314b753$var$cachedRTLResult = "positive-descending";
    else {
      outerDiv.scrollLeft = 1;
      if (outerDiv.scrollLeft === 0)
        $ce415dc67314b753$var$cachedRTLResult = "negative";
      else
        $ce415dc67314b753$var$cachedRTLResult = "positive-ascending";
    }
    document.body.removeChild(outerDiv);
    return $ce415dc67314b753$var$cachedRTLResult;
  }
  return $ce415dc67314b753$var$cachedRTLResult;
}
function $ce415dc67314b753$export$1389d168952b34b5(node, direction) {
  let { scrollLeft } = node;
  if (direction === "rtl") {
    let { scrollWidth, clientWidth } = node;
    switch ($ce415dc67314b753$export$faf7630257ad4304()) {
      case "negative":
        scrollLeft = -scrollLeft;
        break;
      case "positive-descending":
        scrollLeft = scrollWidth - clientWidth - scrollLeft;
        break;
    }
  }
  return scrollLeft;
}
function $44a6ee657928b002$var$ScrollView(props, ref) {
  let { contentSize, onVisibleRectChange, children, innerStyle, sizeToFit, onScrollStart, onScrollEnd, scrollDirection = "both", ...otherProps } = props;
  let defaultRef = (0, ie)();
  ref = ref || defaultRef;
  let state = (0, ie)({
    scrollTop: 0,
    scrollLeft: 0,
    scrollEndTime: 0,
    scrollTimeout: null,
    width: 0,
    height: 0,
    isScrolling: false
  }).current;
  let { direction } = (0, $18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  let [isScrolling, setScrolling] = (0, z)(false);
  let onScroll = (0, ae)((e) => {
    if (e.target !== e.currentTarget)
      return;
    if (props.onScroll)
      props.onScroll(e);
    (0, Ie)(() => {
      let scrollTop = e.currentTarget.scrollTop;
      let scrollLeft = (0, $ce415dc67314b753$export$1389d168952b34b5)(e.currentTarget, direction);
      state.scrollTop = Math.max(0, Math.min(scrollTop, contentSize.height - state.height));
      state.scrollLeft = Math.max(0, Math.min(scrollLeft, contentSize.width - state.width));
      onVisibleRectChange(new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(state.scrollLeft, state.scrollTop, state.width, state.height));
      if (!state.isScrolling) {
        state.isScrolling = true;
        setScrolling(true);
        if (onScrollStart)
          onScrollStart();
      }
      let now = Date.now();
      if (state.scrollEndTime <= now + 50) {
        state.scrollEndTime = now + 300;
        clearTimeout(state.scrollTimeout);
        state.scrollTimeout = setTimeout(() => {
          state.isScrolling = false;
          setScrolling(false);
          state.scrollTimeout = null;
          if (onScrollEnd)
            onScrollEnd();
        }, 300);
      }
    });
  }, [
    props,
    direction,
    state,
    contentSize,
    onVisibleRectChange,
    onScrollStart,
    onScrollEnd
  ]);
  (0, K)(() => {
    return () => {
      clearTimeout(state.scrollTimeout);
    };
  }, []);
  let updateSize = (0, ae)(() => {
    let dom = ref.current;
    if (!dom)
      return;
    let w2 = dom.clientWidth;
    let h = dom.clientHeight;
    if (sizeToFit && contentSize.width > 0 && contentSize.height > 0) {
      if (sizeToFit === "width")
        w2 = Math.min(w2, contentSize.width);
      else if (sizeToFit === "height")
        h = Math.min(h, contentSize.height);
    }
    if (state.width !== w2 || state.height !== h) {
      state.width = w2;
      state.height = h;
      onVisibleRectChange(new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(state.scrollLeft, state.scrollTop, w2, h));
    }
  }, [
    onVisibleRectChange,
    ref,
    state,
    sizeToFit,
    contentSize
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    updateSize();
  }, [
    updateSize
  ]);
  (0, $9daab02d461809db$export$683480f191c0e3ea)({
    ref,
    onResize: updateSize
  });
  let style = {
    // Reset padding so that relative positioning works correctly. Padding will be done in JS layout.
    padding: 0,
    ...otherProps.style
  };
  if (scrollDirection === "horizontal") {
    style.overflowX = "auto";
    style.overflowY = "hidden";
  } else if (scrollDirection === "vertical") {
    style.overflowY = "auto";
    style.overflowX = "hidden";
  } else
    style.overflow = "auto";
  return /* @__PURE__ */ (0, yn).createElement("div", {
    ...otherProps,
    style,
    ref,
    onScroll
  }, /* @__PURE__ */ (0, yn).createElement("div", {
    role: "presentation",
    style: {
      width: contentSize.width,
      height: contentSize.height,
      pointerEvents: isScrolling ? "none" : "auto",
      position: "relative",
      ...innerStyle
    }
  }, children));
}
var $44a6ee657928b002$export$5665e3d6be6adea = /* @__PURE__ */ (0, yn).forwardRef($44a6ee657928b002$var$ScrollView);
function $47736c1e63ba1c6d$export$1da781778207e0a2(options) {
  let { layoutInfo, virtualizer, ref } = options;
  let updateSize = (0, ae)(() => {
    let size = $47736c1e63ba1c6d$var$getSize(ref.current);
    virtualizer.updateItemSize(layoutInfo.key, size);
  }, [
    virtualizer,
    layoutInfo.key,
    ref
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (layoutInfo.estimatedSize)
      updateSize();
  });
  return {
    updateSize
  };
}
function $47736c1e63ba1c6d$var$getSize(node) {
  let height = node.style.height;
  node.style.height = "";
  let size = new (0, $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec)(node.scrollWidth, node.scrollHeight);
  node.style.height = height;
  return size;
}
function $ccf8a0a04e4175ae$export$6796df8ba7398521(props) {
  let { className, layoutInfo, virtualizer, parent, children } = props;
  let { direction } = (0, $18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  let ref = (0, ie)();
  (0, $47736c1e63ba1c6d$export$1da781778207e0a2)({
    layoutInfo,
    virtualizer,
    ref
  });
  return /* @__PURE__ */ (0, yn).createElement("div", {
    role: "presentation",
    ref,
    className,
    style: $ccf8a0a04e4175ae$export$1481e64fbe01b8b3(layoutInfo, direction, parent)
  }, children);
}
var $ccf8a0a04e4175ae$var$cache = /* @__PURE__ */ new WeakMap();
function $ccf8a0a04e4175ae$export$1481e64fbe01b8b3(layoutInfo, dir, parent) {
  let xProperty = dir === "rtl" ? "right" : "left";
  let cached = $ccf8a0a04e4175ae$var$cache.get(layoutInfo);
  if (cached && cached[xProperty] != null) {
    if (!parent)
      return cached;
    let top = layoutInfo.rect.y - parent.rect.y;
    let x2 = layoutInfo.rect.x - parent.rect.x;
    if (cached.top === top && cached[xProperty] === x2)
      return cached;
  }
  let style = {
    position: layoutInfo.isSticky ? "sticky" : "absolute",
    // Sticky elements are positioned in normal document flow. Display inline-block so that they don't push other sticky columns onto the following rows.
    display: layoutInfo.isSticky ? "inline-block" : void 0,
    overflow: layoutInfo.allowOverflow ? "visible" : "hidden",
    top: layoutInfo.rect.y - (parent ? parent.rect.y : 0),
    [xProperty]: layoutInfo.rect.x - (parent ? parent.rect.x : 0),
    transition: "all",
    WebkitTransition: "all",
    WebkitTransitionDuration: "inherit",
    transitionDuration: "inherit",
    width: layoutInfo.rect.width,
    height: layoutInfo.rect.height,
    opacity: layoutInfo.opacity,
    zIndex: layoutInfo.zIndex,
    transform: layoutInfo.transform,
    contain: "size layout style"
  };
  $ccf8a0a04e4175ae$var$cache.set(layoutInfo, style);
  return style;
}
function $6d0a5c394373ae64$var$Virtualizer(props, ref) {
  let { children: renderView, renderWrapper, layout, collection, sizeToFit, scrollDirection, transitionDuration, isLoading, onLoadMore, focusedKey, shouldUseVirtualFocus, scrollToItem, autoFocus, ...otherProps } = props;
  let fallbackRef = (0, ie)();
  ref = ref || fallbackRef;
  let state = (0, $fc0b13b484ac1194$export$1505db82fe357e65)({
    transitionDuration,
    layout,
    collection,
    renderView,
    renderWrapper: renderWrapper || $6d0a5c394373ae64$var$defaultRenderWrapper,
    onVisibleRectChange(rect) {
      ref.current.scrollLeft = rect.x;
      ref.current.scrollTop = rect.y;
    }
  });
  let { virtualizerProps, scrollViewProps } = $6d0a5c394373ae64$export$dd6d526d88b5a137(props, state, ref);
  return /* @__PURE__ */ (0, yn).createElement((0, $44a6ee657928b002$export$5665e3d6be6adea), {
    ...(0, $3ef42575df84b30b$export$9d1611c77c2fe928)(otherProps, virtualizerProps, scrollViewProps),
    ref,
    innerStyle: state.isAnimating ? {
      transition: `none ${state.virtualizer.transitionDuration}ms`
    } : void 0,
    contentSize: state.contentSize,
    onScrollStart: state.startScrolling,
    onScrollEnd: state.endScrolling,
    sizeToFit,
    scrollDirection
  }, state.visibleViews);
}
function $6d0a5c394373ae64$export$dd6d526d88b5a137(props, state, ref) {
  let { focusedKey, scrollToItem, shouldUseVirtualFocus, isLoading, onLoadMore } = props;
  let { virtualizer } = state;
  let lastFocusedKey = (0, ie)(null);
  let isFocusWithin = (0, ie)(false);
  let autoFocus = (0, ie)(props.autoFocus);
  (0, K)(() => {
    if (virtualizer.visibleRect.height === 0)
      return;
    let modality = (0, $507fabe10e71c6fb$export$630ff653c5ada6a9)();
    if (focusedKey !== lastFocusedKey.current && (modality !== "pointer" || autoFocus.current)) {
      autoFocus.current = false;
      if (scrollToItem)
        scrollToItem(focusedKey);
      else
        virtualizer.scrollToItem(focusedKey, {
          duration: 0
        });
    }
    lastFocusedKey.current = focusedKey;
  }, [
    focusedKey,
    virtualizer.visibleRect.height,
    virtualizer,
    lastFocusedKey,
    scrollToItem,
    ref
  ]);
  virtualizer.persistedKeys = (0, j)(() => focusedKey ? /* @__PURE__ */ new Set([
    focusedKey
  ]) : /* @__PURE__ */ new Set(), [
    focusedKey
  ]);
  let onFocus = (0, ae)((e) => {
    let modality = (0, $507fabe10e71c6fb$export$630ff653c5ada6a9)();
    if (!isFocusWithin.current && ref.current.contains(e.target) && modality !== "pointer") {
      if (scrollToItem)
        scrollToItem(focusedKey);
      else
        virtualizer.scrollToItem(focusedKey, {
          duration: 0
        });
    }
    isFocusWithin.current = e.target !== ref.current;
  }, [
    ref,
    virtualizer,
    focusedKey,
    scrollToItem
  ]);
  let onBlur = (0, ae)((e) => {
    isFocusWithin.current = ref.current.contains(e.relatedTarget);
  }, [
    ref
  ]);
  let tabIndex;
  if (!shouldUseVirtualFocus) {
    tabIndex = focusedKey != null ? -1 : 0;
    if (virtualizer.collection.size === 0 && props.tabIndex != null)
      tabIndex = props.tabIndex;
  }
  let isLoadingRef = (0, ie)(isLoading);
  let prevProps = (0, ie)(props);
  let onVisibleRectChange = (0, ae)((rect) => {
    state.setVisibleRect(rect);
    if (!isLoadingRef.current && onLoadMore) {
      let scrollOffset = state.virtualizer.contentSize.height - rect.height * 2;
      if (rect.y > scrollOffset) {
        isLoadingRef.current = true;
        onLoadMore();
      }
    }
  }, [
    onLoadMore,
    state
  ]);
  let lastContentSize = (0, ie)(0);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (state.isAnimating)
      return;
    let wasLoading = isLoadingRef.current;
    if (props !== prevProps.current) {
      isLoadingRef.current = isLoading;
      prevProps.current = props;
    }
    let shouldLoadMore = !isLoadingRef.current && onLoadMore && state.contentSize.height > 0 && state.contentSize.height <= state.virtualizer.visibleRect.height && (wasLoading || state.contentSize.height !== lastContentSize.current);
    if (shouldLoadMore) {
      isLoadingRef.current = true;
      onLoadMore();
    }
    lastContentSize.current = state.contentSize.height;
  }, [
    state.contentSize,
    state.isAnimating,
    state.virtualizer,
    isLoading,
    onLoadMore,
    props
  ]);
  return {
    virtualizerProps: {
      tabIndex,
      onFocus,
      onBlur
    },
    scrollViewProps: {
      onVisibleRectChange
    }
  };
}
var $6d0a5c394373ae64$export$89be5a243e59c4b2 = /* @__PURE__ */ (0, yn).forwardRef($6d0a5c394373ae64$var$Virtualizer);
function $6d0a5c394373ae64$var$defaultRenderWrapper(parent, reusableView) {
  return /* @__PURE__ */ (0, yn).createElement((0, $ccf8a0a04e4175ae$export$6796df8ba7398521), {
    key: reusableView.key,
    layoutInfo: reusableView.layoutInfo,
    virtualizer: reusableView.virtualizer,
    parent: parent === null || parent === void 0 ? void 0 : parent.layoutInfo
  }, reusableView.rendered);
}

// ../../node_modules/@react-spectrum/listbox/dist/import.mjs
function $parcel$interopDefault12(a) {
  return a && a.__esModule ? a.default : a;
}
function $parcel$export10(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $0815878b47e2c7ae$exports = {};
var $067dbd0c037ad155$exports = {};
$067dbd0c037ad155$exports = {
  "loading": `\u062C\u0627\u0631\u064D \u0627\u0644\u062A\u062D\u0645\u064A\u0644...`,
  "loadingMore": `\u062C\u0627\u0631\u064D \u062A\u062D\u0645\u064A\u0644 \u0627\u0644\u0645\u0632\u064A\u062F...`
};
var $6ee4da2747de1e02$exports = {};
$6ee4da2747de1e02$exports = {
  "loading": `\u0417\u0430\u0440\u0435\u0436\u0434\u0430\u043D\u0435...`,
  "loadingMore": `\u0417\u0430\u0440\u0435\u0436\u0434\u0430\u043D\u0435 \u043D\u0430 \u043E\u0449\u0435...`
};
var $b58a7d965b7aa1b3$exports = {};
$b58a7d965b7aa1b3$exports = {
  "loading": `Na\u010D\xEDt\xE1n\xED...`,
  "loadingMore": `Na\u010D\xEDt\xE1n\xED dal\u0161\xEDch...`
};
var $ecaca51f024191b0$exports = {};
$ecaca51f024191b0$exports = {
  "loading": `Indl\xE6ser ...`,
  "loadingMore": `Indl\xE6ser flere ...`
};
var $6e434aa373f128b4$exports = {};
$6e434aa373f128b4$exports = {
  "loading": `Laden...`,
  "loadingMore": `Mehr laden ...`
};
var $ddbe45fb199df913$exports = {};
$ddbe45fb199df913$exports = {
  "loading": `\u03A6\u03CC\u03C1\u03C4\u03C9\u03C3\u03B7...`,
  "loadingMore": `\u03A6\u03CC\u03C1\u03C4\u03C9\u03C3\u03B7 \u03C0\u03B5\u03C1\u03B9\u03C3\u03C3\u03CC\u03C4\u03B5\u03C1\u03C9\u03BD...`
};
var $2083b83b84266bb4$exports = {};
$2083b83b84266bb4$exports = {
  "loading": `Loading\u2026`,
  "loadingMore": `Loading more\u2026`
};
var $a41434a97f5222d7$exports = {};
$a41434a97f5222d7$exports = {
  "loading": `Cargando\u2026`,
  "loadingMore": `Cargando m\xE1s\u2026`
};
var $0a1b42c97638052f$exports = {};
$0a1b42c97638052f$exports = {
  "loading": `Laadimine...`,
  "loadingMore": `Laadi rohkem...`
};
var $177331a39d162ddc$exports = {};
$177331a39d162ddc$exports = {
  "loading": `Ladataan\u2026`,
  "loadingMore": `Ladataan lis\xE4\xE4\u2026`
};
var $273b1d5ecf07fe52$exports = {};
$273b1d5ecf07fe52$exports = {
  "loading": `Chargement...`,
  "loadingMore": `Chargement suppl\xE9mentaire...`
};
var $459441d19cfa90a8$exports = {};
$459441d19cfa90a8$exports = {
  "loading": `\u05D8\u05D5\u05E2\u05DF...`,
  "loadingMore": `\u05D8\u05D5\u05E2\u05DF \u05E2\u05D5\u05D3...`
};
var $c30474fbd65b2878$exports = {};
$c30474fbd65b2878$exports = {
  "loading": `U\u010Ditavam...`,
  "loadingMore": `U\u010Ditavam jo\u0161...`
};
var $fd19cc1d41a750e5$exports = {};
$fd19cc1d41a750e5$exports = {
  "loading": `Bet\xF6lt\xE9s folyamatban\u2026`,
  "loadingMore": `Tov\xE1bbiak bet\xF6lt\xE9se folyamatban\u2026`
};
var $158d0aece262406d$exports = {};
$158d0aece262406d$exports = {
  "loading": `Caricamento...`,
  "loadingMore": `Caricamento altri...`
};
var $bc830316669a23f8$exports = {};
$bc830316669a23f8$exports = {
  "loading": `\u8AAD\u307F\u8FBC\u307F\u4E2D...`,
  "loadingMore": `\u3055\u3089\u306B\u8AAD\u307F\u8FBC\u307F\u4E2D...`
};
var $7fa23663d4de476d$exports = {};
$7fa23663d4de476d$exports = {
  "loading": `\uB85C\uB4DC \uC911`,
  "loadingMore": `\uCD94\uAC00 \uB85C\uB4DC \uC911`
};
var $827e42814bc8f58e$exports = {};
$827e42814bc8f58e$exports = {
  "loading": `\u012Ekeliama...`,
  "loadingMore": `\u012Ekeliama daugiau...`
};
var $6ca653959481d2db$exports = {};
$6ca653959481d2db$exports = {
  "loading": `Notiek iel\u0101de...`,
  "loadingMore": `Tiek iel\u0101d\u0113ts v\u0113l...`
};
var $9efb74877777657a$exports = {};
$9efb74877777657a$exports = {
  "loading": `Laster inn ...`,
  "loadingMore": `Laster inn flere ...`
};
var $d085d780952864a7$exports = {};
$d085d780952864a7$exports = {
  "loading": `Laden...`,
  "loadingMore": `Meer laden...`
};
var $c207a8811c9791e9$exports = {};
$c207a8811c9791e9$exports = {
  "loading": `\u0141adowanie...`,
  "loadingMore": `Wczytywanie wi\u0119kszej liczby...`
};
var $eda3511d3b2e0e51$exports = {};
$eda3511d3b2e0e51$exports = {
  "loading": `Carregando...`,
  "loadingMore": `Carregando mais...`
};
var $a9c1da319e5254cb$exports = {};
$a9c1da319e5254cb$exports = {
  "loading": `A carregar...`,
  "loadingMore": `A carregar mais...`
};
var $bc5c688ddc9e69fb$exports = {};
$bc5c688ddc9e69fb$exports = {
  "loading": `Se \xEEncarc\u0103...`,
  "loadingMore": `Se \xEEncarc\u0103 mai multe...`
};
var $84ec40785c299370$exports = {};
$84ec40785c299370$exports = {
  "loading": `\u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430...`,
  "loadingMore": `\u0414\u043E\u043F\u043E\u043B\u043D\u0438\u0442\u0435\u043B\u044C\u043D\u0430\u044F \u0437\u0430\u0433\u0440\u0443\u0437\u043A\u0430...`
};
var $510ebbcbf8f3c784$exports = {};
$510ebbcbf8f3c784$exports = {
  "loading": `Na\u010D\xEDtava sa...`,
  "loadingMore": `Na\u010D\xEDtava sa viac...`
};
var $49f018934e6f92c2$exports = {};
$49f018934e6f92c2$exports = {
  "loading": `Nalaganje...`,
  "loadingMore": `Nalaganje ve\u010D vsebine...`
};
var $7513a1b075b503d5$exports = {};
$7513a1b075b503d5$exports = {
  "loading": `U\u010Ditavam...`,
  "loadingMore": `U\u010Ditavam jo\u0161...`
};
var $02c92e5e0c81f9a9$exports = {};
$02c92e5e0c81f9a9$exports = {
  "loading": `L\xE4ser in...`,
  "loadingMore": `L\xE4ser in mer...`
};
var $8165adf786eb9d46$exports = {};
$8165adf786eb9d46$exports = {
  "loading": `Y\xFCkleniyor...`,
  "loadingMore": `Daha fazla y\xFCkleniyor...`
};
var $228238165c1367ae$exports = {};
$228238165c1367ae$exports = {
  "loading": `\u0417\u0430\u0432\u0430\u043D\u0442\u0430\u0436\u0435\u043D\u043D\u044F\u2026`,
  "loadingMore": `\u0417\u0430\u0432\u0430\u043D\u0442\u0430\u0436\u0435\u043D\u043D\u044F \u0456\u043D\u0448\u0438\u0445 \u043E\u0431\u2019\u0454\u043A\u0442\u0456\u0432...`
};
var $cc82b5cf91ddc409$exports = {};
$cc82b5cf91ddc409$exports = {
  "loading": `\u6B63\u5728\u52A0\u8F7D...`,
  "loadingMore": `\u6B63\u5728\u52A0\u8F7D\u66F4\u591A...`
};
var $c1545fe26f1d3e20$exports = {};
$c1545fe26f1d3e20$exports = {
  "loading": `\u6B63\u5728\u8F09\u5165`,
  "loadingMore": `\u6B63\u5728\u8F09\u5165\u66F4\u591A\u2026`
};
$0815878b47e2c7ae$exports = {
  "ar-AE": $067dbd0c037ad155$exports,
  "bg-BG": $6ee4da2747de1e02$exports,
  "cs-CZ": $b58a7d965b7aa1b3$exports,
  "da-DK": $ecaca51f024191b0$exports,
  "de-DE": $6e434aa373f128b4$exports,
  "el-GR": $ddbe45fb199df913$exports,
  "en-US": $2083b83b84266bb4$exports,
  "es-ES": $a41434a97f5222d7$exports,
  "et-EE": $0a1b42c97638052f$exports,
  "fi-FI": $177331a39d162ddc$exports,
  "fr-FR": $273b1d5ecf07fe52$exports,
  "he-IL": $459441d19cfa90a8$exports,
  "hr-HR": $c30474fbd65b2878$exports,
  "hu-HU": $fd19cc1d41a750e5$exports,
  "it-IT": $158d0aece262406d$exports,
  "ja-JP": $bc830316669a23f8$exports,
  "ko-KR": $7fa23663d4de476d$exports,
  "lt-LT": $827e42814bc8f58e$exports,
  "lv-LV": $6ca653959481d2db$exports,
  "nb-NO": $9efb74877777657a$exports,
  "nl-NL": $d085d780952864a7$exports,
  "pl-PL": $c207a8811c9791e9$exports,
  "pt-BR": $eda3511d3b2e0e51$exports,
  "pt-PT": $a9c1da319e5254cb$exports,
  "ro-RO": $bc5c688ddc9e69fb$exports,
  "ru-RU": $84ec40785c299370$exports,
  "sk-SK": $510ebbcbf8f3c784$exports,
  "sl-SI": $49f018934e6f92c2$exports,
  "sr-SP": $7513a1b075b503d5$exports,
  "sv-SE": $02c92e5e0c81f9a9$exports,
  "tr-TR": $8165adf786eb9d46$exports,
  "uk-UA": $228238165c1367ae$exports,
  "zh-CN": $cc82b5cf91ddc409$exports,
  "zh-TW": $c1545fe26f1d3e20$exports
};
var $0c6f792811e33483$export$7ff8f37d2d81a48d = (0, yn).createContext(null);
var $286d1cb34bb7dc84$exports = {};
$parcel$export10($286d1cb34bb7dc84$exports, "spectrum-Menu-popover", () => $286d1cb34bb7dc84$export$d959f30786125b, (v) => $286d1cb34bb7dc84$export$d959f30786125b = v);
$parcel$export10($286d1cb34bb7dc84$exports, "spectrum-Menu", () => $286d1cb34bb7dc84$export$fae6af6decd50ac5, (v) => $286d1cb34bb7dc84$export$fae6af6decd50ac5 = v);
$parcel$export10($286d1cb34bb7dc84$exports, "spectrum-Menu-sectionHeading", () => $286d1cb34bb7dc84$export$c20ea4b35020fbdd, (v) => $286d1cb34bb7dc84$export$c20ea4b35020fbdd = v);
$parcel$export10($286d1cb34bb7dc84$exports, "spectrum-Menu-checkmark", () => $286d1cb34bb7dc84$export$8e15a726e4f7e62d, (v) => $286d1cb34bb7dc84$export$8e15a726e4f7e62d = v);
$parcel$export10($286d1cb34bb7dc84$exports, "spectrum-Menu-item", () => $286d1cb34bb7dc84$export$45faad328e6c532b, (v) => $286d1cb34bb7dc84$export$45faad328e6c532b = v);
$parcel$export10($286d1cb34bb7dc84$exports, "is-selected", () => $286d1cb34bb7dc84$export$1e0fb04f31d3c22a, (v) => $286d1cb34bb7dc84$export$1e0fb04f31d3c22a = v);
$parcel$export10($286d1cb34bb7dc84$exports, "spectrum-Icon", () => $286d1cb34bb7dc84$export$d374b04f30360026, (v) => $286d1cb34bb7dc84$export$d374b04f30360026 = v);
$parcel$export10($286d1cb34bb7dc84$exports, "spectrum-Menu-itemLabel", () => $286d1cb34bb7dc84$export$1aa6419c5c650567, (v) => $286d1cb34bb7dc84$export$1aa6419c5c650567 = v);
$parcel$export10($286d1cb34bb7dc84$exports, "spectrum-Menu-itemIcon", () => $286d1cb34bb7dc84$export$f431001e1bb54633, (v) => $286d1cb34bb7dc84$export$f431001e1bb54633 = v);
$parcel$export10($286d1cb34bb7dc84$exports, "spectrum-Menu-itemLabel--wrapping", () => $286d1cb34bb7dc84$export$465092164a8e1d98, (v) => $286d1cb34bb7dc84$export$465092164a8e1d98 = v);
$parcel$export10($286d1cb34bb7dc84$exports, "spectrum-Menu-divider", () => $286d1cb34bb7dc84$export$e892026f534efed8, (v) => $286d1cb34bb7dc84$export$e892026f534efed8 = v);
$parcel$export10($286d1cb34bb7dc84$exports, "spectrum-Menu-itemGrid", () => $286d1cb34bb7dc84$export$ee5f52784f57f9c8, (v) => $286d1cb34bb7dc84$export$ee5f52784f57f9c8 = v);
$parcel$export10($286d1cb34bb7dc84$exports, "is-selectable", () => $286d1cb34bb7dc84$export$fbd22ba224473193, (v) => $286d1cb34bb7dc84$export$fbd22ba224473193 = v);
$parcel$export10($286d1cb34bb7dc84$exports, "spectrum-Menu-end", () => $286d1cb34bb7dc84$export$926a1bb74ed65667, (v) => $286d1cb34bb7dc84$export$926a1bb74ed65667 = v);
$parcel$export10($286d1cb34bb7dc84$exports, "spectrum-Menu-icon", () => $286d1cb34bb7dc84$export$cbbae63ef9e44c7a, (v) => $286d1cb34bb7dc84$export$cbbae63ef9e44c7a = v);
$parcel$export10($286d1cb34bb7dc84$exports, "spectrum-Menu-description", () => $286d1cb34bb7dc84$export$36f1275051e39ead, (v) => $286d1cb34bb7dc84$export$36f1275051e39ead = v);
$parcel$export10($286d1cb34bb7dc84$exports, "spectrum-Menu-keyboard", () => $286d1cb34bb7dc84$export$4f9817a7dff6ba0f, (v) => $286d1cb34bb7dc84$export$4f9817a7dff6ba0f = v);
$parcel$export10($286d1cb34bb7dc84$exports, "focus-ring", () => $286d1cb34bb7dc84$export$f39a09f249340e2a, (v) => $286d1cb34bb7dc84$export$f39a09f249340e2a = v);
$parcel$export10($286d1cb34bb7dc84$exports, "is-focused", () => $286d1cb34bb7dc84$export$e7dc768d35940237, (v) => $286d1cb34bb7dc84$export$e7dc768d35940237 = v);
$parcel$export10($286d1cb34bb7dc84$exports, "is-hovered", () => $286d1cb34bb7dc84$export$b8813cd5d7824ce7, (v) => $286d1cb34bb7dc84$export$b8813cd5d7824ce7 = v);
$parcel$export10($286d1cb34bb7dc84$exports, "is-highlighted", () => $286d1cb34bb7dc84$export$451c613d0772eb99, (v) => $286d1cb34bb7dc84$export$451c613d0772eb99 = v);
$parcel$export10($286d1cb34bb7dc84$exports, "is-open", () => $286d1cb34bb7dc84$export$a9781837241c946d, (v) => $286d1cb34bb7dc84$export$a9781837241c946d = v);
$parcel$export10($286d1cb34bb7dc84$exports, "is-active", () => $286d1cb34bb7dc84$export$20fd0f7cd4e6112f, (v) => $286d1cb34bb7dc84$export$20fd0f7cd4e6112f = v);
$parcel$export10($286d1cb34bb7dc84$exports, "is-disabled", () => $286d1cb34bb7dc84$export$d35bc1e505d1ebbf, (v) => $286d1cb34bb7dc84$export$d35bc1e505d1ebbf = v);
var $286d1cb34bb7dc84$export$d959f30786125b;
var $286d1cb34bb7dc84$export$fae6af6decd50ac5;
var $286d1cb34bb7dc84$export$c20ea4b35020fbdd;
var $286d1cb34bb7dc84$export$8e15a726e4f7e62d;
var $286d1cb34bb7dc84$export$45faad328e6c532b;
var $286d1cb34bb7dc84$export$1e0fb04f31d3c22a;
var $286d1cb34bb7dc84$export$d374b04f30360026;
var $286d1cb34bb7dc84$export$1aa6419c5c650567;
var $286d1cb34bb7dc84$export$f431001e1bb54633;
var $286d1cb34bb7dc84$export$465092164a8e1d98;
var $286d1cb34bb7dc84$export$e892026f534efed8;
var $286d1cb34bb7dc84$export$ee5f52784f57f9c8;
var $286d1cb34bb7dc84$export$fbd22ba224473193;
var $286d1cb34bb7dc84$export$926a1bb74ed65667;
var $286d1cb34bb7dc84$export$cbbae63ef9e44c7a;
var $286d1cb34bb7dc84$export$36f1275051e39ead;
var $286d1cb34bb7dc84$export$4f9817a7dff6ba0f;
var $286d1cb34bb7dc84$export$f39a09f249340e2a;
var $286d1cb34bb7dc84$export$e7dc768d35940237;
var $286d1cb34bb7dc84$export$b8813cd5d7824ce7;
var $286d1cb34bb7dc84$export$451c613d0772eb99;
var $286d1cb34bb7dc84$export$a9781837241c946d;
var $286d1cb34bb7dc84$export$20fd0f7cd4e6112f;
var $286d1cb34bb7dc84$export$d35bc1e505d1ebbf;
$286d1cb34bb7dc84$export$d959f30786125b = "spectrum-Menu-popover_7ea47c";
$286d1cb34bb7dc84$export$fae6af6decd50ac5 = "spectrum-Menu_7ea47c";
$286d1cb34bb7dc84$export$c20ea4b35020fbdd = "spectrum-Menu-sectionHeading_7ea47c";
$286d1cb34bb7dc84$export$8e15a726e4f7e62d = "spectrum-Menu-checkmark_7ea47c";
$286d1cb34bb7dc84$export$45faad328e6c532b = "spectrum-Menu-item_7ea47c";
$286d1cb34bb7dc84$export$1e0fb04f31d3c22a = "is-selected_7ea47c";
$286d1cb34bb7dc84$export$d374b04f30360026 = "spectrum-Icon_7ea47c";
$286d1cb34bb7dc84$export$1aa6419c5c650567 = "spectrum-Menu-itemLabel_7ea47c";
$286d1cb34bb7dc84$export$f431001e1bb54633 = "spectrum-Menu-itemIcon_7ea47c";
$286d1cb34bb7dc84$export$465092164a8e1d98 = "spectrum-Menu-itemLabel--wrapping_7ea47c";
$286d1cb34bb7dc84$export$e892026f534efed8 = "spectrum-Menu-divider_7ea47c";
$286d1cb34bb7dc84$export$ee5f52784f57f9c8 = "spectrum-Menu-itemGrid_7ea47c";
$286d1cb34bb7dc84$export$fbd22ba224473193 = "is-selectable_7ea47c";
$286d1cb34bb7dc84$export$926a1bb74ed65667 = "spectrum-Menu-end_7ea47c";
$286d1cb34bb7dc84$export$cbbae63ef9e44c7a = "spectrum-Menu-icon_7ea47c";
$286d1cb34bb7dc84$export$36f1275051e39ead = "spectrum-Menu-description_7ea47c";
$286d1cb34bb7dc84$export$4f9817a7dff6ba0f = "spectrum-Menu-keyboard_7ea47c";
$286d1cb34bb7dc84$export$f39a09f249340e2a = "focus-ring_7ea47c";
$286d1cb34bb7dc84$export$e7dc768d35940237 = "is-focused_7ea47c";
$286d1cb34bb7dc84$export$b8813cd5d7824ce7 = "is-hovered_7ea47c";
$286d1cb34bb7dc84$export$451c613d0772eb99 = "is-highlighted_7ea47c";
$286d1cb34bb7dc84$export$a9781837241c946d = "is-open_7ea47c";
$286d1cb34bb7dc84$export$20fd0f7cd4e6112f = "is-active_7ea47c";
$286d1cb34bb7dc84$export$d35bc1e505d1ebbf = "is-disabled_7ea47c";
function $86983ea1fa3f7312$export$feb3b6b552c14a12(props) {
  let { item, shouldSelectOnPressUp, shouldFocusOnHover, shouldUseVirtualFocus } = props;
  let { rendered, key } = item;
  let domProps = (0, $65484d02dcb7eb3e$export$457c3d6518dd4c6f)(item.props);
  delete domProps.id;
  let state = (0, ce)((0, $0c6f792811e33483$export$7ff8f37d2d81a48d));
  let ref = (0, ie)();
  let { optionProps, labelProps, descriptionProps, isSelected, isDisabled, isFocused } = (0, $293f70390ea03370$export$497855f14858aa34)({
    "aria-label": item["aria-label"],
    key,
    shouldSelectOnPressUp,
    shouldFocusOnHover,
    isVirtualized: true,
    shouldUseVirtualFocus
  }, state, ref);
  let { hoverProps, isHovered } = (0, $6179b936705e76d3$export$ae780daf29e6d456)({
    ...props,
    isDisabled
  });
  let contents = typeof rendered === "string" ? /* @__PURE__ */ (0, yn).createElement((0, $cd449e8defa988f0$export$5f1af8db9871e1d6), null, rendered) : rendered;
  let isKeyboardModality = (0, $507fabe10e71c6fb$export$b9b3dfddab17db27)();
  return /* @__PURE__ */ (0, yn).createElement((0, $907718708eab68af$export$1a38b4ad7f578e1d), {
    focusRingClass: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault12($286d1cb34bb7dc84$exports)), "focus-ring")
  }, /* @__PURE__ */ (0, yn).createElement("div", {
    ...(0, $3ef42575df84b30b$export$9d1611c77c2fe928)(optionProps, shouldFocusOnHover ? {} : hoverProps, domProps),
    ref,
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault12($286d1cb34bb7dc84$exports)), "spectrum-Menu-item", {
      // If using virtual focus, apply focused styles to the item when the user is interacting with keyboard modality
      "is-focused": shouldUseVirtualFocus && isFocused && isKeyboardModality,
      "is-disabled": isDisabled,
      "is-selected": isSelected,
      "is-selectable": state.selectionManager.selectionMode !== "none",
      // When shouldFocusOnHover is false, apply hover styles both when hovered with the mouse.
      // Otherwise, apply hover styles when focused using non-keyboard modality.
      "is-hovered": isHovered && !shouldFocusOnHover || isFocused && !isKeyboardModality
    })
  }, /* @__PURE__ */ (0, yn).createElement((0, $994c48bfb00b620b$export$ef2184bd89960b14), {
    UNSAFE_className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault12($286d1cb34bb7dc84$exports)), "spectrum-Menu-itemGrid")
  }, /* @__PURE__ */ (0, yn).createElement((0, $59d09bcc83651bf9$export$ceb145244332b7a2), null, /* @__PURE__ */ (0, yn).createElement((0, $59d09bcc83651bf9$export$8107b24b91795686), {
    slots: {
      text: {
        UNSAFE_className: (0, /* @__PURE__ */ $parcel$interopDefault12($286d1cb34bb7dc84$exports))["spectrum-Menu-itemLabel"],
        ...labelProps
      },
      icon: {
        size: "S",
        UNSAFE_className: (0, /* @__PURE__ */ $parcel$interopDefault12($286d1cb34bb7dc84$exports))["spectrum-Menu-icon"]
      },
      description: {
        UNSAFE_className: (0, /* @__PURE__ */ $parcel$interopDefault12($286d1cb34bb7dc84$exports))["spectrum-Menu-description"],
        ...descriptionProps
      }
    }
  }, contents, isSelected && /* @__PURE__ */ (0, yn).createElement((0, CheckmarkMedium), {
    slot: "checkmark",
    UNSAFE_className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault12($286d1cb34bb7dc84$exports)), "spectrum-Menu-checkmark")
  }))))));
}
function $92d678ed88836094$export$dca12b0bb56e4fc(props) {
  let { children, layoutInfo, headerLayoutInfo, virtualizer, item } = props;
  let { headingProps, groupProps } = (0, $af383d3bef1cfdc9$export$c3f9f39876e4bc7)({
    heading: item.rendered,
    "aria-label": item["aria-label"]
  });
  let headerRef = (0, ie)();
  (0, $47736c1e63ba1c6d$export$1da781778207e0a2)({
    layoutInfo: headerLayoutInfo,
    virtualizer,
    ref: headerRef
  });
  let { direction } = (0, $18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  let state = (0, ce)((0, $0c6f792811e33483$export$7ff8f37d2d81a48d));
  return /* @__PURE__ */ (0, yn).createElement((0, x), null, /* @__PURE__ */ (0, yn).createElement("div", {
    role: "presentation",
    ref: headerRef,
    style: (0, $ccf8a0a04e4175ae$export$1481e64fbe01b8b3)(headerLayoutInfo, direction)
  }, item.key !== state.collection.getFirstKey() && /* @__PURE__ */ (0, yn).createElement("div", {
    role: "presentation",
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault12($286d1cb34bb7dc84$exports)), "spectrum-Menu-divider")
  }), item.rendered && /* @__PURE__ */ (0, yn).createElement("div", {
    ...headingProps,
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault12($286d1cb34bb7dc84$exports)), "spectrum-Menu-sectionHeading")
  }, item.rendered)), /* @__PURE__ */ (0, yn).createElement("div", {
    ...groupProps,
    style: (0, $ccf8a0a04e4175ae$export$1481e64fbe01b8b3)(layoutInfo, direction),
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault12($286d1cb34bb7dc84$exports)), "spectrum-Menu")
  }, children));
}
function $3247d4a89e6094e9$export$25768ea656ae32a7(state, isLoading) {
  let { scale } = (0, $7167f8da3cce35e4$export$693cdb10cec23617)();
  let collator = (0, $325a3faab7a68acd$export$a16aca283550c30d)({
    usage: "search",
    sensitivity: "base"
  });
  let layout = (0, j)(() => new (0, $61ef60fc9b1041f4$export$cacbb3924155d68e)({
    estimatedRowHeight: scale === "large" ? 48 : 32,
    estimatedHeadingHeight: scale === "large" ? 33 : 26,
    padding: scale === "large" ? 5 : 4,
    loaderHeight: 40,
    placeholderHeight: scale === "large" ? 48 : 32,
    collator
  }), [
    collator,
    scale
  ]);
  layout.collection = state.collection;
  layout.disabledKeys = state.disabledKeys;
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (layout.isLoading !== isLoading) {
      var _layout_virtualizer;
      layout.isLoading = isLoading;
      (_layout_virtualizer = layout.virtualizer) === null || _layout_virtualizer === void 0 ? void 0 : _layout_virtualizer.relayoutNow();
    }
  }, [
    layout,
    isLoading
  ]);
  return layout;
}
function $3247d4a89e6094e9$var$ListBoxBase(props, ref) {
  let { layout, state, shouldSelectOnPressUp, focusOnPointerEnter, shouldUseVirtualFocus, domProps = {}, transitionDuration = 0, onScroll } = props;
  let { listBoxProps } = (0, $c132121280ec012d$export$50eacbbf140a3141)({
    ...props,
    keyboardDelegate: layout,
    isVirtualized: true
  }, state, ref);
  let { styleProps } = (0, $380ed8f3903c3931$export$b8e6fb9d2dff3f41)(props);
  let stringFormatter = (0, $fca6afa0e843324b$export$f12b703ca79dfbb1)((0, /* @__PURE__ */ $parcel$interopDefault12($0815878b47e2c7ae$exports)));
  let renderWrapper = (parent, reusableView, children, renderChildren) => {
    if (reusableView.viewType === "section")
      return /* @__PURE__ */ (0, yn).createElement((0, $92d678ed88836094$export$dca12b0bb56e4fc), {
        key: reusableView.key,
        item: reusableView.content,
        layoutInfo: reusableView.layoutInfo,
        virtualizer: reusableView.virtualizer,
        headerLayoutInfo: children.find((c2) => c2.viewType === "header").layoutInfo
      }, renderChildren(children.filter((c2) => c2.viewType === "item")));
    return /* @__PURE__ */ (0, yn).createElement((0, $ccf8a0a04e4175ae$export$6796df8ba7398521), {
      key: reusableView.key,
      layoutInfo: reusableView.layoutInfo,
      virtualizer: reusableView.virtualizer,
      parent: parent === null || parent === void 0 ? void 0 : parent.layoutInfo
    }, reusableView.rendered);
  };
  return /* @__PURE__ */ (0, yn).createElement((0, $0c6f792811e33483$export$7ff8f37d2d81a48d).Provider, {
    value: state
  }, /* @__PURE__ */ (0, yn).createElement((0, $9bf71ea28793e738$export$20e40289641fbbb6), null, /* @__PURE__ */ (0, yn).createElement((0, $6d0a5c394373ae64$export$89be5a243e59c4b2), {
    ...styleProps,
    ...(0, $3ef42575df84b30b$export$9d1611c77c2fe928)(listBoxProps, domProps),
    ref,
    focusedKey: state.selectionManager.focusedKey,
    autoFocus: !!props.autoFocus,
    sizeToFit: "height",
    scrollDirection: "vertical",
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault12($286d1cb34bb7dc84$exports)), "spectrum-Menu", styleProps.className),
    layout,
    collection: state.collection,
    renderWrapper,
    transitionDuration,
    isLoading: props.isLoading,
    onLoadMore: props.onLoadMore,
    shouldUseVirtualFocus,
    onScroll
  }, (type, item) => {
    if (type === "item")
      return /* @__PURE__ */ (0, yn).createElement((0, $86983ea1fa3f7312$export$feb3b6b552c14a12), {
        item,
        shouldSelectOnPressUp,
        shouldFocusOnHover: focusOnPointerEnter,
        shouldUseVirtualFocus
      });
    else if (type === "loader")
      return (
        // aria-selected isn't needed here since this option is not selectable.
        // eslint-disable-next-line jsx-a11y/role-has-required-aria-props
        /* @__PURE__ */ (0, yn).createElement("div", {
          role: "option",
          style: {
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            height: "100%"
          }
        }, /* @__PURE__ */ (0, yn).createElement((0, $79c16f64960b6385$export$c79b9d6b4cc92af7), {
          isIndeterminate: true,
          size: "S",
          "aria-label": state.collection.size > 0 ? stringFormatter.format("loadingMore") : stringFormatter.format("loading"),
          UNSAFE_className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault12($286d1cb34bb7dc84$exports)), "spectrum-Dropdown-progressCircle")
        }))
      );
    else if (type === "placeholder") {
      let emptyState = props.renderEmptyState ? props.renderEmptyState() : null;
      if (emptyState == null)
        return null;
      return /* @__PURE__ */ (0, yn).createElement("div", {
        // aria-selected isn't needed here since this option is not selectable.
        // eslint-disable-next-line jsx-a11y/role-has-required-aria-props
        role: "option"
      }, emptyState);
    }
  })));
}
var $3247d4a89e6094e9$export$1afdcf349979fb7e = /* @__PURE__ */ (0, yn).forwardRef($3247d4a89e6094e9$var$ListBoxBase);

// ../../node_modules/@react-spectrum/textfield/dist/import.mjs
init_preact_min();

// ../../node_modules/@react-aria/textfield/dist/import.mjs
init_preact_min();
function $2d73ec29415bd339$export$712718f7aec83d5(props, ref) {
  let { inputElementType = "input", isDisabled = false, isRequired = false, isReadOnly = false, validationState, type = "text", onChange = () => {
  } } = props;
  let { focusableProps } = (0, $e6afbd83fe6ebbd2$export$4c014de7c8940b4c)(props, ref);
  let { labelProps, fieldProps, descriptionProps, errorMessageProps } = (0, $2baaea4c71418dea$export$294aa081a6c6f55d)(props);
  let domProps = (0, $65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
    labelable: true
  });
  const inputOnlyProps = {
    type,
    pattern: props.pattern
  };
  return {
    labelProps,
    inputProps: (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, inputElementType === "input" && inputOnlyProps, {
      disabled: isDisabled,
      readOnly: isReadOnly,
      "aria-required": isRequired || void 0,
      "aria-invalid": validationState === "invalid" || void 0,
      "aria-errormessage": props["aria-errormessage"],
      "aria-activedescendant": props["aria-activedescendant"],
      "aria-autocomplete": props["aria-autocomplete"],
      "aria-haspopup": props["aria-haspopup"],
      value: props.value,
      defaultValue: props.value ? void 0 : props.defaultValue,
      onChange: (e) => onChange(e.target.value),
      autoComplete: props.autoComplete,
      maxLength: props.maxLength,
      minLength: props.minLength,
      name: props.name,
      placeholder: props.placeholder,
      inputMode: props.inputMode,
      // Clipboard events
      onCopy: props.onCopy,
      onCut: props.onCut,
      onPaste: props.onPaste,
      // Composition events
      onCompositionEnd: props.onCompositionEnd,
      onCompositionStart: props.onCompositionStart,
      onCompositionUpdate: props.onCompositionUpdate,
      // Selection events
      onSelect: props.onSelect,
      // Input events
      onBeforeInput: props.onBeforeInput,
      onInput: props.onInput,
      ...focusableProps,
      ...fieldProps
    }),
    descriptionProps,
    errorMessageProps
  };
}

// ../../node_modules/@react-spectrum/textfield/dist/import.mjs
function $parcel$interopDefault13(a) {
  return a && a.__esModule ? a.default : a;
}
function $parcel$export11(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $c14528ddc146317f$exports = {};
$parcel$export11($c14528ddc146317f$exports, "spectrum-Textfield-input", () => $c14528ddc146317f$export$1ac009feb2b0bd0c, (v) => $c14528ddc146317f$export$1ac009feb2b0bd0c = v);
$parcel$export11($c14528ddc146317f$exports, "spectrum-Textfield", () => $c14528ddc146317f$export$2c8a10299d8b3418, (v) => $c14528ddc146317f$export$2c8a10299d8b3418 = v);
$parcel$export11($c14528ddc146317f$exports, "focus-ring", () => $c14528ddc146317f$export$f39a09f249340e2a, (v) => $c14528ddc146317f$export$f39a09f249340e2a = v);
$parcel$export11($c14528ddc146317f$exports, "spectrum-Textfield--quiet", () => $c14528ddc146317f$export$bffd5e3d61a81737, (v) => $c14528ddc146317f$export$bffd5e3d61a81737 = v);
$parcel$export11($c14528ddc146317f$exports, "spectrum-Textfield--multiline", () => $c14528ddc146317f$export$9699f1c538a448a0, (v) => $c14528ddc146317f$export$9699f1c538a448a0 = v);
$parcel$export11($c14528ddc146317f$exports, "is-placeholder", () => $c14528ddc146317f$export$e5b2f5233e4e5194, (v) => $c14528ddc146317f$export$e5b2f5233e4e5194 = v);
$parcel$export11($c14528ddc146317f$exports, "is-hovered", () => $c14528ddc146317f$export$b8813cd5d7824ce7, (v) => $c14528ddc146317f$export$b8813cd5d7824ce7 = v);
$parcel$export11($c14528ddc146317f$exports, "spectrum-Textfield--valid", () => $c14528ddc146317f$export$c2abbc3f970170b7, (v) => $c14528ddc146317f$export$c2abbc3f970170b7 = v);
$parcel$export11($c14528ddc146317f$exports, "spectrum-Textfield--invalid", () => $c14528ddc146317f$export$58e50b10d30123df, (v) => $c14528ddc146317f$export$58e50b10d30123df = v);
$parcel$export11($c14528ddc146317f$exports, "spectrum-Textfield--loadable", () => $c14528ddc146317f$export$14fd30fea6f1348c, (v) => $c14528ddc146317f$export$14fd30fea6f1348c = v);
$parcel$export11($c14528ddc146317f$exports, "spectrum-Textfield-wrapper", () => $c14528ddc146317f$export$dd1165e0e6012973, (v) => $c14528ddc146317f$export$dd1165e0e6012973 = v);
$parcel$export11($c14528ddc146317f$exports, "spectrum-Textfield-wrapper--quiet", () => $c14528ddc146317f$export$9fcb3d6af94a9d12, (v) => $c14528ddc146317f$export$9fcb3d6af94a9d12 = v);
$parcel$export11($c14528ddc146317f$exports, "spectrum-Textfield-validationIcon", () => $c14528ddc146317f$export$cf0ead5b44db0da3, (v) => $c14528ddc146317f$export$cf0ead5b44db0da3 = v);
$parcel$export11($c14528ddc146317f$exports, "spectrum-Textfield-icon", () => $c14528ddc146317f$export$222d1ccd1870be1d, (v) => $c14528ddc146317f$export$222d1ccd1870be1d = v);
$parcel$export11($c14528ddc146317f$exports, "spectrum-Textfield-inputIcon", () => $c14528ddc146317f$export$c1cdcaa5fe76a871, (v) => $c14528ddc146317f$export$c1cdcaa5fe76a871 = v);
$parcel$export11($c14528ddc146317f$exports, "spectrum-Textfield-circleLoader", () => $c14528ddc146317f$export$82a249fb4d6127, (v) => $c14528ddc146317f$export$82a249fb4d6127 = v);
$parcel$export11($c14528ddc146317f$exports, "is-focused", () => $c14528ddc146317f$export$e7dc768d35940237, (v) => $c14528ddc146317f$export$e7dc768d35940237 = v);
$parcel$export11($c14528ddc146317f$exports, "is-disabled", () => $c14528ddc146317f$export$d35bc1e505d1ebbf, (v) => $c14528ddc146317f$export$d35bc1e505d1ebbf = v);
var $c14528ddc146317f$export$1ac009feb2b0bd0c;
var $c14528ddc146317f$export$2c8a10299d8b3418;
var $c14528ddc146317f$export$f39a09f249340e2a;
var $c14528ddc146317f$export$bffd5e3d61a81737;
var $c14528ddc146317f$export$9699f1c538a448a0;
var $c14528ddc146317f$export$e5b2f5233e4e5194;
var $c14528ddc146317f$export$b8813cd5d7824ce7;
var $c14528ddc146317f$export$c2abbc3f970170b7;
var $c14528ddc146317f$export$58e50b10d30123df;
var $c14528ddc146317f$export$14fd30fea6f1348c;
var $c14528ddc146317f$export$dd1165e0e6012973;
var $c14528ddc146317f$export$9fcb3d6af94a9d12;
var $c14528ddc146317f$export$cf0ead5b44db0da3;
var $c14528ddc146317f$export$222d1ccd1870be1d;
var $c14528ddc146317f$export$c1cdcaa5fe76a871;
var $c14528ddc146317f$export$82a249fb4d6127;
var $c14528ddc146317f$export$e7dc768d35940237;
var $c14528ddc146317f$export$d35bc1e505d1ebbf;
$c14528ddc146317f$export$1ac009feb2b0bd0c = "spectrum-Textfield-input_73bc77";
$c14528ddc146317f$export$2c8a10299d8b3418 = "spectrum-Textfield_73bc77";
$c14528ddc146317f$export$f39a09f249340e2a = "focus-ring_73bc77";
$c14528ddc146317f$export$bffd5e3d61a81737 = "spectrum-Textfield--quiet_73bc77";
$c14528ddc146317f$export$9699f1c538a448a0 = "spectrum-Textfield--multiline_73bc77";
$c14528ddc146317f$export$e5b2f5233e4e5194 = "is-placeholder_73bc77";
$c14528ddc146317f$export$b8813cd5d7824ce7 = "is-hovered_73bc77";
$c14528ddc146317f$export$c2abbc3f970170b7 = "spectrum-Textfield--valid_73bc77";
$c14528ddc146317f$export$58e50b10d30123df = "spectrum-Textfield--invalid_73bc77";
$c14528ddc146317f$export$14fd30fea6f1348c = "spectrum-Textfield--loadable_73bc77";
$c14528ddc146317f$export$dd1165e0e6012973 = "spectrum-Textfield-wrapper_73bc77";
$c14528ddc146317f$export$9fcb3d6af94a9d12 = "spectrum-Textfield-wrapper--quiet_73bc77";
$c14528ddc146317f$export$cf0ead5b44db0da3 = "spectrum-Textfield-validationIcon_73bc77";
$c14528ddc146317f$export$222d1ccd1870be1d = "spectrum-Textfield-icon_73bc77";
$c14528ddc146317f$export$c1cdcaa5fe76a871 = "spectrum-Textfield-inputIcon_73bc77";
$c14528ddc146317f$export$82a249fb4d6127 = "spectrum-Textfield-circleLoader_73bc77";
$c14528ddc146317f$export$e7dc768d35940237 = "is-focused_73bc77";
$c14528ddc146317f$export$d35bc1e505d1ebbf = "is-disabled_73bc77";
function $599adb75312e6492$var$TextFieldBase(props, ref) {
  let { validationState, icon, isQuiet = false, isDisabled, multiLine, autoFocus, inputClassName, wrapperChildren, labelProps, inputProps, descriptionProps, errorMessageProps, inputRef: userInputRef, isLoading, loadingIndicator, validationIconClassName, disableFocusRing } = props;
  let { hoverProps, isHovered } = (0, $6179b936705e76d3$export$ae780daf29e6d456)({
    isDisabled
  });
  let domRef = (0, ie)(null);
  let defaultInputRef = (0, ie)(null);
  let inputRef = userInputRef || defaultInputRef;
  (0, le)(ref, () => ({
    ...(0, $98e5a8ae0e6415af$export$79d69eee6ae4b329)(domRef, inputRef),
    select() {
      if (inputRef.current)
        inputRef.current.select();
    },
    getInputElement() {
      return inputRef.current;
    }
  }));
  let ElementType = multiLine ? "textarea" : "input";
  let isInvalid = validationState === "invalid" && !isDisabled;
  if (icon) {
    let UNSAFE_className = (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault13($c14528ddc146317f$exports)), icon.props && icon.props.UNSAFE_className, "spectrum-Textfield-icon");
    icon = /* @__PURE__ */ (0, re)(icon, {
      UNSAFE_className,
      size: "S"
    });
  }
  let validationIcon = isInvalid ? /* @__PURE__ */ (0, yn).createElement((0, AlertMedium), null) : /* @__PURE__ */ (0, yn).createElement((0, CheckmarkMedium), null);
  let validation = /* @__PURE__ */ (0, re)(validationIcon, {
    UNSAFE_className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault13($c14528ddc146317f$exports)), "spectrum-Textfield-validationIcon", validationIconClassName)
  });
  let { focusProps, isFocusVisible } = (0, $f7dceffc5ad7768b$export$4e328f61c538687f)({
    isTextInput: true,
    autoFocus
  });
  let textField = /* @__PURE__ */ (0, yn).createElement("div", {
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault13($c14528ddc146317f$exports)), "spectrum-Textfield", {
      "spectrum-Textfield--invalid": isInvalid,
      "spectrum-Textfield--valid": validationState === "valid" && !isDisabled,
      "spectrum-Textfield--loadable": loadingIndicator,
      "spectrum-Textfield--quiet": isQuiet,
      "spectrum-Textfield--multiline": multiLine,
      "focus-ring": !disableFocusRing && isFocusVisible
    })
  }, /* @__PURE__ */ (0, yn).createElement(ElementType, {
    ...(0, $3ef42575df84b30b$export$9d1611c77c2fe928)(inputProps, hoverProps, focusProps),
    ref: inputRef,
    rows: multiLine ? 1 : void 0,
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault13($c14528ddc146317f$exports)), "spectrum-Textfield-input", {
      "spectrum-Textfield-inputIcon": icon,
      "is-hovered": isHovered
    }, inputClassName)
  }), icon, validationState && !isLoading && !isDisabled ? validation : null, isLoading && loadingIndicator, wrapperChildren);
  return /* @__PURE__ */ (0, yn).createElement((0, $b7ca5b4454a2009d$export$a455218a85c89869), {
    ...props,
    labelProps,
    descriptionProps,
    errorMessageProps,
    wrapperClassName: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault13($c14528ddc146317f$exports)), "spectrum-Textfield-wrapper", {
      "spectrum-Textfield-wrapper--quiet": isQuiet
    }),
    showErrorIcon: false,
    ref: domRef
  }, textField);
}
var $599adb75312e6492$export$d22444a338b6e3c2 = /* @__PURE__ */ (0, Pe)($599adb75312e6492$var$TextFieldBase);
function $265457f9427aa380$var$TextField(props, ref) {
  props = (0, $7167f8da3cce35e4$export$521c373ccc32c300)(props);
  let inputRef = (0, ie)(null);
  let { labelProps, inputProps, descriptionProps, errorMessageProps } = (0, $2d73ec29415bd339$export$712718f7aec83d5)(props, inputRef);
  if (props.placeholder)
    console.warn("Placeholders are deprecated due to accessibility issues. Please use help text instead. See the docs for details: https://react-spectrum.adobe.com/react-spectrum/TextField.html#help-text");
  return /* @__PURE__ */ (0, yn).createElement((0, $599adb75312e6492$export$d22444a338b6e3c2), {
    ...props,
    labelProps,
    inputProps,
    descriptionProps,
    errorMessageProps,
    ref,
    inputRef
  });
}
var $265457f9427aa380$export$2c73285ae9390cec = /* @__PURE__ */ (0, Pe)($265457f9427aa380$var$TextField);

// ../../node_modules/@react-spectrum/view/dist/import.mjs
init_preact_min();
function $b9606c0c41d55371$var$View(props, ref) {
  props = (0, $59d09bcc83651bf9$export$1e5c9e6e4e15efe3)(props);
  let { elementType: ElementType = "div", children, ...otherProps } = props;
  let { styleProps } = (0, $380ed8f3903c3931$export$b8e6fb9d2dff3f41)(props, (0, $380ed8f3903c3931$export$e0705d1a55f297c));
  let domRef = (0, $98e5a8ae0e6415af$export$c2c55ef9111cafd8)(ref);
  return /* @__PURE__ */ (0, yn).createElement(ElementType, {
    ...(0, $65484d02dcb7eb3e$export$457c3d6518dd4c6f)(otherProps),
    ...styleProps,
    ref: domRef
  }, /* @__PURE__ */ (0, yn).createElement((0, $59d09bcc83651bf9$export$ceb145244332b7a2), null, children));
}
var $b9606c0c41d55371$export$27a5bd065ad55220 = /* @__PURE__ */ (0, Pe)($b9606c0c41d55371$var$View);

// ../../node_modules/@react-aria/select/dist/import.mjs
init_preact_min();
function $58aed456727eb0f3$export$e64b2f635402ca43(props, state, ref) {
  let { keyboardDelegate, isDisabled } = props;
  let collator = (0, $325a3faab7a68acd$export$a16aca283550c30d)({
    usage: "search",
    sensitivity: "base"
  });
  let delegate = (0, j)(() => keyboardDelegate || new (0, $2a25aae57d74318e$export$a05409b8bb224a5a)(state.collection, state.disabledKeys, null, collator), [
    keyboardDelegate,
    state.collection,
    state.disabledKeys,
    collator
  ]);
  let { menuTriggerProps, menuProps } = (0, $168583247155ddda$export$dc9c12ed27dd1b49)({
    isDisabled,
    type: "listbox"
  }, state, ref);
  let onKeyDown = (e) => {
    switch (e.key) {
      case "ArrowLeft": {
        e.preventDefault();
        let key = state.selectedKey != null ? delegate.getKeyAbove(state.selectedKey) : delegate.getFirstKey();
        if (key)
          state.setSelectedKey(key);
        break;
      }
      case "ArrowRight": {
        e.preventDefault();
        let key = state.selectedKey != null ? delegate.getKeyBelow(state.selectedKey) : delegate.getFirstKey();
        if (key)
          state.setSelectedKey(key);
        break;
      }
    }
  };
  let { typeSelectProps } = (0, $fb3050f43d946246$export$e32c88dfddc6e1d8)({
    keyboardDelegate: delegate,
    selectionManager: state.selectionManager,
    onTypeSelect(key) {
      state.setSelectedKey(key);
    }
  });
  let { labelProps, fieldProps, descriptionProps, errorMessageProps } = (0, $2baaea4c71418dea$export$294aa081a6c6f55d)({
    ...props,
    labelElementType: "span"
  });
  typeSelectProps.onKeyDown = typeSelectProps.onKeyDownCapture;
  delete typeSelectProps.onKeyDownCapture;
  let domProps = (0, $65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
    labelable: true
  });
  let triggerProps = (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(typeSelectProps, menuTriggerProps, fieldProps);
  let valueId = (0, $bdb11010cef70236$export$f680877a34711e37)();
  return {
    labelProps: {
      ...labelProps,
      onClick: () => {
        if (!props.isDisabled) {
          ref.current.focus();
          (0, $507fabe10e71c6fb$export$8397ddfc504fdb9a)("keyboard");
        }
      }
    },
    triggerProps: (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, {
      ...triggerProps,
      isDisabled,
      onKeyDown: (0, $ff5963eb1fccf552$export$e08e3b67e392101e)(triggerProps.onKeyDown, onKeyDown, props.onKeyDown),
      onKeyUp: props.onKeyUp,
      "aria-labelledby": [
        valueId,
        triggerProps["aria-labelledby"],
        triggerProps["aria-label"] && !triggerProps["aria-labelledby"] ? triggerProps.id : null
      ].filter(Boolean).join(" "),
      onFocus(e) {
        if (state.isFocused)
          return;
        if (props.onFocus)
          props.onFocus(e);
        if (props.onFocusChange)
          props.onFocusChange(true);
        state.setFocused(true);
      },
      onBlur(e) {
        if (state.isOpen)
          return;
        if (props.onBlur)
          props.onBlur(e);
        if (props.onFocusChange)
          props.onFocusChange(false);
        state.setFocused(false);
      }
    }),
    valueProps: {
      id: valueId
    },
    menuProps: {
      ...menuProps,
      autoFocus: state.focusStrategy || true,
      shouldSelectOnPressUp: true,
      shouldFocusOnHover: true,
      disallowEmptySelection: true,
      onBlur: (e) => {
        if (e.currentTarget.contains(e.relatedTarget))
          return;
        if (props.onBlur)
          props.onBlur(e);
        if (props.onFocusChange)
          props.onFocusChange(false);
        state.setFocused(false);
      },
      "aria-labelledby": [
        fieldProps["aria-labelledby"],
        triggerProps["aria-label"] && !fieldProps["aria-labelledby"] ? triggerProps.id : null
      ].filter(Boolean).join(" ")
    },
    descriptionProps,
    errorMessageProps
  };
}
function $bdd25dc72710631f$export$f809e80f58e251d1(props, state, triggerRef) {
  let { autoComplete, name, isDisabled } = props;
  let modality = (0, $507fabe10e71c6fb$export$98e20ec92f614cfe)();
  let { visuallyHiddenProps } = (0, $5c3e21d68f1c4674$export$a966af930f325cab)();
  var _state_selectedKey;
  return {
    containerProps: {
      ...visuallyHiddenProps,
      "aria-hidden": true
    },
    inputProps: {
      type: "text",
      tabIndex: modality == null || state.isFocused || state.isOpen ? -1 : 0,
      style: {
        fontSize: 16
      },
      onFocus: () => triggerRef.current.focus(),
      disabled: isDisabled
    },
    selectProps: {
      tabIndex: -1,
      autoComplete,
      disabled: isDisabled,
      name,
      size: state.collection.size,
      value: (_state_selectedKey = state.selectedKey) !== null && _state_selectedKey !== void 0 ? _state_selectedKey : "",
      onChange: (e) => state.setSelectedKey(e.target.value)
    }
  };
}
function $bdd25dc72710631f$export$cbd84cdb2e668835(props) {
  let { state, triggerRef, label, name, isDisabled } = props;
  let { containerProps, inputProps, selectProps } = $bdd25dc72710631f$export$f809e80f58e251d1(props, state, triggerRef);
  var _state_selectedKey;
  if (state.collection.size <= 300)
    return /* @__PURE__ */ (0, yn).createElement("div", containerProps, /* @__PURE__ */ (0, yn).createElement("input", inputProps), /* @__PURE__ */ (0, yn).createElement("label", null, label, /* @__PURE__ */ (0, yn).createElement("select", selectProps, /* @__PURE__ */ (0, yn).createElement("option", null), [
      ...state.collection.getKeys()
    ].map((key) => {
      let item = state.collection.getItem(key);
      if (item.type === "item")
        return /* @__PURE__ */ (0, yn).createElement("option", {
          key: item.key,
          value: item.key
        }, item.textValue);
    }))));
  else if (name)
    return /* @__PURE__ */ (0, yn).createElement("input", {
      type: "hidden",
      autoComplete: selectProps.autoComplete,
      name,
      disabled: isDisabled,
      value: (_state_selectedKey = state.selectedKey) !== null && _state_selectedKey !== void 0 ? _state_selectedKey : ""
    });
  return null;
}

// ../../node_modules/@react-spectrum/picker/dist/import.mjs
init_preact_min();

// ../../node_modules/@react-stately/select/dist/import.mjs
init_preact_min();
function $2bc3a590c5373a4e$export$5159ec8b34d4ec12(props) {
  let triggerState = (0, $a28c903ee9ad8dc5$export$79fefeb1c2091ac3)(props);
  let listState = (0, $a0d645289fe9b86b$export$e7f05e985daf4b5f)({
    ...props,
    onSelectionChange: (key) => {
      if (props.onSelectionChange != null)
        props.onSelectionChange(key);
      triggerState.close();
    }
  });
  let [isFocused, setFocused] = (0, z)(false);
  return {
    ...listState,
    ...triggerState,
    open() {
      if (listState.collection.size !== 0)
        triggerState.open();
    },
    toggle(focusStrategy) {
      if (listState.collection.size !== 0)
        triggerState.toggle(focusStrategy);
    },
    isFocused,
    setFocused
  };
}

// ../../node_modules/@react-spectrum/picker/dist/import.mjs
function $parcel$interopDefault14(a) {
  return a && a.__esModule ? a.default : a;
}
function $parcel$export12(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $45fc5064af81e0a8$exports = {};
var $d1a348ee160b1c35$exports = {};
$d1a348ee160b1c35$exports = {
  "loading": `\u062C\u0627\u0631\u064D \u0627\u0644\u062A\u062D\u0645\u064A\u0644...`,
  "placeholder": `\u062D\u062F\u062F \u062E\u064A\u0627\u0631\u064B\u0627...`
};
var $6f4b5567d8931b2c$exports = {};
$6f4b5567d8931b2c$exports = {
  "loading": `\u0417\u0430\u0440\u0435\u0436\u0434\u0430\u043D\u0435...`,
  "placeholder": `\u0418\u0437\u0431\u0435\u0440\u0435\u0442\u0435 \u043E\u043F\u0446\u0438\u044F`
};
var $413f5c9b05a53d70$exports = {};
$413f5c9b05a53d70$exports = {
  "loading": `Na\u010D\xEDt\xE1n\xED...`,
  "placeholder": `Vyberte vhodnou mo\u017Enost...`
};
var $23214587b45d0c7a$exports = {};
$23214587b45d0c7a$exports = {
  "loading": `Indl\xE6ser ...`,
  "placeholder": `V\xE6lg en mulighed ...`
};
var $291e2fb947064c57$exports = {};
$291e2fb947064c57$exports = {
  "loading": `Laden...`,
  "placeholder": `Option ausw\xE4hlen...`
};
var $c5247287ce725677$exports = {};
$c5247287ce725677$exports = {
  "loading": `\u03A6\u03CC\u03C1\u03C4\u03C9\u03C3\u03B7...`,
  "placeholder": `\u0395\u03C0\u03B9\u03BB\u03AD\u03BE\u03C4\u03B5\u2026`
};
var $3d85b21727aef233$exports = {};
$3d85b21727aef233$exports = {
  "placeholder": `Select an option\u2026`,
  "loading": `Loading\u2026`
};
var $573c338a19d2e44a$exports = {};
$573c338a19d2e44a$exports = {
  "loading": `Cargando\u2026`,
  "placeholder": `Selecciona una de estas opciones...`
};
var $52537a7562a0fcd4$exports = {};
$52537a7562a0fcd4$exports = {
  "loading": `Laadimine...`,
  "placeholder": `Valige valikuline...`
};
var $f128a549f8c2b170$exports = {};
$f128a549f8c2b170$exports = {
  "loading": `Ladataan\u2026`,
  "placeholder": `Valitse vaihtoehto...`
};
var $f69e7a23857afc72$exports = {};
$f69e7a23857afc72$exports = {
  "loading": `Chargement...`,
  "placeholder": `S\xE9lectionnez une option...`
};
var $cf880887f8515ea2$exports = {};
$cf880887f8515ea2$exports = {
  "loading": `\u05D8\u05D5\u05E2\u05DF...`,
  "placeholder": `\u05D1\u05D7\u05E8 \u05D0\u05E4\u05E9\u05E8\u05D5\u05EA...`
};
var $1f679bbb79879af2$exports = {};
$1f679bbb79879af2$exports = {
  "loading": `U\u010Ditavam...`,
  "placeholder": `Odaberite opciju`
};
var $fc9bc2ec180ca71d$exports = {};
$fc9bc2ec180ca71d$exports = {
  "loading": `Bet\xF6lt\xE9s folyamatban\u2026`,
  "placeholder": `V\xE1lasszon egy opci\xF3t\u2026`
};
var $9fbc1ff7e87407ac$exports = {};
$9fbc1ff7e87407ac$exports = {
  "loading": `Caricamento...`,
  "placeholder": `Seleziona un\u2019opzione...`
};
var $96673b78dbaf44b6$exports = {};
$96673b78dbaf44b6$exports = {
  "loading": `\u8AAD\u307F\u8FBC\u307F\u4E2D...`,
  "placeholder": `\u30AA\u30D7\u30B7\u30E7\u30F3\u3092\u9078\u629E...`
};
var $beddb5ded972a868$exports = {};
$beddb5ded972a868$exports = {
  "loading": `\uB85C\uB4DC \uC911`,
  "placeholder": `\uC120\uD0DD \uC0AC\uD56D \uC120\uD0DD`
};
var $2ac19a654f19cde2$exports = {};
$2ac19a654f19cde2$exports = {
  "loading": `\u012Ekeliama...`,
  "placeholder": `Pasirinkite parinkt\u012F...`
};
var $844be78af2d57459$exports = {};
$844be78af2d57459$exports = {
  "loading": `Notiek iel\u0101de...`,
  "placeholder": `Atlasiet opciju...`
};
var $42b05097f4e27f73$exports = {};
$42b05097f4e27f73$exports = {
  "loading": `Laster inn ...`,
  "placeholder": `Velg et alternativ...`
};
var $74dd3f417665b06f$exports = {};
$74dd3f417665b06f$exports = {
  "loading": `Laden...`,
  "placeholder": `Optie selecteren...`
};
var $6221651ca0306be3$exports = {};
$6221651ca0306be3$exports = {
  "loading": `\u0141adowanie...`,
  "placeholder": `Wybierz opcj\u0119...`
};
var $45bd58553e21ec53$exports = {};
$45bd58553e21ec53$exports = {
  "loading": `Carregando...`,
  "placeholder": `Selecione uma op\xE7\xE3o...`
};
var $7ae7985d84009e3a$exports = {};
$7ae7985d84009e3a$exports = {
  "loading": `A carregar...`,
  "placeholder": `Selecionar uma op\xE7\xE3o...`
};
var $c83f9725f6024f47$exports = {};
$c83f9725f6024f47$exports = {
  "loading": `Se \xEEncarc\u0103...`,
  "placeholder": `Selecta\u021Bi o op\u021Biune`
};
var $0fb522ae7b51fefd$exports = {};
$0fb522ae7b51fefd$exports = {
  "loading": `\u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430...`,
  "placeholder": `\u0412\u044B\u0431\u0440\u0430\u0442\u044C \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440...`
};
var $5ca94db2a021a726$exports = {};
$5ca94db2a021a726$exports = {
  "loading": `Na\u010D\xEDtava sa...`,
  "placeholder": `Vyberte mo\u017Enos\u0165...`
};
var $2c7a753ed24e9851$exports = {};
$2c7a753ed24e9851$exports = {
  "loading": `Nalaganje...`,
  "placeholder": `Izberite mo\u017Enost`
};
var $14a1d1750c9de591$exports = {};
$14a1d1750c9de591$exports = {
  "loading": `U\u010Ditavam...`,
  "placeholder": `Izaberite opciju`
};
var $bf3f89a84488b301$exports = {};
$bf3f89a84488b301$exports = {
  "loading": `L\xE4ser in...`,
  "placeholder": `V\xE4lj ett alternativ...`
};
var $1ff90abddf42fc72$exports = {};
$1ff90abddf42fc72$exports = {
  "loading": `Y\xFCkleniyor...`,
  "placeholder": `Bir se\xE7im yap\u0131n\u2026`
};
var $4f07d8c17926a679$exports = {};
$4f07d8c17926a679$exports = {
  "loading": `\u0417\u0430\u0432\u0430\u043D\u0442\u0430\u0436\u0435\u043D\u043D\u044F\u2026`,
  "placeholder": `\u0412\u0438\u0431\u0435\u0440\u0456\u0442\u044C \u043E\u043F\u0446\u0456\u044E...`
};
var $07a8d3b903fa886f$exports = {};
$07a8d3b903fa886f$exports = {
  "loading": `\u6B63\u5728\u52A0\u8F7D...`,
  "placeholder": `\u9009\u62E9\u4E00\u4E2A\u9009\u9879...`
};
var $e1416a5539091e36$exports = {};
$e1416a5539091e36$exports = {
  "loading": `\u6B63\u5728\u8F09\u5165`,
  "placeholder": `\u9078\u53D6\u4E00\u500B\u9078\u9805`
};
$45fc5064af81e0a8$exports = {
  "ar-AE": $d1a348ee160b1c35$exports,
  "bg-BG": $6f4b5567d8931b2c$exports,
  "cs-CZ": $413f5c9b05a53d70$exports,
  "da-DK": $23214587b45d0c7a$exports,
  "de-DE": $291e2fb947064c57$exports,
  "el-GR": $c5247287ce725677$exports,
  "en-US": $3d85b21727aef233$exports,
  "es-ES": $573c338a19d2e44a$exports,
  "et-EE": $52537a7562a0fcd4$exports,
  "fi-FI": $f128a549f8c2b170$exports,
  "fr-FR": $f69e7a23857afc72$exports,
  "he-IL": $cf880887f8515ea2$exports,
  "hr-HR": $1f679bbb79879af2$exports,
  "hu-HU": $fc9bc2ec180ca71d$exports,
  "it-IT": $9fbc1ff7e87407ac$exports,
  "ja-JP": $96673b78dbaf44b6$exports,
  "ko-KR": $beddb5ded972a868$exports,
  "lt-LT": $2ac19a654f19cde2$exports,
  "lv-LV": $844be78af2d57459$exports,
  "nb-NO": $42b05097f4e27f73$exports,
  "nl-NL": $74dd3f417665b06f$exports,
  "pl-PL": $6221651ca0306be3$exports,
  "pt-BR": $45bd58553e21ec53$exports,
  "pt-PT": $7ae7985d84009e3a$exports,
  "ro-RO": $c83f9725f6024f47$exports,
  "ru-RU": $0fb522ae7b51fefd$exports,
  "sk-SK": $5ca94db2a021a726$exports,
  "sl-SI": $2c7a753ed24e9851$exports,
  "sr-SP": $14a1d1750c9de591$exports,
  "sv-SE": $bf3f89a84488b301$exports,
  "tr-TR": $1ff90abddf42fc72$exports,
  "uk-UA": $4f07d8c17926a679$exports,
  "zh-CN": $07a8d3b903fa886f$exports,
  "zh-TW": $e1416a5539091e36$exports
};
var $3c14925a8a65017e$exports = {};
$parcel$export12($3c14925a8a65017e$exports, "spectrum-Dropdown", () => $3c14925a8a65017e$export$f33c6833ddc773bd, (v) => $3c14925a8a65017e$export$f33c6833ddc773bd = v);
$parcel$export12($3c14925a8a65017e$exports, "spectrum-Dropdown-chevron", () => $3c14925a8a65017e$export$abbb0cf96dbbb8a0, (v) => $3c14925a8a65017e$export$abbb0cf96dbbb8a0 = v);
$parcel$export12($3c14925a8a65017e$exports, "spectrum-Dropdown-trigger", () => $3c14925a8a65017e$export$37a6d27a7cb47ce5, (v) => $3c14925a8a65017e$export$37a6d27a7cb47ce5 = v);
$parcel$export12($3c14925a8a65017e$exports, "spectrum-Dropdown-label", () => $3c14925a8a65017e$export$1235a00795b885e7, (v) => $3c14925a8a65017e$export$1235a00795b885e7 = v);
$parcel$export12($3c14925a8a65017e$exports, "is-placeholder", () => $3c14925a8a65017e$export$e5b2f5233e4e5194, (v) => $3c14925a8a65017e$export$e5b2f5233e4e5194 = v);
$parcel$export12($3c14925a8a65017e$exports, "spectrum-Icon", () => $3c14925a8a65017e$export$d374b04f30360026, (v) => $3c14925a8a65017e$export$d374b04f30360026 = v);
$parcel$export12($3c14925a8a65017e$exports, "spectrum-Dropdown-invalidIcon", () => $3c14925a8a65017e$export$a32fdb5a063ea755, (v) => $3c14925a8a65017e$export$a32fdb5a063ea755 = v);
$parcel$export12($3c14925a8a65017e$exports, "spectrum-Dropdown-progressCircle", () => $3c14925a8a65017e$export$18281c34cabbd13f, (v) => $3c14925a8a65017e$export$18281c34cabbd13f = v);
$parcel$export12($3c14925a8a65017e$exports, "spectrum-Dropdown--quiet", () => $3c14925a8a65017e$export$b2306417a70c7a62, (v) => $3c14925a8a65017e$export$b2306417a70c7a62 = v);
$parcel$export12($3c14925a8a65017e$exports, "spectrum-Dropdown-popover--quiet", () => $3c14925a8a65017e$export$cbeaf986973c0633, (v) => $3c14925a8a65017e$export$cbeaf986973c0633 = v);
$parcel$export12($3c14925a8a65017e$exports, "spectrum-Field", () => $3c14925a8a65017e$export$f6d480ae1e56eba0, (v) => $3c14925a8a65017e$export$f6d480ae1e56eba0 = v);
$parcel$export12($3c14925a8a65017e$exports, "spectrum-Dropdown-fieldWrapper--quiet", () => $3c14925a8a65017e$export$66ddc2410b0e9eba, (v) => $3c14925a8a65017e$export$66ddc2410b0e9eba = v);
$parcel$export12($3c14925a8a65017e$exports, "spectrum-Dropdown-fieldWrapper--positionSide", () => $3c14925a8a65017e$export$c0b4e9596538c7b1, (v) => $3c14925a8a65017e$export$c0b4e9596538c7b1 = v);
$parcel$export12($3c14925a8a65017e$exports, "is-selected", () => $3c14925a8a65017e$export$1e0fb04f31d3c22a, (v) => $3c14925a8a65017e$export$1e0fb04f31d3c22a = v);
$parcel$export12($3c14925a8a65017e$exports, "is-invalid", () => $3c14925a8a65017e$export$14a30de2866685fa, (v) => $3c14925a8a65017e$export$14a30de2866685fa = v);
$parcel$export12($3c14925a8a65017e$exports, "is-disabled", () => $3c14925a8a65017e$export$d35bc1e505d1ebbf, (v) => $3c14925a8a65017e$export$d35bc1e505d1ebbf = v);
$parcel$export12($3c14925a8a65017e$exports, "is-hovered", () => $3c14925a8a65017e$export$b8813cd5d7824ce7, (v) => $3c14925a8a65017e$export$b8813cd5d7824ce7 = v);
$parcel$export12($3c14925a8a65017e$exports, "focus-ring", () => $3c14925a8a65017e$export$f39a09f249340e2a, (v) => $3c14925a8a65017e$export$f39a09f249340e2a = v);
var $3c14925a8a65017e$export$f33c6833ddc773bd;
var $3c14925a8a65017e$export$abbb0cf96dbbb8a0;
var $3c14925a8a65017e$export$37a6d27a7cb47ce5;
var $3c14925a8a65017e$export$1235a00795b885e7;
var $3c14925a8a65017e$export$e5b2f5233e4e5194;
var $3c14925a8a65017e$export$d374b04f30360026;
var $3c14925a8a65017e$export$a32fdb5a063ea755;
var $3c14925a8a65017e$export$18281c34cabbd13f;
var $3c14925a8a65017e$export$b2306417a70c7a62;
var $3c14925a8a65017e$export$cbeaf986973c0633;
var $3c14925a8a65017e$export$f6d480ae1e56eba0;
var $3c14925a8a65017e$export$66ddc2410b0e9eba;
var $3c14925a8a65017e$export$c0b4e9596538c7b1;
var $3c14925a8a65017e$export$1e0fb04f31d3c22a;
var $3c14925a8a65017e$export$14a30de2866685fa;
var $3c14925a8a65017e$export$d35bc1e505d1ebbf;
var $3c14925a8a65017e$export$b8813cd5d7824ce7;
var $3c14925a8a65017e$export$f39a09f249340e2a;
$3c14925a8a65017e$export$f33c6833ddc773bd = "spectrum-Dropdown_6d8ec0";
$3c14925a8a65017e$export$abbb0cf96dbbb8a0 = "spectrum-Dropdown-chevron_6d8ec0";
$3c14925a8a65017e$export$37a6d27a7cb47ce5 = "spectrum-Dropdown-trigger_6d8ec0";
$3c14925a8a65017e$export$1235a00795b885e7 = "spectrum-Dropdown-label_6d8ec0";
$3c14925a8a65017e$export$e5b2f5233e4e5194 = "is-placeholder_6d8ec0";
$3c14925a8a65017e$export$d374b04f30360026 = "spectrum-Icon_6d8ec0";
$3c14925a8a65017e$export$a32fdb5a063ea755 = "spectrum-Dropdown-invalidIcon_6d8ec0";
$3c14925a8a65017e$export$18281c34cabbd13f = "spectrum-Dropdown-progressCircle_6d8ec0";
$3c14925a8a65017e$export$b2306417a70c7a62 = "spectrum-Dropdown--quiet_6d8ec0";
$3c14925a8a65017e$export$cbeaf986973c0633 = "spectrum-Dropdown-popover--quiet_6d8ec0";
$3c14925a8a65017e$export$f6d480ae1e56eba0 = "spectrum-Field_6d8ec0";
$3c14925a8a65017e$export$66ddc2410b0e9eba = "spectrum-Dropdown-fieldWrapper--quiet_6d8ec0";
$3c14925a8a65017e$export$c0b4e9596538c7b1 = "spectrum-Dropdown-fieldWrapper--positionSide_6d8ec0";
$3c14925a8a65017e$export$1e0fb04f31d3c22a = "is-selected_6d8ec0";
$3c14925a8a65017e$export$14a30de2866685fa = "is-invalid_6d8ec0";
$3c14925a8a65017e$export$d35bc1e505d1ebbf = "is-disabled_6d8ec0";
$3c14925a8a65017e$export$b8813cd5d7824ce7 = "is-hovered_6d8ec0";
$3c14925a8a65017e$export$f39a09f249340e2a = "focus-ring_6d8ec0";
function $51664a9007a3c6f9$var$Picker(props, ref) {
  props = (0, $59d09bcc83651bf9$export$1e5c9e6e4e15efe3)(props, "picker");
  props = (0, $7167f8da3cce35e4$export$521c373ccc32c300)(props);
  let stringFormatter = (0, $fca6afa0e843324b$export$f12b703ca79dfbb1)((0, /* @__PURE__ */ $parcel$interopDefault14($45fc5064af81e0a8$exports)));
  let { autoComplete, isDisabled, direction = "bottom", align = "start", shouldFlip = true, placeholder = stringFormatter.format("placeholder"), validationState, isQuiet, label, labelPosition = "top", menuWidth, name, autoFocus } = props;
  let state = (0, $2bc3a590c5373a4e$export$5159ec8b34d4ec12)(props);
  let domRef = (0, $98e5a8ae0e6415af$export$c2c55ef9111cafd8)(ref);
  let popoverRef = (0, ie)();
  let triggerRef = (0, ie)();
  let unwrappedTriggerRef = (0, $98e5a8ae0e6415af$export$1d5cc31d9d8df817)(triggerRef);
  let listboxRef = (0, ie)();
  let isLoadingInitial = props.isLoading && state.collection.size === 0;
  let isLoadingMore = props.isLoading && state.collection.size > 0;
  let progressCircleId = (0, $bdb11010cef70236$export$f680877a34711e37)();
  let layout = (0, $3247d4a89e6094e9$export$25768ea656ae32a7)(state, isLoadingMore);
  let { labelProps, triggerProps, valueProps, menuProps, descriptionProps, errorMessageProps } = (0, $58aed456727eb0f3$export$e64b2f635402ca43)({
    ...props,
    "aria-describedby": isLoadingInitial ? progressCircleId : void 0,
    keyboardDelegate: layout
  }, state, unwrappedTriggerRef);
  let isMobile = (0, $fdbe26a36ce1c672$export$736bf165441b18c7)();
  let { hoverProps, isHovered } = (0, $6179b936705e76d3$export$ae780daf29e6d456)({
    isDisabled
  });
  let listbox = /* @__PURE__ */ (0, yn).createElement((0, $3247d4a89e6094e9$export$1afdcf349979fb7e), {
    ...menuProps,
    ref: listboxRef,
    disallowEmptySelection: true,
    autoFocus: state.focusStrategy || true,
    shouldSelectOnPressUp: true,
    focusOnPointerEnter: true,
    layout,
    state,
    width: isMobile ? "100%" : void 0,
    // Set max height: inherit so Tray scrolling works
    UNSAFE_style: {
      maxHeight: "inherit"
    },
    isLoading: props.isLoading,
    onLoadMore: props.onLoadMore
  });
  let [buttonWidth, setButtonWidth] = (0, z)(null);
  let { scale } = (0, $7167f8da3cce35e4$export$693cdb10cec23617)();
  let onResize = (0, ae)(() => {
    if (!isMobile && unwrappedTriggerRef.current) {
      let width = unwrappedTriggerRef.current.offsetWidth;
      setButtonWidth(width);
    }
  }, [
    unwrappedTriggerRef,
    setButtonWidth,
    isMobile
  ]);
  (0, $9daab02d461809db$export$683480f191c0e3ea)({
    ref: unwrappedTriggerRef,
    onResize
  });
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(onResize, [
    scale,
    state.selectedKey,
    onResize
  ]);
  let overlay;
  if (isMobile)
    overlay = /* @__PURE__ */ (0, yn).createElement((0, $1afc87f3d16a5a1c$export$4589ed81930b555c), {
      state
    }, listbox);
  else {
    let width = isQuiet ? null : buttonWidth;
    let style = {
      width: menuWidth ? (0, $380ed8f3903c3931$export$abc24f5b99744ea6)(menuWidth) : width,
      minWidth: isQuiet ? `calc(${buttonWidth}px + calc(2 * var(--spectrum-dropdown-quiet-offset)))` : buttonWidth
    };
    overlay = /* @__PURE__ */ (0, yn).createElement((0, $17b503f7de08fecc$export$5b6b19405a83ff9d), {
      UNSAFE_style: style,
      UNSAFE_className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault14($3c14925a8a65017e$exports)), "spectrum-Dropdown-popover", {
        "spectrum-Dropdown-popover--quiet": isQuiet
      }),
      ref: popoverRef,
      placement: `${direction} ${align}`,
      shouldFlip,
      hideArrow: true,
      state,
      triggerRef: unwrappedTriggerRef,
      scrollRef: listboxRef
    }, listbox);
  }
  let contents = state.selectedItem ? state.selectedItem.rendered : placeholder;
  if (typeof contents === "string")
    contents = /* @__PURE__ */ (0, yn).createElement((0, $cd449e8defa988f0$export$5f1af8db9871e1d6), null, contents);
  let picker = /* @__PURE__ */ (0, yn).createElement("div", {
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault14($3c14925a8a65017e$exports)), "spectrum-Dropdown", {
      "is-invalid": validationState === "invalid" && !isDisabled,
      "is-disabled": isDisabled,
      "spectrum-Dropdown--quiet": isQuiet
    })
  }, /* @__PURE__ */ (0, yn).createElement((0, $bdd25dc72710631f$export$cbd84cdb2e668835), {
    autoComplete,
    isDisabled,
    state,
    triggerRef: unwrappedTriggerRef,
    label,
    name
  }), /* @__PURE__ */ (0, yn).createElement((0, $f1ab8c75478c6f73$export$3351871ee4b288b8), (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(hoverProps, triggerProps), /* @__PURE__ */ (0, yn).createElement((0, $b43bd559b476d0c4$export$47dc48f595b075da), {
    ref: triggerRef,
    isActive: state.isOpen,
    isQuiet,
    isDisabled,
    validationState,
    autoFocus,
    UNSAFE_className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault14($3c14925a8a65017e$exports)), "spectrum-Dropdown-trigger", {
      "is-hovered": isHovered
    })
  }, /* @__PURE__ */ (0, yn).createElement((0, $59d09bcc83651bf9$export$8107b24b91795686), {
    slots: {
      icon: {
        UNSAFE_className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault14($3c14925a8a65017e$exports)), "spectrum-Icon"),
        size: "S"
      },
      text: {
        ...valueProps,
        UNSAFE_className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault14($3c14925a8a65017e$exports)), "spectrum-Dropdown-label", {
          "is-placeholder": !state.selectedItem
        })
      },
      description: {
        isHidden: true
      }
    }
  }, contents), isLoadingInitial && /* @__PURE__ */ (0, yn).createElement((0, $79c16f64960b6385$export$c79b9d6b4cc92af7), {
    id: progressCircleId,
    isIndeterminate: true,
    size: "S",
    "aria-label": stringFormatter.format("loading"),
    UNSAFE_className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault14($3c14925a8a65017e$exports)), "spectrum-Dropdown-progressCircle")
  }), validationState === "invalid" && !isLoadingInitial && !isDisabled && /* @__PURE__ */ (0, yn).createElement((0, AlertMedium), {
    UNSAFE_className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault14($3c14925a8a65017e$exports)), "spectrum-Dropdown-invalidIcon")
  }), /* @__PURE__ */ (0, yn).createElement((0, ChevronDownMedium), {
    UNSAFE_className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault14($3c14925a8a65017e$exports)), "spectrum-Dropdown-chevron")
  }))), state.collection.size === 0 ? null : overlay);
  let wrapperClassName = label ? (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault14($3c14925a8a65017e$exports)), "spectrum-Field", {
    "spectrum-Dropdown-fieldWrapper--quiet": isQuiet,
    "spectrum-Dropdown-fieldWrapper--positionSide": labelPosition === "side"
  }) : "";
  return /* @__PURE__ */ (0, yn).createElement((0, $b7ca5b4454a2009d$export$a455218a85c89869), {
    ...props,
    ref: domRef,
    wrapperClassName,
    labelProps,
    descriptionProps,
    errorMessageProps,
    showErrorIcon: false,
    includeNecessityIndicatorInAccessibilityName: true,
    elementType: "span"
  }, picker);
}
var $51664a9007a3c6f9$export$ba25329847403e11 = /* @__PURE__ */ (0, yn).forwardRef($51664a9007a3c6f9$var$Picker);

// ../../node_modules/@react-spectrum/tabs/dist/import.mjs
init_preact_min();

// ../../node_modules/@react-stately/tabs/dist/import.mjs
init_preact_min();
function $76f919a04c5a7d14$export$4ba071daf4e486(props) {
  let state = (0, $a0d645289fe9b86b$export$e7f05e985daf4b5f)({
    ...props,
    suppressTextValueWarning: true
  });
  let { selectionManager, collection, selectedKey: currentSelectedKey } = state;
  let lastSelectedKey = (0, ie)(currentSelectedKey);
  (0, K)(() => {
    let selectedKey = currentSelectedKey;
    if (selectionManager.isEmpty || !collection.getItem(selectedKey)) {
      selectedKey = collection.getFirstKey();
      while (state.disabledKeys.has(selectedKey) && selectedKey !== collection.getLastKey())
        selectedKey = collection.getKeyAfter(selectedKey);
      if (state.disabledKeys.has(selectedKey) && selectedKey === collection.getLastKey())
        selectedKey = collection.getFirstKey();
      if (selectedKey != null)
        selectionManager.setSelectedKeys([
          selectedKey
        ]);
    }
    if (selectedKey != null && selectionManager.focusedKey == null || !selectionManager.isFocused && selectedKey !== lastSelectedKey.current)
      selectionManager.setFocusedKey(selectedKey);
    lastSelectedKey.current = selectedKey;
  });
  return {
    ...state,
    isDisabled: props.isDisabled || false
  };
}

// ../../node_modules/@react-aria/tabs/dist/import.mjs
init_preact_min();
var $99b62ae3ff97ec45$export$c5f62239608282b6 = /* @__PURE__ */ new WeakMap();
function $99b62ae3ff97ec45$export$567fc7097e064344(state, key, role) {
  if (typeof key === "string")
    key = key.replace(/\s+/g, "");
  let baseId = $99b62ae3ff97ec45$export$c5f62239608282b6.get(state);
  return `${baseId}-${role}-${key}`;
}
function $0175d55c2a017ebc$export$fdf4756d5b8ef90a(props, state, ref) {
  let { key, isDisabled: propsDisabled, shouldSelectOnPressUp } = props;
  let { selectionManager: manager, selectedKey } = state;
  let isSelected = key === selectedKey;
  let isDisabled = propsDisabled || state.isDisabled || state.disabledKeys.has(key);
  let { itemProps, isPressed } = (0, $880e95eb8b93ba9a$export$ecf600387e221c37)({
    selectionManager: manager,
    key,
    ref,
    isDisabled,
    shouldSelectOnPressUp
  });
  let tabId = (0, $99b62ae3ff97ec45$export$567fc7097e064344)(state, key, "tab");
  let tabPanelId = (0, $99b62ae3ff97ec45$export$567fc7097e064344)(state, key, "tabpanel");
  let { tabIndex } = itemProps;
  return {
    tabProps: {
      ...itemProps,
      id: tabId,
      "aria-selected": isSelected,
      "aria-disabled": isDisabled || void 0,
      "aria-controls": isSelected ? tabPanelId : void 0,
      tabIndex: isDisabled ? void 0 : tabIndex,
      role: "tab"
    },
    isSelected,
    isDisabled,
    isPressed
  };
}
function $34bce698202e07cb$export$fae0121b5afe572d(props, state, ref) {
  let tabIndex = (0, $83013635b024ae3d$export$eac1895992b9f3d6)(ref) ? void 0 : 0;
  const id = (0, $99b62ae3ff97ec45$export$567fc7097e064344)(state, state === null || state === void 0 ? void 0 : state.selectedKey, "tabpanel");
  const tabPanelProps = (0, $313b98861ee5dd6c$export$d6875122194c7b44)({
    ...props,
    id,
    "aria-labelledby": (0, $99b62ae3ff97ec45$export$567fc7097e064344)(state, state === null || state === void 0 ? void 0 : state.selectedKey, "tab")
  });
  return {
    tabPanelProps: (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(tabPanelProps, {
      tabIndex,
      role: "tabpanel",
      "aria-describedby": props["aria-describedby"],
      "aria-details": props["aria-details"]
    })
  };
}
var $bfc6f2d60b8a4c40$export$15010ca3c1abe90b = class {
  getKeyLeftOf(key) {
    if (this.flipDirection)
      return this.getNextKey(key);
    else {
      if (this.orientation === "horizontal")
        return this.getPreviousKey(key);
      return null;
    }
  }
  getKeyRightOf(key) {
    if (this.flipDirection)
      return this.getPreviousKey(key);
    else {
      if (this.orientation === "horizontal")
        return this.getNextKey(key);
      return null;
    }
  }
  getKeyAbove(key) {
    if (this.orientation === "vertical")
      return this.getPreviousKey(key);
    return null;
  }
  getKeyBelow(key) {
    if (this.orientation === "vertical")
      return this.getNextKey(key);
    return null;
  }
  getFirstKey() {
    let key = this.collection.getFirstKey();
    if (this.disabledKeys.has(key))
      key = this.getNextKey(key);
    return key;
  }
  getLastKey() {
    let key = this.collection.getLastKey();
    if (this.disabledKeys.has(key))
      key = this.getPreviousKey(key);
    return key;
  }
  getNextKey(key) {
    do {
      key = this.collection.getKeyAfter(key);
      if (key == null)
        key = this.collection.getFirstKey();
    } while (this.disabledKeys.has(key));
    return key;
  }
  getPreviousKey(key) {
    do {
      key = this.collection.getKeyBefore(key);
      if (key == null)
        key = this.collection.getLastKey();
    } while (this.disabledKeys.has(key));
    return key;
  }
  constructor(collection, direction, orientation, disabledKeys = /* @__PURE__ */ new Set()) {
    this.collection = collection;
    this.flipDirection = direction === "rtl" && orientation === "horizontal";
    this.orientation = orientation;
    this.disabledKeys = disabledKeys;
  }
};
function $58d314389b21fa3f$export$773e389e644c5874(props, state, ref) {
  let { orientation = "horizontal", keyboardActivation = "automatic" } = props;
  let { collection, selectionManager: manager, disabledKeys } = state;
  let { direction } = (0, $18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  let delegate = (0, j)(() => new (0, $bfc6f2d60b8a4c40$export$15010ca3c1abe90b)(collection, direction, orientation, disabledKeys), [
    collection,
    disabledKeys,
    orientation,
    direction
  ]);
  let { collectionProps } = (0, $ae20dd8cbca75726$export$d6daf82dcd84e87c)({
    ref,
    selectionManager: manager,
    keyboardDelegate: delegate,
    selectOnFocus: keyboardActivation === "automatic",
    disallowEmptySelection: true,
    scrollRef: ref
  });
  let tabsId = (0, $bdb11010cef70236$export$f680877a34711e37)();
  (0, $99b62ae3ff97ec45$export$c5f62239608282b6).set(state, tabsId);
  let tabListLabelProps = (0, $313b98861ee5dd6c$export$d6875122194c7b44)({
    ...props,
    id: tabsId
  });
  return {
    tabListProps: {
      ...(0, $3ef42575df84b30b$export$9d1611c77c2fe928)(collectionProps, tabListLabelProps),
      role: "tablist",
      "aria-orientation": orientation,
      tabIndex: void 0
    }
  };
}

// ../../node_modules/@react-spectrum/tabs/dist/import.mjs
function $parcel$interopDefault15(a) {
  return a && a.__esModule ? a.default : a;
}
function $parcel$export13(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $32d597b82a7aad64$exports = {};
$parcel$export13($32d597b82a7aad64$exports, "spectrum-TabsPanel", () => $32d597b82a7aad64$export$34f1a65c57bb7bb, (v) => $32d597b82a7aad64$export$34f1a65c57bb7bb = v);
$parcel$export13($32d597b82a7aad64$exports, "spectrum-TabsPanel--horizontal", () => $32d597b82a7aad64$export$778fb839eaa0528c, (v) => $32d597b82a7aad64$export$778fb839eaa0528c = v);
$parcel$export13($32d597b82a7aad64$exports, "spectrum-TabsPanel--vertical", () => $32d597b82a7aad64$export$9a6e2fb72c648072, (v) => $32d597b82a7aad64$export$9a6e2fb72c648072 = v);
$parcel$export13($32d597b82a7aad64$exports, "spectrum-Tabs", () => $32d597b82a7aad64$export$35c105c0d9c8e56f, (v) => $32d597b82a7aad64$export$35c105c0d9c8e56f = v);
$parcel$export13($32d597b82a7aad64$exports, "spectrum-Tabs-item", () => $32d597b82a7aad64$export$123e4c01a5440a3e, (v) => $32d597b82a7aad64$export$123e4c01a5440a3e = v);
$parcel$export13($32d597b82a7aad64$exports, "is-disabled", () => $32d597b82a7aad64$export$d35bc1e505d1ebbf, (v) => $32d597b82a7aad64$export$d35bc1e505d1ebbf = v);
$parcel$export13($32d597b82a7aad64$exports, "spectrum-Tabs-itemLabel", () => $32d597b82a7aad64$export$1f253edac4b98526, (v) => $32d597b82a7aad64$export$1f253edac4b98526 = v);
$parcel$export13($32d597b82a7aad64$exports, "spectrum-Icon", () => $32d597b82a7aad64$export$d374b04f30360026, (v) => $32d597b82a7aad64$export$d374b04f30360026 = v);
$parcel$export13($32d597b82a7aad64$exports, "spectrum-Tabs-selectionIndicator", () => $32d597b82a7aad64$export$a115f9117a19563e, (v) => $32d597b82a7aad64$export$a115f9117a19563e = v);
$parcel$export13($32d597b82a7aad64$exports, "spectrum-Tabs--horizontal", () => $32d597b82a7aad64$export$229f1ac4d3d38f0e, (v) => $32d597b82a7aad64$export$229f1ac4d3d38f0e = v);
$parcel$export13($32d597b82a7aad64$exports, "spectrum-Tabs--compact", () => $32d597b82a7aad64$export$e15c78184ee03abe, (v) => $32d597b82a7aad64$export$e15c78184ee03abe = v);
$parcel$export13($32d597b82a7aad64$exports, "spectrum-Tabs--isCollapsed", () => $32d597b82a7aad64$export$ea514cd060922d6b, (v) => $32d597b82a7aad64$export$ea514cd060922d6b = v);
$parcel$export13($32d597b82a7aad64$exports, "spectrum-Tabs--quiet", () => $32d597b82a7aad64$export$831e830d5828d42b, (v) => $32d597b82a7aad64$export$831e830d5828d42b = v);
$parcel$export13($32d597b82a7aad64$exports, "spectrum-Tabs--vertical", () => $32d597b82a7aad64$export$e415005be3957065, (v) => $32d597b82a7aad64$export$e415005be3957065 = v);
$parcel$export13($32d597b82a7aad64$exports, "spectrum-TabsPanel-collapseWrapper", () => $32d597b82a7aad64$export$e09869956b4c96f2, (v) => $32d597b82a7aad64$export$e09869956b4c96f2 = v);
$parcel$export13($32d597b82a7aad64$exports, "spectrum-TabsPanel-tabs", () => $32d597b82a7aad64$export$4a157a691c854e23, (v) => $32d597b82a7aad64$export$4a157a691c854e23 = v);
$parcel$export13($32d597b82a7aad64$exports, "spectrum-TabsPanel-tabpanel", () => $32d597b82a7aad64$export$acb5da0970288266, (v) => $32d597b82a7aad64$export$acb5da0970288266 = v);
$parcel$export13($32d597b82a7aad64$exports, "spectrum-Tabs-picker", () => $32d597b82a7aad64$export$12dc6b25c6dddfc1, (v) => $32d597b82a7aad64$export$12dc6b25c6dddfc1 = v);
$parcel$export13($32d597b82a7aad64$exports, "focus-ring", () => $32d597b82a7aad64$export$f39a09f249340e2a, (v) => $32d597b82a7aad64$export$f39a09f249340e2a = v);
$parcel$export13($32d597b82a7aad64$exports, "spectrum-Tabs--emphasized", () => $32d597b82a7aad64$export$87b15021e28e067a, (v) => $32d597b82a7aad64$export$87b15021e28e067a = v);
$parcel$export13($32d597b82a7aad64$exports, "is-hovered", () => $32d597b82a7aad64$export$b8813cd5d7824ce7, (v) => $32d597b82a7aad64$export$b8813cd5d7824ce7 = v);
$parcel$export13($32d597b82a7aad64$exports, "is-selected", () => $32d597b82a7aad64$export$1e0fb04f31d3c22a, (v) => $32d597b82a7aad64$export$1e0fb04f31d3c22a = v);
var $32d597b82a7aad64$export$34f1a65c57bb7bb;
var $32d597b82a7aad64$export$778fb839eaa0528c;
var $32d597b82a7aad64$export$9a6e2fb72c648072;
var $32d597b82a7aad64$export$35c105c0d9c8e56f;
var $32d597b82a7aad64$export$123e4c01a5440a3e;
var $32d597b82a7aad64$export$d35bc1e505d1ebbf;
var $32d597b82a7aad64$export$1f253edac4b98526;
var $32d597b82a7aad64$export$d374b04f30360026;
var $32d597b82a7aad64$export$a115f9117a19563e;
var $32d597b82a7aad64$export$229f1ac4d3d38f0e;
var $32d597b82a7aad64$export$e15c78184ee03abe;
var $32d597b82a7aad64$export$ea514cd060922d6b;
var $32d597b82a7aad64$export$831e830d5828d42b;
var $32d597b82a7aad64$export$e415005be3957065;
var $32d597b82a7aad64$export$e09869956b4c96f2;
var $32d597b82a7aad64$export$4a157a691c854e23;
var $32d597b82a7aad64$export$acb5da0970288266;
var $32d597b82a7aad64$export$12dc6b25c6dddfc1;
var $32d597b82a7aad64$export$f39a09f249340e2a;
var $32d597b82a7aad64$export$87b15021e28e067a;
var $32d597b82a7aad64$export$b8813cd5d7824ce7;
var $32d597b82a7aad64$export$1e0fb04f31d3c22a;
$32d597b82a7aad64$export$34f1a65c57bb7bb = "spectrum-TabsPanel_3e140b";
$32d597b82a7aad64$export$778fb839eaa0528c = "spectrum-TabsPanel--horizontal_3e140b";
$32d597b82a7aad64$export$9a6e2fb72c648072 = "spectrum-TabsPanel--vertical_3e140b";
$32d597b82a7aad64$export$35c105c0d9c8e56f = "spectrum-Tabs_3e140b";
$32d597b82a7aad64$export$123e4c01a5440a3e = "spectrum-Tabs-item_3e140b";
$32d597b82a7aad64$export$d35bc1e505d1ebbf = "is-disabled_3e140b";
$32d597b82a7aad64$export$1f253edac4b98526 = "spectrum-Tabs-itemLabel_3e140b";
$32d597b82a7aad64$export$d374b04f30360026 = "spectrum-Icon_3e140b";
$32d597b82a7aad64$export$a115f9117a19563e = "spectrum-Tabs-selectionIndicator_3e140b";
$32d597b82a7aad64$export$229f1ac4d3d38f0e = "spectrum-Tabs--horizontal_3e140b";
$32d597b82a7aad64$export$e15c78184ee03abe = "spectrum-Tabs--compact_3e140b";
$32d597b82a7aad64$export$ea514cd060922d6b = "spectrum-Tabs--isCollapsed_3e140b";
$32d597b82a7aad64$export$831e830d5828d42b = "spectrum-Tabs--quiet_3e140b";
$32d597b82a7aad64$export$e415005be3957065 = "spectrum-Tabs--vertical_3e140b";
$32d597b82a7aad64$export$e09869956b4c96f2 = "spectrum-TabsPanel-collapseWrapper_3e140b";
$32d597b82a7aad64$export$4a157a691c854e23 = "spectrum-TabsPanel-tabs_3e140b";
$32d597b82a7aad64$export$acb5da0970288266 = "spectrum-TabsPanel-tabpanel_3e140b";
$32d597b82a7aad64$export$12dc6b25c6dddfc1 = "spectrum-Tabs-picker_3e140b";
$32d597b82a7aad64$export$f39a09f249340e2a = "focus-ring_3e140b";
$32d597b82a7aad64$export$87b15021e28e067a = "spectrum-Tabs--emphasized_3e140b";
$32d597b82a7aad64$export$b8813cd5d7824ce7 = "is-hovered_3e140b";
$32d597b82a7aad64$export$1e0fb04f31d3c22a = "is-selected_3e140b";
var $65ab70ddbed1564b$var$TabContext = /* @__PURE__ */ (0, yn).createContext(null);
function $65ab70ddbed1564b$var$Tabs(props, ref) {
  props = (0, $7167f8da3cce35e4$export$521c373ccc32c300)(props);
  let { orientation = "horizontal", density = "regular", children, ...otherProps } = props;
  let domRef = (0, $98e5a8ae0e6415af$export$c2c55ef9111cafd8)(ref);
  let tablistRef = (0, ie)();
  let wrapperRef = (0, ie)();
  let { direction } = (0, $18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  let { styleProps } = (0, $380ed8f3903c3931$export$b8e6fb9d2dff3f41)(otherProps);
  let [collapsed, setCollapsed] = (0, z)(false);
  let [selectedTab, setSelectedTab] = (0, z)();
  const [tabListState, setTabListState] = (0, z)(null);
  let [tabPositions, setTabPositions] = (0, z)([]);
  let prevTabPositions = (0, ie)(tabPositions);
  (0, K)(() => {
    if (tablistRef.current) {
      let selectedTab2 = tablistRef.current.querySelector(`[data-key="${tabListState === null || tabListState === void 0 ? void 0 : tabListState.selectedKey}"]`);
      if (selectedTab2 != null)
        setSelectedTab(selectedTab2);
    }
  }, [
    children,
    tabListState === null || tabListState === void 0 ? void 0 : tabListState.selectedKey,
    collapsed,
    tablistRef
  ]);
  let checkShouldCollapse = (0, ae)(() => {
    if (wrapperRef.current && orientation !== "vertical") {
      let tabsComponent = wrapperRef.current;
      let tabs = tablistRef.current.querySelectorAll('[role="tab"]');
      let tabDimensions = [
        ...tabs
      ].map((tab) => tab.getBoundingClientRect());
      let end = direction === "rtl" ? "left" : "right";
      let farEdgeTabList = tabsComponent.getBoundingClientRect()[end];
      let farEdgeLastTab = tabDimensions[tabDimensions.length - 1][end];
      let shouldCollapse = direction === "rtl" ? farEdgeLastTab < farEdgeTabList : farEdgeTabList < farEdgeLastTab;
      setCollapsed(shouldCollapse);
      if (tabDimensions.length !== prevTabPositions.current.length || tabDimensions.some((box2, index) => {
        var _prevTabPositions_current_index, _prevTabPositions_current_index1;
        return (box2 === null || box2 === void 0 ? void 0 : box2.left) !== ((_prevTabPositions_current_index = prevTabPositions.current[index]) === null || _prevTabPositions_current_index === void 0 ? void 0 : _prevTabPositions_current_index.left) || (box2 === null || box2 === void 0 ? void 0 : box2.right) !== ((_prevTabPositions_current_index1 = prevTabPositions.current[index]) === null || _prevTabPositions_current_index1 === void 0 ? void 0 : _prevTabPositions_current_index1.right);
      })) {
        setTabPositions(tabDimensions);
        prevTabPositions.current = tabDimensions;
      }
    }
  }, [
    tablistRef,
    wrapperRef,
    direction,
    orientation,
    setCollapsed,
    prevTabPositions,
    setTabPositions
  ]);
  (0, K)(() => {
    checkShouldCollapse();
  }, [
    children,
    checkShouldCollapse
  ]);
  (0, $9daab02d461809db$export$683480f191c0e3ea)({
    ref: wrapperRef,
    onResize: checkShouldCollapse
  });
  let tabPanelProps = {
    "aria-labelledby": void 0
  };
  let collapsibleTabListId = (0, $bdb11010cef70236$export$f680877a34711e37)();
  if (collapsed && orientation !== "vertical")
    tabPanelProps["aria-labelledby"] = collapsibleTabListId;
  return /* @__PURE__ */ (0, yn).createElement($65ab70ddbed1564b$var$TabContext.Provider, {
    value: {
      tabProps: {
        ...props,
        orientation,
        density
      },
      tabState: {
        tabListState,
        setTabListState,
        selectedTab,
        collapsed
      },
      refs: {
        tablistRef,
        wrapperRef
      },
      tabPanelProps,
      tabLineState: tabPositions
    }
  }, /* @__PURE__ */ (0, yn).createElement("div", {
    ...(0, $65484d02dcb7eb3e$export$457c3d6518dd4c6f)(otherProps),
    ...styleProps,
    ref: domRef,
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault15($32d597b82a7aad64$exports)), "spectrum-TabsPanel", `spectrum-TabsPanel--${orientation}`, styleProps.className)
  }, props.children));
}
function $65ab70ddbed1564b$var$Tab(props) {
  let { item, state } = props;
  let { key, rendered } = item;
  let ref = (0, ie)();
  let { tabProps, isSelected, isDisabled } = (0, $0175d55c2a017ebc$export$fdf4756d5b8ef90a)({
    key
  }, state, ref);
  let { hoverProps, isHovered } = (0, $6179b936705e76d3$export$ae780daf29e6d456)({
    ...props
  });
  let domProps = (0, $65484d02dcb7eb3e$export$457c3d6518dd4c6f)(item.props);
  delete domProps.id;
  return /* @__PURE__ */ (0, yn).createElement((0, $907718708eab68af$export$1a38b4ad7f578e1d), {
    focusRingClass: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault15($32d597b82a7aad64$exports)), "focus-ring")
  }, /* @__PURE__ */ (0, yn).createElement("div", {
    ...(0, $3ef42575df84b30b$export$9d1611c77c2fe928)(tabProps, hoverProps, domProps),
    ref,
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault15($32d597b82a7aad64$exports)), "spectrum-Tabs-item", {
      "is-selected": isSelected,
      "is-disabled": isDisabled,
      "is-hovered": isHovered
    })
  }, /* @__PURE__ */ (0, yn).createElement((0, $59d09bcc83651bf9$export$8107b24b91795686), {
    slots: {
      icon: {
        size: "S",
        UNSAFE_className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault15($32d597b82a7aad64$exports)), "spectrum-Icon")
      },
      text: {
        UNSAFE_className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault15($32d597b82a7aad64$exports)), "spectrum-Tabs-itemLabel")
      }
    }
  }, typeof rendered === "string" ? /* @__PURE__ */ (0, yn).createElement((0, $cd449e8defa988f0$export$5f1af8db9871e1d6), null, rendered) : rendered)));
}
function $65ab70ddbed1564b$var$TabLine(props) {
  let { orientation, selectedTab, selectedKey } = props;
  let { direction } = (0, $18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  let { scale } = (0, $7167f8da3cce35e4$export$693cdb10cec23617)();
  let { tabLineState } = (0, ce)($65ab70ddbed1564b$var$TabContext);
  let [style, setStyle] = (0, z)({
    width: void 0,
    height: void 0
  });
  let onResize = (0, ae)(() => {
    if (selectedTab) {
      var _selectedTab_offsetParent;
      let styleObj = {
        transform: void 0,
        width: void 0,
        height: void 0
      };
      let offset = direction === "rtl" ? -1 * (((_selectedTab_offsetParent = selectedTab.offsetParent) === null || _selectedTab_offsetParent === void 0 ? void 0 : _selectedTab_offsetParent.offsetWidth) - selectedTab.offsetWidth - selectedTab.offsetLeft) : selectedTab.offsetLeft;
      styleObj.transform = orientation === "vertical" ? `translateY(${selectedTab.offsetTop}px)` : `translateX(${offset}px)`;
      if (orientation === "horizontal")
        styleObj.width = `${selectedTab.offsetWidth}px`;
      else
        styleObj.height = `${selectedTab.offsetHeight}px`;
      setStyle(styleObj);
    }
  }, [
    direction,
    setStyle,
    selectedTab,
    orientation
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    onResize();
  }, [
    onResize,
    scale,
    selectedKey,
    tabLineState
  ]);
  return /* @__PURE__ */ (0, yn).createElement("div", {
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault15($32d597b82a7aad64$exports)), "spectrum-Tabs-selectionIndicator"),
    role: "presentation",
    style
  });
}
function $65ab70ddbed1564b$export$e51a686c67fdaa2d(props) {
  const tabContext = (0, ce)($65ab70ddbed1564b$var$TabContext);
  const { refs, tabState, tabProps, tabPanelProps } = tabContext;
  const { isQuiet, density, isEmphasized, orientation } = tabProps;
  const { selectedTab, collapsed, setTabListState } = tabState;
  const { tablistRef, wrapperRef } = refs;
  const state = (0, $76f919a04c5a7d14$export$4ba071daf4e486)({
    ...tabProps,
    children: props.children
  });
  let { styleProps } = (0, $380ed8f3903c3931$export$b8e6fb9d2dff3f41)(props);
  const { tabListProps } = (0, $58d314389b21fa3f$export$773e389e644c5874)({
    ...tabProps,
    ...props
  }, state, tablistRef);
  (0, K)(() => {
    setTabListState(state);
  }, [
    state.disabledKeys,
    state.selectedItem,
    state.selectedKey,
    props.children
  ]);
  let collapseStyle = collapsed && orientation !== "vertical" ? {
    maxWidth: "calc(100% + 1px)",
    overflow: "hidden",
    visibility: "hidden",
    position: "absolute"
  } : {
    maxWidth: "calc(100% + 1px)"
  };
  let stylePropsFinal = orientation === "vertical" ? styleProps : {
    style: collapseStyle
  };
  if (collapsed && orientation !== "vertical")
    tabListProps["aria-hidden"] = true;
  let tabListclassName = (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault15($32d597b82a7aad64$exports)), "spectrum-TabsPanel-tabs");
  const tabContent = /* @__PURE__ */ (0, yn).createElement("div", {
    ...stylePropsFinal,
    ...tabListProps,
    ref: tablistRef,
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault15($32d597b82a7aad64$exports)), "spectrum-Tabs", `spectrum-Tabs--${orientation}`, tabListclassName, {
      "spectrum-Tabs--quiet": isQuiet,
      "spectrum-Tabs--emphasized": isEmphasized,
      ["spectrum-Tabs--compact"]: density === "compact"
    }, orientation === "vertical" && styleProps.className)
  }, [
    ...state.collection
  ].map((item) => /* @__PURE__ */ (0, yn).createElement($65ab70ddbed1564b$var$Tab, {
    key: item.key,
    item,
    state,
    orientation
  })), /* @__PURE__ */ (0, yn).createElement($65ab70ddbed1564b$var$TabLine, {
    orientation,
    selectedTab
  }));
  if (orientation === "vertical")
    return tabContent;
  else
    return /* @__PURE__ */ (0, yn).createElement("div", {
      ...styleProps,
      ref: wrapperRef,
      className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault15($32d597b82a7aad64$exports)), "spectrum-TabsPanel-collapseWrapper", styleProps.className)
    }, /* @__PURE__ */ (0, yn).createElement($65ab70ddbed1564b$var$TabPicker, {
      ...props,
      ...tabProps,
      visible: collapsed,
      id: tabPanelProps["aria-labelledby"],
      state,
      className: tabListclassName
    }), tabContent);
}
function $65ab70ddbed1564b$export$5dae8d435677f210(props) {
  const { tabState, tabProps } = (0, ce)($65ab70ddbed1564b$var$TabContext);
  const { tabListState } = tabState;
  const factory = (0, ae)((nodes) => new (0, $a02d57049d202695$export$d085fb9e920b5ca7)(nodes), []);
  const collection = (0, $7613b1592d41b092$export$6cd28814d92fa9c9)({
    items: tabProps.items,
    ...props
  }, factory, {
    suppressTextValueWarning: true
  });
  const selectedItem = tabListState ? collection.getItem(tabListState.selectedKey) : null;
  return /* @__PURE__ */ (0, yn).createElement($65ab70ddbed1564b$var$TabPanel, {
    ...props,
    key: tabListState === null || tabListState === void 0 ? void 0 : tabListState.selectedKey
  }, selectedItem && selectedItem.props.children);
}
function $65ab70ddbed1564b$var$TabPanel(props) {
  const { tabState, tabPanelProps: ctxTabPanelProps } = (0, ce)($65ab70ddbed1564b$var$TabContext);
  const { tabListState } = tabState;
  let ref = (0, ie)();
  const { tabPanelProps } = (0, $34bce698202e07cb$export$fae0121b5afe572d)(props, tabListState, ref);
  let { styleProps } = (0, $380ed8f3903c3931$export$b8e6fb9d2dff3f41)(props);
  if (ctxTabPanelProps["aria-labelledby"])
    tabPanelProps["aria-labelledby"] = ctxTabPanelProps["aria-labelledby"];
  return /* @__PURE__ */ (0, yn).createElement((0, $907718708eab68af$export$1a38b4ad7f578e1d), {
    focusRingClass: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault15($32d597b82a7aad64$exports)), "focus-ring")
  }, /* @__PURE__ */ (0, yn).createElement("div", {
    ...styleProps,
    ...tabPanelProps,
    ref,
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault15($32d597b82a7aad64$exports)), "spectrum-TabsPanel-tabpanel", styleProps.className)
  }, props.children));
}
function $65ab70ddbed1564b$var$TabPicker(props) {
  let { isDisabled, isEmphasized, isQuiet, state, "aria-labelledby": ariaLabeledBy, "aria-label": ariaLabel, density, className, id, visible } = props;
  let ref = (0, ie)();
  let [pickerNode, setPickerNode] = (0, z)(null);
  (0, K)(() => {
    let node = (0, $98e5a8ae0e6415af$export$c7e28c72a4823176)(ref);
    setPickerNode(node.current);
  }, [
    ref
  ]);
  let items = [
    ...state.collection
  ].map((item) => ({
    rendered: item.rendered,
    textValue: item.textValue,
    id: item.key
  }));
  let pickerProps = {
    "aria-labelledby": ariaLabeledBy,
    "aria-label": ariaLabel
  };
  const style = visible ? {} : {
    visibility: "hidden",
    position: "absolute"
  };
  return /* @__PURE__ */ (0, yn).createElement("div", {
    className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault15($32d597b82a7aad64$exports)), "spectrum-Tabs", "spectrum-Tabs--horizontal", "spectrum-Tabs--isCollapsed", {
      "spectrum-Tabs--quiet": isQuiet,
      ["spectrum-Tabs--compact"]: density === "compact",
      "spectrum-Tabs--emphasized": isEmphasized
    }, className),
    style,
    "aria-hidden": visible ? void 0 : true
  }, /* @__PURE__ */ (0, yn).createElement((0, $59d09bcc83651bf9$export$8107b24b91795686), {
    slots: {
      icon: {
        size: "S",
        UNSAFE_className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault15($32d597b82a7aad64$exports)), "spectrum-Icon")
      },
      button: {
        focusRingClass: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault15($32d597b82a7aad64$exports)), "focus-ring")
      }
    }
  }, /* @__PURE__ */ (0, yn).createElement((0, $51664a9007a3c6f9$export$ba25329847403e11), {
    ...pickerProps,
    id,
    items,
    ref,
    isQuiet: true,
    isDisabled: !visible || isDisabled,
    selectedKey: state.selectedKey,
    disabledKeys: state.disabledKeys,
    onSelectionChange: state.setSelectedKey,
    UNSAFE_className: (0, $fd933927dbac1f15$export$ce4ab0c55987d1ff)((0, /* @__PURE__ */ $parcel$interopDefault15($32d597b82a7aad64$exports)), "spectrum-Tabs-picker")
  }, (item) => /* @__PURE__ */ (0, yn).createElement((0, $c1d7fb2ec91bae71$export$6d08773d2e66f8f2), {
    textValue: item.textValue
  }, item.rendered)), pickerNode && /* @__PURE__ */ (0, yn).createElement($65ab70ddbed1564b$var$TabLine, {
    orientation: "horizontal",
    selectedTab: pickerNode,
    selectedKey: state.selectedKey
  })));
}
var $65ab70ddbed1564b$export$b2539bed5023c21c = /* @__PURE__ */ (0, yn).forwardRef($65ab70ddbed1564b$var$Tabs);

// ../../node_modules/@react-spectrum/theme-default/dist/import.mjs
function $parcel$interopDefault16(a) {
  return a && a.__esModule ? a.default : a;
}
function $parcel$export14(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $ea2e8e3460b67692$exports = {};
$parcel$export14($ea2e8e3460b67692$exports, "spectrum--darkest", () => $ea2e8e3460b67692$export$4ecdba604f5f1f44, (v) => $ea2e8e3460b67692$export$4ecdba604f5f1f44 = v);
var $ea2e8e3460b67692$export$4ecdba604f5f1f44;
$ea2e8e3460b67692$export$4ecdba604f5f1f44 = "spectrum--darkest_256eeb";
var $5b6ea5874ed9af7b$exports = {};
$parcel$export14($5b6ea5874ed9af7b$exports, "spectrum", () => $5b6ea5874ed9af7b$export$3311ab3a441bc141, (v) => $5b6ea5874ed9af7b$export$3311ab3a441bc141 = v);
$parcel$export14($5b6ea5874ed9af7b$exports, "spectrum--medium", () => $5b6ea5874ed9af7b$export$4c0c83b3f4303ef8, (v) => $5b6ea5874ed9af7b$export$4c0c83b3f4303ef8 = v);
$parcel$export14($5b6ea5874ed9af7b$exports, "spectrum--large", () => $5b6ea5874ed9af7b$export$a88a8dbe29386d31, (v) => $5b6ea5874ed9af7b$export$a88a8dbe29386d31 = v);
$parcel$export14($5b6ea5874ed9af7b$exports, "spectrum--darkest", () => $5b6ea5874ed9af7b$export$4ecdba604f5f1f44, (v) => $5b6ea5874ed9af7b$export$4ecdba604f5f1f44 = v);
$parcel$export14($5b6ea5874ed9af7b$exports, "spectrum--dark", () => $5b6ea5874ed9af7b$export$68dc111a79481afd, (v) => $5b6ea5874ed9af7b$export$68dc111a79481afd = v);
$parcel$export14($5b6ea5874ed9af7b$exports, "spectrum--light", () => $5b6ea5874ed9af7b$export$efb37c2f79da8163, (v) => $5b6ea5874ed9af7b$export$efb37c2f79da8163 = v);
$parcel$export14($5b6ea5874ed9af7b$exports, "spectrum--lightest", () => $5b6ea5874ed9af7b$export$baaa804dc80cce18, (v) => $5b6ea5874ed9af7b$export$baaa804dc80cce18 = v);
var $5b6ea5874ed9af7b$export$3311ab3a441bc141;
var $5b6ea5874ed9af7b$export$4c0c83b3f4303ef8;
var $5b6ea5874ed9af7b$export$a88a8dbe29386d31;
var $5b6ea5874ed9af7b$export$4ecdba604f5f1f44;
var $5b6ea5874ed9af7b$export$68dc111a79481afd;
var $5b6ea5874ed9af7b$export$efb37c2f79da8163;
var $5b6ea5874ed9af7b$export$baaa804dc80cce18;
$5b6ea5874ed9af7b$export$3311ab3a441bc141 = "spectrum_9e130c";
$5b6ea5874ed9af7b$export$4c0c83b3f4303ef8 = "spectrum--medium_9e130c";
$5b6ea5874ed9af7b$export$a88a8dbe29386d31 = "spectrum--large_9e130c";
$5b6ea5874ed9af7b$export$4ecdba604f5f1f44 = "spectrum--darkest_9e130c";
$5b6ea5874ed9af7b$export$68dc111a79481afd = "spectrum--dark_9e130c";
$5b6ea5874ed9af7b$export$efb37c2f79da8163 = "spectrum--light_9e130c";
$5b6ea5874ed9af7b$export$baaa804dc80cce18 = "spectrum--lightest_9e130c";
var $b2eefcc3e5fdb373$exports = {};
$parcel$export14($b2eefcc3e5fdb373$exports, "spectrum--large", () => $b2eefcc3e5fdb373$export$a88a8dbe29386d31, (v) => $b2eefcc3e5fdb373$export$a88a8dbe29386d31 = v);
var $b2eefcc3e5fdb373$export$a88a8dbe29386d31;
$b2eefcc3e5fdb373$export$a88a8dbe29386d31 = "spectrum--large_c40598";
var $729ae839c55d8d77$exports = {};
$parcel$export14($729ae839c55d8d77$exports, "spectrum--light", () => $729ae839c55d8d77$export$efb37c2f79da8163, (v) => $729ae839c55d8d77$export$efb37c2f79da8163 = v);
var $729ae839c55d8d77$export$efb37c2f79da8163;
$729ae839c55d8d77$export$efb37c2f79da8163 = "spectrum--light_a40724";
var $b4d117254fac085c$exports = {};
$parcel$export14($b4d117254fac085c$exports, "spectrum--medium", () => $b4d117254fac085c$export$4c0c83b3f4303ef8, (v) => $b4d117254fac085c$export$4c0c83b3f4303ef8 = v);
var $b4d117254fac085c$export$4c0c83b3f4303ef8;
$b4d117254fac085c$export$4c0c83b3f4303ef8 = "spectrum--medium_4b172c";
var $bf24a13e98395dd3$export$bca14c5b3b88a9c9 = {
  global: /* @__PURE__ */ $parcel$interopDefault16($5b6ea5874ed9af7b$exports),
  light: /* @__PURE__ */ $parcel$interopDefault16($729ae839c55d8d77$exports),
  dark: (0, /* @__PURE__ */ $parcel$interopDefault16($ea2e8e3460b67692$exports)),
  medium: /* @__PURE__ */ $parcel$interopDefault16($b4d117254fac085c$exports),
  large: /* @__PURE__ */ $parcel$interopDefault16($b2eefcc3e5fdb373$exports)
};

// src/views/Wizard/wizards/library/index.tsx
init_preact_min();
init_preact_min();
var LIBRARY_URL_REGEX = /[^\s]*\.[a-zA-Z]{1,}[^\s]*$/g;
var NUM_STEPS = 2;
var cleanLibraryURL = (str) => {
  const url = new URL(str);
  url.search = "";
  return url;
};
var fetchLibraryBlocks = async (str) => {
  const url = cleanLibraryURL(str);
  url.search = "?sheet=blocks";
  const resp = await fetch(url);
  console.log("resp: ", resp, resp.ok, resp.status);
  if (!resp.ok) {
    throw Error(`Failed to fetch library JSON (${resp.status}): ${resp.headers.get("x-error") || "unknown error"}`);
  }
  const { data } = await resp.json();
  const blocks = data.map((row) => {
    return Object.fromEntries(Object.entries(row).map(([key, val]) => [key.toLowerCase(), val]));
  }, {});
  return blocks;
};
var setupLibrary = () => {
  const store = useRootStore();
  const { settingsStore } = store;
  const [newLibraryURL, setNewLibraryURL] = z(settingsStore.libraryURL ?? "");
  const [isValid, setIsValid] = z(LIBRARY_URL_REGEX.test(newLibraryURL));
  const [isLoading, setIsLoading] = z(false);
  const [step, setStep] = z(0);
  const [blocks, setBlocks] = z();
  const [error, setError] = z();
  const setValue = (newVal) => {
    console.log("setValue: ", newVal);
    setNewLibraryURL(newVal);
    setIsValid(LIBRARY_URL_REGEX.test(newVal));
  };
  const save = async () => {
    await store.settingsStore.setLibraryData(newLibraryURL, blocks);
    store.closeWizard();
  };
  const next = () => {
    if (step >= NUM_STEPS - 1) {
      return save();
    }
    setStep(step + 1);
  };
  const prev = () => {
    if (step === 0) {
      return store.closeWizard();
    }
    setStep(step - 1);
  };
  K(() => {
    console.log("useEffect() step -> ", step);
    switch (step) {
      case 0:
        setIsLoading(false);
        break;
      case 1:
        (async () => {
          setIsLoading(true);
          setError(void 0);
          setBlocks(void 0);
          const data = await fetchLibraryBlocks(newLibraryURL);
          setBlocks(data);
          setIsLoading(false);
        })().catch((e) => {
          console.error("[ui/wizards/library] failed to load library: ", e);
          setError(e.message);
        });
        break;
      default:
        console.warn("[ui/wizard/library] setupLibrary() unknown step: ", step);
    }
  }, [step]);
  return /* @__PURE__ */ qe(x, { children: /* @__PURE__ */ qe($884c64d19340d345$export$f51f4c4ede09e011, { direction: "column", height: "100%", justifyContent: "space-between", children: [
    /* @__PURE__ */ qe($ac118ceca79b8650$export$a7fed597f4b8afd8, { children: /* @__PURE__ */ qe(
      $265457f9427aa380$export$2c73285ae9390cec,
      {
        label: "Library URL",
        defaultValue: settingsStore.libraryURL,
        onChange: setValue,
        validationState: isValid ? "valid" : "invalid",
        isDisabled: step > 0
      }
    ) }),
    /* @__PURE__ */ qe($884c64d19340d345$export$f51f4c4ede09e011, { height: "100%", children: error ? /* @__PURE__ */ qe("span", { children: [
      /* @__PURE__ */ qe("p", { children: /* @__PURE__ */ qe("strong", { children: "Error:" }) }),
      /* @__PURE__ */ qe("p", { children: error })
    ] }) : /* @__PURE__ */ qe(x, { children: blocks && /* @__PURE__ */ qe("span", { children: [
      /* @__PURE__ */ qe("p", { children: /* @__PURE__ */ qe("strong", { children: [
        "Found ",
        blocks.length,
        " block",
        blocks.length > 1 ? "s" : "",
        ":"
      ] }) }),
      /* @__PURE__ */ qe("p", { children: blocks.map(({ name, ...block }) => `${name} -> ${block.path}`).join("\n") })
    ] }) }) }),
    /* @__PURE__ */ qe($bd4bfa55854eb3bf$export$69b1032f2ecdf404, { margin: 10, alignSelf: "flex-end", children: [
      /* @__PURE__ */ qe($b865a6f0049e2d66$export$353f5b6fc5456de1, { variant: "secondary", onPress: prev, children: step === 0 ? "Cancel" : "Back" }),
      /* @__PURE__ */ qe($b865a6f0049e2d66$export$353f5b6fc5456de1, { variant: "cta", onPress: next, isDisabled: !isValid || isLoading, children: step >= NUM_STEPS - 1 ? "Save" : "Next" })
    ] })
  ] }) });
};

// src/views/Wizard/wizards/index.ts
var WIZARDS = {
  setupLibrary
};
var WizardId = Object.keys(WIZARDS).reduce((prev, cur) => {
  prev[cur] = cur;
  return prev;
}, {});
var wizards_default = WIZARDS;

// src/views/Wizard/index.tsx
init_preact_min();
init_preact_min();
var WizardView = observer(() => {
  const store = useRootStore();
  K(() => {
    store.setViewReady(true);
  }, []);
  const Component = wizards_default[store.wizardId];
  return /* @__PURE__ */ qe(x, { children: Component && /* @__PURE__ */ qe(Component, {}) });
});
var Wizard_default = WizardView;

// src/util/error.ts
function setErrorMessage(error, message) {
  if (!error.publicMessage) {
    error.publicMessage = message;
  }
  if (typeof error.data !== "object") {
    error._data = {};
  }
  if (typeof error.setData !== "function") {
    error.setData = (key, val) => {
      let nKey = key;
      if (key in error._data) {
        let i2 = 0;
        nKey = `${key}-${i2++}`;
        while (nKey in error._data) {
          nKey = `${key}-${i2++}`;
        }
      }
      error._data[nKey] = val;
    };
  }
  return error;
}
function makePublicError(message) {
  return setErrorMessage(Error(message), message);
}

// src/util/object.ts
function isStrictlyObject(o) {
  return !!o && typeof o === "object" && !Array.isArray(o);
}
function sleep(t) {
  return new Promise((r2) => setTimeout(r2, t));
}
function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

// src/util/fetch.ts
var ENCODED_FORM_CONTENT_TYPE = "application/x-www-form-urlencoded;charset=UTF-8";
function makeEncodedFormData(obj) {
  const formBody = [];
  for (const [key, val] of Object.entries(obj)) {
    const eKey = encodeURIComponent(key);
    const eVal = encodeURIComponent(val);
    formBody.push(`${eKey}=${eVal}`);
  }
  return formBody.join("&");
}
async function poll(url, ctx, init, interval = 5, timeout2 = 120) {
  console.debug(`poll(${url})`);
  const _poll = async () => {
    const resp = await fetch(url, init);
    if (!resp.ok) {
      let err;
      let data;
      try {
        data = await resp.json();
      } catch {
      }
      if (resp.status !== 400 && resp.status !== 428) {
        console.warn("[util/fetch] poll() error, status: ", resp.status, resp, data);
        err = makePublicError(`Failed to authenticate: ${resp.status}`);
      }
      if (!err) {
        console.warn("[util/fetch] poll() error, data: ", resp.status, resp, data);
        if (data.error) {
          if (data.error === "authorization_pending") {
            return void 0;
          }
          err = makePublicError(`Failed to authenticate: ${data.error}`);
        }
      }
      if (!err) {
        console.warn("[util/fetch] poll() error, data: ", resp.status, resp);
        err = makePublicError("Failed to authenticate: unknown error");
      }
      err.setData("response", resp);
      throw err;
    }
    if (resp.status === 204) {
      return void 0;
    }
    return resp;
  };
  let timer = 0;
  while (timer < timeout2 && !ctx.canceled) {
    const resp = await _poll();
    if (resp) {
      return resp;
    }
    await sleep(interval * 1e3);
    timer += interval;
  }
  if (ctx.canceled) {
    return;
  }
  throw makePublicError("Failed to authenticate: timeout");
}
function cancelableFetch(url, init = {}) {
  const controller = new AbortController();
  const { signal, abort } = controller;
  const promise = _cancelableFetch(
    url,
    {
      ...init,
      signal
    }
  );
  promise.cancel = abort;
  return promise;
}
async function _cancelableFetch(url, init) {
  const resp = await fetch(url, init);
  if (!resp.ok) {
    let errMessage;
    try {
      const respBody = await resp.json();
      console.error(`[util/fetch] _cancelableFetch() Error: url=${url} status=${resp.status} body=${typeof respBody === "object" ? JSON.stringify(respBody, void 0, 2) : respBody}`);
      errMessage = respBody.message;
    } catch (e) {
      console.error(`[util/fetch] _cancelableFetch() Error: url=${url} status=${resp.status} body=${typeof resp.body === "object" ? JSON.stringify(resp.body, void 0, 2) : resp.body}`);
    }
    let error;
    if (errMessage) {
      error = makePublicError(`Failed to fetch: ${errMessage} (${resp.status})`);
    } else {
      error = Error(`Failed to fetch: ${resp.status}`);
    }
    error.response = resp;
    throw error;
  }
  return resp;
}

// src/util/node.ts
function findAncestor(node, predicate) {
  if (predicate(node)) {
    return node;
  }
  if (node.parent) {
    return findAncestor(node.parent, predicate);
  }
}

// src/support/figma/storage.ts
import MessageBus from "/public/vendor/MessageBus.min.js";
function retrieve(key) {
  console.log(`[support/figma] retrieve(${key})`);
  return MessageBus.execute((figma) => {
    const data = figma.clientStorage.getAsync(key);
    console.log(`[support/figma] retrieved ${key} => ${data}`);
    return data;
  }, { key });
}
function setOrRemove(key, value) {
  console.log(`[support/figma] setOrRemove(${key} => ${value})`);
  return MessageBus.execute((figma) => {
    return figma.clientStorage.setAsync(key, value);
  }, { key, value });
}

// src/support/figma/index.ts
function openBrowser(url) {
  window.open(url, "_blank");
}

// src/support/auth/accesscode.ts
var ENDPOINT = "http://localhost:3001";
function doFetch(provider, path, init = {}, query = {}) {
  query["provider"] = provider;
  const params = new URLSearchParams(query);
  const url = `${ENDPOINT}/api/auth${path}?${params.toString()}`;
  return cancelableFetch(url, init);
}
async function pollForAuthData(location, ctx) {
  const resp = await poll(location, ctx);
  const data = await resp.json();
  return data.access_token;
}
async function authenticate(provider, ctx) {
  let data;
  try {
    const resp = await doFetch(provider, "/session", { method: "POST" });
    if (!resp.ok) {
      throw makePublicError(`Failed to authenticate: ${resp.status}`);
    }
    const session = await resp.json();
    const { url } = session;
    const pollUrl = resp.headers.get("location");
    openBrowser(url);
    data = await pollForAuthData(pollUrl, ctx);
  } catch (e) {
    throw setErrorMessage(e, "Failed to authenticate.");
  }
  if (!data) {
    throw makePublicError("Invalid code");
  }
  return makeAuthData(data);
}
function makeAuthData(data) {
  const authData = {
    accessToken: data.access_token,
    expiresIn: data.expires_in,
    expiresAt: new Date(Date.now() + data.expires_in * 1e3),
    refreshToken: data.refresh_token,
    tokenType: data.token_type,
    scope: data.scope
  };
  return authData;
}
async function refreshAccessToken(provider, refreshToken) {
  try {
    const grant_type = "refresh_token";
    let data;
    try {
      const resp = await doFetch(provider, "/token", void 0, { refresh_token: refreshToken, grant_type });
      data = await resp.json();
    } catch (e) {
      if (isStrictlyObject(e.response) && e.response.status === 400) {
        throw setErrorMessage(e, `Invalid credentials. Try reconnecting ${capitalize(provider)} account.`);
      }
      throw e;
    }
    return makeAuthData(data);
  } catch (e) {
    throw setErrorMessage(e, "Failed to refresh access token.");
  }
}

// src/support/auth/devicecode.ts
var flow3 = "access_code";
var MICROSOFT_TENANT_ID = "";
var MICROSOFT_CLIENT_ID = "";
var GOOGLE_DEVICECODE_CLIENT_ID = "";
var GOOGLE_CLIENT_ID = "";
var GRANTTYPE_DEVICE_CODE = "urn:ietf:params:oauth:grant-type:device_code";
var AUTH_ENDPOINT = "http://localhost:3001";
var MIN_POLL_INTERVAL = 5;
if (flow3 === "device_code") {
  if (!MICROSOFT_TENANT_ID) {
    throw makePublicError(
      "Build Error: Missing Microsoft OAuth tenant ID. Set using env variable `MICROSOFT_TENANT_ID`."
    );
  }
  if (!MICROSOFT_CLIENT_ID) {
    throw makePublicError(
      "Build Error: Missing Microsoft OAuth client ID. Set using env variable `MICROSOFT_CLIENT_ID`."
    );
  }
}
var config = {
  microsoft: {
    client_id: MICROSOFT_CLIENT_ID,
    baseUrl: `https://login.microsoftonline.com/${MICROSOFT_TENANT_ID}/oauth2/v2.0`,
    scopes: ["files.readwrite", "offline_access", "openid", "profile"]
  },
  google: {
    device_client_id: GOOGLE_DEVICECODE_CLIENT_ID,
    client_id: GOOGLE_CLIENT_ID,
    baseUrl: "https://oauth2.googleapis.com",
    scopes: ["https://www.googleapis.com/auth/drive.file", "openid", "profile"]
  }
};
function doFetch2(provider, pathOrUrl, init, query) {
  const { baseUrl } = config[provider];
  let url;
  if (pathOrUrl.startsWith("http://") || pathOrUrl.startsWith("https://")) {
    url = new URL(pathOrUrl);
  } else {
    url = new URL(`${baseUrl}${pathOrUrl}`);
  }
  if (query) {
    const params = new URLSearchParams(query);
    url.search = params.toString();
  }
  return cancelableFetch(url.toString(), init);
}
async function pollForAuthData2(provider, device_code, ctx, interval) {
  const { client_id, device_client_id, baseUrl } = config[provider];
  let url = `${baseUrl}/token`;
  if (provider === "google") {
    if (!AUTH_ENDPOINT) {
      throw makePublicError("Auth endpoint not set, this build does not support Google accounts.");
    }
    url = `${AUTH_ENDPOINT}/api/auth/google/devicecode/token`;
  }
  const resp = await poll(
    url,
    ctx,
    {
      method: "POST",
      headers: {
        "content-type": ENCODED_FORM_CONTENT_TYPE,
        "x-poll-interval": `${interval}`
      },
      body: makeEncodedFormData({
        grant_type: GRANTTYPE_DEVICE_CODE,
        device_code,
        client_id: device_client_id ?? client_id
      })
    },
    Math.max(interval, MIN_POLL_INTERVAL)
  );
  if (ctx.canceled || !resp) {
    return;
  }
  const body = await resp.json();
  const {
    token_type: tokenType,
    scope,
    expires_in: expiresIn,
    access_token: accessToken,
    refresh_token: refreshToken
    // id_token,
  } = body;
  const expiresAt = new Date(+Date.now() + expiresIn * 1e3);
  return {
    accessToken,
    expiresAt,
    expiresIn,
    refreshToken,
    scope,
    tokenType
  };
}
async function authenticate2(provider, ctx) {
  try {
    const { client_id, device_client_id, scopes } = config[provider];
    const path = provider === "google" ? "/device/code" : "/devicecode";
    const resp = await doFetch2(provider, path, {
      method: "POST",
      headers: {
        "content-type": ENCODED_FORM_CONTENT_TYPE
      },
      body: makeEncodedFormData({
        client_id: device_client_id ?? client_id,
        scope: scopes.join(" ")
      })
    });
    const codeData = await resp.json();
    if (ctx.canceled || !resp) {
      return;
    }
    const { device_code: deviceCode, user_code: userCode, interval } = codeData;
    const url = codeData.verification_uri ? codeData.verification_uri : codeData.verification_url;
    ctx.setMessage("todo");
    openBrowser(url);
    const data = await pollForAuthData2(provider, deviceCode, ctx, interval);
    ctx.setMessage("");
    return data;
  } catch (e) {
    throw setErrorMessage(e, "Failed to authenticate.");
  }
}
async function refreshAccessToken2(provider, refresh_token) {
  try {
    let { client_id } = config[provider];
    let url = "/token";
    if (provider === "google") {
      if (!AUTH_ENDPOINT) {
        throw makePublicError(
          "Auth endpoint not set, this build does not support Google accounts."
        );
      }
      url = `${AUTH_ENDPOINT}/api/auth/google/devicecode/token`;
      client_id = config[provider].device_client_id;
    }
    const resp = await doFetch2(provider, url, {
      method: "POST",
      headers: {
        "content-type": ENCODED_FORM_CONTENT_TYPE
      },
      body: makeEncodedFormData({
        refresh_token,
        client_id,
        grant_type: "refresh_token"
      })
    });
    const data = await resp.json();
    const expiresAt = new Date(Date.now() + data.expires_in * 1e3);
    return {
      accessToken: data.access_token,
      scope: data.scope,
      tokenType: data.token_type,
      expiresAt,
      expiresIn: data.expires_in
    };
  } catch (e) {
    if (isStrictlyObject(e.response) && e.response.status === 400) {
      throw setErrorMessage(
        e,
        `Invalid credentials. Try reconnecting ${capitalize(provider)} account.`
      );
    }
    throw setErrorMessage(e, "Failed to refresh access token.");
  }
}

// src/support/auth/index.ts
var OAUTH_FLOWS = ["device_code", "access_code"];
var flow4 = "access_code";
if (!OAUTH_FLOWS.includes(flow4)) {
  throw makePublicError(`Build Error! Invalid OAuth flow: ${flow4}. Supported types: ${OAUTH_FLOWS.join(", ")}.`);
}
var authenticate3 = flow4 === "access_code" ? authenticate : authenticate2;
var refreshAccessToken3 = flow4 === "access_code" ? refreshAccessToken : refreshAccessToken2;
async function revokeAccessToken(provider, token) {
  if (typeof token !== "string") {
    return;
  }
  if (provider === "microsoft") {
    return;
  }
  try {
    await cancelableFetch(`https://accounts.google.com/o/oauth2/revoke?token=${token}`);
  } catch (e) {
    console.warn("[auth] Failed to revoke access token: ", e);
  }
}

// src/state/stores/BaseStore.ts
var BaseStore = class {
  constructor(root3) {
    this.ready = false;
    this.root = void 0;
    this._discard = [];
    this.root = root3;
    makeObservable(this, {
      ready: observable,
      onInit: action,
      onReset: action
    });
  }
  discard(fn) {
    this._discard.push(fn);
  }
  async init() {
    await this.onInit();
    runInAction(() => {
      this.ready = true;
    });
  }
  reset() {
    this._discard.forEach((h) => h && h.call(null));
    this._discard = [];
    return this.onReset();
  }
};

// src/state/stores/auth.store.ts
function restoreAuthData(authData) {
  if (authData && authData.expiresAt) {
    authData.expiresAt = new Date(authData.expiresAt);
  }
  return authData;
}
var AuthStore = class extends BaseStore {
  constructor(root3) {
    super(root3);
    this.authData = {
      microsoft: void 0,
      google: void 0
    };
    makeObservable(this, {
      authData: observable,
      isMicrosoftAuthenticated: computed,
      isGoogleAuthenticated: computed,
      microsoftAccessToken: computed,
      microsoftRefreshToken: computed,
      googleAccessToken: computed,
      googleRefreshToken: computed,
      authenticate: action,
      logout: action,
      getAccessToken: action,
      setAuthData: action,
      refreshToken: action,
      clearAuthData: action,
      getMicrosoftToken: action,
      getGoogleToken: action
    });
  }
  get microsoftAccessToken() {
    return this.authData.microsoft?.accessToken;
  }
  get microsoftRefreshToken() {
    return this.authData.microsoft?.refreshToken;
  }
  get microsoftExpiresAt() {
    return this.authData.microsoft?.expiresAt;
  }
  get isMicrosoftAuthenticated() {
    const authData = this.authData.microsoft;
    return authData && !!authData.accessToken && !!authData.refreshToken;
  }
  get googleAccessToken() {
    return this.authData.google?.accessToken;
  }
  get googleRefreshToken() {
    return this.authData.google?.refreshToken;
  }
  get googleExpiresAt() {
    return this.authData.google?.expiresAt;
  }
  get isGoogleAuthenticated() {
    const authData = this.authData.google;
    return !!authData && !!authData.accessToken && !!authData.refreshToken;
  }
  async onInit() {
    console.info("[ui/stores/auth] onInit()");
    let data = await retrieve("google_auth_data");
    console.log("[ui/stores/auth] google_auth_data: ", data);
    if (data && data.refreshToken) {
      runInAction(() => {
        this.authData.google = restoreAuthData(data);
      });
    }
    data = await retrieve("microsoft_auth_data");
    console.log("[ui/stores/auth] microsoft_auth_data: ", data);
    if (data && data.refreshToken) {
      runInAction(() => {
        this.authData.microsoft = restoreAuthData(data);
      });
    }
  }
  onReset() {
    this.authData = {
      microsoft: void 0,
      google: void 0
    };
  }
  getAuthData(provider) {
    return this.authData[provider];
  }
  async setAuthData(provider, data) {
    let authData = {
      ...this.authData[provider] ?? {},
      ...data
    };
    this.authData[provider] = authData;
    if (!authData.accessToken && !authData.refreshToken) {
      authData = void 0;
    }
    await setOrRemove(`${provider}_auth_data`, authData);
    return authData;
  }
  async clearAuthData(provider) {
    this.authData[provider] = void 0;
    await setOrRemove(`${provider}_auth_data`, void 0);
  }
  isTokenValid(provider) {
    const authData = this.getAuthData(provider);
    if (!authData) {
      return false;
    }
    const { expiresAt } = authData;
    if (!expiresAt) {
      return false;
    }
    return +expiresAt > Date.now();
  }
  isAuthenticated(provider) {
    return provider === "google" ? this.isGoogleAuthenticated : this.isMicrosoftAuthenticated;
  }
  assertAuthenticated(provider) {
    if (!this.isAuthenticated(provider)) {
      throw makePublicError(`Not authenticated with ${capitalize(provider)}`);
    }
  }
  async refreshToken(provider) {
    this.assertAuthenticated(provider);
    const refreshToken = provider === "google" ? this.googleRefreshToken : this.microsoftRefreshToken;
    if (!refreshToken) {
      throw makePublicError("No refresh token.");
    }
    const data = await refreshAccessToken3(provider, refreshToken);
    return this.setAuthData(provider, data);
  }
  async getAccessToken(provider) {
    this.assertAuthenticated(provider);
    let { accessToken } = this.authData[provider];
    if (this.isTokenValid(provider)) {
      return accessToken;
    }
    try {
      ({ accessToken } = await this.refreshToken(provider));
    } catch (e) {
      if (e.publicMessage.startsWith("Invalid credentials")) {
        try {
          await this.logout(provider);
        } catch (_14) {
        }
      }
      throw e;
    }
    return accessToken;
  }
  async authenticate(provider, ctx) {
    const data = await authenticate3(provider, ctx);
    await this.setAuthData(provider, data);
    return data;
  }
  async logout(provider) {
    const authData = this.authData[provider];
    if (authData) {
      const token = authData.refreshToken ?? authData.accessToken;
      await revokeAccessToken(provider, token);
    }
    await this.clearAuthData(provider);
  }
  async getMicrosoftToken() {
    return this.getAccessToken("microsoft");
  }
  async getGoogleToken() {
    return this.getAccessToken("google");
  }
};

// src/state/stores/selection.store.ts
import MessageBus2 from "/public/vendor/MessageBus.min.js";
var SelectionStore = class extends BaseStore {
  constructor(root3) {
    super(root3);
    this.enabled = false;
    this.nodes = [];
    makeObservable(this, {
      nodes: observable,
      enabled: observable,
      nodesUnderRoot: computed,
      setNodes: action,
      enable: action
    });
  }
  async enable() {
    if (this.enabled) {
      return;
    }
    this.enabled = true;
    const selectedNodes = await MessageBus2.execute((figma) => {
      return figma.currentPage.selection;
    });
    console.log("[ui/stores/selection] enabled: ", selectedNodes);
    this.setNodes(selectedNodes);
    this.discard(
      MessageBus2.on("selection:change", ({ nodes }) => {
        this.setNodes(nodes);
      })
    );
  }
  get nodesUnderRoot() {
    if (!this.root.nodeId) {
      return this.nodes;
    }
    return this.nodes.filter((node) => !!findAncestor(node, (parent) => parent.id === this.root.nodeId));
  }
  setNodes(nodes) {
    this.nodes = nodes;
  }
  /**
   * Set initial state
   */
  onInit() {
    console.debug("[ui/stores/selection] ready!");
  }
  /**
   * Reset state
   */
  onReset() {
    this.nodes = [];
    this.enabled = false;
  }
};

// ../../node_modules/@spectrum-icons/workflow/Edit.module.mjs
var import_Edit = __toESM(require_Edit(), 1);
init_preact_min();
function Edit(props) {
  return /* @__PURE__ */ yn.createElement($6bfb67578ee6effd$export$f04a61298a47a40f, props, /* @__PURE__ */ yn.createElement(import_Edit.A4uEdit, null));
}

// src/views/Settings/panels/Document.tsx
init_preact_min();
var DocumentPanel = observer(() => {
  const store = useRootStore();
  const { authStore, settingsStore } = store;
  return /* @__PURE__ */ qe(x, { children: /* @__PURE__ */ qe($bd4bfa55854eb3bf$export$69b1032f2ecdf404, { children: /* @__PURE__ */ qe($042ad0b3a4a55b33$export$cfc7921d29ef7b80, { onPress: () => store.openWizard("setupLibrary"), children: [
    /* @__PURE__ */ qe(Edit, {}),
    /* @__PURE__ */ qe($cd449e8defa988f0$export$5f1af8db9871e1d6, { children: "Setup Library" })
  ] }) }) });
});

// src/views/Settings/panels/Global.tsx
init_preact_min();
var GlobalPanel = observer(() => {
  const { authStore, settingsStore } = useRootStore();
  return /* @__PURE__ */ qe($b9606c0c41d55371$export$27a5bd065ad55220, { children: /* @__PURE__ */ qe($cd449e8defa988f0$export$5f1af8db9871e1d6, { children: "global" }) });
});

// src/views/Settings/panels/ids.ts
var ids_exports = {};
__export(ids_exports, {
  Document: () => Document,
  Global: () => Global,
  Node: () => Node2,
  User: () => User
});
var Node2 = "node";
var Document = "document";
var Global = "global";
var User = "user";

// src/views/Settings/panels/Node.tsx
init_preact_min();
var NodePanel = observer(() => {
  const { authStore, settingsStore } = useRootStore();
  return /* @__PURE__ */ qe($b9606c0c41d55371$export$27a5bd065ad55220, { children: /* @__PURE__ */ qe($cd449e8defa988f0$export$5f1af8db9871e1d6, { children: "node" }) });
});

// src/overlays/progress.tsx
init_preact_min();
init_preact_min();
init_preact_min();
function getOpts(opts) {
  return {
    title: opts.title || "Progress",
    doneTitle: opts.title,
    errorTitle: "Error",
    indeterminate: false,
    ...opts
  };
}
var Progress = class extends Q {
  constructor(props) {
    super(props);
    this.state = {
      cancelCallback: () => {
      },
      phantomTicks: 0,
      totalTicks: props.totalTicks,
      doneTicks: 0,
      taskName: "In progress",
      error: false,
      done: false,
      indeterminate: props.indeterminate ?? false
    };
  }
  setTotalTicks(newTotal) {
    if (this.state.totalTicks == null) {
      this.setState({ totalTicks: newTotal });
      return;
    }
    const { doneTicks, phantomTicks, totalTicks } = this.state;
    const newPhantom = Math.ceil(newTotal * (doneTicks + phantomTicks) / totalTicks) - doneTicks;
    this.setState({ totalTicks: newTotal, phantomTicks: newPhantom });
  }
  addDoneTicks(ticks) {
    let { phantomTicks, doneTicks } = this.state;
    if (phantomTicks > 0) {
      if (phantomTicks >= ticks) {
        phantomTicks -= ticks;
        doneTicks += ticks;
      } else {
        phantomTicks = 0;
        doneTicks += ticks - phantomTicks;
      }
    } else {
      doneTicks += ticks;
    }
    this.setState({
      doneTicks,
      phantomTicks
    });
  }
  /**
   * -1 for indeterminate
   */
  get progress() {
    if (this.state.done) {
      return 100;
    }
    if (this.state.totalTicks == null) {
      return -1;
    }
    const { totalTicks, doneTicks, phantomTicks } = this.state;
    return Math.min((doneTicks + phantomTicks) / totalTicks * 100, 99);
  }
  reset() {
    this.setState({
      phantomTicks: 0,
      totalTicks: void 0,
      doneTicks: 0,
      taskName: "-",
      error: false,
      done: false,
      indeterminate: false
    });
  }
  done() {
    this.setState({ done: true });
  }
  async close(reason) {
    await this.props.close(reason);
  }
  async cancel(reason) {
    console.debug(`[Progress] cancel() reason=${reason}`);
    const { cancelCallback } = this.state;
    const { close } = this.props;
    if (cancelCallback) {
      await cancelCallback(reason);
    }
    await close();
  }
  setMessage(msg = "") {
    const node = document.querySelector("#progress-message");
    if (!node) {
      return;
    }
    if (typeof msg === "string") {
      node.innerHTML = msg;
    } else {
      D(msg, node);
    }
  }
  render() {
    const {
      close,
      title,
      errorTitle,
      doneTitle
    } = this.props;
    const {
      done,
      error,
      taskName,
      indeterminate
    } = this.state;
    const cancel = this.cancel.bind(this);
    const errMsg = typeof error === "string" ? error : "Something went wrong!";
    const pct = this.progress;
    return /* @__PURE__ */ qe($7167f8da3cce35e4$export$2881499e37b75b9a, { theme: $bf24a13e98395dd3$export$bca14c5b3b88a9c9, colorScheme: "light", children: /* @__PURE__ */ qe("div", { className: "dialog", children: /* @__PURE__ */ qe("form", { children: [
      /* @__PURE__ */ qe("h1", { children: error ? errorTitle : done ? doneTitle : title }),
      /* @__PURE__ */ qe("hr", {}),
      /* @__PURE__ */ qe("span", { className: "col", children: [
        /* @__PURE__ */ qe("div", { className: "content", children: /* @__PURE__ */ qe("span", { className: "row around progress-bar", children: error ? /* @__PURE__ */ qe("p", { children: errMsg }) : indeterminate && done ? "DONE" : /* @__PURE__ */ qe(
          $551ca31cb687f352$export$c17561cb55d4db30,
          {
            width: "100%",
            label: done ? "Done" : taskName,
            minValue: 0,
            maxValue: 100,
            isIndeterminate: indeterminate,
            value: indeterminate ? void 0 : pct
          }
        ) }) }),
        /* @__PURE__ */ qe("span", { className: "row", children: /* @__PURE__ */ qe("div", { id: "progress-message" }) }),
        /* @__PURE__ */ qe("span", { className: "row end", children: error || done ? /* @__PURE__ */ qe("button", { className: "button-submit", "uxp-variant": "cta", onClick: close, children: "Close" }) : /* @__PURE__ */ qe("button", { className: "button-submit", "uxp-variant": "warning", onClick: cancel, children: "Cancel" }) })
      ] })
    ] }) }) });
  }
  /**
   * Display the progress dialog
   * @param title Title of the dialog
   */
  static async present(opts) {
  }
};
function makeProgressContext(opts) {
  const cleanOpts = getOpts(opts);
  const close = () => root_store_default.popOverlay();
  root_store_default.pushOverlay(/* @__PURE__ */ qe(Progress, { close, ...cleanOpts }));
  const cancelHandlers = [];
  const ctx = {
    ...opts.baseCtx || { rootStore: root_store_default },
    canceled: false,
    setMessage: (msg) => {
      console.log("setMessage: ", msg);
    },
    setTotalTicks: (ticks) => {
      console.log("setTotalTicks: ", ticks);
    },
    task: (taskName) => {
      console.log("set task name: ", taskName);
    },
    progress: (ticks) => {
      console.log("addDoneTicks: ", ticks);
    },
    cancel: (reason) => {
      console.log("cancel reason: ", reason);
    },
    onCancel: (handler) => {
      const i2 = cancelHandlers.push(handler);
      return () => {
        delete cancelHandlers[i2 - 1];
      };
    },
    done: () => {
      console.log("done: ");
    }
  };
  const cancelCallback = async () => {
    ctx.canceled = true;
    await Promise.allSettled(cancelHandlers.map((ch) => ch && ch()));
  };
  Object.defineProperties(ctx, {
    totalTicks: {
      // get: () => instance.state.totalTicks,
      get: () => 0
    },
    doneTicks: {
      // get: () => instance.state.doneTicks,
      get: () => 0
    },
    percent: {
      // get: () => instance.progress,
      get: () => 0
    }
  });
  return ctx;
}

// src/actions/auth.ts
var connect = (provider) => async () => {
  const ctx = makeProgressContext({
    title: `Connecting ${capitalize(provider)} account`,
    doneTitle: `Connected ${capitalize(provider)} account`,
    indeterminate: true
  });
  try {
    await ctx.rootStore.authStore.authenticate(provider, ctx);
  } catch (e) {
    ctx.done();
    console.error("[actions] connect() error: ", e);
  }
  ctx.done();
};
var disconnect = (provider) => async () => {
  const _disconnect = async () => {
    const ctx = makeProgressContext({
      title: `Disconnecting ${capitalize(provider)} account`,
      doneTitle: `Disconnected ${capitalize(provider)} account`,
      indeterminate: true
    });
    try {
      await ctx.rootStore.authStore.logout(provider);
      ctx.done();
    } catch (e) {
      console.error("[actions] disconnect() error: ", e);
    }
  };
  _disconnect();
};

// src/views/Settings/panels/User.tsx
init_preact_min();
var UserPanel = observer(() => {
  const { authStore, settingsStore } = useRootStore();
  return /* @__PURE__ */ qe(x, { children: /* @__PURE__ */ qe($bd4bfa55854eb3bf$export$69b1032f2ecdf404, { children: [
    !authStore.isMicrosoftAuthenticated ? /* @__PURE__ */ qe($042ad0b3a4a55b33$export$cfc7921d29ef7b80, { onPress: connect("microsoft"), children: [
      /* @__PURE__ */ qe(Edit, {}),
      /* @__PURE__ */ qe($cd449e8defa988f0$export$5f1af8db9871e1d6, { children: "Connect Microsoft" })
    ] }) : /* @__PURE__ */ qe($042ad0b3a4a55b33$export$cfc7921d29ef7b80, { onPress: disconnect("microsoft"), children: [
      /* @__PURE__ */ qe(Edit, {}),
      /* @__PURE__ */ qe($cd449e8defa988f0$export$5f1af8db9871e1d6, { children: "Disconnect Microsoft" })
    ] }),
    !authStore.isGoogleAuthenticated ? /* @__PURE__ */ qe($042ad0b3a4a55b33$export$cfc7921d29ef7b80, { onPress: connect("google"), children: [
      /* @__PURE__ */ qe(Edit, {}),
      /* @__PURE__ */ qe($cd449e8defa988f0$export$5f1af8db9871e1d6, { children: "Connect Google" })
    ] }) : /* @__PURE__ */ qe($042ad0b3a4a55b33$export$cfc7921d29ef7b80, { onPress: disconnect("google"), children: [
      /* @__PURE__ */ qe(Edit, {}),
      /* @__PURE__ */ qe($cd449e8defa988f0$export$5f1af8db9871e1d6, { children: "Disconnect Google" })
    ] })
  ] }) });
});

// src/views/Settings/panels/index.tsx
init_preact_min();
var panels = [
  {
    id: Node2,
    name: "Node",
    children: /* @__PURE__ */ qe(NodePanel, {})
  },
  {
    id: Document,
    name: "Document",
    children: /* @__PURE__ */ qe(DocumentPanel, {})
  },
  {
    id: Global,
    name: "Global",
    children: /* @__PURE__ */ qe(GlobalPanel, {})
  },
  {
    id: User,
    name: "User",
    children: /* @__PURE__ */ qe(UserPanel, {})
  }
];
var panels_default = panels;

// src/state/stores/settings.store.ts
var SettingsStore = class extends BaseStore {
  constructor(root3) {
    super(root3);
    this.enabled = false;
    this.panelId = void 0;
    // library data
    this.libraryURL = void 0;
    this.libraryBlocks = void 0;
    makeObservable(this, {
      enabled: observable,
      panelId: observable,
      libraryURL: observable,
      nodePanelEnabled: computed,
      enabledPanels: computed,
      enable: action,
      setPanelId: action,
      setLibraryData: action
    });
  }
  async setLibraryData(url, blocks) {
    this.libraryURL = url;
    this.libraryBlocks = blocks;
    await setOrRemove("library_data", { url, blocks });
  }
  setPanelId(id) {
    this.panelId = id;
  }
  get nodePanelEnabled() {
    return !!this.root.nodeId;
  }
  get enabledPanels() {
    if (typeof this.root.initPayload.panels === "undefined") {
      const enabled = ["document", "global", "user"];
      if (this.nodePanelEnabled) {
        enabled.push("node");
      }
      return enabled;
    }
    return this.root.initPayload.panels;
  }
  async enable() {
    if (this.enabled) {
      return;
    }
    this.enabled = true;
    const enabled = this.enabledPanels;
    if (enabled.includes("node")) {
      this.setPanelId(ids_exports.Node);
    } else if (enabled.includes("document")) {
      this.setPanelId(ids_exports.Document);
    } else if (enabled.includes("user")) {
      this.setPanelId(ids_exports.User);
    } else if (enabled.includes("global")) {
      this.setPanelId(ids_exports.Global);
    }
  }
  /**
   * Set initial state
   */
  async onInit() {
    console.info("[ui/stores/settings] onInit()");
    const data = await retrieve("library_data");
    if (data) {
      const { url, blocks } = data;
      this.libraryBlocks = blocks;
      this.libraryURL = url;
    }
  }
  /**
   * Reset state
   */
  onReset() {
    this.enabled = false;
  }
};

// src/state/stores/root.store.ts
import MessageBus3 from "/public/vendor/MessageBus.min.js";
var INIT_VIEW = ViewId.Wizard;
var INIT_WIZARD = WizardId.setupLibrary;
var _RootStore = class {
  constructor() {
    this.ready = false;
    this.authStore = void 0;
    this.selectionStore = void 0;
    this.settingsStore = void 0;
    this.viewType = INIT_VIEW;
    this._prevViewType = void 0;
    this.nodeType = void 0;
    this.nodeId = void 0;
    this.viewReady = false;
    this.wizardId = INIT_WIZARD;
    this.initPayload = void 0;
    this.theme = void 0;
    this.overlayStack = [];
    console.log("[ui/stores/root] constructor");
    this.authStore = new AuthStore(this);
    this.selectionStore = new SelectionStore(this);
    this.settingsStore = new SettingsStore(this);
    makeObservable(this, {
      ready: observable,
      viewType: observable,
      nodeType: observable,
      nodeId: observable,
      viewReady: observable,
      initPayload: observable,
      theme: observable,
      overlayStack: observable,
      wizardId: observable,
      _init: action,
      reset: action,
      setNodeId: action,
      setNodeType: action,
      setViewType: action,
      setViewReady: action,
      setInitPayload: action,
      setTheme: action,
      pushOverlay: action,
      openWizard: action,
      closeWizard: action
    });
    this._initPromise = this._init();
  }
  get whenReady() {
    return this._initPromise;
  }
  openWizard(id) {
    if (!this._prevViewType) {
      this._prevViewType = this.viewType;
    }
    this.viewType = ViewId.Wizard;
    this.wizardId = id;
  }
  closeWizard() {
    this.viewType = this._prevViewType;
    this._prevViewType = void 0;
    this.wizardId = void 0;
    if (!this.viewType) {
      MessageBus3.execute((figma) => {
        figma.closePlugin();
      });
    }
  }
  pushOverlay(overlay) {
    this.overlayStack.push(overlay);
  }
  popOverlay() {
    this.overlayStack.pop();
  }
  setTheme(theme) {
    console.log(`[ui/stores/root] setTheme(${theme})`);
    this.theme = theme;
  }
  setNodeId(id) {
    console.log(`[ui/stores/root] setNodeId(${id})`);
    this.nodeId = id;
  }
  setNodeType(type) {
    console.log(`[ui/stores/root] setNodeType(${type})`);
    this.nodeType = type;
  }
  setViewType(type) {
    console.log(`[ui/stores/root] setViewType(${type})`);
    this.viewType = type;
  }
  setViewReady(ready) {
    console.log(`[ui/stores/root] setViewReady(${ready})`);
    this.viewReady = ready;
  }
  setInitPayload(payload) {
    console.log(`[ui/stores/root] setInitPayload(${payload})`);
    this.initPayload = payload;
  }
  /**
   * Set initial state from storage
   */
  async _init() {
    await Promise.all([
      this.authStore.init(),
      this.selectionStore.init(),
      this.settingsStore.init()
    ]);
    runInAction(() => {
      console.debug("[ui/stores/root] ready!");
      this.ready = true;
    });
  }
  async reset() {
    await Promise.all([
      this.authStore.reset(),
      this.selectionStore.reset(),
      this.settingsStore.reset()
    ]);
  }
};
var root = new _RootStore();
window.store = root;
var root_store_default = root;

// src/state/stores/index.ts
var stores_default = root_store_default;

// src/state/provider.tsx
init_preact_min();
var StoreContext = B(void 0);
function RootStoreProvider({ children }) {
  return /* @__PURE__ */ qe(StoreContext.Provider, { value: stores_default, children });
}
function useRootStore() {
  const context = ce(StoreContext);
  if (typeof context === "undefined") {
    throw new Error("useRootStore() must be used within RootStoreProvider");
  }
  return context;
}

// src/Provider.tsx
init_preact_min();
var ErrorBoundary = class extends Q {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }
  static getDerivedStateFromError(error) {
    console.log("[ErrorBoundary] getDerivedStateFromError()", error);
    return error;
  }
  componentDidCatch(error, errorInfo) {
    console.log("[ErrorBoundary] componentDidCatch()", error, errorInfo, this.state, this.props);
  }
  render() {
    return this.props.children;
  }
};
var ThemeProvider = ({
  children
}) => {
  const store = useRootStore();
  K(() => {
    if (document.documentElement.classList.contains("figma-dark")) {
      store.setTheme("dark");
    }
  }, []);
  return /* @__PURE__ */ qe($7167f8da3cce35e4$export$2881499e37b75b9a, { theme: $bf24a13e98395dd3$export$bca14c5b3b88a9c9, scale: "medium", colorScheme: store.theme, children });
};
var Provider_default = ({
  children
}) => {
  return /* @__PURE__ */ qe(ErrorBoundary, { children: /* @__PURE__ */ qe(RootStoreProvider, { children: /* @__PURE__ */ qe(ThemeProvider, { children }) }) });
};

// src/App.tsx
init_preact_min();
import MessageBus4 from "/public/vendor/MessageBus.min.js";

// src/views/Configure.tsx
init_preact_min();
init_preact_min();
init_preact_min();
var ConfigureView = observer(() => {
  const store = useRootStore();
  const { selectionStore: selection } = store;
  K(() => {
    (async () => {
      await selection.enable();
      store.setViewReady(true);
    })().catch((e) => {
      console.error("Failed to initialize ConfigureView: ", e);
    });
  }, []);
  console.log("selection: ", selection.nodes);
  return /* @__PURE__ */ qe(x, { children: [
    /* @__PURE__ */ qe("p", { children: [
      store.nodeType,
      " (",
      store.nodeId,
      ")"
    ] }),
    !selection.nodes || !selection.nodes.length ? /* @__PURE__ */ qe("p", { children: "Select a node to configure it!" }) : !selection.nodesUnderRoot.length ? /* @__PURE__ */ qe("p", { children: [
      "Cannot configure a node outside of the ",
      store.nodeType.toLowerCase()
    ] }) : selection.nodesUnderRoot.map((node) => {
      return /* @__PURE__ */ qe(x, { children: [
        /* @__PURE__ */ qe("p", { children: [
          "Selected: ",
          node.name,
          " (",
          node.id,
          ")"
        ] }),
        /* @__PURE__ */ qe("p", { children: [
          "Type: (",
          node.type,
          ")"
        ] })
      ] }, node.id);
    })
  ] });
});
var Configure_default = ConfigureView;

// src/views/Settings/index.tsx
init_preact_min();
init_preact_min();
var SettingsView = observer(() => {
  const store = useRootStore();
  const { settingsStore } = store;
  const [panels2, setPanels] = z([]);
  K(() => {
    console.log("[ui/Settings] initialize");
    (async () => {
      await settingsStore.enable();
      setPanels(panels_default.filter((panel) => settingsStore.enabledPanels.includes(panel.id)));
      store.setViewReady(true);
    })().catch((e) => {
      console.error("[ui/Settings] Failed to initialize: ", e);
    });
  }, []);
  const setIndex = ae((id) => () => {
    settingsStore.setPanelId(id);
  }, []);
  return store.viewReady && /* @__PURE__ */ qe(x, { children: panels2.length === 1 ? /* @__PURE__ */ qe($884c64d19340d345$export$f51f4c4ede09e011, { direction: "column", marginY: "size-100", children: panels2[0].children }) : /* @__PURE__ */ qe(
    $65ab70ddbed1564b$export$b2539bed5023c21c,
    {
      "aria-label": "Panels",
      items: panels2,
      density: "compact",
      selectedKey: settingsStore.panelId,
      children: [
        /* @__PURE__ */ qe($b9606c0c41d55371$export$27a5bd065ad55220, { marginY: "size-100", children: /* @__PURE__ */ qe($65ab70ddbed1564b$export$e51a686c67fdaa2d, { children: (item) => /* @__PURE__ */ qe($c1d7fb2ec91bae71$export$6d08773d2e66f8f2, { textValue: item.name, children: /* @__PURE__ */ qe("span", { onClick: setIndex(item.id), children: item.name }) }) }) }),
        /* @__PURE__ */ qe($65ab70ddbed1564b$export$5dae8d435677f210, { children: (item) => /* @__PURE__ */ qe($c1d7fb2ec91bae71$export$6d08773d2e66f8f2, { children: /* @__PURE__ */ qe($884c64d19340d345$export$f51f4c4ede09e011, { direction: "column", children: item.children }) }) })
      ]
    }
  ) });
});
var Settings_default = SettingsView;

// src/views/index.tsx
init_preact_min();
var views_default = observer(({ type }) => {
  switch (type) {
    case ids_default.Config:
      return /* @__PURE__ */ qe(Configure_default, {});
    case ids_default.Settings:
      return /* @__PURE__ */ qe(Settings_default, {});
    case ids_default.Wizard:
      return /* @__PURE__ */ qe(Wizard_default, {});
    default:
      console.error("[ui/views] Unhandled view type: ", type);
      return /* @__PURE__ */ qe(x, {});
  }
});

// src/App.tsx
init_preact_min();
var App = observer(() => {
  const store = useRootStore();
  K(() => {
    console.log("[ui/App] render");
    MessageBus4.once("ui:init", async (payload) => {
      console.log("[ui/App] init");
      const {
        uiType,
        nodeType,
        nodeId
      } = payload;
      store.setNodeId(nodeId);
      store.setViewType(uiType);
      store.setNodeType(nodeType);
      store.setInitPayload(payload);
    });
    MessageBus4.send("ui:ready");
  }, []);
  return /* @__PURE__ */ qe($884c64d19340d345$export$f51f4c4ede09e011, { direction: "column", height: "100%", marginX: 8, children: [
    (!store.ready || !store.viewType || !store.viewReady) && /* @__PURE__ */ qe("div", { style: {
      background: "var(--figma-color-bg)",
      position: "absolute",
      left: 0,
      right: 0,
      top: 0,
      bottom: 0,
      zIndex: 100
    }, children: /* @__PURE__ */ qe(
      $884c64d19340d345$export$f51f4c4ede09e011,
      {
        direction: "column",
        justifyContent: "space-around",
        alignItems: "center",
        height: "100%",
        children: /* @__PURE__ */ qe($79c16f64960b6385$export$c79b9d6b4cc92af7, { "aria-label": "Loading", isIndeterminate: true, size: "L" })
      }
    ) }),
    store.ready && store.viewType && /* @__PURE__ */ qe(views_default, { type: store.viewType })
  ] });
});
var App_default = App;

// src/index.tsx
init_preact_min();
var root2 = document.getElementById("app");
D(
  /* @__PURE__ */ qe(Provider_default, { children: /* @__PURE__ */ qe(App_default, {}) }),
  root2
);
/*! Bundled license information:

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)
*/
//# sourceMappingURL=data:application/json;base64,
