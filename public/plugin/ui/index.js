var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// polyfills/preact.mjs
var preact_exports = {};
__export(preact_exports, {
  Component: () => Component,
  Fragment: () => Fragment,
  cloneElement: () => cloneElement,
  createContext: () => createContext,
  createElement: () => createElement,
  createRef: () => createRef,
  default: () => preact_default,
  h: () => h,
  hydrate: () => hydrate,
  isValidElement: () => isValidElement,
  render: () => render,
  toChildArray: () => toChildArray
});
import {
  render,
  createContext,
  cloneElement,
  createElement,
  createRef,
  Component,
  isValidElement,
  toChildArray,
  Fragment,
  h,
  hydrate
} from "/public/vendor/preact.min.js";
import * as hooks_star from "/public/vendor/preact.min.js";
import * as compat_star from "/public/vendor/preact.min.js";
import * as jsx_runtime_star from "/public/vendor/preact.min.js";
import * as compat from "/public/vendor/preact.min.js";
var preact_default;
var init_preact = __esm({
  "polyfills/preact.mjs"() {
    "use strict";
    __reExport(preact_exports, hooks_star);
    __reExport(preact_exports, compat_star);
    __reExport(preact_exports, jsx_runtime_star);
    preact_default = compat;
  }
});

// ../../node_modules/@react-stately/utils/dist/main.js
var require_main = __commonJS({
  "../../node_modules/@react-stately/utils/dist/main.js"(exports, module) {
    var $kC0mY$react = (init_preact(), __toCommonJS(preact_exports));
    function $parcel$export12(e, n, v, s) {
      Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
    }
    $parcel$export12(module.exports, "useControlledState", () => $8d8fdfab47455712$export$40bfa8c7b0832715);
    $parcel$export12(module.exports, "clamp", () => $ac8e4d4816275668$export$7d15b64cf5a3a4c4);
    $parcel$export12(module.exports, "snapValueToStep", () => $ac8e4d4816275668$export$cb6e0bb50bc19463);
    $parcel$export12(module.exports, "toFixedNumber", () => $ac8e4d4816275668$export$b6268554fba451f);
    function $8d8fdfab47455712$export$40bfa8c7b0832715(value1, defaultValue, onChange) {
      let [stateValue, setStateValue] = $kC0mY$react.useState(value1 || defaultValue);
      let ref = $kC0mY$react.useRef(value1 !== void 0);
      let wasControlled = ref.current;
      let isControlled = value1 !== void 0;
      let stateRef = $kC0mY$react.useRef(stateValue);
      if (wasControlled !== isControlled)
        console.warn(`WARN: A component changed from ${wasControlled ? "controlled" : "uncontrolled"} to ${isControlled ? "controlled" : "uncontrolled"}.`);
      ref.current = isControlled;
      let setValue = $kC0mY$react.useCallback((value2, ...args) => {
        let onChangeCaller = (value, ...onChangeArgs) => {
          if (onChange) {
            if (!Object.is(stateRef.current, value))
              onChange(value, ...onChangeArgs);
          }
          if (!isControlled)
            stateRef.current = value;
        };
        if (typeof value2 === "function") {
          console.warn("We can not support a function callback. See Github Issues for details https://github.com/adobe/react-spectrum/issues/2320");
          let updateFunction = (oldValue, ...functionArgs) => {
            let interceptedValue = value2(isControlled ? stateRef.current : oldValue, ...functionArgs);
            onChangeCaller(interceptedValue, ...args);
            if (!isControlled)
              return interceptedValue;
            return oldValue;
          };
          setStateValue(updateFunction);
        } else {
          if (!isControlled)
            setStateValue(value2);
          onChangeCaller(value2, ...args);
        }
      }, [
        isControlled,
        onChange
      ]);
      if (isControlled)
        stateRef.current = value1;
      else
        value1 = stateValue;
      return [
        value1,
        setValue
      ];
    }
    function $ac8e4d4816275668$export$7d15b64cf5a3a4c4(value, min = -Infinity, max = Infinity) {
      let newValue = Math.min(Math.max(value, min), max);
      return newValue;
    }
    function $ac8e4d4816275668$export$cb6e0bb50bc19463(value, min, max, step) {
      let remainder = (value - (isNaN(min) ? 0 : min)) % step;
      let snappedValue = Math.abs(remainder) * 2 >= step ? value + Math.sign(remainder) * (step - Math.abs(remainder)) : value - remainder;
      if (!isNaN(min)) {
        if (snappedValue < min)
          snappedValue = min;
        else if (!isNaN(max) && snappedValue > max)
          snappedValue = min + Math.floor((max - min) / step) * step;
      } else if (!isNaN(max) && snappedValue > max)
        snappedValue = Math.floor(max / step) * step;
      let string = step.toString();
      let index = string.indexOf(".");
      let precision = index >= 0 ? string.length - index : 0;
      if (precision > 0) {
        let pow = Math.pow(10, precision);
        snappedValue = Math.round(snappedValue * pow) / pow;
      }
      return snappedValue;
    }
    function $ac8e4d4816275668$export$b6268554fba451f(value, digits, base = 10) {
      const pow = Math.pow(base, digits);
      return Math.round(value * pow) / pow;
    }
  }
});

// ../../node_modules/@react-aria/ssr/dist/main.js
var require_main2 = __commonJS({
  "../../node_modules/@react-aria/ssr/dist/main.js"(exports, module) {
    var $4hxXn$react = (init_preact(), __toCommonJS(preact_exports));
    function $parcel$export12(e, n, v, s) {
      Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
    }
    function $parcel$interopDefault12(a) {
      return a && a.__esModule ? a.default : a;
    }
    $parcel$export12(module.exports, "SSRProvider", () => $29383e587d62412a$export$9f8ac96af4b1b2ae);
    $parcel$export12(module.exports, "useSSRSafeId", () => $29383e587d62412a$export$619500959fc48b26);
    $parcel$export12(module.exports, "useIsSSR", () => $29383e587d62412a$export$535bd6ca7f90a273);
    var $29383e587d62412a$var$defaultContext = {
      prefix: String(Math.round(Math.random() * 1e10)),
      current: 0
    };
    var $29383e587d62412a$var$SSRContext = /* @__PURE__ */ $parcel$interopDefault12($4hxXn$react).createContext($29383e587d62412a$var$defaultContext);
    function $29383e587d62412a$export$9f8ac96af4b1b2ae(props) {
      let cur = $4hxXn$react.useContext($29383e587d62412a$var$SSRContext);
      let value = $4hxXn$react.useMemo(
        () => ({
          prefix: cur === $29383e587d62412a$var$defaultContext ? "" : `${cur.prefix}-${++cur.current}`,
          current: 0
        }),
        [
          cur
        ]
      );
      return /* @__PURE__ */ $parcel$interopDefault12($4hxXn$react).createElement($29383e587d62412a$var$SSRContext.Provider, {
        value
      }, props.children);
    }
    var $29383e587d62412a$var$canUseDOM = Boolean(typeof window !== "undefined" && window.document && window.document.createElement);
    function $29383e587d62412a$export$619500959fc48b26(defaultId) {
      let ctx = $4hxXn$react.useContext($29383e587d62412a$var$SSRContext);
      if (ctx === $29383e587d62412a$var$defaultContext && !$29383e587d62412a$var$canUseDOM)
        console.warn("When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.");
      return $4hxXn$react.useMemo(
        () => defaultId || `react-aria${ctx.prefix}-${++ctx.current}`,
        [
          defaultId
        ]
      );
    }
    function $29383e587d62412a$export$535bd6ca7f90a273() {
      let cur = $4hxXn$react.useContext($29383e587d62412a$var$SSRContext);
      let isInSSRContext = cur !== $29383e587d62412a$var$defaultContext;
      let [isSSR, setIsSSR] = $4hxXn$react.useState(isInSSRContext);
      if (typeof window !== "undefined" && isInSSRContext)
        $4hxXn$react.useLayoutEffect(() => {
          setIsSSR(false);
        }, []);
      return isSSR;
    }
  }
});

// ../../node_modules/clsx/dist/clsx.js
var require_clsx = __commonJS({
  "../../node_modules/clsx/dist/clsx.js"(exports, module) {
    function e(r2) {
      var o, t, f = "";
      if ("string" == typeof r2 || "number" == typeof r2)
        f += r2;
      else if ("object" == typeof r2)
        if (Array.isArray(r2))
          for (o = 0; o < r2.length; o++)
            r2[o] && (t = e(r2[o])) && (f && (f += " "), f += t);
        else
          for (o in r2)
            r2[o] && (f && (f += " "), f += o);
      return f;
    }
    function r() {
      for (var r2, o, t = 0, f = ""; t < arguments.length; )
        (r2 = arguments[t++]) && (o = e(r2)) && (f && (f += " "), f += o);
      return f;
    }
    module.exports = r, module.exports.clsx = r;
  }
});

// ../../node_modules/@react-aria/utils/dist/main.js
var require_main3 = __commonJS({
  "../../node_modules/@react-aria/utils/dist/main.js"(exports, module) {
    var $1Yh1N$reactstatelyutils = require_main();
    var $1Yh1N$react = (init_preact(), __toCommonJS(preact_exports));
    var $1Yh1N$reactariassr = require_main2();
    var $1Yh1N$clsx = require_clsx();
    function $parcel$export12(e, n, v, s) {
      Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
    }
    function $parcel$interopDefault12(a) {
      return a && a.__esModule ? a.default : a;
    }
    $parcel$export12(module.exports, "useId", () => $8c61827343eed941$export$f680877a34711e37);
    $parcel$export12(module.exports, "mergeIds", () => $8c61827343eed941$export$cd8c9cb68f842629);
    $parcel$export12(module.exports, "useSlotId", () => $8c61827343eed941$export$b4cc09c592e8fdb8);
    $parcel$export12(module.exports, "chain", () => $1e2191638e54f613$export$e08e3b67e392101e);
    $parcel$export12(module.exports, "mergeProps", () => $f847cd1382ea7cd4$export$9d1611c77c2fe928);
    $parcel$export12(module.exports, "mergeRefs", () => $f05dc24eafaeb7e2$export$c9058316764c140e);
    $parcel$export12(module.exports, "filterDOMProps", () => $8d15d0e1797d4238$export$457c3d6518dd4c6f);
    $parcel$export12(module.exports, "focusWithoutScrolling", () => $1117b6c0d4c4c164$export$de79e2c695e052f3);
    $parcel$export12(module.exports, "getOffset", () => $16ec41ef3e36c19c$export$622cea445a1c5b7d);
    $parcel$export12(module.exports, "runAfterTransition", () => $e8117ebcab55be6a$export$24490316f764c430);
    $parcel$export12(module.exports, "useDrag1D", () => $28ed3fb20343b78b$export$7bbed75feba39706);
    $parcel$export12(module.exports, "useGlobalListeners", () => $4571ff54ac709100$export$4eaf04e54aa8eed6);
    $parcel$export12(module.exports, "useLabels", () => $6ec78bde395c477d$export$d6875122194c7b44);
    $parcel$export12(module.exports, "useObjectRef", () => $475b35fe72ba49b3$export$4338b53315abf666);
    $parcel$export12(module.exports, "useUpdateEffect", () => $29293a6f5c75b37e$export$496315a1608d9602);
    $parcel$export12(module.exports, "useLayoutEffect", () => $78605a5d7424e31b$export$e5c5a5f917a5871c);
    $parcel$export12(module.exports, "useResizeObserver", () => $37733e1652f47193$export$683480f191c0e3ea);
    $parcel$export12(module.exports, "useSyncRef", () => $6fc733991a9f977c$export$4debdb1a3f0fa79e);
    $parcel$export12(module.exports, "getScrollParent", () => $d796e7157ac96470$export$cfa2225e87938781);
    $parcel$export12(module.exports, "useViewportSize", () => $8b24bab62f5c65ad$export$d699905dd57c73ca);
    $parcel$export12(module.exports, "useDescription", () => $34da4502ea8120db$export$f8aeda7b10753fa1);
    $parcel$export12(module.exports, "isMac", () => $9e20cff0af27e8cc$export$9ac100e40613ea10);
    $parcel$export12(module.exports, "isIPhone", () => $9e20cff0af27e8cc$export$186c6964ca17d99);
    $parcel$export12(module.exports, "isIPad", () => $9e20cff0af27e8cc$export$7bef049ce92e4224);
    $parcel$export12(module.exports, "isIOS", () => $9e20cff0af27e8cc$export$fedb369cb70207f1);
    $parcel$export12(module.exports, "isAppleDevice", () => $9e20cff0af27e8cc$export$e1865c3bedcd822b);
    $parcel$export12(module.exports, "isWebKit", () => $9e20cff0af27e8cc$export$78551043582a6a98);
    $parcel$export12(module.exports, "isChrome", () => $9e20cff0af27e8cc$export$6446a186d09e379e);
    $parcel$export12(module.exports, "isAndroid", () => $9e20cff0af27e8cc$export$a11b0059900ceec8);
    $parcel$export12(module.exports, "useEvent", () => $2a8c0bb1629926c8$export$90fc3a17d93f704c);
    $parcel$export12(module.exports, "useValueEffect", () => $19a2307bfabafaf1$export$14d238f342723f25);
    $parcel$export12(module.exports, "scrollIntoView", () => $449412113267a1fe$export$53a0910f038337bd);
    $parcel$export12(module.exports, "clamp", () => $1Yh1N$reactstatelyutils.clamp);
    $parcel$export12(module.exports, "snapValueToStep", () => $1Yh1N$reactstatelyutils.snapValueToStep);
    var $78605a5d7424e31b$export$e5c5a5f917a5871c = typeof window !== "undefined" ? $parcel$interopDefault12($1Yh1N$react).useLayoutEffect : () => {
    };
    var $8c61827343eed941$var$idsUpdaterMap = /* @__PURE__ */ new Map();
    function $8c61827343eed941$export$f680877a34711e37(defaultId) {
      let [value, setValue] = $1Yh1N$react.useState(defaultId);
      let nextId = $1Yh1N$react.useRef(null);
      let res = $1Yh1N$reactariassr.useSSRSafeId(value);
      let updateValue = $1Yh1N$react.useCallback((val) => {
        nextId.current = val;
      }, []);
      $8c61827343eed941$var$idsUpdaterMap.set(res, updateValue);
      $78605a5d7424e31b$export$e5c5a5f917a5871c(() => {
        let r = res;
        return () => {
          $8c61827343eed941$var$idsUpdaterMap.delete(r);
        };
      }, [
        res
      ]);
      $1Yh1N$react.useEffect(() => {
        let newId = nextId.current;
        if (newId) {
          nextId.current = null;
          setValue(newId);
        }
      });
      return res;
    }
    function $8c61827343eed941$export$cd8c9cb68f842629(idA, idB) {
      if (idA === idB)
        return idA;
      let setIdA = $8c61827343eed941$var$idsUpdaterMap.get(idA);
      if (setIdA) {
        setIdA(idB);
        return idB;
      }
      let setIdB = $8c61827343eed941$var$idsUpdaterMap.get(idB);
      if (setIdB) {
        setIdB(idA);
        return idA;
      }
      return idB;
    }
    function $8c61827343eed941$export$b4cc09c592e8fdb8(depArray = []) {
      let id = $8c61827343eed941$export$f680877a34711e37();
      let [resolvedId, setResolvedId] = $19a2307bfabafaf1$export$14d238f342723f25(id);
      let updateId = $1Yh1N$react.useCallback(() => {
        setResolvedId(function* () {
          yield id;
          yield document.getElementById(id) ? id : null;
        });
      }, [
        id,
        setResolvedId
      ]);
      $78605a5d7424e31b$export$e5c5a5f917a5871c(updateId, [
        id,
        updateId,
        ...depArray
      ]);
      return resolvedId;
    }
    function $1e2191638e54f613$export$e08e3b67e392101e(...callbacks) {
      return (...args) => {
        for (let callback of callbacks)
          if (typeof callback === "function")
            callback(...args);
      };
    }
    function $f847cd1382ea7cd4$export$9d1611c77c2fe928(...args) {
      let result = __spreadValues({}, args[0]);
      for (let i = 1; i < args.length; i++) {
        let props = args[i];
        for (let key in props) {
          let a = result[key];
          let b = props[key];
          if (typeof a === "function" && typeof b === "function" && key[0] === "o" && key[1] === "n" && key.charCodeAt(2) >= 65 && key.charCodeAt(2) <= 90)
            result[key] = $1e2191638e54f613$export$e08e3b67e392101e(a, b);
          else if ((key === "className" || key === "UNSAFE_className") && typeof a === "string" && typeof b === "string")
            result[key] = $parcel$interopDefault12($1Yh1N$clsx)(a, b);
          else if (key === "id" && a && b)
            result.id = $8c61827343eed941$export$cd8c9cb68f842629(a, b);
          else
            result[key] = b !== void 0 ? b : a;
        }
      }
      return result;
    }
    function $f05dc24eafaeb7e2$export$c9058316764c140e(...refs) {
      return (value) => {
        for (let ref of refs) {
          if (typeof ref === "function")
            ref(value);
          else if (ref != null)
            ref.current = value;
        }
      };
    }
    var $8d15d0e1797d4238$var$DOMPropNames = /* @__PURE__ */ new Set([
      "id"
    ]);
    var $8d15d0e1797d4238$var$labelablePropNames = /* @__PURE__ */ new Set([
      "aria-label",
      "aria-labelledby",
      "aria-describedby",
      "aria-details"
    ]);
    var $8d15d0e1797d4238$var$propRe = /^(data-.*)$/;
    function $8d15d0e1797d4238$export$457c3d6518dd4c6f(props, opts = {}) {
      let { labelable, propNames } = opts;
      let filteredProps = {};
      for (const prop in props)
        if (Object.prototype.hasOwnProperty.call(props, prop) && ($8d15d0e1797d4238$var$DOMPropNames.has(prop) || labelable && $8d15d0e1797d4238$var$labelablePropNames.has(prop) || (propNames === null || propNames === void 0 ? void 0 : propNames.has(prop)) || $8d15d0e1797d4238$var$propRe.test(prop)))
          filteredProps[prop] = props[prop];
      return filteredProps;
    }
    function $1117b6c0d4c4c164$export$de79e2c695e052f3(element) {
      if ($1117b6c0d4c4c164$var$supportsPreventScroll())
        element.focus({
          preventScroll: true
        });
      else {
        let scrollableElements = $1117b6c0d4c4c164$var$getScrollableElements(element);
        element.focus();
        $1117b6c0d4c4c164$var$restoreScrollPosition(scrollableElements);
      }
    }
    var $1117b6c0d4c4c164$var$supportsPreventScrollCached = null;
    function $1117b6c0d4c4c164$var$supportsPreventScroll() {
      if ($1117b6c0d4c4c164$var$supportsPreventScrollCached == null) {
        $1117b6c0d4c4c164$var$supportsPreventScrollCached = false;
        try {
          var focusElem = document.createElement("div");
          focusElem.focus({
            get preventScroll() {
              $1117b6c0d4c4c164$var$supportsPreventScrollCached = true;
              return true;
            }
          });
        } catch (e) {
        }
      }
      return $1117b6c0d4c4c164$var$supportsPreventScrollCached;
    }
    function $1117b6c0d4c4c164$var$getScrollableElements(element) {
      var parent = element.parentNode;
      var scrollableElements = [];
      var rootScrollingElement = document.scrollingElement || document.documentElement;
      while (parent instanceof HTMLElement && parent !== rootScrollingElement) {
        if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth)
          scrollableElements.push({
            element: parent,
            scrollTop: parent.scrollTop,
            scrollLeft: parent.scrollLeft
          });
        parent = parent.parentNode;
      }
      if (rootScrollingElement instanceof HTMLElement)
        scrollableElements.push({
          element: rootScrollingElement,
          scrollTop: rootScrollingElement.scrollTop,
          scrollLeft: rootScrollingElement.scrollLeft
        });
      return scrollableElements;
    }
    function $1117b6c0d4c4c164$var$restoreScrollPosition(scrollableElements) {
      for (let { element, scrollTop, scrollLeft } of scrollableElements) {
        element.scrollTop = scrollTop;
        element.scrollLeft = scrollLeft;
      }
    }
    function $16ec41ef3e36c19c$export$622cea445a1c5b7d(element, reverse2, orientation = "horizontal") {
      let rect = element.getBoundingClientRect();
      if (reverse2)
        return orientation === "horizontal" ? rect.right : rect.bottom;
      return orientation === "horizontal" ? rect.left : rect.top;
    }
    var $e8117ebcab55be6a$var$transitionsByElement = /* @__PURE__ */ new Map();
    var $e8117ebcab55be6a$var$transitionCallbacks = /* @__PURE__ */ new Set();
    function $e8117ebcab55be6a$var$setupGlobalEvents() {
      if (typeof window === "undefined")
        return;
      let onTransitionStart = (e) => {
        let transitions = $e8117ebcab55be6a$var$transitionsByElement.get(e.target);
        if (!transitions) {
          transitions = /* @__PURE__ */ new Set();
          $e8117ebcab55be6a$var$transitionsByElement.set(e.target, transitions);
          e.target.addEventListener("transitioncancel", onTransitionEnd);
        }
        transitions.add(e.propertyName);
      };
      let onTransitionEnd = (e) => {
        let properties = $e8117ebcab55be6a$var$transitionsByElement.get(e.target);
        if (!properties)
          return;
        properties.delete(e.propertyName);
        if (properties.size === 0) {
          e.target.removeEventListener("transitioncancel", onTransitionEnd);
          $e8117ebcab55be6a$var$transitionsByElement.delete(e.target);
        }
        if ($e8117ebcab55be6a$var$transitionsByElement.size === 0) {
          for (let cb of $e8117ebcab55be6a$var$transitionCallbacks)
            cb();
          $e8117ebcab55be6a$var$transitionCallbacks.clear();
        }
      };
      document.body.addEventListener("transitionrun", onTransitionStart);
      document.body.addEventListener("transitionend", onTransitionEnd);
    }
    if (typeof document !== "undefined") {
      if (document.readyState !== "loading")
        $e8117ebcab55be6a$var$setupGlobalEvents();
      else
        document.addEventListener("DOMContentLoaded", $e8117ebcab55be6a$var$setupGlobalEvents);
    }
    function $e8117ebcab55be6a$export$24490316f764c430(fn) {
      requestAnimationFrame(() => {
        if ($e8117ebcab55be6a$var$transitionsByElement.size === 0)
          fn();
        else
          $e8117ebcab55be6a$var$transitionCallbacks.add(fn);
      });
    }
    var $28ed3fb20343b78b$var$draggingElements = [];
    function $28ed3fb20343b78b$export$7bbed75feba39706(props) {
      console.warn("useDrag1D is deprecated, please use `useMove` instead https://react-spectrum.adobe.com/react-aria/useMove.html");
      let { containerRef, reverse: reverse2, orientation, onHover, onDrag, onPositionChange, onIncrement, onDecrement, onIncrementToMax, onDecrementToMin, onCollapseToggle } = props;
      let getPosition = (e) => orientation === "horizontal" ? e.clientX : e.clientY;
      let getNextOffset = (e) => {
        let containerOffset = $16ec41ef3e36c19c$export$622cea445a1c5b7d(containerRef.current, reverse2, orientation);
        let mouseOffset = getPosition(e);
        let nextOffset = reverse2 ? containerOffset - mouseOffset : mouseOffset - containerOffset;
        return nextOffset;
      };
      let dragging = $1Yh1N$react.useRef(false);
      let prevPosition = $1Yh1N$react.useRef(0);
      let handlers = $1Yh1N$react.useRef({
        onPositionChange,
        onDrag
      });
      handlers.current.onDrag = onDrag;
      handlers.current.onPositionChange = onPositionChange;
      let onMouseDragged = (e) => {
        e.preventDefault();
        let nextOffset = getNextOffset(e);
        if (!dragging.current) {
          dragging.current = true;
          if (handlers.current.onDrag)
            handlers.current.onDrag(true);
          if (handlers.current.onPositionChange)
            handlers.current.onPositionChange(nextOffset);
        }
        if (prevPosition.current === nextOffset)
          return;
        prevPosition.current = nextOffset;
        if (onPositionChange)
          onPositionChange(nextOffset);
      };
      let onMouseUp = (e) => {
        const target = e.target;
        dragging.current = false;
        let nextOffset = getNextOffset(e);
        if (handlers.current.onDrag)
          handlers.current.onDrag(false);
        if (handlers.current.onPositionChange)
          handlers.current.onPositionChange(nextOffset);
        $28ed3fb20343b78b$var$draggingElements.splice($28ed3fb20343b78b$var$draggingElements.indexOf(target), 1);
        window.removeEventListener("mouseup", onMouseUp, false);
        window.removeEventListener("mousemove", onMouseDragged, false);
      };
      let onMouseDown = (e) => {
        const target = e.currentTarget;
        if ($28ed3fb20343b78b$var$draggingElements.some(
          (elt) => target.contains(elt)
        ))
          return;
        $28ed3fb20343b78b$var$draggingElements.push(target);
        window.addEventListener("mousemove", onMouseDragged, false);
        window.addEventListener("mouseup", onMouseUp, false);
      };
      let onMouseEnter = () => {
        if (onHover)
          onHover(true);
      };
      let onMouseOut = () => {
        if (onHover)
          onHover(false);
      };
      let onKeyDown = (e) => {
        switch (e.key) {
          case "Left":
          case "ArrowLeft":
            if (orientation === "horizontal") {
              e.preventDefault();
              if (onDecrement && !reverse2)
                onDecrement();
              else if (onIncrement && reverse2)
                onIncrement();
            }
            break;
          case "Up":
          case "ArrowUp":
            if (orientation === "vertical") {
              e.preventDefault();
              if (onDecrement && !reverse2)
                onDecrement();
              else if (onIncrement && reverse2)
                onIncrement();
            }
            break;
          case "Right":
          case "ArrowRight":
            if (orientation === "horizontal") {
              e.preventDefault();
              if (onIncrement && !reverse2)
                onIncrement();
              else if (onDecrement && reverse2)
                onDecrement();
            }
            break;
          case "Down":
          case "ArrowDown":
            if (orientation === "vertical") {
              e.preventDefault();
              if (onIncrement && !reverse2)
                onIncrement();
              else if (onDecrement && reverse2)
                onDecrement();
            }
            break;
          case "Home":
            e.preventDefault();
            if (onDecrementToMin)
              onDecrementToMin();
            break;
          case "End":
            e.preventDefault();
            if (onIncrementToMax)
              onIncrementToMax();
            break;
          case "Enter":
            e.preventDefault();
            if (onCollapseToggle)
              onCollapseToggle();
            break;
        }
      };
      return {
        onMouseDown,
        onMouseEnter,
        onMouseOut,
        onKeyDown
      };
    }
    function $4571ff54ac709100$export$4eaf04e54aa8eed6() {
      let globalListeners = $1Yh1N$react.useRef(/* @__PURE__ */ new Map());
      let addGlobalListener = $1Yh1N$react.useCallback((eventTarget, type, listener, options) => {
        let fn = (options === null || options === void 0 ? void 0 : options.once) ? (...args) => {
          globalListeners.current.delete(listener);
          listener(...args);
        } : listener;
        globalListeners.current.set(listener, {
          type,
          eventTarget,
          fn,
          options
        });
        eventTarget.addEventListener(type, listener, options);
      }, []);
      let removeGlobalListener = $1Yh1N$react.useCallback((eventTarget, type, listener, options) => {
        var ref;
        let fn = ((ref = globalListeners.current.get(listener)) === null || ref === void 0 ? void 0 : ref.fn) || listener;
        eventTarget.removeEventListener(type, fn, options);
        globalListeners.current.delete(listener);
      }, []);
      let removeAllGlobalListeners = $1Yh1N$react.useCallback(() => {
        globalListeners.current.forEach((value, key) => {
          removeGlobalListener(value.eventTarget, value.type, key, value.options);
        });
      }, [
        removeGlobalListener
      ]);
      $1Yh1N$react.useEffect(() => {
        return removeAllGlobalListeners;
      }, [
        removeAllGlobalListeners
      ]);
      return {
        addGlobalListener,
        removeGlobalListener,
        removeAllGlobalListeners
      };
    }
    function $6ec78bde395c477d$export$d6875122194c7b44(props, defaultLabel) {
      let { id, "aria-label": label, "aria-labelledby": labelledBy } = props;
      id = $8c61827343eed941$export$f680877a34711e37(id);
      if (labelledBy && label) {
        let ids = /* @__PURE__ */ new Set([
          ...labelledBy.trim().split(/\s+/),
          id
        ]);
        labelledBy = [
          ...ids
        ].join(" ");
      } else if (labelledBy)
        labelledBy = labelledBy.trim().split(/\s+/).join(" ");
      if (!label && !labelledBy && defaultLabel)
        label = defaultLabel;
      return {
        id,
        "aria-label": label,
        "aria-labelledby": labelledBy
      };
    }
    function $475b35fe72ba49b3$export$4338b53315abf666(forwardedRef) {
      const objRef = $1Yh1N$react.useRef();
      $78605a5d7424e31b$export$e5c5a5f917a5871c(() => {
        if (!forwardedRef)
          return;
        if (typeof forwardedRef === "function")
          forwardedRef(objRef.current);
        else
          forwardedRef.current = objRef.current;
      }, [
        forwardedRef
      ]);
      return objRef;
    }
    function $29293a6f5c75b37e$export$496315a1608d9602(effect, dependencies) {
      const isInitialMount = $1Yh1N$react.useRef(true);
      $1Yh1N$react.useEffect(() => {
        if (isInitialMount.current)
          isInitialMount.current = false;
        else
          effect();
      }, dependencies);
    }
    function $37733e1652f47193$var$hasResizeObserver() {
      return typeof window.ResizeObserver !== "undefined";
    }
    function $37733e1652f47193$export$683480f191c0e3ea(options) {
      const { ref, onResize } = options;
      $1Yh1N$react.useEffect(() => {
        let element = ref === null || ref === void 0 ? void 0 : ref.current;
        if (!element)
          return;
        if (!$37733e1652f47193$var$hasResizeObserver()) {
          window.addEventListener("resize", onResize, false);
          return () => {
            window.removeEventListener("resize", onResize, false);
          };
        } else {
          const resizeObserverInstance = new window.ResizeObserver((entries) => {
            if (!entries.length)
              return;
            onResize();
          });
          resizeObserverInstance.observe(element);
          return () => {
            if (element)
              resizeObserverInstance.unobserve(element);
          };
        }
      }, [
        onResize,
        ref
      ]);
    }
    function $6fc733991a9f977c$export$4debdb1a3f0fa79e(context, ref) {
      $78605a5d7424e31b$export$e5c5a5f917a5871c(() => {
        if (context && context.ref && ref) {
          context.ref.current = ref.current;
          return () => {
            context.ref.current = null;
          };
        }
      }, [
        context,
        ref
      ]);
    }
    function $d796e7157ac96470$export$cfa2225e87938781(node) {
      while (node && !$d796e7157ac96470$var$isScrollable(node))
        node = node.parentElement;
      return node || document.scrollingElement || document.documentElement;
    }
    function $d796e7157ac96470$var$isScrollable(node) {
      let style = window.getComputedStyle(node);
      return /(auto|scroll)/.test(style.overflow + style.overflowX + style.overflowY);
    }
    var $8b24bab62f5c65ad$var$visualViewport = typeof window !== "undefined" && window.visualViewport;
    function $8b24bab62f5c65ad$export$d699905dd57c73ca() {
      let [size1, setSize] = $1Yh1N$react.useState(
        () => $8b24bab62f5c65ad$var$getViewportSize()
      );
      $1Yh1N$react.useEffect(() => {
        let onResize = () => {
          setSize((size) => {
            let newSize = $8b24bab62f5c65ad$var$getViewportSize();
            if (newSize.width === size.width && newSize.height === size.height)
              return size;
            return newSize;
          });
        };
        if (!$8b24bab62f5c65ad$var$visualViewport)
          window.addEventListener("resize", onResize);
        else
          $8b24bab62f5c65ad$var$visualViewport.addEventListener("resize", onResize);
        return () => {
          if (!$8b24bab62f5c65ad$var$visualViewport)
            window.removeEventListener("resize", onResize);
          else
            $8b24bab62f5c65ad$var$visualViewport.removeEventListener("resize", onResize);
        };
      }, []);
      return size1;
    }
    function $8b24bab62f5c65ad$var$getViewportSize() {
      return {
        width: ($8b24bab62f5c65ad$var$visualViewport === null || $8b24bab62f5c65ad$var$visualViewport === void 0 ? void 0 : $8b24bab62f5c65ad$var$visualViewport.width) || window.innerWidth,
        height: ($8b24bab62f5c65ad$var$visualViewport === null || $8b24bab62f5c65ad$var$visualViewport === void 0 ? void 0 : $8b24bab62f5c65ad$var$visualViewport.height) || window.innerHeight
      };
    }
    var $34da4502ea8120db$var$descriptionId = 0;
    var $34da4502ea8120db$var$descriptionNodes = /* @__PURE__ */ new Map();
    function $34da4502ea8120db$export$f8aeda7b10753fa1(description) {
      let [id1, setId] = $1Yh1N$react.useState(null);
      $78605a5d7424e31b$export$e5c5a5f917a5871c(() => {
        if (!description)
          return;
        let desc = $34da4502ea8120db$var$descriptionNodes.get(description);
        if (!desc) {
          let id = `react-aria-description-${$34da4502ea8120db$var$descriptionId++}`;
          setId(id);
          let node = document.createElement("div");
          node.id = id;
          node.style.display = "none";
          node.textContent = description;
          document.body.appendChild(node);
          desc = {
            refCount: 0,
            element: node
          };
          $34da4502ea8120db$var$descriptionNodes.set(description, desc);
        } else
          setId(desc.element.id);
        desc.refCount++;
        return () => {
          if (--desc.refCount === 0) {
            desc.element.remove();
            $34da4502ea8120db$var$descriptionNodes.delete(description);
          }
        };
      }, [
        description
      ]);
      return {
        "aria-describedby": description ? id1 : void 0
      };
    }
    function $9e20cff0af27e8cc$var$testUserAgent(re) {
      var ref;
      if (typeof window === "undefined" || window.navigator == null)
        return false;
      return ((ref = window.navigator["userAgentData"]) === null || ref === void 0 ? void 0 : ref.brands.some(
        (brand) => re.test(brand.brand)
      )) || re.test(window.navigator.userAgent);
    }
    function $9e20cff0af27e8cc$var$testPlatform(re) {
      var ref;
      return typeof window !== "undefined" && window.navigator != null ? re.test(((ref = window.navigator["userAgentData"]) === null || ref === void 0 ? void 0 : ref.platform) || window.navigator.platform) : false;
    }
    function $9e20cff0af27e8cc$export$9ac100e40613ea10() {
      return $9e20cff0af27e8cc$var$testPlatform(/^Mac/i);
    }
    function $9e20cff0af27e8cc$export$186c6964ca17d99() {
      return $9e20cff0af27e8cc$var$testPlatform(/^iPhone/i);
    }
    function $9e20cff0af27e8cc$export$7bef049ce92e4224() {
      return $9e20cff0af27e8cc$var$testPlatform(/^iPad/i) || $9e20cff0af27e8cc$export$9ac100e40613ea10() && navigator.maxTouchPoints > 1;
    }
    function $9e20cff0af27e8cc$export$fedb369cb70207f1() {
      return $9e20cff0af27e8cc$export$186c6964ca17d99() || $9e20cff0af27e8cc$export$7bef049ce92e4224();
    }
    function $9e20cff0af27e8cc$export$e1865c3bedcd822b() {
      return $9e20cff0af27e8cc$export$9ac100e40613ea10() || $9e20cff0af27e8cc$export$fedb369cb70207f1();
    }
    function $9e20cff0af27e8cc$export$78551043582a6a98() {
      return $9e20cff0af27e8cc$var$testUserAgent(/AppleWebKit/i) && !$9e20cff0af27e8cc$export$6446a186d09e379e();
    }
    function $9e20cff0af27e8cc$export$6446a186d09e379e() {
      return $9e20cff0af27e8cc$var$testUserAgent(/Chrome/i);
    }
    function $9e20cff0af27e8cc$export$a11b0059900ceec8() {
      return $9e20cff0af27e8cc$var$testUserAgent(/Android/i);
    }
    function $2a8c0bb1629926c8$export$90fc3a17d93f704c(ref, event, handler1, options) {
      let handlerRef = $1Yh1N$react.useRef(handler1);
      handlerRef.current = handler1;
      let isDisabled = handler1 == null;
      $1Yh1N$react.useEffect(() => {
        if (isDisabled)
          return;
        let element = ref.current;
        let handler = (e) => handlerRef.current.call(this, e);
        element.addEventListener(event, handler, options);
        return () => {
          element.removeEventListener(event, handler, options);
        };
      }, [
        ref,
        event,
        options,
        isDisabled
      ]);
    }
    function $19a2307bfabafaf1$export$14d238f342723f25(defaultValue) {
      let [value, setValue] = $1Yh1N$react.useState(defaultValue);
      let valueRef = $1Yh1N$react.useRef(value);
      let effect = $1Yh1N$react.useRef(null);
      valueRef.current = value;
      let nextRef = $1Yh1N$react.useRef(null);
      nextRef.current = () => {
        let newValue = effect.current.next();
        if (newValue.done) {
          effect.current = null;
          return;
        }
        if (value === newValue.value)
          nextRef.current();
        else
          setValue(newValue.value);
      };
      $78605a5d7424e31b$export$e5c5a5f917a5871c(() => {
        if (effect.current)
          nextRef.current();
      });
      let queue = $1Yh1N$react.useCallback((fn) => {
        effect.current = fn(valueRef.current);
        nextRef.current();
      }, [
        effect,
        nextRef
      ]);
      return [
        value,
        queue
      ];
    }
    function $449412113267a1fe$export$53a0910f038337bd(scrollView, element) {
      let offsetX = $449412113267a1fe$var$relativeOffset(scrollView, element, "left");
      let offsetY = $449412113267a1fe$var$relativeOffset(scrollView, element, "top");
      let width = element.offsetWidth;
      let height = element.offsetHeight;
      let x = scrollView.scrollLeft;
      let y = scrollView.scrollTop;
      let maxX = x + scrollView.offsetWidth;
      let maxY = y + scrollView.offsetHeight;
      if (offsetX <= x)
        x = offsetX;
      else if (offsetX + width > maxX)
        x += offsetX + width - maxX;
      if (offsetY <= y)
        y = offsetY;
      else if (offsetY + height > maxY)
        y += offsetY + height - maxY;
      scrollView.scrollLeft = x;
      scrollView.scrollTop = y;
    }
    function $449412113267a1fe$var$relativeOffset(ancestor, child, axis) {
      const prop = axis === "left" ? "offsetLeft" : "offsetTop";
      let sum = 0;
      while (child.offsetParent) {
        sum += child[prop];
        if (child.offsetParent === ancestor)
          break;
        else if (child.offsetParent.contains(ancestor)) {
          sum -= ancestor[prop];
          break;
        }
        child = child.offsetParent;
      }
      return sum;
    }
  }
});

// ../../node_modules/@internationalized/string/dist/main.js
var require_main4 = __commonJS({
  "../../node_modules/@internationalized/string/dist/main.js"(exports, module) {
    function $parcel$export12(e, n, v, s) {
      Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
    }
    $parcel$export12(module.exports, "LocalizedStringDictionary", () => $f80be5fd4d03dda9$export$c17fa47878dc55b6);
    $parcel$export12(module.exports, "LocalizedStringFormatter", () => $3e95fbf3429967d1$export$2f817fcdc4b89ae0);
    var $f80be5fd4d03dda9$export$c17fa47878dc55b6 = class {
      getStringForLocale(key, locale) {
        let strings = this.strings[locale];
        if (!strings) {
          strings = $f80be5fd4d03dda9$var$getStringsForLocale(locale, this.strings, this.defaultLocale);
          this.strings[locale] = strings;
        }
        let string = strings[key];
        if (!string)
          throw new Error(`Could not find intl message ${key} in ${locale} locale`);
        return string;
      }
      constructor(messages, defaultLocale = "en-US") {
        this.strings = __spreadValues({}, messages);
        this.defaultLocale = defaultLocale;
      }
    };
    function $f80be5fd4d03dda9$var$getStringsForLocale(locale, strings, defaultLocale = "en-US") {
      if (strings[locale])
        return strings[locale];
      let language = $f80be5fd4d03dda9$var$getLanguage(locale);
      if (strings[language])
        return strings[language];
      for (let key in strings) {
        if (key.startsWith(language + "-"))
          return strings[key];
      }
      return strings[defaultLocale];
    }
    function $f80be5fd4d03dda9$var$getLanguage(locale) {
      if (Intl.Locale)
        return new Intl.Locale(locale).language;
      return locale.split("-")[0];
    }
    var $3e95fbf3429967d1$var$pluralRulesCache = /* @__PURE__ */ new Map();
    var $3e95fbf3429967d1$var$numberFormatCache = /* @__PURE__ */ new Map();
    var $3e95fbf3429967d1$export$2f817fcdc4b89ae0 = class {
      format(key, variables) {
        let message = this.strings.getStringForLocale(key, this.locale);
        return typeof message === "function" ? message(variables, this) : message;
      }
      plural(count, options, type = "cardinal") {
        let opt = options["=" + count];
        if (opt)
          return typeof opt === "function" ? opt() : opt;
        let key = this.locale + ":" + type;
        let pluralRules = $3e95fbf3429967d1$var$pluralRulesCache.get(key);
        if (!pluralRules) {
          pluralRules = new Intl.PluralRules(this.locale, {
            type
          });
          $3e95fbf3429967d1$var$pluralRulesCache.set(key, pluralRules);
        }
        let selected = pluralRules.select(count);
        opt = options[selected] || options.other;
        return typeof opt === "function" ? opt() : opt;
      }
      number(value) {
        let numberFormat = $3e95fbf3429967d1$var$numberFormatCache.get(this.locale);
        if (!numberFormat) {
          numberFormat = new Intl.NumberFormat(this.locale);
          $3e95fbf3429967d1$var$numberFormatCache.set(this.locale, numberFormat);
        }
        return numberFormat.format(value);
      }
      select(options, value) {
        let opt = options[value] || options.other;
        return typeof opt === "function" ? opt() : opt;
      }
      constructor(locale, strings) {
        this.locale = locale;
        this.strings = strings;
      }
    };
  }
});

// ../../node_modules/@internationalized/date/dist/main.js
var require_main5 = __commonJS({
  "../../node_modules/@internationalized/date/dist/main.js"(exports, module) {
    function $parcel$export12(e, n, v, s) {
      Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
    }
    $parcel$export12(module.exports, "CalendarDate", () => $625ad1e1f4c43bc1$export$99faa760c7908e4f);
    $parcel$export12(module.exports, "CalendarDateTime", () => $625ad1e1f4c43bc1$export$ca871e8dbb80966f);
    $parcel$export12(module.exports, "Time", () => $625ad1e1f4c43bc1$export$680ea196effce5f);
    $parcel$export12(module.exports, "ZonedDateTime", () => $625ad1e1f4c43bc1$export$d3b7288e7994edea);
    $parcel$export12(module.exports, "GregorianCalendar", () => $af14c9812fdceb33$export$80ee6245ec4f29ec);
    $parcel$export12(module.exports, "JapaneseCalendar", () => $b0ac0602ef646b2c$export$b746ab2b60cdffbf);
    $parcel$export12(module.exports, "BuddhistCalendar", () => $561c4ef058278b74$export$42d20a78301dee44);
    $parcel$export12(module.exports, "TaiwanCalendar", () => $9cc5d3577ec40243$export$65e01080afcb0799);
    $parcel$export12(module.exports, "PersianCalendar", () => $3c060181fc7249ae$export$37fccdbfd14c5939);
    $parcel$export12(module.exports, "IndianCalendar", () => $5f1dfa5c67609fe6$export$39f31c639fa15726);
    $parcel$export12(module.exports, "IslamicCivilCalendar", () => $ecb2c4cc8c9aae25$export$2066795aadd37bfc);
    $parcel$export12(module.exports, "IslamicTabularCalendar", () => $ecb2c4cc8c9aae25$export$37f0887f2f9d22f7);
    $parcel$export12(module.exports, "IslamicUmalquraCalendar", () => $ecb2c4cc8c9aae25$export$5baab4758c231076);
    $parcel$export12(module.exports, "HebrewCalendar", () => $0f5324ee3bdd9396$export$ca405048b8fb5af);
    $parcel$export12(module.exports, "EthiopicCalendar", () => $4db04d1051af0f2f$export$26ba6eab5e20cd7d);
    $parcel$export12(module.exports, "EthiopicAmeteAlemCalendar", () => $4db04d1051af0f2f$export$d72e0c37005a4914);
    $parcel$export12(module.exports, "CopticCalendar", () => $4db04d1051af0f2f$export$fe6243cbe1a4b7c1);
    $parcel$export12(module.exports, "createCalendar", () => $4922c0a5a69da0ba$export$dd0bbc9b26defe37);
    $parcel$export12(module.exports, "toCalendarDate", () => $4ae0260a69729f1d$export$93522d1a439f3617);
    $parcel$export12(module.exports, "toCalendarDateTime", () => $4ae0260a69729f1d$export$b21e0b124e224484);
    $parcel$export12(module.exports, "toTime", () => $4ae0260a69729f1d$export$d33f79e3ffc3dc83);
    $parcel$export12(module.exports, "toCalendar", () => $4ae0260a69729f1d$export$b4a036af3fc0b032);
    $parcel$export12(module.exports, "toZoned", () => $4ae0260a69729f1d$export$84c95a83c799e074);
    $parcel$export12(module.exports, "toTimeZone", () => $4ae0260a69729f1d$export$538b00033cc11c75);
    $parcel$export12(module.exports, "toLocalTimeZone", () => $4ae0260a69729f1d$export$d9b67bc93c097491);
    $parcel$export12(module.exports, "isSameDay", () => $1f0f7ebf1ae6c530$export$ea39ec197993aef0);
    $parcel$export12(module.exports, "isSameMonth", () => $1f0f7ebf1ae6c530$export$a18c89cbd24170ff);
    $parcel$export12(module.exports, "isSameYear", () => $1f0f7ebf1ae6c530$export$5841f9eb9773f25f);
    $parcel$export12(module.exports, "isEqualDay", () => $1f0f7ebf1ae6c530$export$91b62ebf2ba703ee);
    $parcel$export12(module.exports, "isEqualMonth", () => $1f0f7ebf1ae6c530$export$5a8da0c44a3afdf2);
    $parcel$export12(module.exports, "isEqualYear", () => $1f0f7ebf1ae6c530$export$ea840f5a6dda8147);
    $parcel$export12(module.exports, "isToday", () => $1f0f7ebf1ae6c530$export$629b0a497aa65267);
    $parcel$export12(module.exports, "getDayOfWeek", () => $1f0f7ebf1ae6c530$export$2061056d06d7cdf7);
    $parcel$export12(module.exports, "now", () => $1f0f7ebf1ae6c530$export$461939dd4422153);
    $parcel$export12(module.exports, "today", () => $1f0f7ebf1ae6c530$export$d0bdf45af03a6ea3);
    $parcel$export12(module.exports, "getHoursInDay", () => $1f0f7ebf1ae6c530$export$126c91c941de7e);
    $parcel$export12(module.exports, "getLocalTimeZone", () => $1f0f7ebf1ae6c530$export$aa8b41735afcabd2);
    $parcel$export12(module.exports, "startOfMonth", () => $1f0f7ebf1ae6c530$export$a5a3b454ada2268e);
    $parcel$export12(module.exports, "startOfWeek", () => $1f0f7ebf1ae6c530$export$42c81a444fbfb5d4);
    $parcel$export12(module.exports, "startOfYear", () => $1f0f7ebf1ae6c530$export$f91e89d3d0406102);
    $parcel$export12(module.exports, "endOfMonth", () => $1f0f7ebf1ae6c530$export$a2258d9c4118825c);
    $parcel$export12(module.exports, "endOfWeek", () => $1f0f7ebf1ae6c530$export$ef8b6d9133084f4e);
    $parcel$export12(module.exports, "endOfYear", () => $1f0f7ebf1ae6c530$export$8b7aa55c66d5569e);
    $parcel$export12(module.exports, "getMinimumMonthInYear", () => $1f0f7ebf1ae6c530$export$5412ac11713b72ad);
    $parcel$export12(module.exports, "getMinimumDayInMonth", () => $1f0f7ebf1ae6c530$export$b2f4953d301981d5);
    $parcel$export12(module.exports, "getWeeksInMonth", () => $1f0f7ebf1ae6c530$export$ccc1b2479e7dd654);
    $parcel$export12(module.exports, "minDate", () => $1f0f7ebf1ae6c530$export$5c333a116e949cdd);
    $parcel$export12(module.exports, "maxDate", () => $1f0f7ebf1ae6c530$export$a75f2bff57811055);
    $parcel$export12(module.exports, "isWeekend", () => $1f0f7ebf1ae6c530$export$618d60ea299da42);
    $parcel$export12(module.exports, "isWeekday", () => $1f0f7ebf1ae6c530$export$ee9d87258e1d19ed);
    $parcel$export12(module.exports, "parseDate", () => $4c32e2d98e5a5134$export$6b862160d295c8e);
    $parcel$export12(module.exports, "parseDateTime", () => $4c32e2d98e5a5134$export$588937bcd60ade55);
    $parcel$export12(module.exports, "parseTime", () => $4c32e2d98e5a5134$export$c9698ec7f05a07e1);
    $parcel$export12(module.exports, "parseAbsolute", () => $4c32e2d98e5a5134$export$5adfdab05168c219);
    $parcel$export12(module.exports, "parseAbsoluteToLocal", () => $4c32e2d98e5a5134$export$8e384432362ed0f0);
    $parcel$export12(module.exports, "parseZonedDateTime", () => $4c32e2d98e5a5134$export$fd7893f06e92a6a4);
    $parcel$export12(module.exports, "DateFormatter", () => $8f23a04ae90a588b$export$ad991b66133851cf);
    function $a5090d6430502238$export$842a2cf37af977e1(amount, numerator) {
      return amount - numerator * Math.floor(amount / numerator);
    }
    var $af14c9812fdceb33$var$EPOCH = 1721426;
    function $af14c9812fdceb33$export$f297eb839006d339(era, year, month, day) {
      year = $af14c9812fdceb33$export$c36e0ecb2d4fa69d(era, year);
      let y1 = year - 1;
      let monthOffset = -2;
      if (month <= 2)
        monthOffset = 0;
      else if ($af14c9812fdceb33$export$553d7fa8e3805fc0(year))
        monthOffset = -1;
      return $af14c9812fdceb33$var$EPOCH - 1 + 365 * y1 + Math.floor(y1 / 4) - Math.floor(y1 / 100) + Math.floor(y1 / 400) + Math.floor((367 * month - 362) / 12 + monthOffset + day);
    }
    function $af14c9812fdceb33$export$553d7fa8e3805fc0(year) {
      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    }
    function $af14c9812fdceb33$export$c36e0ecb2d4fa69d(era, year) {
      return era === "BC" ? 1 - year : year;
    }
    function $af14c9812fdceb33$export$4475b7e617eb123c(year) {
      let era = "AD";
      if (year <= 0) {
        era = "BC";
        year = 1 - year;
      }
      return [
        era,
        year
      ];
    }
    var $af14c9812fdceb33$var$daysInMonth = {
      standard: [
        31,
        28,
        31,
        30,
        31,
        30,
        31,
        31,
        30,
        31,
        30,
        31
      ],
      leapyear: [
        31,
        29,
        31,
        30,
        31,
        30,
        31,
        31,
        30,
        31,
        30,
        31
      ]
    };
    var $af14c9812fdceb33$export$80ee6245ec4f29ec = class {
      fromJulianDay(jd) {
        let jd0 = jd;
        let depoch = jd0 - $af14c9812fdceb33$var$EPOCH;
        let quadricent = Math.floor(depoch / 146097);
        let dqc = $a5090d6430502238$export$842a2cf37af977e1(depoch, 146097);
        let cent = Math.floor(dqc / 36524);
        let dcent = $a5090d6430502238$export$842a2cf37af977e1(dqc, 36524);
        let quad = Math.floor(dcent / 1461);
        let dquad = $a5090d6430502238$export$842a2cf37af977e1(dcent, 1461);
        let yindex = Math.floor(dquad / 365);
        let extendedYear = quadricent * 400 + cent * 100 + quad * 4 + yindex + (cent !== 4 && yindex !== 4 ? 1 : 0);
        let [era, year] = $af14c9812fdceb33$export$4475b7e617eb123c(extendedYear);
        let yearDay = jd0 - $af14c9812fdceb33$export$f297eb839006d339(era, year, 1, 1);
        let leapAdj = 2;
        if (jd0 < $af14c9812fdceb33$export$f297eb839006d339(era, year, 3, 1))
          leapAdj = 0;
        else if ($af14c9812fdceb33$export$553d7fa8e3805fc0(year))
          leapAdj = 1;
        let month = Math.floor(((yearDay + leapAdj) * 12 + 373) / 367);
        let day = jd0 - $af14c9812fdceb33$export$f297eb839006d339(era, year, month, 1) + 1;
        return new $625ad1e1f4c43bc1$export$99faa760c7908e4f(era, year, month, day);
      }
      toJulianDay(date) {
        return $af14c9812fdceb33$export$f297eb839006d339(date.era, date.year, date.month, date.day);
      }
      getDaysInMonth(date) {
        return $af14c9812fdceb33$var$daysInMonth[$af14c9812fdceb33$export$553d7fa8e3805fc0(date.year) ? "leapyear" : "standard"][date.month - 1];
      }
      getMonthsInYear(date) {
        return 12;
      }
      getDaysInYear(date) {
        return $af14c9812fdceb33$export$553d7fa8e3805fc0(date.year) ? 366 : 365;
      }
      getYearsInEra(date) {
        return 9999;
      }
      getEras() {
        return [
          "BC",
          "AD"
        ];
      }
      isInverseEra(date) {
        return date.era === "BC";
      }
      balanceDate(date) {
        if (date.year <= 0) {
          date.era = date.era === "BC" ? "AD" : "BC";
          date.year = 1 - date.year;
        }
      }
      constructor() {
        this.identifier = "gregory";
      }
    };
    var $4d88eff242b38a9e$export$7a5acbd77d414bd9 = {
      "001": 1,
      AD: 1,
      AE: 6,
      AF: 6,
      AI: 1,
      AL: 1,
      AM: 1,
      AN: 1,
      AT: 1,
      AX: 1,
      AZ: 1,
      BA: 1,
      BE: 1,
      BG: 1,
      BH: 6,
      BM: 1,
      BN: 1,
      BY: 1,
      CH: 1,
      CL: 1,
      CM: 1,
      CR: 1,
      CY: 1,
      CZ: 1,
      DE: 1,
      DJ: 6,
      DK: 1,
      DZ: 6,
      EC: 1,
      EE: 1,
      EG: 6,
      ES: 1,
      FI: 1,
      FJ: 1,
      FO: 1,
      FR: 1,
      GB: 1,
      GE: 1,
      GF: 1,
      GP: 1,
      GR: 1,
      HR: 1,
      HU: 1,
      IE: 1,
      IQ: 6,
      IR: 6,
      IS: 1,
      IT: 1,
      JO: 6,
      KG: 1,
      KW: 6,
      KZ: 1,
      LB: 1,
      LI: 1,
      LK: 1,
      LT: 1,
      LU: 1,
      LV: 1,
      LY: 6,
      MC: 1,
      MD: 1,
      ME: 1,
      MK: 1,
      MN: 1,
      MQ: 1,
      MV: 5,
      MY: 1,
      NL: 1,
      NO: 1,
      NZ: 1,
      OM: 6,
      PL: 1,
      QA: 6,
      RE: 1,
      RO: 1,
      RS: 1,
      RU: 1,
      SD: 6,
      SE: 1,
      SI: 1,
      SK: 1,
      SM: 1,
      SY: 6,
      TJ: 1,
      TM: 1,
      TR: 1,
      UA: 1,
      UY: 1,
      UZ: 1,
      VA: 1,
      VN: 1,
      XK: 1
    };
    function $1f0f7ebf1ae6c530$export$ea39ec197993aef0(a, b) {
      b = $4ae0260a69729f1d$export$b4a036af3fc0b032(b, a.calendar);
      return a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;
    }
    function $1f0f7ebf1ae6c530$export$a18c89cbd24170ff(a, b) {
      b = $4ae0260a69729f1d$export$b4a036af3fc0b032(b, a.calendar);
      a = $1f0f7ebf1ae6c530$export$a5a3b454ada2268e(a);
      b = $1f0f7ebf1ae6c530$export$a5a3b454ada2268e(b);
      return a.era === b.era && a.year === b.year && a.month === b.month;
    }
    function $1f0f7ebf1ae6c530$export$5841f9eb9773f25f(a, b) {
      b = $4ae0260a69729f1d$export$b4a036af3fc0b032(b, a.calendar);
      a = $1f0f7ebf1ae6c530$export$f91e89d3d0406102(a);
      b = $1f0f7ebf1ae6c530$export$f91e89d3d0406102(b);
      return a.era === b.era && a.year === b.year;
    }
    function $1f0f7ebf1ae6c530$export$91b62ebf2ba703ee(a, b) {
      return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;
    }
    function $1f0f7ebf1ae6c530$export$5a8da0c44a3afdf2(a, b) {
      a = $1f0f7ebf1ae6c530$export$a5a3b454ada2268e(a);
      b = $1f0f7ebf1ae6c530$export$a5a3b454ada2268e(b);
      return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month;
    }
    function $1f0f7ebf1ae6c530$export$ea840f5a6dda8147(a, b) {
      a = $1f0f7ebf1ae6c530$export$f91e89d3d0406102(a);
      b = $1f0f7ebf1ae6c530$export$f91e89d3d0406102(b);
      return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year;
    }
    function $1f0f7ebf1ae6c530$export$629b0a497aa65267(date, timeZone) {
      return $1f0f7ebf1ae6c530$export$ea39ec197993aef0(date, $1f0f7ebf1ae6c530$export$d0bdf45af03a6ea3(timeZone));
    }
    function $1f0f7ebf1ae6c530$export$2061056d06d7cdf7(date, locale) {
      let julian = date.calendar.toJulianDay(date);
      let dayOfWeek = Math.ceil(julian + 1 - $1f0f7ebf1ae6c530$var$getWeekStart(locale)) % 7;
      if (dayOfWeek < 0)
        dayOfWeek += 7;
      return dayOfWeek;
    }
    function $1f0f7ebf1ae6c530$export$461939dd4422153(timeZone) {
      return $4ae0260a69729f1d$export$1b96692a1ba042ac(Date.now(), timeZone);
    }
    function $1f0f7ebf1ae6c530$export$d0bdf45af03a6ea3(timeZone) {
      return $4ae0260a69729f1d$export$93522d1a439f3617($1f0f7ebf1ae6c530$export$461939dd4422153(timeZone));
    }
    function $1f0f7ebf1ae6c530$export$68781ddf31c0090f(a, b) {
      return a.calendar.toJulianDay(a) - b.calendar.toJulianDay(b);
    }
    function $1f0f7ebf1ae6c530$export$c19a80a9721b80f6(a, b) {
      return $1f0f7ebf1ae6c530$var$timeToMs(a) - $1f0f7ebf1ae6c530$var$timeToMs(b);
    }
    function $1f0f7ebf1ae6c530$var$timeToMs(a) {
      return a.hour * 36e5 + a.minute * 6e4 + a.second * 1e3 + a.millisecond;
    }
    function $1f0f7ebf1ae6c530$export$126c91c941de7e(a, timeZone) {
      let ms = $4ae0260a69729f1d$export$5107c82f94518f5c(a, timeZone);
      let tomorrow = a.add({
        days: 1
      });
      let tomorrowMs = $4ae0260a69729f1d$export$5107c82f94518f5c(tomorrow, timeZone);
      return (tomorrowMs - ms) / 36e5;
    }
    var $1f0f7ebf1ae6c530$var$localTimeZone = null;
    function $1f0f7ebf1ae6c530$export$aa8b41735afcabd2() {
      if ($1f0f7ebf1ae6c530$var$localTimeZone == null)
        $1f0f7ebf1ae6c530$var$localTimeZone = new Intl.DateTimeFormat().resolvedOptions().timeZone;
      return $1f0f7ebf1ae6c530$var$localTimeZone;
    }
    function $1f0f7ebf1ae6c530$export$a5a3b454ada2268e(date) {
      return date.subtract({
        days: date.day - 1
      });
    }
    function $1f0f7ebf1ae6c530$export$a2258d9c4118825c(date) {
      return date.add({
        days: date.calendar.getDaysInMonth(date) - date.day
      });
    }
    function $1f0f7ebf1ae6c530$export$f91e89d3d0406102(date) {
      return $1f0f7ebf1ae6c530$export$a5a3b454ada2268e(date.subtract({
        months: date.month - 1
      }));
    }
    function $1f0f7ebf1ae6c530$export$8b7aa55c66d5569e(date) {
      return $1f0f7ebf1ae6c530$export$a2258d9c4118825c(date.add({
        months: date.calendar.getMonthsInYear(date) - date.month
      }));
    }
    function $1f0f7ebf1ae6c530$export$5412ac11713b72ad(date) {
      if (date.calendar.getMinimumMonthInYear)
        return date.calendar.getMinimumMonthInYear(date);
      return 1;
    }
    function $1f0f7ebf1ae6c530$export$b2f4953d301981d5(date) {
      if (date.calendar.getMinimumDayInMonth)
        return date.calendar.getMinimumDayInMonth(date);
      return 1;
    }
    function $1f0f7ebf1ae6c530$export$42c81a444fbfb5d4(date, locale) {
      let dayOfWeek = $1f0f7ebf1ae6c530$export$2061056d06d7cdf7(date, locale);
      return date.subtract({
        days: dayOfWeek
      });
    }
    function $1f0f7ebf1ae6c530$export$ef8b6d9133084f4e(date, locale) {
      return $1f0f7ebf1ae6c530$export$42c81a444fbfb5d4(date, locale).add({
        days: 6
      });
    }
    var $1f0f7ebf1ae6c530$var$cachedRegions = /* @__PURE__ */ new Map();
    function $1f0f7ebf1ae6c530$var$getRegion(locale) {
      if (Intl.Locale) {
        let region = $1f0f7ebf1ae6c530$var$cachedRegions.get(locale);
        if (!region) {
          region = new Intl.Locale(locale).maximize().region;
          $1f0f7ebf1ae6c530$var$cachedRegions.set(locale, region);
        }
        return region;
      }
      let part = locale.split("-")[1];
      return part === "u" ? null : part;
    }
    function $1f0f7ebf1ae6c530$var$getWeekStart(locale) {
      let region = $1f0f7ebf1ae6c530$var$getRegion(locale);
      return $4d88eff242b38a9e$export$7a5acbd77d414bd9[region] || 0;
    }
    function $1f0f7ebf1ae6c530$export$ccc1b2479e7dd654(date, locale) {
      let days = date.calendar.getDaysInMonth(date);
      return Math.ceil(($1f0f7ebf1ae6c530$export$2061056d06d7cdf7($1f0f7ebf1ae6c530$export$a5a3b454ada2268e(date), locale) + days) / 7);
    }
    function $1f0f7ebf1ae6c530$export$5c333a116e949cdd(a, b) {
      if (a && b)
        return a.compare(b) <= 0 ? a : b;
      return a || b;
    }
    function $1f0f7ebf1ae6c530$export$a75f2bff57811055(a, b) {
      if (a && b)
        return a.compare(b) >= 0 ? a : b;
      return a || b;
    }
    var $1f0f7ebf1ae6c530$var$WEEKEND_DATA = {
      AF: [
        4,
        5
      ],
      AE: [
        5,
        6
      ],
      BH: [
        5,
        6
      ],
      DZ: [
        5,
        6
      ],
      EG: [
        5,
        6
      ],
      IL: [
        5,
        6
      ],
      IQ: [
        5,
        6
      ],
      IR: [
        5,
        5
      ],
      JO: [
        5,
        6
      ],
      KW: [
        5,
        6
      ],
      LY: [
        5,
        6
      ],
      OM: [
        5,
        6
      ],
      QA: [
        5,
        6
      ],
      SA: [
        5,
        6
      ],
      SD: [
        5,
        6
      ],
      SY: [
        5,
        6
      ],
      YE: [
        5,
        6
      ]
    };
    function $1f0f7ebf1ae6c530$export$618d60ea299da42(date, locale) {
      let julian = date.calendar.toJulianDay(date);
      let dayOfWeek = Math.ceil(julian + 1) % 7;
      if (dayOfWeek < 0)
        dayOfWeek += 7;
      let region = $1f0f7ebf1ae6c530$var$getRegion(locale);
      let [start, end] = $1f0f7ebf1ae6c530$var$WEEKEND_DATA[region] || [
        6,
        0
      ];
      return dayOfWeek === start || dayOfWeek === end;
    }
    function $1f0f7ebf1ae6c530$export$ee9d87258e1d19ed(date, locale) {
      return !$1f0f7ebf1ae6c530$export$618d60ea299da42(date, locale);
    }
    function $4ae0260a69729f1d$export$bd4fb2bc8bb06fb(date) {
      date = $4ae0260a69729f1d$export$b4a036af3fc0b032(date, new $af14c9812fdceb33$export$80ee6245ec4f29ec());
      let year = $af14c9812fdceb33$export$c36e0ecb2d4fa69d(date.era, date.year);
      return $4ae0260a69729f1d$var$epochFromParts(year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);
    }
    function $4ae0260a69729f1d$var$epochFromParts(year, month, day, hour, minute, second, millisecond) {
      let date = new Date();
      date.setUTCHours(hour, minute, second, millisecond);
      date.setUTCFullYear(year, month - 1, day);
      return date.getTime();
    }
    function $4ae0260a69729f1d$export$59c99f3515d3493f(ms, timeZone) {
      if (timeZone === "UTC")
        return 0;
      if (timeZone === $1f0f7ebf1ae6c530$export$aa8b41735afcabd2())
        return new Date(ms).getTimezoneOffset() * -6e4;
      let { year, month, day, hour, minute, second } = $4ae0260a69729f1d$var$getTimeZoneParts(ms, timeZone);
      let utc = $4ae0260a69729f1d$var$epochFromParts(year, month, day, hour, minute, second, 0);
      return utc - Math.floor(ms / 1e3) * 1e3;
    }
    var $4ae0260a69729f1d$var$formattersByTimeZone = /* @__PURE__ */ new Map();
    function $4ae0260a69729f1d$var$getTimeZoneParts(ms, timeZone) {
      let formatter = $4ae0260a69729f1d$var$formattersByTimeZone.get(timeZone);
      if (!formatter) {
        formatter = new Intl.DateTimeFormat("en-US", {
          timeZone,
          hour12: false,
          era: "short",
          year: "numeric",
          month: "numeric",
          day: "numeric",
          hour: "numeric",
          minute: "numeric",
          second: "numeric"
        });
        $4ae0260a69729f1d$var$formattersByTimeZone.set(timeZone, formatter);
      }
      let parts = formatter.formatToParts(new Date(ms));
      let namedParts = {};
      for (let part of parts)
        if (part.type !== "literal")
          namedParts[part.type] = part.value;
      return {
        year: namedParts.era === "BC" || namedParts.era === "B" ? -namedParts.year + 1 : +namedParts.year,
        month: +namedParts.month,
        day: +namedParts.day,
        hour: namedParts.hour === "24" ? 0 : +namedParts.hour,
        minute: +namedParts.minute,
        second: +namedParts.second
      };
    }
    var $4ae0260a69729f1d$var$DAYMILLIS = 864e5;
    function $4ae0260a69729f1d$export$136f38efe7caf549(date, timeZone) {
      let ms = $4ae0260a69729f1d$export$bd4fb2bc8bb06fb(date);
      let earlier = ms - $4ae0260a69729f1d$export$59c99f3515d3493f(ms - $4ae0260a69729f1d$var$DAYMILLIS, timeZone);
      let later = ms - $4ae0260a69729f1d$export$59c99f3515d3493f(ms + $4ae0260a69729f1d$var$DAYMILLIS, timeZone);
      return $4ae0260a69729f1d$var$getValidWallTimes(date, timeZone, earlier, later);
    }
    function $4ae0260a69729f1d$var$getValidWallTimes(date, timeZone, earlier, later) {
      let found = earlier === later ? [
        earlier
      ] : [
        earlier,
        later
      ];
      return found.filter(
        (absolute) => $4ae0260a69729f1d$var$isValidWallTime(date, timeZone, absolute)
      );
    }
    function $4ae0260a69729f1d$var$isValidWallTime(date, timeZone, absolute) {
      let parts = $4ae0260a69729f1d$var$getTimeZoneParts(absolute, timeZone);
      return date.year === parts.year && date.month === parts.month && date.day === parts.day && date.hour === parts.hour && date.minute === parts.minute && date.second === parts.second;
    }
    function $4ae0260a69729f1d$export$5107c82f94518f5c(date, timeZone, disambiguation = "compatible") {
      let dateTime = $4ae0260a69729f1d$export$b21e0b124e224484(date);
      if (timeZone === "UTC")
        return $4ae0260a69729f1d$export$bd4fb2bc8bb06fb(dateTime);
      if (timeZone === $1f0f7ebf1ae6c530$export$aa8b41735afcabd2() && disambiguation === "compatible") {
        dateTime = $4ae0260a69729f1d$export$b4a036af3fc0b032(dateTime, new $af14c9812fdceb33$export$80ee6245ec4f29ec());
        let date2 = new Date();
        let year = $af14c9812fdceb33$export$c36e0ecb2d4fa69d(dateTime.era, dateTime.year);
        date2.setFullYear(year, dateTime.month - 1, dateTime.day);
        date2.setHours(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);
        return date2.getTime();
      }
      let ms = $4ae0260a69729f1d$export$bd4fb2bc8bb06fb(dateTime);
      let offsetBefore = $4ae0260a69729f1d$export$59c99f3515d3493f(ms - $4ae0260a69729f1d$var$DAYMILLIS, timeZone);
      let offsetAfter = $4ae0260a69729f1d$export$59c99f3515d3493f(ms + $4ae0260a69729f1d$var$DAYMILLIS, timeZone);
      let valid = $4ae0260a69729f1d$var$getValidWallTimes(dateTime, timeZone, ms - offsetBefore, ms - offsetAfter);
      if (valid.length === 1)
        return valid[0];
      if (valid.length > 1)
        switch (disambiguation) {
          case "compatible":
          case "earlier":
            return valid[0];
          case "later":
            return valid[valid.length - 1];
          case "reject":
            throw new RangeError("Multiple possible absolute times found");
        }
      switch (disambiguation) {
        case "earlier":
          return Math.min(ms - offsetBefore, ms - offsetAfter);
        case "compatible":
        case "later":
          return Math.max(ms - offsetBefore, ms - offsetAfter);
        case "reject":
          throw new RangeError("No such absolute time found");
      }
    }
    function $4ae0260a69729f1d$export$e67a095c620b86fe(dateTime, timeZone, disambiguation = "compatible") {
      return new Date($4ae0260a69729f1d$export$5107c82f94518f5c(dateTime, timeZone, disambiguation));
    }
    function $4ae0260a69729f1d$export$1b96692a1ba042ac(ms, timeZone) {
      let offset = $4ae0260a69729f1d$export$59c99f3515d3493f(ms, timeZone);
      let date = new Date(ms + offset);
      let year = date.getUTCFullYear();
      let month = date.getUTCMonth() + 1;
      let day = date.getUTCDate();
      let hour = date.getUTCHours();
      let minute = date.getUTCMinutes();
      let second = date.getUTCSeconds();
      let millisecond = date.getUTCMilliseconds();
      return new $625ad1e1f4c43bc1$export$d3b7288e7994edea(year, month, day, timeZone, offset, hour, minute, second, millisecond);
    }
    function $4ae0260a69729f1d$export$93522d1a439f3617(dateTime) {
      return new $625ad1e1f4c43bc1$export$99faa760c7908e4f(dateTime.calendar, dateTime.era, dateTime.year, dateTime.month, dateTime.day);
    }
    function $4ae0260a69729f1d$export$b21e0b124e224484(date, time) {
      let hour = 0, minute = 0, second = 0, millisecond = 0;
      if ("timeZone" in date)
        ({ hour, minute, second, millisecond } = date);
      else if ("hour" in date && !time)
        return date;
      if (time)
        ({ hour, minute, second, millisecond } = time);
      return new $625ad1e1f4c43bc1$export$ca871e8dbb80966f(date.calendar, date.era, date.year, date.month, date.day, hour, minute, second, millisecond);
    }
    function $4ae0260a69729f1d$export$d33f79e3ffc3dc83(dateTime) {
      return new $625ad1e1f4c43bc1$export$680ea196effce5f(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);
    }
    function $4ae0260a69729f1d$export$b4a036af3fc0b032(date, calendar) {
      if (date.calendar.identifier === calendar.identifier)
        return date;
      let calendarDate = calendar.fromJulianDay(date.calendar.toJulianDay(date));
      let copy = date.copy();
      copy.calendar = calendar;
      copy.era = calendarDate.era;
      copy.year = calendarDate.year;
      copy.month = calendarDate.month;
      copy.day = calendarDate.day;
      $5c0571aa5b6fb5da$export$c4e2ecac49351ef2(copy);
      return copy;
    }
    function $4ae0260a69729f1d$export$84c95a83c799e074(date, timeZone, disambiguation) {
      if (date instanceof $625ad1e1f4c43bc1$export$d3b7288e7994edea) {
        if (date.timeZone === timeZone)
          return date;
        return $4ae0260a69729f1d$export$538b00033cc11c75(date, timeZone);
      }
      let ms = $4ae0260a69729f1d$export$5107c82f94518f5c(date, timeZone, disambiguation);
      return $4ae0260a69729f1d$export$1b96692a1ba042ac(ms, timeZone);
    }
    function $4ae0260a69729f1d$export$83aac07b4c37b25(date) {
      let ms = $4ae0260a69729f1d$export$bd4fb2bc8bb06fb(date) - date.offset;
      return new Date(ms);
    }
    function $4ae0260a69729f1d$export$538b00033cc11c75(date, timeZone) {
      let ms = $4ae0260a69729f1d$export$bd4fb2bc8bb06fb(date) - date.offset;
      return $4ae0260a69729f1d$export$b4a036af3fc0b032($4ae0260a69729f1d$export$1b96692a1ba042ac(ms, timeZone), date.calendar);
    }
    function $4ae0260a69729f1d$export$d9b67bc93c097491(date) {
      return $4ae0260a69729f1d$export$538b00033cc11c75(date, $1f0f7ebf1ae6c530$export$aa8b41735afcabd2());
    }
    var $5c0571aa5b6fb5da$var$ONE_HOUR = 36e5;
    function $5c0571aa5b6fb5da$export$e16d8520af44a096(date, duration) {
      let mutableDate = date.copy();
      let days = "hour" in mutableDate ? $5c0571aa5b6fb5da$var$addTimeFields(mutableDate, duration) : 0;
      $5c0571aa5b6fb5da$var$addYears(mutableDate, duration.years || 0);
      if (mutableDate.calendar.balanceYearMonth)
        mutableDate.calendar.balanceYearMonth(mutableDate, date);
      mutableDate.month += duration.months || 0;
      $5c0571aa5b6fb5da$var$balanceYearMonth(mutableDate);
      $5c0571aa5b6fb5da$var$constrainMonthDay(mutableDate);
      mutableDate.day += (duration.weeks || 0) * 7;
      mutableDate.day += duration.days || 0;
      mutableDate.day += days;
      $5c0571aa5b6fb5da$var$balanceDay(mutableDate);
      if (mutableDate.calendar.balanceDate)
        mutableDate.calendar.balanceDate(mutableDate);
      if (mutableDate.year < 1) {
        mutableDate.year = 1;
        mutableDate.month = 1;
        mutableDate.day = 1;
      }
      let maxYear = mutableDate.calendar.getYearsInEra(mutableDate);
      if (mutableDate.year > maxYear) {
        var _calendar, ref;
        let isInverseEra = (ref = (_calendar = mutableDate.calendar).isInverseEra) === null || ref === void 0 ? void 0 : ref.call(_calendar, mutableDate);
        mutableDate.year = maxYear;
        mutableDate.month = isInverseEra ? 1 : mutableDate.calendar.getMonthsInYear(mutableDate);
        mutableDate.day = isInverseEra ? 1 : mutableDate.calendar.getDaysInMonth(mutableDate);
      }
      if (mutableDate.month < 1) {
        mutableDate.month = 1;
        mutableDate.day = 1;
      }
      let maxMonth = mutableDate.calendar.getMonthsInYear(mutableDate);
      if (mutableDate.month > maxMonth) {
        mutableDate.month = maxMonth;
        mutableDate.day = mutableDate.calendar.getDaysInMonth(mutableDate);
      }
      mutableDate.day = Math.max(1, Math.min(mutableDate.calendar.getDaysInMonth(mutableDate), mutableDate.day));
      return mutableDate;
    }
    function $5c0571aa5b6fb5da$var$addYears(date, years) {
      var _calendar, ref;
      if ((ref = (_calendar = date.calendar).isInverseEra) === null || ref === void 0 ? void 0 : ref.call(_calendar, date))
        years = -years;
      date.year += years;
    }
    function $5c0571aa5b6fb5da$var$balanceYearMonth(date) {
      while (date.month < 1) {
        $5c0571aa5b6fb5da$var$addYears(date, -1);
        date.month += date.calendar.getMonthsInYear(date);
      }
      let monthsInYear = 0;
      while (date.month > (monthsInYear = date.calendar.getMonthsInYear(date))) {
        date.month -= monthsInYear;
        $5c0571aa5b6fb5da$var$addYears(date, 1);
      }
    }
    function $5c0571aa5b6fb5da$var$balanceDay(date) {
      while (date.day < 1) {
        date.month--;
        $5c0571aa5b6fb5da$var$balanceYearMonth(date);
        date.day += date.calendar.getDaysInMonth(date);
      }
      while (date.day > date.calendar.getDaysInMonth(date)) {
        date.day -= date.calendar.getDaysInMonth(date);
        date.month++;
        $5c0571aa5b6fb5da$var$balanceYearMonth(date);
      }
    }
    function $5c0571aa5b6fb5da$var$constrainMonthDay(date) {
      date.month = Math.max(1, Math.min(date.calendar.getMonthsInYear(date), date.month));
      date.day = Math.max(1, Math.min(date.calendar.getDaysInMonth(date), date.day));
    }
    function $5c0571aa5b6fb5da$export$c4e2ecac49351ef2(date) {
      if (date.calendar.constrainDate)
        date.calendar.constrainDate(date);
      date.year = Math.max(1, Math.min(date.calendar.getYearsInEra(date), date.year));
      $5c0571aa5b6fb5da$var$constrainMonthDay(date);
    }
    function $5c0571aa5b6fb5da$export$3e2544e88a25bff8(duration) {
      let inverseDuration = {};
      for (let key in duration)
        if (typeof duration[key] === "number")
          inverseDuration[key] = -duration[key];
      return inverseDuration;
    }
    function $5c0571aa5b6fb5da$export$4e2d2ead65e5f7e3(date, duration) {
      return $5c0571aa5b6fb5da$export$e16d8520af44a096(date, $5c0571aa5b6fb5da$export$3e2544e88a25bff8(duration));
    }
    function $5c0571aa5b6fb5da$export$adaa4cf7ef1b65be(date, fields) {
      let mutableDate = date.copy();
      if (fields.era != null)
        mutableDate.era = fields.era;
      if (fields.year != null)
        mutableDate.year = fields.year;
      if (fields.month != null)
        mutableDate.month = fields.month;
      if (fields.day != null)
        mutableDate.day = fields.day;
      $5c0571aa5b6fb5da$export$c4e2ecac49351ef2(mutableDate);
      return mutableDate;
    }
    function $5c0571aa5b6fb5da$export$e5d5e1c1822b6e56(value, fields) {
      let mutableValue = value.copy();
      if (fields.hour != null)
        mutableValue.hour = fields.hour;
      if (fields.minute != null)
        mutableValue.minute = fields.minute;
      if (fields.second != null)
        mutableValue.second = fields.second;
      if (fields.millisecond != null)
        mutableValue.millisecond = fields.millisecond;
      $5c0571aa5b6fb5da$export$7555de1e070510cb(mutableValue);
      return mutableValue;
    }
    function $5c0571aa5b6fb5da$var$balanceTime(time) {
      time.second += Math.floor(time.millisecond / 1e3);
      time.millisecond = $5c0571aa5b6fb5da$var$nonNegativeMod(time.millisecond, 1e3);
      time.minute += Math.floor(time.second / 60);
      time.second = $5c0571aa5b6fb5da$var$nonNegativeMod(time.second, 60);
      time.hour += Math.floor(time.minute / 60);
      time.minute = $5c0571aa5b6fb5da$var$nonNegativeMod(time.minute, 60);
      let days = Math.floor(time.hour / 24);
      time.hour = $5c0571aa5b6fb5da$var$nonNegativeMod(time.hour, 24);
      return days;
    }
    function $5c0571aa5b6fb5da$export$7555de1e070510cb(time) {
      time.millisecond = Math.max(0, Math.min(time.millisecond, 1e3));
      time.second = Math.max(0, Math.min(time.second, 59));
      time.minute = Math.max(0, Math.min(time.minute, 59));
      time.hour = Math.max(0, Math.min(time.hour, 23));
    }
    function $5c0571aa5b6fb5da$var$nonNegativeMod(a, b) {
      let result = a % b;
      if (result < 0)
        result += b;
      return result;
    }
    function $5c0571aa5b6fb5da$var$addTimeFields(time, duration) {
      time.hour += duration.hours || 0;
      time.minute += duration.minutes || 0;
      time.second += duration.seconds || 0;
      time.millisecond += duration.milliseconds || 0;
      return $5c0571aa5b6fb5da$var$balanceTime(time);
    }
    function $5c0571aa5b6fb5da$export$7ed87b6bc2506470(time, duration) {
      let res = time.copy();
      $5c0571aa5b6fb5da$var$addTimeFields(res, duration);
      return res;
    }
    function $5c0571aa5b6fb5da$export$fe34d3a381cd7501(time, duration) {
      return $5c0571aa5b6fb5da$export$7ed87b6bc2506470(time, $5c0571aa5b6fb5da$export$3e2544e88a25bff8(duration));
    }
    function $5c0571aa5b6fb5da$export$d52ced6badfb9a4c(value, field, amount, options) {
      let mutable = value.copy();
      switch (field) {
        case "era": {
          let eras = value.calendar.getEras();
          let eraIndex = eras.indexOf(value.era);
          if (eraIndex < 0)
            throw new Error("Invalid era: " + value.era);
          eraIndex = $5c0571aa5b6fb5da$var$cycleValue(eraIndex, amount, 0, eras.length - 1, options === null || options === void 0 ? void 0 : options.round);
          mutable.era = eras[eraIndex];
          $5c0571aa5b6fb5da$export$c4e2ecac49351ef2(mutable);
          break;
        }
        case "year":
          var _calendar, ref;
          if ((ref = (_calendar = mutable.calendar).isInverseEra) === null || ref === void 0 ? void 0 : ref.call(_calendar, mutable))
            amount = -amount;
          mutable.year = $5c0571aa5b6fb5da$var$cycleValue(value.year, amount, -Infinity, 9999, options === null || options === void 0 ? void 0 : options.round);
          if (mutable.year === -Infinity)
            mutable.year = 1;
          if (mutable.calendar.balanceYearMonth)
            mutable.calendar.balanceYearMonth(mutable, value);
          break;
        case "month":
          mutable.month = $5c0571aa5b6fb5da$var$cycleValue(value.month, amount, 1, value.calendar.getMonthsInYear(value), options === null || options === void 0 ? void 0 : options.round);
          break;
        case "day":
          mutable.day = $5c0571aa5b6fb5da$var$cycleValue(value.day, amount, 1, value.calendar.getDaysInMonth(value), options === null || options === void 0 ? void 0 : options.round);
          break;
        default:
          throw new Error("Unsupported field " + field);
      }
      if (value.calendar.balanceDate)
        value.calendar.balanceDate(mutable);
      $5c0571aa5b6fb5da$export$c4e2ecac49351ef2(mutable);
      return mutable;
    }
    function $5c0571aa5b6fb5da$export$dd02b3e0007dfe28(value, field, amount, options) {
      let mutable = value.copy();
      switch (field) {
        case "hour": {
          let hours = value.hour;
          let min = 0;
          let max = 23;
          if ((options === null || options === void 0 ? void 0 : options.hourCycle) === 12) {
            let isPM = hours >= 12;
            min = isPM ? 12 : 0;
            max = isPM ? 23 : 11;
          }
          mutable.hour = $5c0571aa5b6fb5da$var$cycleValue(hours, amount, min, max, options === null || options === void 0 ? void 0 : options.round);
          break;
        }
        case "minute":
          mutable.minute = $5c0571aa5b6fb5da$var$cycleValue(value.minute, amount, 0, 59, options === null || options === void 0 ? void 0 : options.round);
          break;
        case "second":
          mutable.second = $5c0571aa5b6fb5da$var$cycleValue(value.second, amount, 0, 59, options === null || options === void 0 ? void 0 : options.round);
          break;
        case "millisecond":
          mutable.millisecond = $5c0571aa5b6fb5da$var$cycleValue(value.millisecond, amount, 0, 999, options === null || options === void 0 ? void 0 : options.round);
          break;
        default:
          throw new Error("Unsupported field " + field);
      }
      return mutable;
    }
    function $5c0571aa5b6fb5da$var$cycleValue(value, amount, min, max, round = false) {
      if (round) {
        value += Math.sign(amount);
        if (value < min)
          value = max;
        let div = Math.abs(amount);
        if (amount > 0)
          value = Math.ceil(value / div) * div;
        else
          value = Math.floor(value / div) * div;
        if (value > max)
          value = min;
      } else {
        value += amount;
        if (value < min)
          value = max - (min - value - 1);
        else if (value > max)
          value = min + (value - max - 1);
      }
      return value;
    }
    function $5c0571aa5b6fb5da$export$96b1d28349274637(dateTime, duration) {
      let ms;
      if (duration.years != null && duration.years !== 0 || duration.months != null && duration.months !== 0 || duration.days != null && duration.days !== 0) {
        let res2 = $5c0571aa5b6fb5da$export$e16d8520af44a096($4ae0260a69729f1d$export$b21e0b124e224484(dateTime), {
          years: duration.years,
          months: duration.months,
          days: duration.days
        });
        ms = $4ae0260a69729f1d$export$5107c82f94518f5c(res2, dateTime.timeZone);
      } else
        ms = $4ae0260a69729f1d$export$bd4fb2bc8bb06fb(dateTime) - dateTime.offset;
      ms += duration.milliseconds || 0;
      ms += (duration.seconds || 0) * 1e3;
      ms += (duration.minutes || 0) * 6e4;
      ms += (duration.hours || 0) * 36e5;
      let res = $4ae0260a69729f1d$export$1b96692a1ba042ac(ms, dateTime.timeZone);
      return $4ae0260a69729f1d$export$b4a036af3fc0b032(res, dateTime.calendar);
    }
    function $5c0571aa5b6fb5da$export$6814caac34ca03c7(dateTime, duration) {
      return $5c0571aa5b6fb5da$export$96b1d28349274637(dateTime, $5c0571aa5b6fb5da$export$3e2544e88a25bff8(duration));
    }
    function $5c0571aa5b6fb5da$export$9a297d111fc86b79(dateTime, field, amount, options) {
      switch (field) {
        case "hour": {
          let min = 0;
          let max = 23;
          if ((options === null || options === void 0 ? void 0 : options.hourCycle) === 12) {
            let isPM = dateTime.hour >= 12;
            min = isPM ? 12 : 0;
            max = isPM ? 23 : 11;
          }
          let plainDateTime = $4ae0260a69729f1d$export$b21e0b124e224484(dateTime);
          let minDate = $4ae0260a69729f1d$export$b4a036af3fc0b032($5c0571aa5b6fb5da$export$e5d5e1c1822b6e56(plainDateTime, {
            hour: min
          }), new $af14c9812fdceb33$export$80ee6245ec4f29ec());
          let minAbsolute = [
            $4ae0260a69729f1d$export$5107c82f94518f5c(minDate, dateTime.timeZone, "earlier"),
            $4ae0260a69729f1d$export$5107c82f94518f5c(minDate, dateTime.timeZone, "later")
          ].filter(
            (ms) => $4ae0260a69729f1d$export$1b96692a1ba042ac(ms, dateTime.timeZone).day === minDate.day
          )[0];
          let maxDate = $4ae0260a69729f1d$export$b4a036af3fc0b032($5c0571aa5b6fb5da$export$e5d5e1c1822b6e56(plainDateTime, {
            hour: max
          }), new $af14c9812fdceb33$export$80ee6245ec4f29ec());
          let maxAbsolute = [
            $4ae0260a69729f1d$export$5107c82f94518f5c(maxDate, dateTime.timeZone, "earlier"),
            $4ae0260a69729f1d$export$5107c82f94518f5c(maxDate, dateTime.timeZone, "later")
          ].filter(
            (ms) => $4ae0260a69729f1d$export$1b96692a1ba042ac(ms, dateTime.timeZone).day === maxDate.day
          ).pop();
          let ms1 = $4ae0260a69729f1d$export$bd4fb2bc8bb06fb(dateTime) - dateTime.offset;
          let hours = Math.floor(ms1 / $5c0571aa5b6fb5da$var$ONE_HOUR);
          let remainder = ms1 % $5c0571aa5b6fb5da$var$ONE_HOUR;
          ms1 = $5c0571aa5b6fb5da$var$cycleValue(hours, amount, Math.floor(minAbsolute / $5c0571aa5b6fb5da$var$ONE_HOUR), Math.floor(maxAbsolute / $5c0571aa5b6fb5da$var$ONE_HOUR), options === null || options === void 0 ? void 0 : options.round) * $5c0571aa5b6fb5da$var$ONE_HOUR + remainder;
          return $4ae0260a69729f1d$export$b4a036af3fc0b032($4ae0260a69729f1d$export$1b96692a1ba042ac(ms1, dateTime.timeZone), dateTime.calendar);
        }
        case "minute":
        case "second":
        case "millisecond":
          return $5c0571aa5b6fb5da$export$dd02b3e0007dfe28(dateTime, field, amount, options);
        case "era":
        case "year":
        case "month":
        case "day": {
          let res = $5c0571aa5b6fb5da$export$d52ced6badfb9a4c($4ae0260a69729f1d$export$b21e0b124e224484(dateTime), field, amount, options);
          let ms = $4ae0260a69729f1d$export$5107c82f94518f5c(res, dateTime.timeZone);
          return $4ae0260a69729f1d$export$b4a036af3fc0b032($4ae0260a69729f1d$export$1b96692a1ba042ac(ms, dateTime.timeZone), dateTime.calendar);
        }
        default:
          throw new Error("Unsupported field " + field);
      }
    }
    function $5c0571aa5b6fb5da$export$31b5430eb18be4f8(dateTime, fields, disambiguation) {
      let plainDateTime = $4ae0260a69729f1d$export$b21e0b124e224484(dateTime);
      let res = $5c0571aa5b6fb5da$export$e5d5e1c1822b6e56($5c0571aa5b6fb5da$export$adaa4cf7ef1b65be(plainDateTime, fields), fields);
      if (res.compare(plainDateTime) === 0)
        return dateTime;
      let ms = $4ae0260a69729f1d$export$5107c82f94518f5c(res, dateTime.timeZone, disambiguation);
      return $4ae0260a69729f1d$export$b4a036af3fc0b032($4ae0260a69729f1d$export$1b96692a1ba042ac(ms, dateTime.timeZone), dateTime.calendar);
    }
    var $4c32e2d98e5a5134$var$TIME_RE = /^(\d{2})(?::(\d{2}))?(?::(\d{2}))?(\.\d+)?$/;
    var $4c32e2d98e5a5134$var$DATE_RE = /^(\d{4})-(\d{2})-(\d{2})$/;
    var $4c32e2d98e5a5134$var$DATE_TIME_RE = /^(\d{4})-(\d{2})-(\d{2})(?:T(\d{2}))?(?::(\d{2}))?(?::(\d{2}))?(\.\d+)?$/;
    var $4c32e2d98e5a5134$var$ZONED_DATE_TIME_RE = /^(\d{4})-(\d{2})-(\d{2})(?:T(\d{2}))?(?::(\d{2}))?(?::(\d{2}))?(\.\d+)?(?:([+-]\d{2})(?::(\d{2}))?)?\[(.*?)\]$/;
    var $4c32e2d98e5a5134$var$ABSOLUTE_RE = /^(\d{4})-(\d{2})-(\d{2})(?:T(\d{2}))?(?::(\d{2}))?(?::(\d{2}))?(\.\d+)?(?:(?:([+-]\d{2})(?::(\d{2}))?)|Z)$/;
    function $4c32e2d98e5a5134$export$c9698ec7f05a07e1(value) {
      let m = value.match($4c32e2d98e5a5134$var$TIME_RE);
      if (!m)
        throw new Error("Invalid ISO 8601 time string: " + value);
      return new $625ad1e1f4c43bc1$export$680ea196effce5f($4c32e2d98e5a5134$var$parseNumber(m[1], 0, 23), m[2] ? $4c32e2d98e5a5134$var$parseNumber(m[2], 0, 59) : 0, m[3] ? $4c32e2d98e5a5134$var$parseNumber(m[3], 0, 59) : 0, m[4] ? $4c32e2d98e5a5134$var$parseNumber(m[4], 0, Infinity) * 1e3 : 0);
    }
    function $4c32e2d98e5a5134$export$6b862160d295c8e(value) {
      let m = value.match($4c32e2d98e5a5134$var$DATE_RE);
      if (!m)
        throw new Error("Invalid ISO 8601 date string: " + value);
      let date = new $625ad1e1f4c43bc1$export$99faa760c7908e4f($4c32e2d98e5a5134$var$parseNumber(m[1], 0, 9999), $4c32e2d98e5a5134$var$parseNumber(m[2], 1, 12), 1);
      date.day = $4c32e2d98e5a5134$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));
      return date;
    }
    function $4c32e2d98e5a5134$export$588937bcd60ade55(value) {
      let m = value.match($4c32e2d98e5a5134$var$DATE_TIME_RE);
      if (!m)
        throw new Error("Invalid ISO 8601 date time string: " + value);
      let date = new $625ad1e1f4c43bc1$export$ca871e8dbb80966f($4c32e2d98e5a5134$var$parseNumber(m[1], 1, 9999), $4c32e2d98e5a5134$var$parseNumber(m[2], 1, 12), 1, m[4] ? $4c32e2d98e5a5134$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $4c32e2d98e5a5134$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $4c32e2d98e5a5134$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $4c32e2d98e5a5134$var$parseNumber(m[7], 0, Infinity) * 1e3 : 0);
      date.day = $4c32e2d98e5a5134$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));
      return date;
    }
    function $4c32e2d98e5a5134$export$fd7893f06e92a6a4(value, disambiguation) {
      let m = value.match($4c32e2d98e5a5134$var$ZONED_DATE_TIME_RE);
      if (!m)
        throw new Error("Invalid ISO 8601 date time string: " + value);
      let date = new $625ad1e1f4c43bc1$export$d3b7288e7994edea($4c32e2d98e5a5134$var$parseNumber(m[1], 1, 9999), $4c32e2d98e5a5134$var$parseNumber(m[2], 1, 12), 1, m[10], 0, m[4] ? $4c32e2d98e5a5134$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $4c32e2d98e5a5134$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $4c32e2d98e5a5134$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $4c32e2d98e5a5134$var$parseNumber(m[7], 0, Infinity) * 1e3 : 0);
      date.day = $4c32e2d98e5a5134$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));
      let plainDateTime = $4ae0260a69729f1d$export$b21e0b124e224484(date);
      let ms;
      if (m[8]) {
        var ref;
        date.offset = $4c32e2d98e5a5134$var$parseNumber(m[8], -23, 23) * 36e5 + $4c32e2d98e5a5134$var$parseNumber((ref = m[9]) !== null && ref !== void 0 ? ref : "0", 0, 59) * 6e4;
        ms = $4ae0260a69729f1d$export$bd4fb2bc8bb06fb(date) - date.offset;
        let absolutes = $4ae0260a69729f1d$export$136f38efe7caf549(plainDateTime, date.timeZone);
        if (!absolutes.includes(ms))
          throw new Error(`Offset ${$4c32e2d98e5a5134$var$offsetToString(date.offset)} is invalid for ${$4c32e2d98e5a5134$export$4223de14708adc63(date)} in ${date.timeZone}`);
      } else
        ms = $4ae0260a69729f1d$export$5107c82f94518f5c($4ae0260a69729f1d$export$b21e0b124e224484(plainDateTime), date.timeZone, disambiguation);
      return $4ae0260a69729f1d$export$1b96692a1ba042ac(ms, date.timeZone);
    }
    function $4c32e2d98e5a5134$export$5adfdab05168c219(value, timeZone) {
      let m = value.match($4c32e2d98e5a5134$var$ABSOLUTE_RE);
      if (!m)
        throw new Error("Invalid ISO 8601 date time string: " + value);
      let date = new $625ad1e1f4c43bc1$export$d3b7288e7994edea($4c32e2d98e5a5134$var$parseNumber(m[1], 1, 9999), $4c32e2d98e5a5134$var$parseNumber(m[2], 1, 12), 1, timeZone, 0, m[4] ? $4c32e2d98e5a5134$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $4c32e2d98e5a5134$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $4c32e2d98e5a5134$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $4c32e2d98e5a5134$var$parseNumber(m[7], 0, Infinity) * 1e3 : 0);
      date.day = $4c32e2d98e5a5134$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));
      var ref;
      if (m[8])
        date.offset = $4c32e2d98e5a5134$var$parseNumber(m[8], -23, 23) * 36e5 + $4c32e2d98e5a5134$var$parseNumber((ref = m[9]) !== null && ref !== void 0 ? ref : "0", 0, 59) * 6e4;
      return $4ae0260a69729f1d$export$538b00033cc11c75(date, timeZone);
    }
    function $4c32e2d98e5a5134$export$8e384432362ed0f0(value) {
      return $4c32e2d98e5a5134$export$5adfdab05168c219(value, $1f0f7ebf1ae6c530$export$aa8b41735afcabd2());
    }
    function $4c32e2d98e5a5134$var$parseNumber(value, min, max) {
      let val = Number(value);
      if (val < min || val > max)
        throw new RangeError(`Value out of range: ${min} <= ${val} <= ${max}`);
      return val;
    }
    function $4c32e2d98e5a5134$export$f59dee82248f5ad4(time) {
      return `${String(time.hour).padStart(2, "0")}:${String(time.minute).padStart(2, "0")}:${String(time.second).padStart(2, "0")}${time.millisecond ? String(time.millisecond / 1e3).slice(1) : ""}`;
    }
    function $4c32e2d98e5a5134$export$60dfd74aa96791bd(date) {
      let gregorianDate = $4ae0260a69729f1d$export$b4a036af3fc0b032(date, new $af14c9812fdceb33$export$80ee6245ec4f29ec());
      return `${String(gregorianDate.year).padStart(4, "0")}-${String(gregorianDate.month).padStart(2, "0")}-${String(gregorianDate.day).padStart(2, "0")}`;
    }
    function $4c32e2d98e5a5134$export$4223de14708adc63(date) {
      return `${$4c32e2d98e5a5134$export$60dfd74aa96791bd(date)}T${$4c32e2d98e5a5134$export$f59dee82248f5ad4(date)}`;
    }
    function $4c32e2d98e5a5134$var$offsetToString(offset) {
      let sign = Math.sign(offset) < 0 ? "-" : "+";
      offset = Math.abs(offset);
      let offsetHours = Math.floor(offset / 36e5);
      let offsetMinutes = offset % 36e5 / 6e4;
      return `${sign}${String(offsetHours).padStart(2, "0")}:${String(offsetMinutes).padStart(2, "0")}`;
    }
    function $4c32e2d98e5a5134$export$bf79f1ebf4b18792(date) {
      return `${$4c32e2d98e5a5134$export$4223de14708adc63(date)}${$4c32e2d98e5a5134$var$offsetToString(date.offset)}[${date.timeZone}]`;
    }
    function $625ad1e1f4c43bc1$var$shiftArgs(args) {
      let calendar = typeof args[0] === "object" ? args.shift() : new $af14c9812fdceb33$export$80ee6245ec4f29ec();
      let era;
      if (typeof args[0] === "string")
        era = args.shift();
      else {
        let eras = calendar.getEras();
        era = eras[eras.length - 1];
      }
      let year = args.shift();
      let month = args.shift();
      let day = args.shift();
      return [
        calendar,
        era,
        year,
        month,
        day
      ];
    }
    var $625ad1e1f4c43bc1$export$99faa760c7908e4f = class {
      copy() {
        if (this.era)
          return new $625ad1e1f4c43bc1$export$99faa760c7908e4f(this.calendar, this.era, this.year, this.month, this.day);
        else
          return new $625ad1e1f4c43bc1$export$99faa760c7908e4f(this.calendar, this.year, this.month, this.day);
      }
      add(duration) {
        return $5c0571aa5b6fb5da$export$e16d8520af44a096(this, duration);
      }
      subtract(duration) {
        return $5c0571aa5b6fb5da$export$4e2d2ead65e5f7e3(this, duration);
      }
      set(fields) {
        return $5c0571aa5b6fb5da$export$adaa4cf7ef1b65be(this, fields);
      }
      cycle(field, amount, options) {
        return $5c0571aa5b6fb5da$export$d52ced6badfb9a4c(this, field, amount, options);
      }
      toDate(timeZone) {
        return $4ae0260a69729f1d$export$e67a095c620b86fe(this, timeZone);
      }
      toString() {
        return $4c32e2d98e5a5134$export$60dfd74aa96791bd(this);
      }
      compare(b) {
        return $1f0f7ebf1ae6c530$export$68781ddf31c0090f(this, b);
      }
      constructor(...args) {
        _type.set(this, {
          writable: true,
          value: void 0
        });
        let [calendar, era, year, month, day] = $625ad1e1f4c43bc1$var$shiftArgs(args);
        this.calendar = calendar;
        this.era = era;
        this.year = year;
        this.month = month;
        this.day = day;
        $5c0571aa5b6fb5da$export$c4e2ecac49351ef2(this);
      }
    };
    var _type = /* @__PURE__ */ new WeakMap();
    var $625ad1e1f4c43bc1$export$680ea196effce5f = class {
      copy() {
        return new $625ad1e1f4c43bc1$export$680ea196effce5f(this.hour, this.minute, this.second, this.millisecond);
      }
      add(duration) {
        return $5c0571aa5b6fb5da$export$7ed87b6bc2506470(this, duration);
      }
      subtract(duration) {
        return $5c0571aa5b6fb5da$export$fe34d3a381cd7501(this, duration);
      }
      set(fields) {
        return $5c0571aa5b6fb5da$export$e5d5e1c1822b6e56(this, fields);
      }
      cycle(field, amount, options) {
        return $5c0571aa5b6fb5da$export$dd02b3e0007dfe28(this, field, amount, options);
      }
      toString() {
        return $4c32e2d98e5a5134$export$f59dee82248f5ad4(this);
      }
      compare(b) {
        return $1f0f7ebf1ae6c530$export$c19a80a9721b80f6(this, b);
      }
      constructor(hour = 0, minute = 0, second = 0, millisecond = 0) {
        _type1.set(this, {
          writable: true,
          value: void 0
        });
        this.hour = hour;
        this.minute = minute;
        this.second = second;
        this.millisecond = millisecond;
        $5c0571aa5b6fb5da$export$7555de1e070510cb(this);
      }
    };
    var _type1 = /* @__PURE__ */ new WeakMap();
    var $625ad1e1f4c43bc1$export$ca871e8dbb80966f = class {
      copy() {
        if (this.era)
          return new $625ad1e1f4c43bc1$export$ca871e8dbb80966f(this.calendar, this.era, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);
        else
          return new $625ad1e1f4c43bc1$export$ca871e8dbb80966f(this.calendar, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);
      }
      add(duration) {
        return $5c0571aa5b6fb5da$export$e16d8520af44a096(this, duration);
      }
      subtract(duration) {
        return $5c0571aa5b6fb5da$export$4e2d2ead65e5f7e3(this, duration);
      }
      set(fields) {
        return $5c0571aa5b6fb5da$export$adaa4cf7ef1b65be($5c0571aa5b6fb5da$export$e5d5e1c1822b6e56(this, fields), fields);
      }
      cycle(field, amount, options) {
        switch (field) {
          case "era":
          case "year":
          case "month":
          case "day":
            return $5c0571aa5b6fb5da$export$d52ced6badfb9a4c(this, field, amount, options);
          default:
            return $5c0571aa5b6fb5da$export$dd02b3e0007dfe28(this, field, amount, options);
        }
      }
      toDate(timeZone, disambiguation) {
        return $4ae0260a69729f1d$export$e67a095c620b86fe(this, timeZone, disambiguation);
      }
      toString() {
        return $4c32e2d98e5a5134$export$4223de14708adc63(this);
      }
      compare(b) {
        let res = $1f0f7ebf1ae6c530$export$68781ddf31c0090f(this, b);
        if (res === 0)
          return $1f0f7ebf1ae6c530$export$c19a80a9721b80f6(this, $4ae0260a69729f1d$export$b21e0b124e224484(b));
        return res;
      }
      constructor(...args) {
        _type2.set(this, {
          writable: true,
          value: void 0
        });
        let [calendar, era, year, month, day] = $625ad1e1f4c43bc1$var$shiftArgs(args);
        this.calendar = calendar;
        this.era = era;
        this.year = year;
        this.month = month;
        this.day = day;
        this.hour = args.shift() || 0;
        this.minute = args.shift() || 0;
        this.second = args.shift() || 0;
        this.millisecond = args.shift() || 0;
        $5c0571aa5b6fb5da$export$c4e2ecac49351ef2(this);
      }
    };
    var _type2 = /* @__PURE__ */ new WeakMap();
    var $625ad1e1f4c43bc1$export$d3b7288e7994edea = class {
      copy() {
        if (this.era)
          return new $625ad1e1f4c43bc1$export$d3b7288e7994edea(this.calendar, this.era, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);
        else
          return new $625ad1e1f4c43bc1$export$d3b7288e7994edea(this.calendar, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);
      }
      add(duration) {
        return $5c0571aa5b6fb5da$export$96b1d28349274637(this, duration);
      }
      subtract(duration) {
        return $5c0571aa5b6fb5da$export$6814caac34ca03c7(this, duration);
      }
      set(fields, disambiguation) {
        return $5c0571aa5b6fb5da$export$31b5430eb18be4f8(this, fields, disambiguation);
      }
      cycle(field, amount, options) {
        return $5c0571aa5b6fb5da$export$9a297d111fc86b79(this, field, amount, options);
      }
      toDate() {
        return $4ae0260a69729f1d$export$83aac07b4c37b25(this);
      }
      toString() {
        return $4c32e2d98e5a5134$export$bf79f1ebf4b18792(this);
      }
      toAbsoluteString() {
        return this.toDate().toISOString();
      }
      compare(b) {
        return this.toDate().getTime() - $4ae0260a69729f1d$export$84c95a83c799e074(b, this.timeZone).toDate().getTime();
      }
      constructor(...args) {
        _type3.set(this, {
          writable: true,
          value: void 0
        });
        let [calendar, era, year, month, day] = $625ad1e1f4c43bc1$var$shiftArgs(args);
        let timeZone = args.shift();
        let offset = args.shift();
        this.calendar = calendar;
        this.era = era;
        this.year = year;
        this.month = month;
        this.day = day;
        this.timeZone = timeZone;
        this.offset = offset;
        this.hour = args.shift() || 0;
        this.minute = args.shift() || 0;
        this.second = args.shift() || 0;
        this.millisecond = args.shift() || 0;
        $5c0571aa5b6fb5da$export$c4e2ecac49351ef2(this);
      }
    };
    var _type3 = /* @__PURE__ */ new WeakMap();
    var $b0ac0602ef646b2c$var$ERA_START_DATES = [
      [
        1868,
        9,
        8
      ],
      [
        1912,
        7,
        30
      ],
      [
        1926,
        12,
        25
      ],
      [
        1989,
        1,
        8
      ],
      [
        2019,
        5,
        1
      ]
    ];
    var $b0ac0602ef646b2c$var$ERA_END_DATES = [
      [
        1912,
        7,
        29
      ],
      [
        1926,
        12,
        24
      ],
      [
        1989,
        1,
        7
      ],
      [
        2019,
        4,
        30
      ]
    ];
    var $b0ac0602ef646b2c$var$ERA_ADDENDS = [
      1867,
      1911,
      1925,
      1988,
      2018
    ];
    var $b0ac0602ef646b2c$var$ERA_NAMES = [
      "meiji",
      "taisho",
      "showa",
      "heisei",
      "reiwa"
    ];
    function $b0ac0602ef646b2c$var$findEraFromGregorianDate(date) {
      const idx = $b0ac0602ef646b2c$var$ERA_START_DATES.findIndex(([year, month, day]) => {
        if (date.year < year)
          return true;
        if (date.year === year && date.month < month)
          return true;
        if (date.year === year && date.month === month && date.day < day)
          return true;
        return false;
      });
      if (idx === -1)
        return $b0ac0602ef646b2c$var$ERA_START_DATES.length - 1;
      if (idx === 0)
        return 0;
      return idx - 1;
    }
    function $b0ac0602ef646b2c$var$toGregorian(date) {
      let eraAddend = $b0ac0602ef646b2c$var$ERA_ADDENDS[$b0ac0602ef646b2c$var$ERA_NAMES.indexOf(date.era)];
      if (!eraAddend)
        throw new Error("Unknown era: " + date.era);
      return new $625ad1e1f4c43bc1$export$99faa760c7908e4f(date.year + eraAddend, date.month, date.day);
    }
    var $b0ac0602ef646b2c$export$b746ab2b60cdffbf = class extends $af14c9812fdceb33$export$80ee6245ec4f29ec {
      fromJulianDay(jd) {
        let date = super.fromJulianDay(jd);
        let era = $b0ac0602ef646b2c$var$findEraFromGregorianDate(date);
        return new $625ad1e1f4c43bc1$export$99faa760c7908e4f(this, $b0ac0602ef646b2c$var$ERA_NAMES[era], date.year - $b0ac0602ef646b2c$var$ERA_ADDENDS[era], date.month, date.day);
      }
      toJulianDay(date) {
        return super.toJulianDay($b0ac0602ef646b2c$var$toGregorian(date));
      }
      balanceDate(date) {
        let gregorianDate = $b0ac0602ef646b2c$var$toGregorian(date);
        let era = $b0ac0602ef646b2c$var$findEraFromGregorianDate(gregorianDate);
        if ($b0ac0602ef646b2c$var$ERA_NAMES[era] !== date.era) {
          date.era = $b0ac0602ef646b2c$var$ERA_NAMES[era];
          date.year = gregorianDate.year - $b0ac0602ef646b2c$var$ERA_ADDENDS[era];
        }
        this.constrainDate(date);
      }
      constrainDate(date) {
        let idx = $b0ac0602ef646b2c$var$ERA_NAMES.indexOf(date.era);
        let end = $b0ac0602ef646b2c$var$ERA_END_DATES[idx];
        if (end != null) {
          let [endYear, endMonth, endDay] = end;
          let maxYear = endYear - $b0ac0602ef646b2c$var$ERA_ADDENDS[idx];
          date.year = Math.max(1, Math.min(maxYear, date.year));
          if (date.year === maxYear) {
            date.month = Math.min(endMonth, date.month);
            if (date.month === endMonth)
              date.day = Math.min(endDay, date.day);
          }
        }
        if (date.year === 1 && idx >= 0) {
          let [, startMonth, startDay] = $b0ac0602ef646b2c$var$ERA_START_DATES[idx];
          date.month = Math.max(startMonth, date.month);
          if (date.month === startMonth)
            date.day = Math.max(startDay, date.day);
        }
      }
      getEras() {
        return $b0ac0602ef646b2c$var$ERA_NAMES;
      }
      getYearsInEra(date) {
        let era = $b0ac0602ef646b2c$var$ERA_NAMES.indexOf(date.era);
        let cur = $b0ac0602ef646b2c$var$ERA_START_DATES[era];
        let next = $b0ac0602ef646b2c$var$ERA_START_DATES[era + 1];
        if (next == null)
          return 9999 - cur[0] + 1;
        let years = next[0] - cur[0];
        if (date.month < next[1] || date.month === next[1] && date.day < next[2])
          years++;
        return years;
      }
      getDaysInMonth(date) {
        return super.getDaysInMonth($b0ac0602ef646b2c$var$toGregorian(date));
      }
      getMinimumMonthInYear(date) {
        let start = $b0ac0602ef646b2c$var$getMinimums(date);
        return start ? start[1] : 1;
      }
      getMinimumDayInMonth(date) {
        let start = $b0ac0602ef646b2c$var$getMinimums(date);
        return start && date.month === start[1] ? start[2] : 1;
      }
      constructor(...args) {
        super(...args);
        this.identifier = "japanese";
      }
    };
    function $b0ac0602ef646b2c$var$getMinimums(date) {
      if (date.year === 1) {
        let idx = $b0ac0602ef646b2c$var$ERA_NAMES.indexOf(date.era);
        return $b0ac0602ef646b2c$var$ERA_START_DATES[idx];
      }
    }
    var $561c4ef058278b74$var$BUDDHIST_ERA_START = -543;
    var $561c4ef058278b74$export$42d20a78301dee44 = class extends $af14c9812fdceb33$export$80ee6245ec4f29ec {
      fromJulianDay(jd) {
        let gregorianDate = super.fromJulianDay(jd);
        let year = $af14c9812fdceb33$export$c36e0ecb2d4fa69d(gregorianDate.era, gregorianDate.year);
        return new $625ad1e1f4c43bc1$export$99faa760c7908e4f(this, year - $561c4ef058278b74$var$BUDDHIST_ERA_START, gregorianDate.month, gregorianDate.day);
      }
      toJulianDay(date) {
        return super.toJulianDay($561c4ef058278b74$var$toGregorian(date));
      }
      getEras() {
        return [
          "BE"
        ];
      }
      getDaysInMonth(date) {
        return super.getDaysInMonth($561c4ef058278b74$var$toGregorian(date));
      }
      balanceDate() {
      }
      constructor(...args) {
        super(...args);
        this.identifier = "buddhist";
      }
    };
    function $561c4ef058278b74$var$toGregorian(date) {
      let [era, year] = $af14c9812fdceb33$export$4475b7e617eb123c(date.year + $561c4ef058278b74$var$BUDDHIST_ERA_START);
      return new $625ad1e1f4c43bc1$export$99faa760c7908e4f(era, year, date.month, date.day);
    }
    var $9cc5d3577ec40243$var$TAIWAN_ERA_START = 1911;
    function $9cc5d3577ec40243$var$gregorianYear(date) {
      return date.era === "minguo" ? date.year + $9cc5d3577ec40243$var$TAIWAN_ERA_START : 1 - date.year + $9cc5d3577ec40243$var$TAIWAN_ERA_START;
    }
    function $9cc5d3577ec40243$var$gregorianToTaiwan(year) {
      let y = year - $9cc5d3577ec40243$var$TAIWAN_ERA_START;
      if (y > 0)
        return [
          "minguo",
          y
        ];
      else
        return [
          "before_minguo",
          1 - y
        ];
    }
    var $9cc5d3577ec40243$export$65e01080afcb0799 = class extends $af14c9812fdceb33$export$80ee6245ec4f29ec {
      fromJulianDay(jd) {
        let date = super.fromJulianDay(jd);
        let extendedYear = $af14c9812fdceb33$export$c36e0ecb2d4fa69d(date.era, date.year);
        let [era, year] = $9cc5d3577ec40243$var$gregorianToTaiwan(extendedYear);
        return new $625ad1e1f4c43bc1$export$99faa760c7908e4f(this, era, year, date.month, date.day);
      }
      toJulianDay(date) {
        return super.toJulianDay($9cc5d3577ec40243$var$toGregorian(date));
      }
      getEras() {
        return [
          "before_minguo",
          "minguo"
        ];
      }
      balanceDate(date) {
        let [era, year] = $9cc5d3577ec40243$var$gregorianToTaiwan($9cc5d3577ec40243$var$gregorianYear(date));
        date.era = era;
        date.year = year;
      }
      isInverseEra(date) {
        return date.era === "before_minguo";
      }
      getDaysInMonth(date) {
        return super.getDaysInMonth($9cc5d3577ec40243$var$toGregorian(date));
      }
      getYearsInEra(date) {
        return date.era === "before_minguo" ? 9999 : 9999 - $9cc5d3577ec40243$var$TAIWAN_ERA_START;
      }
      constructor(...args) {
        super(...args);
        this.identifier = "roc";
      }
    };
    function $9cc5d3577ec40243$var$toGregorian(date) {
      let [era, year] = $af14c9812fdceb33$export$4475b7e617eb123c($9cc5d3577ec40243$var$gregorianYear(date));
      return new $625ad1e1f4c43bc1$export$99faa760c7908e4f(era, year, date.month, date.day);
    }
    var $3c060181fc7249ae$var$PERSIAN_EPOCH = 1948321;
    function $3c060181fc7249ae$var$isLeapYear(year) {
      let y0 = year > 0 ? year - 474 : year - 473;
      let y1 = $a5090d6430502238$export$842a2cf37af977e1(y0, 2820) + 474;
      return $a5090d6430502238$export$842a2cf37af977e1((y1 + 38) * 31, 128) < 31;
    }
    function $3c060181fc7249ae$var$persianToJulianDay(year, month, day) {
      let y0 = year > 0 ? year - 474 : year - 473;
      let y1 = $a5090d6430502238$export$842a2cf37af977e1(y0, 2820) + 474;
      let offset = month <= 7 ? 31 * (month - 1) : 30 * (month - 1) + 6;
      return $3c060181fc7249ae$var$PERSIAN_EPOCH - 1 + 1029983 * Math.floor(y0 / 2820) + 365 * (y1 - 1) + Math.floor((31 * y1 - 5) / 128) + offset + day;
    }
    var $3c060181fc7249ae$export$37fccdbfd14c5939 = class {
      fromJulianDay(jd) {
        let d0 = jd - $3c060181fc7249ae$var$persianToJulianDay(475, 1, 1);
        let n2820 = Math.floor(d0 / 1029983);
        let d1 = $a5090d6430502238$export$842a2cf37af977e1(d0, 1029983);
        let y2820 = d1 === 1029982 ? 2820 : Math.floor((128 * d1 + 46878) / 46751);
        let year = 474 + 2820 * n2820 + y2820;
        if (year <= 0)
          year--;
        let yDay = jd - $3c060181fc7249ae$var$persianToJulianDay(year, 1, 1) + 1;
        let month = yDay <= 186 ? Math.ceil(yDay / 31) : Math.ceil((yDay - 6) / 31);
        let day = jd - $3c060181fc7249ae$var$persianToJulianDay(year, month, 1) + 1;
        return new $625ad1e1f4c43bc1$export$99faa760c7908e4f(this, year, month, day);
      }
      toJulianDay(date) {
        return $3c060181fc7249ae$var$persianToJulianDay(date.year, date.month, date.day);
      }
      getMonthsInYear() {
        return 12;
      }
      getDaysInMonth(date) {
        if (date.month <= 6)
          return 31;
        if (date.month <= 11)
          return 30;
        return $3c060181fc7249ae$var$isLeapYear(date.year) ? 30 : 29;
      }
      getEras() {
        return [
          "AP"
        ];
      }
      getYearsInEra() {
        return 9377;
      }
      constructor() {
        this.identifier = "persian";
      }
    };
    var $5f1dfa5c67609fe6$var$INDIAN_ERA_START = 78;
    var $5f1dfa5c67609fe6$var$INDIAN_YEAR_START = 80;
    var $5f1dfa5c67609fe6$export$39f31c639fa15726 = class extends $af14c9812fdceb33$export$80ee6245ec4f29ec {
      fromJulianDay(jd) {
        let date = super.fromJulianDay(jd);
        let indianYear = date.year - $5f1dfa5c67609fe6$var$INDIAN_ERA_START;
        let yDay = jd - $af14c9812fdceb33$export$f297eb839006d339(date.era, date.year, 1, 1);
        let leapMonth;
        if (yDay < $5f1dfa5c67609fe6$var$INDIAN_YEAR_START) {
          indianYear--;
          leapMonth = $af14c9812fdceb33$export$553d7fa8e3805fc0(date.year - 1) ? 31 : 30;
          yDay += leapMonth + 155 + 90 + 10;
        } else {
          leapMonth = $af14c9812fdceb33$export$553d7fa8e3805fc0(date.year) ? 31 : 30;
          yDay -= $5f1dfa5c67609fe6$var$INDIAN_YEAR_START;
        }
        let indianMonth;
        let indianDay;
        if (yDay < leapMonth) {
          indianMonth = 1;
          indianDay = yDay + 1;
        } else {
          let mDay = yDay - leapMonth;
          if (mDay < 155) {
            indianMonth = Math.floor(mDay / 31) + 2;
            indianDay = mDay % 31 + 1;
          } else {
            mDay -= 155;
            indianMonth = Math.floor(mDay / 30) + 7;
            indianDay = mDay % 30 + 1;
          }
        }
        return new $625ad1e1f4c43bc1$export$99faa760c7908e4f(this, indianYear, indianMonth, indianDay);
      }
      toJulianDay(date) {
        let extendedYear = date.year + $5f1dfa5c67609fe6$var$INDIAN_ERA_START;
        let [era, year] = $af14c9812fdceb33$export$4475b7e617eb123c(extendedYear);
        let leapMonth;
        let jd;
        if ($af14c9812fdceb33$export$553d7fa8e3805fc0(year)) {
          leapMonth = 31;
          jd = $af14c9812fdceb33$export$f297eb839006d339(era, year, 3, 21);
        } else {
          leapMonth = 30;
          jd = $af14c9812fdceb33$export$f297eb839006d339(era, year, 3, 22);
        }
        if (date.month === 1)
          return jd + date.day - 1;
        jd += leapMonth + Math.min(date.month - 2, 5) * 31;
        if (date.month >= 8)
          jd += (date.month - 7) * 30;
        jd += date.day - 1;
        return jd;
      }
      getDaysInMonth(date) {
        if (date.month === 1 && $af14c9812fdceb33$export$553d7fa8e3805fc0(date.year + $5f1dfa5c67609fe6$var$INDIAN_ERA_START))
          return 31;
        if (date.month >= 2 && date.month <= 6)
          return 31;
        return 30;
      }
      getYearsInEra() {
        return 9919;
      }
      getEras() {
        return [
          "saka"
        ];
      }
      balanceDate() {
      }
      constructor(...args) {
        super(...args);
        this.identifier = "indian";
      }
    };
    var $ecb2c4cc8c9aae25$var$CIVIL_EPOC = 1948440;
    var $ecb2c4cc8c9aae25$var$ASTRONOMICAL_EPOC = 1948439;
    var $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START = 1300;
    var $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_END = 1600;
    var $ecb2c4cc8c9aae25$var$UMALQURA_START_DAYS = 460322;
    function $ecb2c4cc8c9aae25$var$islamicToJulianDay(epoch, year, month, day) {
      return day + Math.ceil(29.5 * (month - 1)) + (year - 1) * 354 + Math.floor((3 + 11 * year) / 30) + epoch - 1;
    }
    function $ecb2c4cc8c9aae25$var$julianDayToIslamic(calendar, epoch, jd) {
      let year = Math.floor((30 * (jd - epoch) + 10646) / 10631);
      let month = Math.min(12, Math.ceil((jd - (29 + $ecb2c4cc8c9aae25$var$islamicToJulianDay(epoch, year, 1, 1))) / 29.5) + 1);
      let day = jd - $ecb2c4cc8c9aae25$var$islamicToJulianDay(epoch, year, month, 1) + 1;
      return new $625ad1e1f4c43bc1$export$99faa760c7908e4f(calendar, year, month, day);
    }
    function $ecb2c4cc8c9aae25$var$isLeapYear(year) {
      return (14 + 11 * year) % 30 < 11;
    }
    var $ecb2c4cc8c9aae25$export$2066795aadd37bfc = class {
      fromJulianDay(jd) {
        return $ecb2c4cc8c9aae25$var$julianDayToIslamic(this, $ecb2c4cc8c9aae25$var$CIVIL_EPOC, jd);
      }
      toJulianDay(date) {
        return $ecb2c4cc8c9aae25$var$islamicToJulianDay($ecb2c4cc8c9aae25$var$CIVIL_EPOC, date.year, date.month, date.day);
      }
      getDaysInMonth(date) {
        let length = 29 + date.month % 2;
        if (date.month === 12 && $ecb2c4cc8c9aae25$var$isLeapYear(date.year))
          length++;
        return length;
      }
      getMonthsInYear() {
        return 12;
      }
      getDaysInYear(date) {
        return $ecb2c4cc8c9aae25$var$isLeapYear(date.year) ? 355 : 354;
      }
      getYearsInEra() {
        return 9665;
      }
      getEras() {
        return [
          "AH"
        ];
      }
      constructor() {
        this.identifier = "islamic-civil";
      }
    };
    var $ecb2c4cc8c9aae25$export$37f0887f2f9d22f7 = class extends $ecb2c4cc8c9aae25$export$2066795aadd37bfc {
      fromJulianDay(jd) {
        return $ecb2c4cc8c9aae25$var$julianDayToIslamic(this, $ecb2c4cc8c9aae25$var$ASTRONOMICAL_EPOC, jd);
      }
      toJulianDay(date) {
        return $ecb2c4cc8c9aae25$var$islamicToJulianDay($ecb2c4cc8c9aae25$var$ASTRONOMICAL_EPOC, date.year, date.month, date.day);
      }
      constructor(...args) {
        super(...args);
        this.identifier = "islamic-tbla";
      }
    };
    var $ecb2c4cc8c9aae25$var$UMALQURA_DATA = "qgpUDckO1AbqBmwDrQpVBakGkgepC9QF2gpcBS0NlQZKB1QLagutBa4ETwoXBYsGpQbVCtYCWwmdBE0KJg2VDawFtgm6AlsKKwWVCsoG6Qr0AnYJtgJWCcoKpAvSC9kF3AJtCU0FpQpSC6ULtAW2CVcFlwJLBaMGUgdlC2oFqworBZUMSg2lDcoF1gpXCasESwmlClILagt1BXYCtwhbBFUFqQW0BdoJ3QRuAjYJqgpUDbIN1QXaAlsJqwRVCkkLZAtxC7QFtQpVCiUNkg7JDtQG6QprCasEkwpJDaQNsg25CroEWworBZUKKgtVC1wFvQQ9Ah0JlQpKC1oLbQW2AjsJmwRVBqkGVAdqC2wFrQpVBSkLkgupC9QF2gpaBasKlQVJB2QHqgu1BbYCVgpNDiULUgtqC60FrgIvCZcESwalBqwG1gpdBZ0ETQoWDZUNqgW1BdoCWwmtBJUFygbkBuoK9QS2AlYJqgpUC9IL2QXqAm0JrQSVCkoLpQuyBbUJ1gSXCkcFkwZJB1ULagVrCisFiwpGDaMNygXWCtsEawJLCaUKUgtpC3UFdgG3CFsCKwVlBbQF2gntBG0BtgimClINqQ3UBdoKWwmrBFMGKQdiB6kLsgW1ClUFJQuSDckO0gbpCmsFqwRVCikNVA2qDbUJugQ7CpsETQqqCtUK2gJdCV4ELgqaDFUNsga5BroEXQotBZUKUguoC7QLuQXaAloJSgukDdEO6AZqC20FNQWVBkoNqA3UDdoGWwWdAisGFQtKC5ULqgWuCi4JjwwnBZUGqgbWCl0FnQI=";
    var $ecb2c4cc8c9aae25$var$UMALQURA_MONTHLENGTH;
    var $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START_TABLE;
    function $ecb2c4cc8c9aae25$var$umalquraYearStart(year) {
      return $ecb2c4cc8c9aae25$var$UMALQURA_START_DAYS + $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START_TABLE[year - $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START];
    }
    function $ecb2c4cc8c9aae25$var$umalquraMonthLength(year, month) {
      let idx = year - $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START;
      let mask = 1 << 11 - (month - 1);
      if (($ecb2c4cc8c9aae25$var$UMALQURA_MONTHLENGTH[idx] & mask) === 0)
        return 29;
      else
        return 30;
    }
    function $ecb2c4cc8c9aae25$var$umalquraMonthStart(year, month) {
      let day = $ecb2c4cc8c9aae25$var$umalquraYearStart(year);
      for (let i = 1; i < month; i++)
        day += $ecb2c4cc8c9aae25$var$umalquraMonthLength(year, i);
      return day;
    }
    function $ecb2c4cc8c9aae25$var$umalquraYearLength(year) {
      return $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START_TABLE[year + 1 - $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START] - $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START_TABLE[year - $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START];
    }
    var $ecb2c4cc8c9aae25$export$5baab4758c231076 = class extends $ecb2c4cc8c9aae25$export$2066795aadd37bfc {
      fromJulianDay(jd) {
        let days = jd - $ecb2c4cc8c9aae25$var$CIVIL_EPOC;
        let startDays = $ecb2c4cc8c9aae25$var$umalquraYearStart($ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START);
        let endDays = $ecb2c4cc8c9aae25$var$umalquraYearStart($ecb2c4cc8c9aae25$var$UMALQURA_YEAR_END);
        if (days < startDays || days > endDays)
          return super.fromJulianDay(jd);
        else {
          let y = $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START - 1;
          let m = 1;
          let d = 1;
          while (d > 0) {
            y++;
            d = days - $ecb2c4cc8c9aae25$var$umalquraYearStart(y) + 1;
            let yearLength = $ecb2c4cc8c9aae25$var$umalquraYearLength(y);
            if (d === yearLength) {
              m = 12;
              break;
            } else if (d < yearLength) {
              let monthLength = $ecb2c4cc8c9aae25$var$umalquraMonthLength(y, m);
              m = 1;
              while (d > monthLength) {
                d -= monthLength;
                m++;
                monthLength = $ecb2c4cc8c9aae25$var$umalquraMonthLength(y, m);
              }
              break;
            }
          }
          return new $625ad1e1f4c43bc1$export$99faa760c7908e4f(this, y, m, days - $ecb2c4cc8c9aae25$var$umalquraMonthStart(y, m) + 1);
        }
      }
      toJulianDay(date) {
        if (date.year < $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START || date.year > $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_END)
          return super.toJulianDay(date);
        return $ecb2c4cc8c9aae25$var$CIVIL_EPOC + $ecb2c4cc8c9aae25$var$umalquraMonthStart(date.year, date.month) + (date.day - 1);
      }
      getDaysInMonth(date) {
        if (date.year < $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START || date.year > $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_END)
          return super.getDaysInMonth(date);
        return $ecb2c4cc8c9aae25$var$umalquraMonthLength(date.year, date.month);
      }
      getDaysInYear(date) {
        if (date.year < $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START || date.year > $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_END)
          return super.getDaysInYear(date);
        return $ecb2c4cc8c9aae25$var$umalquraYearLength(date.year);
      }
      constructor() {
        super();
        this.identifier = "islamic-umalqura";
        if (!$ecb2c4cc8c9aae25$var$UMALQURA_MONTHLENGTH)
          $ecb2c4cc8c9aae25$var$UMALQURA_MONTHLENGTH = new Uint16Array(Uint8Array.from(
            atob($ecb2c4cc8c9aae25$var$UMALQURA_DATA),
            (c) => c.charCodeAt(0)
          ).buffer);
        if (!$ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START_TABLE) {
          $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START_TABLE = new Uint32Array($ecb2c4cc8c9aae25$var$UMALQURA_YEAR_END - $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START + 1);
          let yearStart = 0;
          for (let year = $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START; year <= $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_END; year++) {
            $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START_TABLE[year - $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START] = yearStart;
            for (let i = 1; i <= 12; i++)
              yearStart += $ecb2c4cc8c9aae25$var$umalquraMonthLength(year, i);
          }
        }
      }
    };
    var $0f5324ee3bdd9396$var$HEBREW_EPOCH = 347997;
    var $0f5324ee3bdd9396$var$HOUR_PARTS = 1080;
    var $0f5324ee3bdd9396$var$DAY_PARTS = 24 * $0f5324ee3bdd9396$var$HOUR_PARTS;
    var $0f5324ee3bdd9396$var$MONTH_DAYS = 29;
    var $0f5324ee3bdd9396$var$MONTH_FRACT = 12 * $0f5324ee3bdd9396$var$HOUR_PARTS + 793;
    var $0f5324ee3bdd9396$var$MONTH_PARTS = $0f5324ee3bdd9396$var$MONTH_DAYS * $0f5324ee3bdd9396$var$DAY_PARTS + $0f5324ee3bdd9396$var$MONTH_FRACT;
    function $0f5324ee3bdd9396$var$isLeapYear(year) {
      return $a5090d6430502238$export$842a2cf37af977e1(year * 7 + 1, 19) < 7;
    }
    function $0f5324ee3bdd9396$var$hebrewDelay1(year) {
      let months = Math.floor((235 * year - 234) / 19);
      let parts = 12084 + 13753 * months;
      let day = months * 29 + Math.floor(parts / 25920);
      if ($a5090d6430502238$export$842a2cf37af977e1(3 * (day + 1), 7) < 3)
        day += 1;
      return day;
    }
    function $0f5324ee3bdd9396$var$hebrewDelay2(year) {
      let last = $0f5324ee3bdd9396$var$hebrewDelay1(year - 1);
      let present = $0f5324ee3bdd9396$var$hebrewDelay1(year);
      let next = $0f5324ee3bdd9396$var$hebrewDelay1(year + 1);
      if (next - present === 356)
        return 2;
      if (present - last === 382)
        return 1;
      return 0;
    }
    function $0f5324ee3bdd9396$var$startOfYear(year) {
      return $0f5324ee3bdd9396$var$hebrewDelay1(year) + $0f5324ee3bdd9396$var$hebrewDelay2(year);
    }
    function $0f5324ee3bdd9396$var$getDaysInYear(year) {
      return $0f5324ee3bdd9396$var$startOfYear(year + 1) - $0f5324ee3bdd9396$var$startOfYear(year);
    }
    function $0f5324ee3bdd9396$var$getYearType(year) {
      let yearLength = $0f5324ee3bdd9396$var$getDaysInYear(year);
      if (yearLength > 380)
        yearLength -= 30;
      switch (yearLength) {
        case 353:
          return 0;
        case 354:
          return 1;
        case 355:
          return 2;
      }
    }
    function $0f5324ee3bdd9396$var$getDaysInMonth(year, month) {
      if (month >= 6 && !$0f5324ee3bdd9396$var$isLeapYear(year))
        month++;
      if (month === 4 || month === 7 || month === 9 || month === 11 || month === 13)
        return 29;
      let yearType = $0f5324ee3bdd9396$var$getYearType(year);
      if (month === 2)
        return yearType === 2 ? 30 : 29;
      if (month === 3)
        return yearType === 0 ? 29 : 30;
      if (month === 6)
        return $0f5324ee3bdd9396$var$isLeapYear(year) ? 30 : 0;
      return 30;
    }
    var $0f5324ee3bdd9396$export$ca405048b8fb5af = class {
      fromJulianDay(jd) {
        let d = jd - $0f5324ee3bdd9396$var$HEBREW_EPOCH;
        let m = d * $0f5324ee3bdd9396$var$DAY_PARTS / $0f5324ee3bdd9396$var$MONTH_PARTS;
        let year = Math.floor((19 * m + 234) / 235) + 1;
        let ys = $0f5324ee3bdd9396$var$startOfYear(year);
        let dayOfYear = Math.floor(d - ys);
        while (dayOfYear < 1) {
          year--;
          ys = $0f5324ee3bdd9396$var$startOfYear(year);
          dayOfYear = Math.floor(d - ys);
        }
        let month = 1;
        let monthStart = 0;
        while (monthStart < dayOfYear) {
          monthStart += $0f5324ee3bdd9396$var$getDaysInMonth(year, month);
          month++;
        }
        month--;
        monthStart -= $0f5324ee3bdd9396$var$getDaysInMonth(year, month);
        let day = dayOfYear - monthStart;
        return new $625ad1e1f4c43bc1$export$99faa760c7908e4f(this, year, month, day);
      }
      toJulianDay(date) {
        let jd = $0f5324ee3bdd9396$var$startOfYear(date.year);
        for (let month = 1; month < date.month; month++)
          jd += $0f5324ee3bdd9396$var$getDaysInMonth(date.year, month);
        return jd + date.day + $0f5324ee3bdd9396$var$HEBREW_EPOCH;
      }
      getDaysInMonth(date) {
        return $0f5324ee3bdd9396$var$getDaysInMonth(date.year, date.month);
      }
      getMonthsInYear(date) {
        return $0f5324ee3bdd9396$var$isLeapYear(date.year) ? 13 : 12;
      }
      getDaysInYear(date) {
        return $0f5324ee3bdd9396$var$getDaysInYear(date.year);
      }
      getYearsInEra() {
        return 9999;
      }
      getEras() {
        return [
          "AM"
        ];
      }
      balanceYearMonth(date, previousDate) {
        if (previousDate.year !== date.year) {
          if ($0f5324ee3bdd9396$var$isLeapYear(previousDate.year) && !$0f5324ee3bdd9396$var$isLeapYear(date.year) && previousDate.month > 6)
            date.month--;
          else if (!$0f5324ee3bdd9396$var$isLeapYear(previousDate.year) && $0f5324ee3bdd9396$var$isLeapYear(date.year) && previousDate.month > 6)
            date.month++;
        }
      }
      constructor() {
        this.identifier = "hebrew";
      }
    };
    var $4db04d1051af0f2f$var$ETHIOPIC_EPOCH = 1723856;
    var $4db04d1051af0f2f$var$COPTIC_EPOCH = 1824665;
    var $4db04d1051af0f2f$var$AMETE_MIHRET_DELTA = 5500;
    function $4db04d1051af0f2f$var$ceToJulianDay(epoch, year, month, day) {
      return epoch + 365 * year + Math.floor(year / 4) + 30 * (month - 1) + day - 1;
    }
    function $4db04d1051af0f2f$var$julianDayToCE(epoch, jd) {
      let year = Math.floor(4 * (jd - epoch) / 1461);
      let month = 1 + Math.floor((jd - $4db04d1051af0f2f$var$ceToJulianDay(epoch, year, 1, 1)) / 30);
      let day = jd + 1 - $4db04d1051af0f2f$var$ceToJulianDay(epoch, year, month, 1);
      return [
        year,
        month,
        day
      ];
    }
    function $4db04d1051af0f2f$var$getLeapDay(year) {
      return Math.floor(year % 4 / 3);
    }
    function $4db04d1051af0f2f$var$getDaysInMonth(year, month) {
      if (month % 13 !== 0)
        return 30;
      else
        return $4db04d1051af0f2f$var$getLeapDay(year) + 5;
    }
    var $4db04d1051af0f2f$export$26ba6eab5e20cd7d = class {
      fromJulianDay(jd) {
        let [year, month, day] = $4db04d1051af0f2f$var$julianDayToCE($4db04d1051af0f2f$var$ETHIOPIC_EPOCH, jd);
        let era = "AM";
        if (year <= 0) {
          era = "AA";
          year += $4db04d1051af0f2f$var$AMETE_MIHRET_DELTA;
        }
        return new $625ad1e1f4c43bc1$export$99faa760c7908e4f(this, era, year, month, day);
      }
      toJulianDay(date) {
        let year = date.year;
        if (date.era === "AA")
          year -= $4db04d1051af0f2f$var$AMETE_MIHRET_DELTA;
        return $4db04d1051af0f2f$var$ceToJulianDay($4db04d1051af0f2f$var$ETHIOPIC_EPOCH, year, date.month, date.day);
      }
      getDaysInMonth(date) {
        return $4db04d1051af0f2f$var$getDaysInMonth(date.year, date.month);
      }
      getMonthsInYear() {
        return 13;
      }
      getDaysInYear(date) {
        return 365 + $4db04d1051af0f2f$var$getLeapDay(date.year);
      }
      getYearsInEra(date) {
        return date.era === "AA" ? 9999 : 9991;
      }
      getEras() {
        return [
          "AA",
          "AM"
        ];
      }
      constructor() {
        this.identifier = "ethiopic";
      }
    };
    var $4db04d1051af0f2f$export$d72e0c37005a4914 = class extends $4db04d1051af0f2f$export$26ba6eab5e20cd7d {
      fromJulianDay(jd) {
        let [year, month, day] = $4db04d1051af0f2f$var$julianDayToCE($4db04d1051af0f2f$var$ETHIOPIC_EPOCH, jd);
        year += $4db04d1051af0f2f$var$AMETE_MIHRET_DELTA;
        return new $625ad1e1f4c43bc1$export$99faa760c7908e4f(this, "AA", year, month, day);
      }
      getEras() {
        return [
          "AA"
        ];
      }
      getYearsInEra() {
        return 9999;
      }
      constructor(...args) {
        super(...args);
        this.identifier = "ethioaa";
      }
    };
    var $4db04d1051af0f2f$export$fe6243cbe1a4b7c1 = class extends $4db04d1051af0f2f$export$26ba6eab5e20cd7d {
      fromJulianDay(jd) {
        let [year, month, day] = $4db04d1051af0f2f$var$julianDayToCE($4db04d1051af0f2f$var$COPTIC_EPOCH, jd);
        let era = "CE";
        if (year <= 0) {
          era = "BCE";
          year = 1 - year;
        }
        return new $625ad1e1f4c43bc1$export$99faa760c7908e4f(this, era, year, month, day);
      }
      toJulianDay(date) {
        let year = date.year;
        if (date.era === "BCE")
          year = 1 - year;
        return $4db04d1051af0f2f$var$ceToJulianDay($4db04d1051af0f2f$var$COPTIC_EPOCH, year, date.month, date.day);
      }
      getDaysInMonth(date) {
        let year = date.year;
        if (date.era === "BCE")
          year = 1 - year;
        return $4db04d1051af0f2f$var$getDaysInMonth(year, date.month);
      }
      isInverseEra(date) {
        return date.era === "BCE";
      }
      balanceDate(date) {
        if (date.year <= 0) {
          date.era = date.era === "BCE" ? "CE" : "BCE";
          date.year = 1 - date.year;
        }
      }
      getEras() {
        return [
          "BCE",
          "CE"
        ];
      }
      getYearsInEra(date) {
        return date.era === "BCE" ? 9999 : 9715;
      }
      constructor(...args) {
        super(...args);
        this.identifier = "coptic";
      }
    };
    function $4922c0a5a69da0ba$export$dd0bbc9b26defe37(name) {
      switch (name) {
        case "buddhist":
          return new $561c4ef058278b74$export$42d20a78301dee44();
        case "ethiopic":
          return new $4db04d1051af0f2f$export$26ba6eab5e20cd7d();
        case "ethioaa":
          return new $4db04d1051af0f2f$export$d72e0c37005a4914();
        case "coptic":
          return new $4db04d1051af0f2f$export$fe6243cbe1a4b7c1();
        case "hebrew":
          return new $0f5324ee3bdd9396$export$ca405048b8fb5af();
        case "indian":
          return new $5f1dfa5c67609fe6$export$39f31c639fa15726();
        case "islamic-civil":
          return new $ecb2c4cc8c9aae25$export$2066795aadd37bfc();
        case "islamic-tbla":
          return new $ecb2c4cc8c9aae25$export$37f0887f2f9d22f7();
        case "islamic-umalqura":
          return new $ecb2c4cc8c9aae25$export$5baab4758c231076();
        case "japanese":
          return new $b0ac0602ef646b2c$export$b746ab2b60cdffbf();
        case "persian":
          return new $3c060181fc7249ae$export$37fccdbfd14c5939();
        case "roc":
          return new $9cc5d3577ec40243$export$65e01080afcb0799();
        case "gregory":
        default:
          return new $af14c9812fdceb33$export$80ee6245ec4f29ec();
      }
    }
    var $8f23a04ae90a588b$var$formatterCache = /* @__PURE__ */ new Map();
    var $8f23a04ae90a588b$export$ad991b66133851cf = class {
      format(value) {
        return this.formatter.format(value);
      }
      formatToParts(value) {
        return this.formatter.formatToParts(value);
      }
      formatRange(start, end) {
        if (typeof this.formatter.formatRange === "function")
          return this.formatter.formatRange(start, end);
        if (end < start)
          throw new RangeError("End date must be >= start date");
        return `${this.formatter.format(start)} \u2013 ${this.formatter.format(end)}`;
      }
      formatRangeToParts(start, end) {
        if (typeof this.formatter.formatRangeToParts === "function")
          return this.formatter.formatRangeToParts(start, end);
        if (end < start)
          throw new RangeError("End date must be >= start date");
        let startParts = this.formatter.formatToParts(start);
        let endParts = this.formatter.formatToParts(end);
        return [
          ...startParts.map(
            (p) => __spreadProps(__spreadValues({}, p), {
              source: "startRange"
            })
          ),
          {
            type: "literal",
            value: " \u2013 ",
            source: "shared"
          },
          ...endParts.map(
            (p) => __spreadProps(__spreadValues({}, p), {
              source: "endRange"
            })
          )
        ];
      }
      resolvedOptions() {
        let resolvedOptions = this.formatter.resolvedOptions();
        if ($8f23a04ae90a588b$var$hasBuggyResolvedHourCycle()) {
          if (!this.resolvedHourCycle)
            this.resolvedHourCycle = $8f23a04ae90a588b$var$getResolvedHourCycle(resolvedOptions.locale, this.options);
          resolvedOptions.hourCycle = this.resolvedHourCycle;
          resolvedOptions.hour12 = this.resolvedHourCycle === "h11" || this.resolvedHourCycle === "h12";
        }
        if (resolvedOptions.calendar === "ethiopic-amete-alem")
          resolvedOptions.calendar = "ethioaa";
        return resolvedOptions;
      }
      constructor(locale, options = {}) {
        this.formatter = $8f23a04ae90a588b$var$getCachedDateFormatter(locale, options);
        this.options = options;
      }
    };
    var $8f23a04ae90a588b$var$hour12Preferences = {
      true: {
        ja: "h11"
      },
      false: {}
    };
    function $8f23a04ae90a588b$var$getCachedDateFormatter(locale, options = {}) {
      if (typeof options.hour12 === "boolean" && $8f23a04ae90a588b$var$hasBuggyHour12Behavior()) {
        options = __spreadValues({}, options);
        let pref = $8f23a04ae90a588b$var$hour12Preferences[String(options.hour12)][locale.split("-")[0]];
        let defaultHourCycle = options.hour12 ? "h12" : "h23";
        options.hourCycle = pref !== null && pref !== void 0 ? pref : defaultHourCycle;
        delete options.hour12;
      }
      let cacheKey = locale + (options ? Object.entries(options).sort(
        (a, b) => a[0] < b[0] ? -1 : 1
      ).join() : "");
      if ($8f23a04ae90a588b$var$formatterCache.has(cacheKey))
        return $8f23a04ae90a588b$var$formatterCache.get(cacheKey);
      let numberFormatter = new Intl.DateTimeFormat(locale, options);
      $8f23a04ae90a588b$var$formatterCache.set(cacheKey, numberFormatter);
      return numberFormatter;
    }
    var $8f23a04ae90a588b$var$_hasBuggyHour12Behavior = null;
    function $8f23a04ae90a588b$var$hasBuggyHour12Behavior() {
      if ($8f23a04ae90a588b$var$_hasBuggyHour12Behavior == null)
        $8f23a04ae90a588b$var$_hasBuggyHour12Behavior = new Intl.DateTimeFormat("en-US", {
          hour: "numeric",
          hour12: false
        }).format(new Date(2020, 2, 3, 0)) === "24";
      return $8f23a04ae90a588b$var$_hasBuggyHour12Behavior;
    }
    var $8f23a04ae90a588b$var$_hasBuggyResolvedHourCycle = null;
    function $8f23a04ae90a588b$var$hasBuggyResolvedHourCycle() {
      if ($8f23a04ae90a588b$var$_hasBuggyResolvedHourCycle == null)
        $8f23a04ae90a588b$var$_hasBuggyResolvedHourCycle = new Intl.DateTimeFormat("fr", {
          hour: "numeric",
          hour12: false
        }).resolvedOptions().hourCycle === "h12";
      return $8f23a04ae90a588b$var$_hasBuggyResolvedHourCycle;
    }
    function $8f23a04ae90a588b$var$getResolvedHourCycle(locale, options) {
      if (!options.timeStyle && !options.hour)
        return void 0;
      locale = locale.replace(/(-u-)?-nu-[a-zA-Z0-9]+/, "");
      locale += (locale.includes("-u-") ? "" : "-u") + "-nu-latn";
      let formatter = $8f23a04ae90a588b$var$getCachedDateFormatter(locale, __spreadProps(__spreadValues({}, options), {
        timeZone: void 0
      }));
      let min = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 0)).find(
        (p) => p.type === "hour"
      ).value, 10);
      let max = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 23)).find(
        (p) => p.type === "hour"
      ).value, 10);
      if (min === 0 && max === 23)
        return "h23";
      if (min === 24 && max === 23)
        return "h24";
      if (min === 0 && max === 11)
        return "h11";
      if (min === 12 && max === 11)
        return "h12";
      throw new Error("Unexpected hour cycle result");
    }
  }
});

// ../../node_modules/@internationalized/number/dist/main.js
var require_main6 = __commonJS({
  "../../node_modules/@internationalized/number/dist/main.js"(exports, module) {
    function $parcel$export12(e, n, v, s) {
      Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
    }
    $parcel$export12(module.exports, "NumberFormatter", () => $0c1d5654b62fc485$export$cc77c4ff7e8673c5);
    $parcel$export12(module.exports, "NumberParser", () => $d68f3f4c684426c6$export$cd11ab140839f11d);
    var $0c1d5654b62fc485$var$formatterCache = /* @__PURE__ */ new Map();
    var $0c1d5654b62fc485$var$supportsSignDisplay = false;
    try {
      $0c1d5654b62fc485$var$supportsSignDisplay = new Intl.NumberFormat("de-DE", {
        signDisplay: "exceptZero"
      }).resolvedOptions().signDisplay === "exceptZero";
    } catch (e) {
    }
    var $0c1d5654b62fc485$var$supportsUnit = false;
    try {
      $0c1d5654b62fc485$var$supportsUnit = new Intl.NumberFormat("de-DE", {
        style: "unit",
        unit: "degree"
      }).resolvedOptions().style === "unit";
    } catch (e1) {
    }
    var $0c1d5654b62fc485$var$UNITS = {
      degree: {
        narrow: {
          default: "\xB0",
          "ja-JP": " \u5EA6",
          "zh-TW": "\u5EA6",
          "sl-SI": " \xB0"
        }
      }
    };
    var $0c1d5654b62fc485$export$cc77c4ff7e8673c5 = class {
      format(value) {
        let res = "";
        if (!$0c1d5654b62fc485$var$supportsSignDisplay && this.options.signDisplay != null)
          res = $0c1d5654b62fc485$export$711b50b3c525e0f2(this.numberFormatter, this.options.signDisplay, value);
        else
          res = this.numberFormatter.format(value);
        if (this.options.style === "unit" && !$0c1d5654b62fc485$var$supportsUnit) {
          var ref;
          let { unit, unitDisplay = "short", locale } = this.resolvedOptions();
          let values = (ref = $0c1d5654b62fc485$var$UNITS[unit]) === null || ref === void 0 ? void 0 : ref[unitDisplay];
          res += values[locale] || values.default;
        }
        return res;
      }
      formatToParts(value) {
        return this.numberFormatter.formatToParts(value);
      }
      formatRange(start, end) {
        if (typeof this.numberFormatter.formatRange === "function")
          return this.numberFormatter.formatRange(start, end);
        if (end < start)
          throw new RangeError("End date must be >= start date");
        return `${this.format(start)} \u2013 ${this.format(end)}`;
      }
      formatRangeToParts(start, end) {
        if (typeof this.numberFormatter.formatRangeToParts === "function")
          return this.numberFormatter.formatRangeToParts(start, end);
        if (end < start)
          throw new RangeError("End date must be >= start date");
        let startParts = this.numberFormatter.formatToParts(start);
        let endParts = this.numberFormatter.formatToParts(end);
        return [
          ...startParts.map(
            (p) => __spreadProps(__spreadValues({}, p), {
              source: "startRange"
            })
          ),
          {
            type: "literal",
            value: " \u2013 ",
            source: "shared"
          },
          ...endParts.map(
            (p) => __spreadProps(__spreadValues({}, p), {
              source: "endRange"
            })
          )
        ];
      }
      resolvedOptions() {
        let options = this.numberFormatter.resolvedOptions();
        if (!$0c1d5654b62fc485$var$supportsSignDisplay && this.options.signDisplay != null)
          options = __spreadProps(__spreadValues({}, options), {
            signDisplay: this.options.signDisplay
          });
        if (!$0c1d5654b62fc485$var$supportsUnit && this.options.style === "unit")
          options = __spreadProps(__spreadValues({}, options), {
            style: "unit",
            unit: this.options.unit,
            unitDisplay: this.options.unitDisplay
          });
        return options;
      }
      constructor(locale, options = {}) {
        this.numberFormatter = $0c1d5654b62fc485$var$getCachedNumberFormatter(locale, options);
        this.options = options;
      }
    };
    function $0c1d5654b62fc485$var$getCachedNumberFormatter(locale, options = {}) {
      let { numberingSystem } = options;
      if (numberingSystem && locale.indexOf("-u-nu-") === -1)
        locale = `${locale}-u-nu-${numberingSystem}`;
      if (options.style === "unit" && !$0c1d5654b62fc485$var$supportsUnit) {
        var ref;
        let { unit, unitDisplay = "short" } = options;
        if (!unit)
          throw new Error('unit option must be provided with style: "unit"');
        if (!((ref = $0c1d5654b62fc485$var$UNITS[unit]) === null || ref === void 0 ? void 0 : ref[unitDisplay]))
          throw new Error(`Unsupported unit ${unit} with unitDisplay = ${unitDisplay}`);
        options = __spreadProps(__spreadValues({}, options), {
          style: "decimal"
        });
      }
      let cacheKey = locale + (options ? Object.entries(options).sort(
        (a, b) => a[0] < b[0] ? -1 : 1
      ).join() : "");
      if ($0c1d5654b62fc485$var$formatterCache.has(cacheKey))
        return $0c1d5654b62fc485$var$formatterCache.get(cacheKey);
      let numberFormatter = new Intl.NumberFormat(locale, options);
      $0c1d5654b62fc485$var$formatterCache.set(cacheKey, numberFormatter);
      return numberFormatter;
    }
    function $0c1d5654b62fc485$export$711b50b3c525e0f2(numberFormat, signDisplay, num) {
      if (signDisplay === "auto")
        return numberFormat.format(num);
      else if (signDisplay === "never")
        return numberFormat.format(Math.abs(num));
      else {
        let needsPositiveSign = false;
        if (signDisplay === "always")
          needsPositiveSign = num > 0 || Object.is(num, 0);
        else if (signDisplay === "exceptZero") {
          if (Object.is(num, -0) || Object.is(num, 0))
            num = Math.abs(num);
          else
            needsPositiveSign = num > 0;
        }
        if (needsPositiveSign) {
          let negative = numberFormat.format(-num);
          let noSign = numberFormat.format(num);
          let minus = negative.replace(noSign, "").replace(/\u200e|\u061C/, "");
          if ([
            ...minus
          ].length !== 1)
            console.warn("@react-aria/i18n polyfill for NumberFormat signDisplay: Unsupported case");
          let positive = negative.replace(noSign, "!!!").replace(minus, "+").replace("!!!", noSign);
          return positive;
        } else
          return numberFormat.format(num);
      }
    }
    var $d68f3f4c684426c6$var$CURRENCY_SIGN_REGEX = new RegExp("^.*\\(.*\\).*$");
    var $d68f3f4c684426c6$var$NUMBERING_SYSTEMS = [
      "latn",
      "arab",
      "hanidec"
    ];
    var $d68f3f4c684426c6$export$cd11ab140839f11d = class {
      parse(value) {
        return $d68f3f4c684426c6$var$getNumberParserImpl(this.locale, this.options, value).parse(value);
      }
      isValidPartialNumber(value, minValue, maxValue) {
        return $d68f3f4c684426c6$var$getNumberParserImpl(this.locale, this.options, value).isValidPartialNumber(value, minValue, maxValue);
      }
      getNumberingSystem(value) {
        return $d68f3f4c684426c6$var$getNumberParserImpl(this.locale, this.options, value).options.numberingSystem;
      }
      constructor(locale, options = {}) {
        this.locale = locale;
        this.options = options;
      }
    };
    var $d68f3f4c684426c6$var$numberParserCache = /* @__PURE__ */ new Map();
    function $d68f3f4c684426c6$var$getNumberParserImpl(locale, options, value) {
      let defaultParser = $d68f3f4c684426c6$var$getCachedNumberParser(locale, options);
      if (!locale.includes("-nu-") && !defaultParser.isValidPartialNumber(value)) {
        for (let numberingSystem of $d68f3f4c684426c6$var$NUMBERING_SYSTEMS)
          if (numberingSystem !== defaultParser.options.numberingSystem) {
            let parser = $d68f3f4c684426c6$var$getCachedNumberParser(locale + (locale.includes("-u-") ? "-nu-" : "-u-nu-") + numberingSystem, options);
            if (parser.isValidPartialNumber(value))
              return parser;
          }
      }
      return defaultParser;
    }
    function $d68f3f4c684426c6$var$getCachedNumberParser(locale, options) {
      let cacheKey = locale + (options ? Object.entries(options).sort(
        (a, b) => a[0] < b[0] ? -1 : 1
      ).join() : "");
      let parser = $d68f3f4c684426c6$var$numberParserCache.get(cacheKey);
      if (!parser) {
        parser = new $d68f3f4c684426c6$var$NumberParserImpl(locale, options);
        $d68f3f4c684426c6$var$numberParserCache.set(cacheKey, parser);
      }
      return parser;
    }
    var $d68f3f4c684426c6$var$NumberParserImpl = class {
      parse(value) {
        let fullySanitizedValue = this.sanitize(value);
        fullySanitizedValue = $d68f3f4c684426c6$var$replaceAll(fullySanitizedValue, this.symbols.group, "").replace(this.symbols.decimal, ".").replace(this.symbols.minusSign, "-").replace(this.symbols.numeral, this.symbols.index);
        let newValue = fullySanitizedValue ? +fullySanitizedValue : NaN;
        if (isNaN(newValue))
          return NaN;
        if (this.options.currencySign === "accounting" && $d68f3f4c684426c6$var$CURRENCY_SIGN_REGEX.test(value))
          newValue = -1 * newValue;
        if (this.options.style === "percent") {
          newValue /= 100;
          var _maximumFractionDigits;
          newValue = +newValue.toFixed(((_maximumFractionDigits = this.options.maximumFractionDigits) !== null && _maximumFractionDigits !== void 0 ? _maximumFractionDigits : 0) + 2);
        }
        return newValue;
      }
      sanitize(value) {
        value = value.replace(this.symbols.literals, "");
        value = value.replace("-", this.symbols.minusSign);
        if (this.options.numberingSystem === "arab") {
          value = value.replace(",", this.symbols.decimal);
          value = value.replace(String.fromCharCode(1548), this.symbols.decimal);
          value = $d68f3f4c684426c6$var$replaceAll(value, ".", this.symbols.group);
        }
        if (this.options.locale === "fr-FR")
          value = $d68f3f4c684426c6$var$replaceAll(value, ".", String.fromCharCode(8239));
        return value;
      }
      isValidPartialNumber(value, minValue = -Infinity, maxValue = Infinity) {
        value = this.sanitize(value);
        if (value.startsWith(this.symbols.minusSign) && minValue < 0)
          value = value.slice(this.symbols.minusSign.length);
        else if (this.symbols.plusSign && value.startsWith(this.symbols.plusSign) && maxValue > 0)
          value = value.slice(this.symbols.plusSign.length);
        if (value.startsWith(this.symbols.group))
          return false;
        value = $d68f3f4c684426c6$var$replaceAll(value, this.symbols.group, "").replace(this.symbols.numeral, "").replace(this.symbols.decimal, "");
        return value.length === 0;
      }
      constructor(locale, options = {}) {
        this.formatter = new Intl.NumberFormat(locale, options);
        this.options = this.formatter.resolvedOptions();
        this.symbols = $d68f3f4c684426c6$var$getSymbols(this.formatter, this.options, options);
      }
    };
    var $d68f3f4c684426c6$var$nonLiteralParts = /* @__PURE__ */ new Set([
      "decimal",
      "fraction",
      "integer",
      "minusSign",
      "plusSign",
      "group"
    ]);
    function $d68f3f4c684426c6$var$getSymbols(formatter, intlOptions, originalOptions) {
      var ref, ref1, ref2, ref3;
      let allParts = formatter.formatToParts(-10000.111);
      let posAllParts = formatter.formatToParts(10000.111);
      let singularParts = formatter.formatToParts(1);
      var ref4;
      let minusSign = (ref4 = (ref = allParts.find(
        (p) => p.type === "minusSign"
      )) === null || ref === void 0 ? void 0 : ref.value) !== null && ref4 !== void 0 ? ref4 : "-";
      let plusSign = (ref1 = posAllParts.find(
        (p) => p.type === "plusSign"
      )) === null || ref1 === void 0 ? void 0 : ref1.value;
      if (!plusSign && ((originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === "exceptZero" || (originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === "always"))
        plusSign = "+";
      let decimal = (ref2 = allParts.find(
        (p) => p.type === "decimal"
      )) === null || ref2 === void 0 ? void 0 : ref2.value;
      let group = (ref3 = allParts.find(
        (p) => p.type === "group"
      )) === null || ref3 === void 0 ? void 0 : ref3.value;
      let pluralLiterals = allParts.filter(
        (p) => !$d68f3f4c684426c6$var$nonLiteralParts.has(p.type)
      ).map(
        (p) => $d68f3f4c684426c6$var$escapeRegex(p.value)
      );
      let singularLiterals = singularParts.filter(
        (p) => !$d68f3f4c684426c6$var$nonLiteralParts.has(p.type)
      ).map(
        (p) => $d68f3f4c684426c6$var$escapeRegex(p.value)
      );
      let sortedLiterals = [
        .../* @__PURE__ */ new Set([
          ...singularLiterals,
          ...pluralLiterals
        ])
      ].sort(
        (a, b) => b.length - a.length
      );
      let literals = sortedLiterals.length === 0 ? new RegExp("[\\p{White_Space}]", "gu") : new RegExp(`${sortedLiterals.join("|")}|[\\p{White_Space}]`, "gu");
      let numerals = [
        ...new Intl.NumberFormat(intlOptions.locale, {
          useGrouping: false
        }).format(9876543210)
      ].reverse();
      let indexes = new Map(numerals.map(
        (d, i) => [
          d,
          i
        ]
      ));
      let numeral = new RegExp(`[${numerals.join("")}]`, "g");
      let index = (d) => String(indexes.get(d));
      return {
        minusSign,
        plusSign,
        decimal,
        group,
        literals,
        numeral,
        index
      };
    }
    function $d68f3f4c684426c6$var$replaceAll(str, find, replace2) {
      if (str.replaceAll)
        return str.replaceAll(find, replace2);
      return str.split(find).join(replace2);
    }
    function $d68f3f4c684426c6$var$escapeRegex(string) {
      return string.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&");
    }
  }
});

// ../../node_modules/@react-aria/i18n/dist/real-main.js
var require_real_main = __commonJS({
  "../../node_modules/@react-aria/i18n/dist/real-main.js"(exports, module) {
    var $87SwK$react = (init_preact(), __toCommonJS(preact_exports));
    var $87SwK$reactariassr = require_main2();
    var $87SwK$internationalizedstring = require_main4();
    var $87SwK$internationalizeddate = require_main5();
    var $87SwK$internationalizednumber = require_main6();
    function $parcel$export12(e, n, v, s) {
      Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
    }
    function $parcel$interopDefault12(a) {
      return a && a.__esModule ? a.default : a;
    }
    $parcel$export12(module.exports, "I18nProvider", () => $47fa5ec5ff482271$export$a54013f0d02a8f82);
    $parcel$export12(module.exports, "useLocale", () => $47fa5ec5ff482271$export$43bb16f9c6d9e3f7);
    $parcel$export12(module.exports, "useMessageFormatter", () => $227f31f0c647c5fc$exports.useMessageFormatter);
    $parcel$export12(module.exports, "useLocalizedStringFormatter", () => $fc53663969a3d00a$export$f12b703ca79dfbb1);
    $parcel$export12(module.exports, "useListFormatter", () => $cb6a3e7d490e97a4$export$a2f47a3d2973640);
    $parcel$export12(module.exports, "useDateFormatter", () => $b80c530ff2e20243$export$85fd5fdf27bacc79);
    $parcel$export12(module.exports, "useNumberFormatter", () => $fea93c5b7c90d9f4$export$b7a616150fdb9f44);
    $parcel$export12(module.exports, "useCollator", () => $27a5ce66022270ad$export$a16aca283550c30d);
    $parcel$export12(module.exports, "useFilter", () => $832d079b867c7223$export$3274cf84b703fff);
    var $4d65847630a056a8$var$RTL_SCRIPTS = /* @__PURE__ */ new Set([
      "Arab",
      "Syrc",
      "Samr",
      "Mand",
      "Thaa",
      "Mend",
      "Nkoo",
      "Adlm",
      "Rohg",
      "Hebr"
    ]);
    var $4d65847630a056a8$var$RTL_LANGS = /* @__PURE__ */ new Set([
      "ae",
      "ar",
      "arc",
      "bcc",
      "bqi",
      "ckb",
      "dv",
      "fa",
      "glk",
      "he",
      "ku",
      "mzn",
      "nqo",
      "pnb",
      "ps",
      "sd",
      "ug",
      "ur",
      "yi"
    ]);
    function $4d65847630a056a8$export$702d680b21cbd764(locale) {
      if (Intl.Locale) {
        let script = new Intl.Locale(locale).maximize().script;
        return $4d65847630a056a8$var$RTL_SCRIPTS.has(script);
      }
      let lang = locale.split("-")[0];
      return $4d65847630a056a8$var$RTL_LANGS.has(lang);
    }
    function $2919bdec75484e64$export$f09106e7c6677ec5() {
      let locale = typeof navigator !== "undefined" && (navigator.language || navigator.userLanguage) || "en-US";
      try {
        Intl.DateTimeFormat.supportedLocalesOf([
          locale
        ]);
      } catch (_err) {
        locale = "en-US";
      }
      return {
        locale,
        direction: $4d65847630a056a8$export$702d680b21cbd764(locale) ? "rtl" : "ltr"
      };
    }
    var $2919bdec75484e64$var$currentLocale = $2919bdec75484e64$export$f09106e7c6677ec5();
    var $2919bdec75484e64$var$listeners = /* @__PURE__ */ new Set();
    function $2919bdec75484e64$var$updateLocale() {
      $2919bdec75484e64$var$currentLocale = $2919bdec75484e64$export$f09106e7c6677ec5();
      for (let listener of $2919bdec75484e64$var$listeners)
        listener($2919bdec75484e64$var$currentLocale);
    }
    function $2919bdec75484e64$export$188ec29ebc2bdc3a() {
      let isSSR = $87SwK$reactariassr.useIsSSR();
      let [defaultLocale, setDefaultLocale] = $87SwK$react.useState($2919bdec75484e64$var$currentLocale);
      $87SwK$react.useEffect(() => {
        if ($2919bdec75484e64$var$listeners.size === 0)
          window.addEventListener("languagechange", $2919bdec75484e64$var$updateLocale);
        $2919bdec75484e64$var$listeners.add(setDefaultLocale);
        return () => {
          $2919bdec75484e64$var$listeners.delete(setDefaultLocale);
          if ($2919bdec75484e64$var$listeners.size === 0)
            window.removeEventListener("languagechange", $2919bdec75484e64$var$updateLocale);
        };
      }, []);
      if (isSSR)
        return {
          locale: "en-US",
          direction: "ltr"
        };
      return defaultLocale;
    }
    var $47fa5ec5ff482271$var$I18nContext = /* @__PURE__ */ $parcel$interopDefault12($87SwK$react).createContext(null);
    function $47fa5ec5ff482271$export$a54013f0d02a8f82(props) {
      let { locale, children } = props;
      let defaultLocale = $2919bdec75484e64$export$188ec29ebc2bdc3a();
      let value = locale ? {
        locale,
        direction: $4d65847630a056a8$export$702d680b21cbd764(locale) ? "rtl" : "ltr"
      } : defaultLocale;
      return /* @__PURE__ */ $parcel$interopDefault12($87SwK$react).createElement($47fa5ec5ff482271$var$I18nContext.Provider, {
        value
      }, children);
    }
    function $47fa5ec5ff482271$export$43bb16f9c6d9e3f7() {
      let defaultLocale = $2919bdec75484e64$export$188ec29ebc2bdc3a();
      let context = $87SwK$react.useContext($47fa5ec5ff482271$var$I18nContext);
      return context || defaultLocale;
    }
    var $227f31f0c647c5fc$exports = {};
    var $fc53663969a3d00a$var$cache = /* @__PURE__ */ new WeakMap();
    function $fc53663969a3d00a$var$getCachedDictionary(strings) {
      let dictionary = $fc53663969a3d00a$var$cache.get(strings);
      if (!dictionary) {
        dictionary = new $87SwK$internationalizedstring.LocalizedStringDictionary(strings);
        $fc53663969a3d00a$var$cache.set(strings, dictionary);
      }
      return dictionary;
    }
    function $fc53663969a3d00a$export$f12b703ca79dfbb1(strings) {
      let { locale } = $47fa5ec5ff482271$export$43bb16f9c6d9e3f7();
      let dictionary = $87SwK$react.useMemo(
        () => $fc53663969a3d00a$var$getCachedDictionary(strings),
        [
          strings
        ]
      );
      return $87SwK$react.useMemo(
        () => new $87SwK$internationalizedstring.LocalizedStringFormatter(locale, dictionary),
        [
          locale,
          dictionary
        ]
      );
    }
    function $cb6a3e7d490e97a4$export$a2f47a3d2973640(options = {}) {
      let { locale } = $47fa5ec5ff482271$export$43bb16f9c6d9e3f7();
      return $87SwK$react.useMemo(
        () => new Intl.ListFormat(locale, options),
        [
          locale,
          options
        ]
      );
    }
    function $b80c530ff2e20243$export$85fd5fdf27bacc79(options) {
      let lastOptions = $87SwK$react.useRef(null);
      if (options && lastOptions.current && $b80c530ff2e20243$var$isEqual(options, lastOptions.current))
        options = lastOptions.current;
      lastOptions.current = options;
      let { locale } = $47fa5ec5ff482271$export$43bb16f9c6d9e3f7();
      return $87SwK$react.useMemo(
        () => new $87SwK$internationalizeddate.DateFormatter(locale, options),
        [
          locale,
          options
        ]
      );
    }
    function $b80c530ff2e20243$var$isEqual(a, b) {
      if (a === b)
        return true;
      let aKeys = Object.keys(a);
      let bKeys = Object.keys(b);
      if (aKeys.length !== bKeys.length)
        return false;
      for (let key of aKeys) {
        if (b[key] !== a[key])
          return false;
      }
      return true;
    }
    function $fea93c5b7c90d9f4$export$b7a616150fdb9f44(options = {}) {
      let { locale } = $47fa5ec5ff482271$export$43bb16f9c6d9e3f7();
      return $87SwK$react.useMemo(
        () => new $87SwK$internationalizednumber.NumberFormatter(locale, options),
        [
          locale,
          options
        ]
      );
    }
    var $27a5ce66022270ad$var$cache = /* @__PURE__ */ new Map();
    function $27a5ce66022270ad$export$a16aca283550c30d(options) {
      let { locale } = $47fa5ec5ff482271$export$43bb16f9c6d9e3f7();
      let cacheKey = locale + (options ? Object.entries(options).sort(
        (a, b) => a[0] < b[0] ? -1 : 1
      ).join() : "");
      if ($27a5ce66022270ad$var$cache.has(cacheKey))
        return $27a5ce66022270ad$var$cache.get(cacheKey);
      let formatter = new Intl.Collator(locale, options);
      $27a5ce66022270ad$var$cache.set(cacheKey, formatter);
      return formatter;
    }
    function $832d079b867c7223$export$3274cf84b703fff(options) {
      let collator = $27a5ce66022270ad$export$a16aca283550c30d(__spreadValues({
        usage: "search"
      }, options));
      return {
        startsWith(string, substring) {
          if (substring.length === 0)
            return true;
          string = string.normalize("NFC");
          substring = substring.normalize("NFC");
          return collator.compare(string.slice(0, substring.length), substring) === 0;
        },
        endsWith(string, substring) {
          if (substring.length === 0)
            return true;
          string = string.normalize("NFC");
          substring = substring.normalize("NFC");
          return collator.compare(string.slice(-substring.length), substring) === 0;
        },
        contains(string, substring) {
          if (substring.length === 0)
            return true;
          string = string.normalize("NFC");
          substring = substring.normalize("NFC");
          let scan = 0;
          let sliceLen = substring.length;
          for (; scan + sliceLen <= string.length; scan++) {
            let slice = string.slice(scan, scan + sliceLen);
            if (collator.compare(substring, slice) === 0)
              return true;
          }
          return false;
        }
      };
    }
  }
});

// ../../node_modules/tslib/tslib.js
var require_tslib = __commonJS({
  "../../node_modules/tslib/tslib.js"(exports, module) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values3;
    var __read3;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function(factory) {
      var root3 = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root3, createExporter(exports2)));
        });
      } else if (typeof module === "object" && typeof module.exports === "object") {
        factory(createExporter(root3, createExporter(module.exports)));
      } else {
        factory(createExporter(root3));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root3) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _14 = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_14)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _14.label++;
                  return { value: op[1], done: false };
                case 5:
                  _14.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _14.ops.pop();
                  _14.trys.pop();
                  continue;
                default:
                  if (!(t = _14.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _14 = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _14.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _14.label < t[1]) {
                    _14.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _14.label < t[2]) {
                    _14.label = t[2];
                    _14.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _14.ops.pop();
                  _14.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _14);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values3 = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read3 = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read3(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values3 === "function" ? __values3(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values3);
      exporter("__read", __read3);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    });
  }
});

// ../../node_modules/@formatjs/icu-messageformat-parser/error.js
var require_error = __commonJS({
  "../../node_modules/@formatjs/icu-messageformat-parser/error.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ErrorKind = void 0;
    var ErrorKind;
    (function(ErrorKind2) {
      ErrorKind2[ErrorKind2["EXPECT_ARGUMENT_CLOSING_BRACE"] = 1] = "EXPECT_ARGUMENT_CLOSING_BRACE";
      ErrorKind2[ErrorKind2["EMPTY_ARGUMENT"] = 2] = "EMPTY_ARGUMENT";
      ErrorKind2[ErrorKind2["MALFORMED_ARGUMENT"] = 3] = "MALFORMED_ARGUMENT";
      ErrorKind2[ErrorKind2["EXPECT_ARGUMENT_TYPE"] = 4] = "EXPECT_ARGUMENT_TYPE";
      ErrorKind2[ErrorKind2["INVALID_ARGUMENT_TYPE"] = 5] = "INVALID_ARGUMENT_TYPE";
      ErrorKind2[ErrorKind2["EXPECT_ARGUMENT_STYLE"] = 6] = "EXPECT_ARGUMENT_STYLE";
      ErrorKind2[ErrorKind2["INVALID_NUMBER_SKELETON"] = 7] = "INVALID_NUMBER_SKELETON";
      ErrorKind2[ErrorKind2["INVALID_DATE_TIME_SKELETON"] = 8] = "INVALID_DATE_TIME_SKELETON";
      ErrorKind2[ErrorKind2["EXPECT_NUMBER_SKELETON"] = 9] = "EXPECT_NUMBER_SKELETON";
      ErrorKind2[ErrorKind2["EXPECT_DATE_TIME_SKELETON"] = 10] = "EXPECT_DATE_TIME_SKELETON";
      ErrorKind2[ErrorKind2["UNCLOSED_QUOTE_IN_ARGUMENT_STYLE"] = 11] = "UNCLOSED_QUOTE_IN_ARGUMENT_STYLE";
      ErrorKind2[ErrorKind2["EXPECT_SELECT_ARGUMENT_OPTIONS"] = 12] = "EXPECT_SELECT_ARGUMENT_OPTIONS";
      ErrorKind2[ErrorKind2["EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE"] = 13] = "EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE";
      ErrorKind2[ErrorKind2["INVALID_PLURAL_ARGUMENT_OFFSET_VALUE"] = 14] = "INVALID_PLURAL_ARGUMENT_OFFSET_VALUE";
      ErrorKind2[ErrorKind2["EXPECT_SELECT_ARGUMENT_SELECTOR"] = 15] = "EXPECT_SELECT_ARGUMENT_SELECTOR";
      ErrorKind2[ErrorKind2["EXPECT_PLURAL_ARGUMENT_SELECTOR"] = 16] = "EXPECT_PLURAL_ARGUMENT_SELECTOR";
      ErrorKind2[ErrorKind2["EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT"] = 17] = "EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT";
      ErrorKind2[ErrorKind2["EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT"] = 18] = "EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT";
      ErrorKind2[ErrorKind2["INVALID_PLURAL_ARGUMENT_SELECTOR"] = 19] = "INVALID_PLURAL_ARGUMENT_SELECTOR";
      ErrorKind2[ErrorKind2["DUPLICATE_PLURAL_ARGUMENT_SELECTOR"] = 20] = "DUPLICATE_PLURAL_ARGUMENT_SELECTOR";
      ErrorKind2[ErrorKind2["DUPLICATE_SELECT_ARGUMENT_SELECTOR"] = 21] = "DUPLICATE_SELECT_ARGUMENT_SELECTOR";
      ErrorKind2[ErrorKind2["MISSING_OTHER_CLAUSE"] = 22] = "MISSING_OTHER_CLAUSE";
      ErrorKind2[ErrorKind2["INVALID_TAG"] = 23] = "INVALID_TAG";
      ErrorKind2[ErrorKind2["INVALID_TAG_NAME"] = 25] = "INVALID_TAG_NAME";
      ErrorKind2[ErrorKind2["UNMATCHED_CLOSING_TAG"] = 26] = "UNMATCHED_CLOSING_TAG";
      ErrorKind2[ErrorKind2["UNCLOSED_TAG"] = 27] = "UNCLOSED_TAG";
    })(ErrorKind = exports.ErrorKind || (exports.ErrorKind = {}));
  }
});

// ../../node_modules/@formatjs/icu-messageformat-parser/types.js
var require_types = __commonJS({
  "../../node_modules/@formatjs/icu-messageformat-parser/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createNumberElement = exports.createLiteralElement = exports.isDateTimeSkeleton = exports.isNumberSkeleton = exports.isTagElement = exports.isPoundElement = exports.isPluralElement = exports.isSelectElement = exports.isTimeElement = exports.isDateElement = exports.isNumberElement = exports.isArgumentElement = exports.isLiteralElement = exports.SKELETON_TYPE = exports.TYPE = void 0;
    var TYPE;
    (function(TYPE2) {
      TYPE2[TYPE2["literal"] = 0] = "literal";
      TYPE2[TYPE2["argument"] = 1] = "argument";
      TYPE2[TYPE2["number"] = 2] = "number";
      TYPE2[TYPE2["date"] = 3] = "date";
      TYPE2[TYPE2["time"] = 4] = "time";
      TYPE2[TYPE2["select"] = 5] = "select";
      TYPE2[TYPE2["plural"] = 6] = "plural";
      TYPE2[TYPE2["pound"] = 7] = "pound";
      TYPE2[TYPE2["tag"] = 8] = "tag";
    })(TYPE = exports.TYPE || (exports.TYPE = {}));
    var SKELETON_TYPE;
    (function(SKELETON_TYPE2) {
      SKELETON_TYPE2[SKELETON_TYPE2["number"] = 0] = "number";
      SKELETON_TYPE2[SKELETON_TYPE2["dateTime"] = 1] = "dateTime";
    })(SKELETON_TYPE = exports.SKELETON_TYPE || (exports.SKELETON_TYPE = {}));
    function isLiteralElement(el) {
      return el.type === TYPE.literal;
    }
    exports.isLiteralElement = isLiteralElement;
    function isArgumentElement(el) {
      return el.type === TYPE.argument;
    }
    exports.isArgumentElement = isArgumentElement;
    function isNumberElement(el) {
      return el.type === TYPE.number;
    }
    exports.isNumberElement = isNumberElement;
    function isDateElement(el) {
      return el.type === TYPE.date;
    }
    exports.isDateElement = isDateElement;
    function isTimeElement(el) {
      return el.type === TYPE.time;
    }
    exports.isTimeElement = isTimeElement;
    function isSelectElement(el) {
      return el.type === TYPE.select;
    }
    exports.isSelectElement = isSelectElement;
    function isPluralElement(el) {
      return el.type === TYPE.plural;
    }
    exports.isPluralElement = isPluralElement;
    function isPoundElement(el) {
      return el.type === TYPE.pound;
    }
    exports.isPoundElement = isPoundElement;
    function isTagElement(el) {
      return el.type === TYPE.tag;
    }
    exports.isTagElement = isTagElement;
    function isNumberSkeleton(el) {
      return !!(el && typeof el === "object" && el.type === SKELETON_TYPE.number);
    }
    exports.isNumberSkeleton = isNumberSkeleton;
    function isDateTimeSkeleton(el) {
      return !!(el && typeof el === "object" && el.type === SKELETON_TYPE.dateTime);
    }
    exports.isDateTimeSkeleton = isDateTimeSkeleton;
    function createLiteralElement(value) {
      return {
        type: TYPE.literal,
        value
      };
    }
    exports.createLiteralElement = createLiteralElement;
    function createNumberElement(value, style) {
      return {
        type: TYPE.number,
        value,
        style
      };
    }
    exports.createNumberElement = createNumberElement;
  }
});

// ../../node_modules/@formatjs/icu-messageformat-parser/regex.generated.js
var require_regex_generated = __commonJS({
  "../../node_modules/@formatjs/icu-messageformat-parser/regex.generated.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WHITE_SPACE_REGEX = exports.SPACE_SEPARATOR_REGEX = void 0;
    exports.SPACE_SEPARATOR_REGEX = /[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/;
    exports.WHITE_SPACE_REGEX = /[\t-\r \x85\u200E\u200F\u2028\u2029]/;
  }
});

// ../../node_modules/@formatjs/icu-skeleton-parser/date-time.js
var require_date_time = __commonJS({
  "../../node_modules/@formatjs/icu-skeleton-parser/date-time.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseDateTimeSkeleton = void 0;
    var DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;
    function parseDateTimeSkeleton(skeleton) {
      var result = {};
      skeleton.replace(DATE_TIME_REGEX, function(match) {
        var len = match.length;
        switch (match[0]) {
          case "G":
            result.era = len === 4 ? "long" : len === 5 ? "narrow" : "short";
            break;
          case "y":
            result.year = len === 2 ? "2-digit" : "numeric";
            break;
          case "Y":
          case "u":
          case "U":
          case "r":
            throw new RangeError("`Y/u/U/r` (year) patterns are not supported, use `y` instead");
          case "q":
          case "Q":
            throw new RangeError("`q/Q` (quarter) patterns are not supported");
          case "M":
          case "L":
            result.month = ["numeric", "2-digit", "short", "long", "narrow"][len - 1];
            break;
          case "w":
          case "W":
            throw new RangeError("`w/W` (week) patterns are not supported");
          case "d":
            result.day = ["numeric", "2-digit"][len - 1];
            break;
          case "D":
          case "F":
          case "g":
            throw new RangeError("`D/F/g` (day) patterns are not supported, use `d` instead");
          case "E":
            result.weekday = len === 4 ? "short" : len === 5 ? "narrow" : "short";
            break;
          case "e":
            if (len < 4) {
              throw new RangeError("`e..eee` (weekday) patterns are not supported");
            }
            result.weekday = ["short", "long", "narrow", "short"][len - 4];
            break;
          case "c":
            if (len < 4) {
              throw new RangeError("`c..ccc` (weekday) patterns are not supported");
            }
            result.weekday = ["short", "long", "narrow", "short"][len - 4];
            break;
          case "a":
            result.hour12 = true;
            break;
          case "b":
          case "B":
            throw new RangeError("`b/B` (period) patterns are not supported, use `a` instead");
          case "h":
            result.hourCycle = "h12";
            result.hour = ["numeric", "2-digit"][len - 1];
            break;
          case "H":
            result.hourCycle = "h23";
            result.hour = ["numeric", "2-digit"][len - 1];
            break;
          case "K":
            result.hourCycle = "h11";
            result.hour = ["numeric", "2-digit"][len - 1];
            break;
          case "k":
            result.hourCycle = "h24";
            result.hour = ["numeric", "2-digit"][len - 1];
            break;
          case "j":
          case "J":
          case "C":
            throw new RangeError("`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead");
          case "m":
            result.minute = ["numeric", "2-digit"][len - 1];
            break;
          case "s":
            result.second = ["numeric", "2-digit"][len - 1];
            break;
          case "S":
          case "A":
            throw new RangeError("`S/A` (second) patterns are not supported, use `s` instead");
          case "z":
            result.timeZoneName = len < 4 ? "short" : "long";
            break;
          case "Z":
          case "O":
          case "v":
          case "V":
          case "X":
          case "x":
            throw new RangeError("`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead");
        }
        return "";
      });
      return result;
    }
    exports.parseDateTimeSkeleton = parseDateTimeSkeleton;
  }
});

// ../../node_modules/@formatjs/icu-skeleton-parser/regex.generated.js
var require_regex_generated2 = __commonJS({
  "../../node_modules/@formatjs/icu-skeleton-parser/regex.generated.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WHITE_SPACE_REGEX = void 0;
    exports.WHITE_SPACE_REGEX = /[\t-\r \x85\u200E\u200F\u2028\u2029]/i;
  }
});

// ../../node_modules/@formatjs/icu-skeleton-parser/number.js
var require_number = __commonJS({
  "../../node_modules/@formatjs/icu-skeleton-parser/number.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseNumberSkeleton = exports.parseNumberSkeletonFromString = void 0;
    var tslib_1 = require_tslib();
    var regex_generated_1 = require_regex_generated2();
    function parseNumberSkeletonFromString(skeleton) {
      if (skeleton.length === 0) {
        throw new Error("Number skeleton cannot be empty");
      }
      var stringTokens = skeleton.split(regex_generated_1.WHITE_SPACE_REGEX).filter(function(x) {
        return x.length > 0;
      });
      var tokens = [];
      for (var _i = 0, stringTokens_1 = stringTokens; _i < stringTokens_1.length; _i++) {
        var stringToken = stringTokens_1[_i];
        var stemAndOptions = stringToken.split("/");
        if (stemAndOptions.length === 0) {
          throw new Error("Invalid number skeleton");
        }
        var stem = stemAndOptions[0], options = stemAndOptions.slice(1);
        for (var _a3 = 0, options_1 = options; _a3 < options_1.length; _a3++) {
          var option = options_1[_a3];
          if (option.length === 0) {
            throw new Error("Invalid number skeleton");
          }
        }
        tokens.push({ stem, options });
      }
      return tokens;
    }
    exports.parseNumberSkeletonFromString = parseNumberSkeletonFromString;
    function icuUnitToEcma(unit) {
      return unit.replace(/^(.*?)-/, "");
    }
    var FRACTION_PRECISION_REGEX = /^\.(?:(0+)(\*)?|(#+)|(0+)(#+))$/g;
    var SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\+|#+)?[rs]?$/g;
    var INTEGER_WIDTH_REGEX = /(\*)(0+)|(#+)(0+)|(0+)/g;
    var CONCISE_INTEGER_WIDTH_REGEX = /^(0+)$/;
    function parseSignificantPrecision(str) {
      var result = {};
      if (str[str.length - 1] === "r") {
        result.roundingPriority = "morePrecision";
      } else if (str[str.length - 1] === "s") {
        result.roundingPriority = "lessPrecision";
      }
      str.replace(SIGNIFICANT_PRECISION_REGEX, function(_14, g1, g2) {
        if (typeof g2 !== "string") {
          result.minimumSignificantDigits = g1.length;
          result.maximumSignificantDigits = g1.length;
        } else if (g2 === "+") {
          result.minimumSignificantDigits = g1.length;
        } else if (g1[0] === "#") {
          result.maximumSignificantDigits = g1.length;
        } else {
          result.minimumSignificantDigits = g1.length;
          result.maximumSignificantDigits = g1.length + (typeof g2 === "string" ? g2.length : 0);
        }
        return "";
      });
      return result;
    }
    function parseSign(str) {
      switch (str) {
        case "sign-auto":
          return {
            signDisplay: "auto"
          };
        case "sign-accounting":
        case "()":
          return {
            currencySign: "accounting"
          };
        case "sign-always":
        case "+!":
          return {
            signDisplay: "always"
          };
        case "sign-accounting-always":
        case "()!":
          return {
            signDisplay: "always",
            currencySign: "accounting"
          };
        case "sign-except-zero":
        case "+?":
          return {
            signDisplay: "exceptZero"
          };
        case "sign-accounting-except-zero":
        case "()?":
          return {
            signDisplay: "exceptZero",
            currencySign: "accounting"
          };
        case "sign-never":
        case "+_":
          return {
            signDisplay: "never"
          };
      }
    }
    function parseConciseScientificAndEngineeringStem(stem) {
      var result;
      if (stem[0] === "E" && stem[1] === "E") {
        result = {
          notation: "engineering"
        };
        stem = stem.slice(2);
      } else if (stem[0] === "E") {
        result = {
          notation: "scientific"
        };
        stem = stem.slice(1);
      }
      if (result) {
        var signDisplay = stem.slice(0, 2);
        if (signDisplay === "+!") {
          result.signDisplay = "always";
          stem = stem.slice(2);
        } else if (signDisplay === "+?") {
          result.signDisplay = "exceptZero";
          stem = stem.slice(2);
        }
        if (!CONCISE_INTEGER_WIDTH_REGEX.test(stem)) {
          throw new Error("Malformed concise eng/scientific notation");
        }
        result.minimumIntegerDigits = stem.length;
      }
      return result;
    }
    function parseNotationOptions(opt) {
      var result = {};
      var signOpts = parseSign(opt);
      if (signOpts) {
        return signOpts;
      }
      return result;
    }
    function parseNumberSkeleton(tokens) {
      var result = {};
      for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
        var token = tokens_1[_i];
        switch (token.stem) {
          case "percent":
          case "%":
            result.style = "percent";
            continue;
          case "%x100":
            result.style = "percent";
            result.scale = 100;
            continue;
          case "currency":
            result.style = "currency";
            result.currency = token.options[0];
            continue;
          case "group-off":
          case ",_":
            result.useGrouping = false;
            continue;
          case "precision-integer":
          case ".":
            result.maximumFractionDigits = 0;
            continue;
          case "measure-unit":
          case "unit":
            result.style = "unit";
            result.unit = icuUnitToEcma(token.options[0]);
            continue;
          case "compact-short":
          case "K":
            result.notation = "compact";
            result.compactDisplay = "short";
            continue;
          case "compact-long":
          case "KK":
            result.notation = "compact";
            result.compactDisplay = "long";
            continue;
          case "scientific":
            result = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, result), { notation: "scientific" }), token.options.reduce(function(all, opt2) {
              return tslib_1.__assign(tslib_1.__assign({}, all), parseNotationOptions(opt2));
            }, {}));
            continue;
          case "engineering":
            result = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, result), { notation: "engineering" }), token.options.reduce(function(all, opt2) {
              return tslib_1.__assign(tslib_1.__assign({}, all), parseNotationOptions(opt2));
            }, {}));
            continue;
          case "notation-simple":
            result.notation = "standard";
            continue;
          case "unit-width-narrow":
            result.currencyDisplay = "narrowSymbol";
            result.unitDisplay = "narrow";
            continue;
          case "unit-width-short":
            result.currencyDisplay = "code";
            result.unitDisplay = "short";
            continue;
          case "unit-width-full-name":
            result.currencyDisplay = "name";
            result.unitDisplay = "long";
            continue;
          case "unit-width-iso-code":
            result.currencyDisplay = "symbol";
            continue;
          case "scale":
            result.scale = parseFloat(token.options[0]);
            continue;
          case "integer-width":
            if (token.options.length > 1) {
              throw new RangeError("integer-width stems only accept a single optional option");
            }
            token.options[0].replace(INTEGER_WIDTH_REGEX, function(_14, g1, g2, g3, g4, g5) {
              if (g1) {
                result.minimumIntegerDigits = g2.length;
              } else if (g3 && g4) {
                throw new Error("We currently do not support maximum integer digits");
              } else if (g5) {
                throw new Error("We currently do not support exact integer digits");
              }
              return "";
            });
            continue;
        }
        if (CONCISE_INTEGER_WIDTH_REGEX.test(token.stem)) {
          result.minimumIntegerDigits = token.stem.length;
          continue;
        }
        if (FRACTION_PRECISION_REGEX.test(token.stem)) {
          if (token.options.length > 1) {
            throw new RangeError("Fraction-precision stems only accept a single optional option");
          }
          token.stem.replace(FRACTION_PRECISION_REGEX, function(_14, g1, g2, g3, g4, g5) {
            if (g2 === "*") {
              result.minimumFractionDigits = g1.length;
            } else if (g3 && g3[0] === "#") {
              result.maximumFractionDigits = g3.length;
            } else if (g4 && g5) {
              result.minimumFractionDigits = g4.length;
              result.maximumFractionDigits = g4.length + g5.length;
            } else {
              result.minimumFractionDigits = g1.length;
              result.maximumFractionDigits = g1.length;
            }
            return "";
          });
          var opt = token.options[0];
          if (opt === "w") {
            result = tslib_1.__assign(tslib_1.__assign({}, result), { trailingZeroDisplay: "stripIfInteger" });
          } else if (opt) {
            result = tslib_1.__assign(tslib_1.__assign({}, result), parseSignificantPrecision(opt));
          }
          continue;
        }
        if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {
          result = tslib_1.__assign(tslib_1.__assign({}, result), parseSignificantPrecision(token.stem));
          continue;
        }
        var signOpts = parseSign(token.stem);
        if (signOpts) {
          result = tslib_1.__assign(tslib_1.__assign({}, result), signOpts);
        }
        var conciseScientificAndEngineeringOpts = parseConciseScientificAndEngineeringStem(token.stem);
        if (conciseScientificAndEngineeringOpts) {
          result = tslib_1.__assign(tslib_1.__assign({}, result), conciseScientificAndEngineeringOpts);
        }
      }
      return result;
    }
    exports.parseNumberSkeleton = parseNumberSkeleton;
  }
});

// ../../node_modules/@formatjs/icu-skeleton-parser/index.js
var require_icu_skeleton_parser = __commonJS({
  "../../node_modules/@formatjs/icu-skeleton-parser/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_date_time(), exports);
    tslib_1.__exportStar(require_number(), exports);
  }
});

// ../../node_modules/@formatjs/icu-messageformat-parser/time-data.generated.js
var require_time_data_generated = __commonJS({
  "../../node_modules/@formatjs/icu-messageformat-parser/time-data.generated.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.timeData = void 0;
    exports.timeData = {
      "AX": [
        "H"
      ],
      "BQ": [
        "H"
      ],
      "CP": [
        "H"
      ],
      "CZ": [
        "H"
      ],
      "DK": [
        "H"
      ],
      "FI": [
        "H"
      ],
      "ID": [
        "H"
      ],
      "IS": [
        "H"
      ],
      "ML": [
        "H"
      ],
      "NE": [
        "H"
      ],
      "RU": [
        "H"
      ],
      "SE": [
        "H"
      ],
      "SJ": [
        "H"
      ],
      "SK": [
        "H"
      ],
      "AS": [
        "h",
        "H"
      ],
      "BT": [
        "h",
        "H"
      ],
      "DJ": [
        "h",
        "H"
      ],
      "ER": [
        "h",
        "H"
      ],
      "GH": [
        "h",
        "H"
      ],
      "IN": [
        "h",
        "H"
      ],
      "LS": [
        "h",
        "H"
      ],
      "PG": [
        "h",
        "H"
      ],
      "PW": [
        "h",
        "H"
      ],
      "SO": [
        "h",
        "H"
      ],
      "TO": [
        "h",
        "H"
      ],
      "VU": [
        "h",
        "H"
      ],
      "WS": [
        "h",
        "H"
      ],
      "001": [
        "H",
        "h"
      ],
      "AL": [
        "h",
        "H",
        "hB"
      ],
      "TD": [
        "h",
        "H",
        "hB"
      ],
      "ca-ES": [
        "H",
        "h",
        "hB"
      ],
      "CF": [
        "H",
        "h",
        "hB"
      ],
      "CM": [
        "H",
        "h",
        "hB"
      ],
      "fr-CA": [
        "H",
        "h",
        "hB"
      ],
      "gl-ES": [
        "H",
        "h",
        "hB"
      ],
      "it-CH": [
        "H",
        "h",
        "hB"
      ],
      "it-IT": [
        "H",
        "h",
        "hB"
      ],
      "LU": [
        "H",
        "h",
        "hB"
      ],
      "NP": [
        "H",
        "h",
        "hB"
      ],
      "PF": [
        "H",
        "h",
        "hB"
      ],
      "SC": [
        "H",
        "h",
        "hB"
      ],
      "SM": [
        "H",
        "h",
        "hB"
      ],
      "SN": [
        "H",
        "h",
        "hB"
      ],
      "TF": [
        "H",
        "h",
        "hB"
      ],
      "VA": [
        "H",
        "h",
        "hB"
      ],
      "CY": [
        "h",
        "H",
        "hb",
        "hB"
      ],
      "GR": [
        "h",
        "H",
        "hb",
        "hB"
      ],
      "CO": [
        "h",
        "H",
        "hB",
        "hb"
      ],
      "DO": [
        "h",
        "H",
        "hB",
        "hb"
      ],
      "KP": [
        "h",
        "H",
        "hB",
        "hb"
      ],
      "KR": [
        "h",
        "H",
        "hB",
        "hb"
      ],
      "NA": [
        "h",
        "H",
        "hB",
        "hb"
      ],
      "PA": [
        "h",
        "H",
        "hB",
        "hb"
      ],
      "PR": [
        "h",
        "H",
        "hB",
        "hb"
      ],
      "VE": [
        "h",
        "H",
        "hB",
        "hb"
      ],
      "AC": [
        "H",
        "h",
        "hb",
        "hB"
      ],
      "AI": [
        "H",
        "h",
        "hb",
        "hB"
      ],
      "BW": [
        "H",
        "h",
        "hb",
        "hB"
      ],
      "BZ": [
        "H",
        "h",
        "hb",
        "hB"
      ],
      "CC": [
        "H",
        "h",
        "hb",
        "hB"
      ],
      "CK": [
        "H",
        "h",
        "hb",
        "hB"
      ],
      "CX": [
        "H",
        "h",
        "hb",
        "hB"
      ],
      "DG": [
        "H",
        "h",
        "hb",
        "hB"
      ],
      "FK": [
        "H",
        "h",
        "hb",
        "hB"
      ],
      "GB": [
        "H",
        "h",
        "hb",
        "hB"
      ],
      "GG": [
        "H",
        "h",
        "hb",
        "hB"
      ],
      "GI": [
        "H",
        "h",
        "hb",
        "hB"
      ],
      "IE": [
        "H",
        "h",
        "hb",
        "hB"
      ],
      "IM": [
        "H",
        "h",
        "hb",
        "hB"
      ],
      "IO": [
        "H",
        "h",
        "hb",
        "hB"
      ],
      "JE": [
        "H",
        "h",
        "hb",
        "hB"
      ],
      "LT": [
        "H",
        "h",
        "hb",
        "hB"
      ],
      "MK": [
        "H",
        "h",
        "hb",
        "hB"
      ],
      "MN": [
        "H",
        "h",
        "hb",
        "hB"
      ],
      "MS": [
        "H",
        "h",
        "hb",
        "hB"
      ],
      "NF": [
        "H",
        "h",
        "hb",
        "hB"
      ],
      "NG": [
        "H",
        "h",
        "hb",
        "hB"
      ],
      "NR": [
        "H",
        "h",
        "hb",
        "hB"
      ],
      "NU": [
        "H",
        "h",
        "hb",
        "hB"
      ],
      "PN": [
        "H",
        "h",
        "hb",
        "hB"
      ],
      "SH": [
        "H",
        "h",
        "hb",
        "hB"
      ],
      "SX": [
        "H",
        "h",
        "hb",
        "hB"
      ],
      "TA": [
        "H",
        "h",
        "hb",
        "hB"
      ],
      "ZA": [
        "H",
        "h",
        "hb",
        "hB"
      ],
      "af-ZA": [
        "H",
        "h",
        "hB",
        "hb"
      ],
      "AR": [
        "H",
        "h",
        "hB",
        "hb"
      ],
      "CL": [
        "H",
        "h",
        "hB",
        "hb"
      ],
      "CR": [
        "H",
        "h",
        "hB",
        "hb"
      ],
      "CU": [
        "H",
        "h",
        "hB",
        "hb"
      ],
      "EA": [
        "H",
        "h",
        "hB",
        "hb"
      ],
      "es-BO": [
        "H",
        "h",
        "hB",
        "hb"
      ],
      "es-BR": [
        "H",
        "h",
        "hB",
        "hb"
      ],
      "es-EC": [
        "H",
        "h",
        "hB",
        "hb"
      ],
      "es-ES": [
        "H",
        "h",
        "hB",
        "hb"
      ],
      "es-GQ": [
        "H",
        "h",
        "hB",
        "hb"
      ],
      "es-PE": [
        "H",
        "h",
        "hB",
        "hb"
      ],
      "GT": [
        "H",
        "h",
        "hB",
        "hb"
      ],
      "HN": [
        "H",
        "h",
        "hB",
        "hb"
      ],
      "IC": [
        "H",
        "h",
        "hB",
        "hb"
      ],
      "KG": [
        "H",
        "h",
        "hB",
        "hb"
      ],
      "KM": [
        "H",
        "h",
        "hB",
        "hb"
      ],
      "LK": [
        "H",
        "h",
        "hB",
        "hb"
      ],
      "MA": [
        "H",
        "h",
        "hB",
        "hb"
      ],
      "MX": [
        "H",
        "h",
        "hB",
        "hb"
      ],
      "NI": [
        "H",
        "h",
        "hB",
        "hb"
      ],
      "PY": [
        "H",
        "h",
        "hB",
        "hb"
      ],
      "SV": [
        "H",
        "h",
        "hB",
        "hb"
      ],
      "UY": [
        "H",
        "h",
        "hB",
        "hb"
      ],
      "JP": [
        "H",
        "h",
        "K"
      ],
      "AD": [
        "H",
        "hB"
      ],
      "AM": [
        "H",
        "hB"
      ],
      "AO": [
        "H",
        "hB"
      ],
      "AT": [
        "H",
        "hB"
      ],
      "AW": [
        "H",
        "hB"
      ],
      "BE": [
        "H",
        "hB"
      ],
      "BF": [
        "H",
        "hB"
      ],
      "BJ": [
        "H",
        "hB"
      ],
      "BL": [
        "H",
        "hB"
      ],
      "BR": [
        "H",
        "hB"
      ],
      "CG": [
        "H",
        "hB"
      ],
      "CI": [
        "H",
        "hB"
      ],
      "CV": [
        "H",
        "hB"
      ],
      "DE": [
        "H",
        "hB"
      ],
      "EE": [
        "H",
        "hB"
      ],
      "FR": [
        "H",
        "hB"
      ],
      "GA": [
        "H",
        "hB"
      ],
      "GF": [
        "H",
        "hB"
      ],
      "GN": [
        "H",
        "hB"
      ],
      "GP": [
        "H",
        "hB"
      ],
      "GW": [
        "H",
        "hB"
      ],
      "HR": [
        "H",
        "hB"
      ],
      "IL": [
        "H",
        "hB"
      ],
      "IT": [
        "H",
        "hB"
      ],
      "KZ": [
        "H",
        "hB"
      ],
      "MC": [
        "H",
        "hB"
      ],
      "MD": [
        "H",
        "hB"
      ],
      "MF": [
        "H",
        "hB"
      ],
      "MQ": [
        "H",
        "hB"
      ],
      "MZ": [
        "H",
        "hB"
      ],
      "NC": [
        "H",
        "hB"
      ],
      "NL": [
        "H",
        "hB"
      ],
      "PM": [
        "H",
        "hB"
      ],
      "PT": [
        "H",
        "hB"
      ],
      "RE": [
        "H",
        "hB"
      ],
      "RO": [
        "H",
        "hB"
      ],
      "SI": [
        "H",
        "hB"
      ],
      "SR": [
        "H",
        "hB"
      ],
      "ST": [
        "H",
        "hB"
      ],
      "TG": [
        "H",
        "hB"
      ],
      "TR": [
        "H",
        "hB"
      ],
      "WF": [
        "H",
        "hB"
      ],
      "YT": [
        "H",
        "hB"
      ],
      "BD": [
        "h",
        "hB",
        "H"
      ],
      "PK": [
        "h",
        "hB",
        "H"
      ],
      "AZ": [
        "H",
        "hB",
        "h"
      ],
      "BA": [
        "H",
        "hB",
        "h"
      ],
      "BG": [
        "H",
        "hB",
        "h"
      ],
      "CH": [
        "H",
        "hB",
        "h"
      ],
      "GE": [
        "H",
        "hB",
        "h"
      ],
      "LI": [
        "H",
        "hB",
        "h"
      ],
      "ME": [
        "H",
        "hB",
        "h"
      ],
      "RS": [
        "H",
        "hB",
        "h"
      ],
      "UA": [
        "H",
        "hB",
        "h"
      ],
      "UZ": [
        "H",
        "hB",
        "h"
      ],
      "XK": [
        "H",
        "hB",
        "h"
      ],
      "AG": [
        "h",
        "hb",
        "H",
        "hB"
      ],
      "AU": [
        "h",
        "hb",
        "H",
        "hB"
      ],
      "BB": [
        "h",
        "hb",
        "H",
        "hB"
      ],
      "BM": [
        "h",
        "hb",
        "H",
        "hB"
      ],
      "BS": [
        "h",
        "hb",
        "H",
        "hB"
      ],
      "CA": [
        "h",
        "hb",
        "H",
        "hB"
      ],
      "DM": [
        "h",
        "hb",
        "H",
        "hB"
      ],
      "en-001": [
        "h",
        "hb",
        "H",
        "hB"
      ],
      "FJ": [
        "h",
        "hb",
        "H",
        "hB"
      ],
      "FM": [
        "h",
        "hb",
        "H",
        "hB"
      ],
      "GD": [
        "h",
        "hb",
        "H",
        "hB"
      ],
      "GM": [
        "h",
        "hb",
        "H",
        "hB"
      ],
      "GU": [
        "h",
        "hb",
        "H",
        "hB"
      ],
      "GY": [
        "h",
        "hb",
        "H",
        "hB"
      ],
      "JM": [
        "h",
        "hb",
        "H",
        "hB"
      ],
      "KI": [
        "h",
        "hb",
        "H",
        "hB"
      ],
      "KN": [
        "h",
        "hb",
        "H",
        "hB"
      ],
      "KY": [
        "h",
        "hb",
        "H",
        "hB"
      ],
      "LC": [
        "h",
        "hb",
        "H",
        "hB"
      ],
      "LR": [
        "h",
        "hb",
        "H",
        "hB"
      ],
      "MH": [
        "h",
        "hb",
        "H",
        "hB"
      ],
      "MP": [
        "h",
        "hb",
        "H",
        "hB"
      ],
      "MW": [
        "h",
        "hb",
        "H",
        "hB"
      ],
      "NZ": [
        "h",
        "hb",
        "H",
        "hB"
      ],
      "SB": [
        "h",
        "hb",
        "H",
        "hB"
      ],
      "SG": [
        "h",
        "hb",
        "H",
        "hB"
      ],
      "SL": [
        "h",
        "hb",
        "H",
        "hB"
      ],
      "SS": [
        "h",
        "hb",
        "H",
        "hB"
      ],
      "SZ": [
        "h",
        "hb",
        "H",
        "hB"
      ],
      "TC": [
        "h",
        "hb",
        "H",
        "hB"
      ],
      "TT": [
        "h",
        "hb",
        "H",
        "hB"
      ],
      "UM": [
        "h",
        "hb",
        "H",
        "hB"
      ],
      "US": [
        "h",
        "hb",
        "H",
        "hB"
      ],
      "VC": [
        "h",
        "hb",
        "H",
        "hB"
      ],
      "VG": [
        "h",
        "hb",
        "H",
        "hB"
      ],
      "VI": [
        "h",
        "hb",
        "H",
        "hB"
      ],
      "ZM": [
        "h",
        "hb",
        "H",
        "hB"
      ],
      "BO": [
        "H",
        "hB",
        "h",
        "hb"
      ],
      "EC": [
        "H",
        "hB",
        "h",
        "hb"
      ],
      "ES": [
        "H",
        "hB",
        "h",
        "hb"
      ],
      "GQ": [
        "H",
        "hB",
        "h",
        "hb"
      ],
      "PE": [
        "H",
        "hB",
        "h",
        "hb"
      ],
      "AE": [
        "h",
        "hB",
        "hb",
        "H"
      ],
      "ar-001": [
        "h",
        "hB",
        "hb",
        "H"
      ],
      "BH": [
        "h",
        "hB",
        "hb",
        "H"
      ],
      "DZ": [
        "h",
        "hB",
        "hb",
        "H"
      ],
      "EG": [
        "h",
        "hB",
        "hb",
        "H"
      ],
      "EH": [
        "h",
        "hB",
        "hb",
        "H"
      ],
      "HK": [
        "h",
        "hB",
        "hb",
        "H"
      ],
      "IQ": [
        "h",
        "hB",
        "hb",
        "H"
      ],
      "JO": [
        "h",
        "hB",
        "hb",
        "H"
      ],
      "KW": [
        "h",
        "hB",
        "hb",
        "H"
      ],
      "LB": [
        "h",
        "hB",
        "hb",
        "H"
      ],
      "LY": [
        "h",
        "hB",
        "hb",
        "H"
      ],
      "MO": [
        "h",
        "hB",
        "hb",
        "H"
      ],
      "MR": [
        "h",
        "hB",
        "hb",
        "H"
      ],
      "OM": [
        "h",
        "hB",
        "hb",
        "H"
      ],
      "PH": [
        "h",
        "hB",
        "hb",
        "H"
      ],
      "PS": [
        "h",
        "hB",
        "hb",
        "H"
      ],
      "QA": [
        "h",
        "hB",
        "hb",
        "H"
      ],
      "SA": [
        "h",
        "hB",
        "hb",
        "H"
      ],
      "SD": [
        "h",
        "hB",
        "hb",
        "H"
      ],
      "SY": [
        "h",
        "hB",
        "hb",
        "H"
      ],
      "TN": [
        "h",
        "hB",
        "hb",
        "H"
      ],
      "YE": [
        "h",
        "hB",
        "hb",
        "H"
      ],
      "AF": [
        "H",
        "hb",
        "hB",
        "h"
      ],
      "LA": [
        "H",
        "hb",
        "hB",
        "h"
      ],
      "CN": [
        "H",
        "hB",
        "hb",
        "h"
      ],
      "LV": [
        "H",
        "hB",
        "hb",
        "h"
      ],
      "TL": [
        "H",
        "hB",
        "hb",
        "h"
      ],
      "zu-ZA": [
        "H",
        "hB",
        "hb",
        "h"
      ],
      "CD": [
        "hB",
        "H"
      ],
      "IR": [
        "hB",
        "H"
      ],
      "hi-IN": [
        "hB",
        "h",
        "H"
      ],
      "kn-IN": [
        "hB",
        "h",
        "H"
      ],
      "ml-IN": [
        "hB",
        "h",
        "H"
      ],
      "te-IN": [
        "hB",
        "h",
        "H"
      ],
      "KH": [
        "hB",
        "h",
        "H",
        "hb"
      ],
      "ta-IN": [
        "hB",
        "h",
        "hb",
        "H"
      ],
      "BN": [
        "hb",
        "hB",
        "h",
        "H"
      ],
      "MY": [
        "hb",
        "hB",
        "h",
        "H"
      ],
      "ET": [
        "hB",
        "hb",
        "h",
        "H"
      ],
      "gu-IN": [
        "hB",
        "hb",
        "h",
        "H"
      ],
      "mr-IN": [
        "hB",
        "hb",
        "h",
        "H"
      ],
      "pa-IN": [
        "hB",
        "hb",
        "h",
        "H"
      ],
      "TW": [
        "hB",
        "hb",
        "h",
        "H"
      ],
      "KE": [
        "hB",
        "hb",
        "H",
        "h"
      ],
      "MM": [
        "hB",
        "hb",
        "H",
        "h"
      ],
      "TZ": [
        "hB",
        "hb",
        "H",
        "h"
      ],
      "UG": [
        "hB",
        "hb",
        "H",
        "h"
      ]
    };
  }
});

// ../../node_modules/@formatjs/icu-messageformat-parser/date-time-pattern-generator.js
var require_date_time_pattern_generator = __commonJS({
  "../../node_modules/@formatjs/icu-messageformat-parser/date-time-pattern-generator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getBestPattern = void 0;
    var time_data_generated_1 = require_time_data_generated();
    function getBestPattern(skeleton, locale) {
      var skeletonCopy = "";
      for (var patternPos = 0; patternPos < skeleton.length; patternPos++) {
        var patternChar = skeleton.charAt(patternPos);
        if (patternChar === "j") {
          var extraLength = 0;
          while (patternPos + 1 < skeleton.length && skeleton.charAt(patternPos + 1) === patternChar) {
            extraLength++;
            patternPos++;
          }
          var hourLen = 1 + (extraLength & 1);
          var dayPeriodLen = extraLength < 2 ? 1 : 3 + (extraLength >> 1);
          var dayPeriodChar = "a";
          var hourChar = getDefaultHourSymbolFromLocale(locale);
          if (hourChar == "H" || hourChar == "k") {
            dayPeriodLen = 0;
          }
          while (dayPeriodLen-- > 0) {
            skeletonCopy += dayPeriodChar;
          }
          while (hourLen-- > 0) {
            skeletonCopy = hourChar + skeletonCopy;
          }
        } else if (patternChar === "J") {
          skeletonCopy += "H";
        } else {
          skeletonCopy += patternChar;
        }
      }
      return skeletonCopy;
    }
    exports.getBestPattern = getBestPattern;
    function getDefaultHourSymbolFromLocale(locale) {
      var hourCycle = locale.hourCycle;
      if (hourCycle === void 0 && locale.hourCycles && locale.hourCycles.length) {
        hourCycle = locale.hourCycles[0];
      }
      if (hourCycle) {
        switch (hourCycle) {
          case "h24":
            return "k";
          case "h23":
            return "H";
          case "h12":
            return "h";
          case "h11":
            return "K";
          default:
            throw new Error("Invalid hourCycle");
        }
      }
      var languageTag = locale.language;
      var regionTag;
      if (languageTag !== "root") {
        regionTag = locale.maximize().region;
      }
      var hourCycles = time_data_generated_1.timeData[regionTag || ""] || time_data_generated_1.timeData[languageTag || ""] || time_data_generated_1.timeData["".concat(languageTag, "-001")] || time_data_generated_1.timeData["001"];
      return hourCycles[0];
    }
  }
});

// ../../node_modules/@formatjs/icu-messageformat-parser/parser.js
var require_parser = __commonJS({
  "../../node_modules/@formatjs/icu-messageformat-parser/parser.js"(exports) {
    "use strict";
    var _a3;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Parser = void 0;
    var tslib_1 = require_tslib();
    var error_1 = require_error();
    var types_1 = require_types();
    var regex_generated_1 = require_regex_generated();
    var icu_skeleton_parser_1 = require_icu_skeleton_parser();
    var date_time_pattern_generator_1 = require_date_time_pattern_generator();
    var SPACE_SEPARATOR_START_REGEX = new RegExp("^".concat(regex_generated_1.SPACE_SEPARATOR_REGEX.source, "*"));
    var SPACE_SEPARATOR_END_REGEX = new RegExp("".concat(regex_generated_1.SPACE_SEPARATOR_REGEX.source, "*$"));
    function createLocation(start, end) {
      return { start, end };
    }
    var hasNativeStartsWith = !!String.prototype.startsWith;
    var hasNativeFromCodePoint = !!String.fromCodePoint;
    var hasNativeFromEntries = !!Object.fromEntries;
    var hasNativeCodePointAt = !!String.prototype.codePointAt;
    var hasTrimStart = !!String.prototype.trimStart;
    var hasTrimEnd = !!String.prototype.trimEnd;
    var hasNativeIsSafeInteger = !!Number.isSafeInteger;
    var isSafeInteger = hasNativeIsSafeInteger ? Number.isSafeInteger : function(n) {
      return typeof n === "number" && isFinite(n) && Math.floor(n) === n && Math.abs(n) <= 9007199254740991;
    };
    var REGEX_SUPPORTS_U_AND_Y = true;
    try {
      re = RE("([^\\p{White_Space}\\p{Pattern_Syntax}]*)", "yu");
      REGEX_SUPPORTS_U_AND_Y = ((_a3 = re.exec("a")) === null || _a3 === void 0 ? void 0 : _a3[0]) === "a";
    } catch (_14) {
      REGEX_SUPPORTS_U_AND_Y = false;
    }
    var re;
    var startsWith = hasNativeStartsWith ? function startsWith2(s, search, position) {
      return s.startsWith(search, position);
    } : function startsWith2(s, search, position) {
      return s.slice(position, position + search.length) === search;
    };
    var fromCodePoint = hasNativeFromCodePoint ? String.fromCodePoint : function fromCodePoint2() {
      var codePoints = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        codePoints[_i] = arguments[_i];
      }
      var elements = "";
      var length = codePoints.length;
      var i = 0;
      var code;
      while (length > i) {
        code = codePoints[i++];
        if (code > 1114111)
          throw RangeError(code + " is not a valid code point");
        elements += code < 65536 ? String.fromCharCode(code) : String.fromCharCode(((code -= 65536) >> 10) + 55296, code % 1024 + 56320);
      }
      return elements;
    };
    var fromEntries = hasNativeFromEntries ? Object.fromEntries : function fromEntries2(entries) {
      var obj = {};
      for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
        var _a4 = entries_1[_i], k = _a4[0], v = _a4[1];
        obj[k] = v;
      }
      return obj;
    };
    var codePointAt = hasNativeCodePointAt ? function codePointAt2(s, index) {
      return s.codePointAt(index);
    } : function codePointAt2(s, index) {
      var size = s.length;
      if (index < 0 || index >= size) {
        return void 0;
      }
      var first = s.charCodeAt(index);
      var second;
      return first < 55296 || first > 56319 || index + 1 === size || (second = s.charCodeAt(index + 1)) < 56320 || second > 57343 ? first : (first - 55296 << 10) + (second - 56320) + 65536;
    };
    var trimStart = hasTrimStart ? function trimStart2(s) {
      return s.trimStart();
    } : function trimStart2(s) {
      return s.replace(SPACE_SEPARATOR_START_REGEX, "");
    };
    var trimEnd = hasTrimEnd ? function trimEnd2(s) {
      return s.trimEnd();
    } : function trimEnd2(s) {
      return s.replace(SPACE_SEPARATOR_END_REGEX, "");
    };
    function RE(s, flag) {
      return new RegExp(s, flag);
    }
    var matchIdentifierAtIndex;
    if (REGEX_SUPPORTS_U_AND_Y) {
      IDENTIFIER_PREFIX_RE_1 = RE("([^\\p{White_Space}\\p{Pattern_Syntax}]*)", "yu");
      matchIdentifierAtIndex = function matchIdentifierAtIndex2(s, index) {
        var _a4;
        IDENTIFIER_PREFIX_RE_1.lastIndex = index;
        var match = IDENTIFIER_PREFIX_RE_1.exec(s);
        return (_a4 = match[1]) !== null && _a4 !== void 0 ? _a4 : "";
      };
    } else {
      matchIdentifierAtIndex = function matchIdentifierAtIndex2(s, index) {
        var match = [];
        while (true) {
          var c = codePointAt(s, index);
          if (c === void 0 || _isWhiteSpace(c) || _isPatternSyntax(c)) {
            break;
          }
          match.push(c);
          index += c >= 65536 ? 2 : 1;
        }
        return fromCodePoint.apply(void 0, match);
      };
    }
    var IDENTIFIER_PREFIX_RE_1;
    var Parser = function() {
      function Parser2(message, options) {
        if (options === void 0) {
          options = {};
        }
        this.message = message;
        this.position = { offset: 0, line: 1, column: 1 };
        this.ignoreTag = !!options.ignoreTag;
        this.locale = options.locale;
        this.requiresOtherClause = !!options.requiresOtherClause;
        this.shouldParseSkeletons = !!options.shouldParseSkeletons;
      }
      Parser2.prototype.parse = function() {
        if (this.offset() !== 0) {
          throw Error("parser can only be used once");
        }
        return this.parseMessage(0, "", false);
      };
      Parser2.prototype.parseMessage = function(nestingLevel, parentArgType, expectingCloseTag) {
        var elements = [];
        while (!this.isEOF()) {
          var char = this.char();
          if (char === 123) {
            var result = this.parseArgument(nestingLevel, expectingCloseTag);
            if (result.err) {
              return result;
            }
            elements.push(result.val);
          } else if (char === 125 && nestingLevel > 0) {
            break;
          } else if (char === 35 && (parentArgType === "plural" || parentArgType === "selectordinal")) {
            var position = this.clonePosition();
            this.bump();
            elements.push({
              type: types_1.TYPE.pound,
              location: createLocation(position, this.clonePosition())
            });
          } else if (char === 60 && !this.ignoreTag && this.peek() === 47) {
            if (expectingCloseTag) {
              break;
            } else {
              return this.error(error_1.ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(this.clonePosition(), this.clonePosition()));
            }
          } else if (char === 60 && !this.ignoreTag && _isAlpha(this.peek() || 0)) {
            var result = this.parseTag(nestingLevel, parentArgType);
            if (result.err) {
              return result;
            }
            elements.push(result.val);
          } else {
            var result = this.parseLiteral(nestingLevel, parentArgType);
            if (result.err) {
              return result;
            }
            elements.push(result.val);
          }
        }
        return { val: elements, err: null };
      };
      Parser2.prototype.parseTag = function(nestingLevel, parentArgType) {
        var startPosition = this.clonePosition();
        this.bump();
        var tagName = this.parseTagName();
        this.bumpSpace();
        if (this.bumpIf("/>")) {
          return {
            val: {
              type: types_1.TYPE.literal,
              value: "<".concat(tagName, "/>"),
              location: createLocation(startPosition, this.clonePosition())
            },
            err: null
          };
        } else if (this.bumpIf(">")) {
          var childrenResult = this.parseMessage(nestingLevel + 1, parentArgType, true);
          if (childrenResult.err) {
            return childrenResult;
          }
          var children = childrenResult.val;
          var endTagStartPosition = this.clonePosition();
          if (this.bumpIf("</")) {
            if (this.isEOF() || !_isAlpha(this.char())) {
              return this.error(error_1.ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));
            }
            var closingTagNameStartPosition = this.clonePosition();
            var closingTagName = this.parseTagName();
            if (tagName !== closingTagName) {
              return this.error(error_1.ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(closingTagNameStartPosition, this.clonePosition()));
            }
            this.bumpSpace();
            if (!this.bumpIf(">")) {
              return this.error(error_1.ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));
            }
            return {
              val: {
                type: types_1.TYPE.tag,
                value: tagName,
                children,
                location: createLocation(startPosition, this.clonePosition())
              },
              err: null
            };
          } else {
            return this.error(error_1.ErrorKind.UNCLOSED_TAG, createLocation(startPosition, this.clonePosition()));
          }
        } else {
          return this.error(error_1.ErrorKind.INVALID_TAG, createLocation(startPosition, this.clonePosition()));
        }
      };
      Parser2.prototype.parseTagName = function() {
        var startOffset = this.offset();
        this.bump();
        while (!this.isEOF() && _isPotentialElementNameChar(this.char())) {
          this.bump();
        }
        return this.message.slice(startOffset, this.offset());
      };
      Parser2.prototype.parseLiteral = function(nestingLevel, parentArgType) {
        var start = this.clonePosition();
        var value = "";
        while (true) {
          var parseQuoteResult = this.tryParseQuote(parentArgType);
          if (parseQuoteResult) {
            value += parseQuoteResult;
            continue;
          }
          var parseUnquotedResult = this.tryParseUnquoted(nestingLevel, parentArgType);
          if (parseUnquotedResult) {
            value += parseUnquotedResult;
            continue;
          }
          var parseLeftAngleResult = this.tryParseLeftAngleBracket();
          if (parseLeftAngleResult) {
            value += parseLeftAngleResult;
            continue;
          }
          break;
        }
        var location = createLocation(start, this.clonePosition());
        return {
          val: { type: types_1.TYPE.literal, value, location },
          err: null
        };
      };
      Parser2.prototype.tryParseLeftAngleBracket = function() {
        if (!this.isEOF() && this.char() === 60 && (this.ignoreTag || !_isAlphaOrSlash(this.peek() || 0))) {
          this.bump();
          return "<";
        }
        return null;
      };
      Parser2.prototype.tryParseQuote = function(parentArgType) {
        if (this.isEOF() || this.char() !== 39) {
          return null;
        }
        switch (this.peek()) {
          case 39:
            this.bump();
            this.bump();
            return "'";
          case 123:
          case 60:
          case 62:
          case 125:
            break;
          case 35:
            if (parentArgType === "plural" || parentArgType === "selectordinal") {
              break;
            }
            return null;
          default:
            return null;
        }
        this.bump();
        var codePoints = [this.char()];
        this.bump();
        while (!this.isEOF()) {
          var ch = this.char();
          if (ch === 39) {
            if (this.peek() === 39) {
              codePoints.push(39);
              this.bump();
            } else {
              this.bump();
              break;
            }
          } else {
            codePoints.push(ch);
          }
          this.bump();
        }
        return fromCodePoint.apply(void 0, codePoints);
      };
      Parser2.prototype.tryParseUnquoted = function(nestingLevel, parentArgType) {
        if (this.isEOF()) {
          return null;
        }
        var ch = this.char();
        if (ch === 60 || ch === 123 || ch === 35 && (parentArgType === "plural" || parentArgType === "selectordinal") || ch === 125 && nestingLevel > 0) {
          return null;
        } else {
          this.bump();
          return fromCodePoint(ch);
        }
      };
      Parser2.prototype.parseArgument = function(nestingLevel, expectingCloseTag) {
        var openingBracePosition = this.clonePosition();
        this.bump();
        this.bumpSpace();
        if (this.isEOF()) {
          return this.error(error_1.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
        }
        if (this.char() === 125) {
          this.bump();
          return this.error(error_1.ErrorKind.EMPTY_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
        }
        var value = this.parseIdentifierIfPossible().value;
        if (!value) {
          return this.error(error_1.ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
        }
        this.bumpSpace();
        if (this.isEOF()) {
          return this.error(error_1.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
        }
        switch (this.char()) {
          case 125: {
            this.bump();
            return {
              val: {
                type: types_1.TYPE.argument,
                value,
                location: createLocation(openingBracePosition, this.clonePosition())
              },
              err: null
            };
          }
          case 44: {
            this.bump();
            this.bumpSpace();
            if (this.isEOF()) {
              return this.error(error_1.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
            }
            return this.parseArgumentOptions(nestingLevel, expectingCloseTag, value, openingBracePosition);
          }
          default:
            return this.error(error_1.ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
        }
      };
      Parser2.prototype.parseIdentifierIfPossible = function() {
        var startingPosition = this.clonePosition();
        var startOffset = this.offset();
        var value = matchIdentifierAtIndex(this.message, startOffset);
        var endOffset = startOffset + value.length;
        this.bumpTo(endOffset);
        var endPosition = this.clonePosition();
        var location = createLocation(startingPosition, endPosition);
        return { value, location };
      };
      Parser2.prototype.parseArgumentOptions = function(nestingLevel, expectingCloseTag, value, openingBracePosition) {
        var _a4;
        var typeStartPosition = this.clonePosition();
        var argType = this.parseIdentifierIfPossible().value;
        var typeEndPosition = this.clonePosition();
        switch (argType) {
          case "":
            return this.error(error_1.ErrorKind.EXPECT_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));
          case "number":
          case "date":
          case "time": {
            this.bumpSpace();
            var styleAndLocation = null;
            if (this.bumpIf(",")) {
              this.bumpSpace();
              var styleStartPosition = this.clonePosition();
              var result = this.parseSimpleArgStyleIfPossible();
              if (result.err) {
                return result;
              }
              var style = trimEnd(result.val);
              if (style.length === 0) {
                return this.error(error_1.ErrorKind.EXPECT_ARGUMENT_STYLE, createLocation(this.clonePosition(), this.clonePosition()));
              }
              var styleLocation = createLocation(styleStartPosition, this.clonePosition());
              styleAndLocation = { style, styleLocation };
            }
            var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
            if (argCloseResult.err) {
              return argCloseResult;
            }
            var location_1 = createLocation(openingBracePosition, this.clonePosition());
            if (styleAndLocation && startsWith(styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style, "::", 0)) {
              var skeleton = trimStart(styleAndLocation.style.slice(2));
              if (argType === "number") {
                var result = this.parseNumberSkeletonFromString(skeleton, styleAndLocation.styleLocation);
                if (result.err) {
                  return result;
                }
                return {
                  val: { type: types_1.TYPE.number, value, location: location_1, style: result.val },
                  err: null
                };
              } else {
                if (skeleton.length === 0) {
                  return this.error(error_1.ErrorKind.EXPECT_DATE_TIME_SKELETON, location_1);
                }
                var dateTimePattern = skeleton;
                if (this.locale) {
                  dateTimePattern = (0, date_time_pattern_generator_1.getBestPattern)(skeleton, this.locale);
                }
                var style = {
                  type: types_1.SKELETON_TYPE.dateTime,
                  pattern: dateTimePattern,
                  location: styleAndLocation.styleLocation,
                  parsedOptions: this.shouldParseSkeletons ? (0, icu_skeleton_parser_1.parseDateTimeSkeleton)(dateTimePattern) : {}
                };
                var type = argType === "date" ? types_1.TYPE.date : types_1.TYPE.time;
                return {
                  val: { type, value, location: location_1, style },
                  err: null
                };
              }
            }
            return {
              val: {
                type: argType === "number" ? types_1.TYPE.number : argType === "date" ? types_1.TYPE.date : types_1.TYPE.time,
                value,
                location: location_1,
                style: (_a4 = styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style) !== null && _a4 !== void 0 ? _a4 : null
              },
              err: null
            };
          }
          case "plural":
          case "selectordinal":
          case "select": {
            var typeEndPosition_1 = this.clonePosition();
            this.bumpSpace();
            if (!this.bumpIf(",")) {
              return this.error(error_1.ErrorKind.EXPECT_SELECT_ARGUMENT_OPTIONS, createLocation(typeEndPosition_1, tslib_1.__assign({}, typeEndPosition_1)));
            }
            this.bumpSpace();
            var identifierAndLocation = this.parseIdentifierIfPossible();
            var pluralOffset = 0;
            if (argType !== "select" && identifierAndLocation.value === "offset") {
              if (!this.bumpIf(":")) {
                return this.error(error_1.ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, createLocation(this.clonePosition(), this.clonePosition()));
              }
              this.bumpSpace();
              var result = this.tryParseDecimalInteger(error_1.ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, error_1.ErrorKind.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE);
              if (result.err) {
                return result;
              }
              this.bumpSpace();
              identifierAndLocation = this.parseIdentifierIfPossible();
              pluralOffset = result.val;
            }
            var optionsResult = this.tryParsePluralOrSelectOptions(nestingLevel, argType, expectingCloseTag, identifierAndLocation);
            if (optionsResult.err) {
              return optionsResult;
            }
            var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
            if (argCloseResult.err) {
              return argCloseResult;
            }
            var location_2 = createLocation(openingBracePosition, this.clonePosition());
            if (argType === "select") {
              return {
                val: {
                  type: types_1.TYPE.select,
                  value,
                  options: fromEntries(optionsResult.val),
                  location: location_2
                },
                err: null
              };
            } else {
              return {
                val: {
                  type: types_1.TYPE.plural,
                  value,
                  options: fromEntries(optionsResult.val),
                  offset: pluralOffset,
                  pluralType: argType === "plural" ? "cardinal" : "ordinal",
                  location: location_2
                },
                err: null
              };
            }
          }
          default:
            return this.error(error_1.ErrorKind.INVALID_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));
        }
      };
      Parser2.prototype.tryParseArgumentClose = function(openingBracePosition) {
        if (this.isEOF() || this.char() !== 125) {
          return this.error(error_1.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
        }
        this.bump();
        return { val: true, err: null };
      };
      Parser2.prototype.parseSimpleArgStyleIfPossible = function() {
        var nestedBraces = 0;
        var startPosition = this.clonePosition();
        while (!this.isEOF()) {
          var ch = this.char();
          switch (ch) {
            case 39: {
              this.bump();
              var apostrophePosition = this.clonePosition();
              if (!this.bumpUntil("'")) {
                return this.error(error_1.ErrorKind.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE, createLocation(apostrophePosition, this.clonePosition()));
              }
              this.bump();
              break;
            }
            case 123: {
              nestedBraces += 1;
              this.bump();
              break;
            }
            case 125: {
              if (nestedBraces > 0) {
                nestedBraces -= 1;
              } else {
                return {
                  val: this.message.slice(startPosition.offset, this.offset()),
                  err: null
                };
              }
              break;
            }
            default:
              this.bump();
              break;
          }
        }
        return {
          val: this.message.slice(startPosition.offset, this.offset()),
          err: null
        };
      };
      Parser2.prototype.parseNumberSkeletonFromString = function(skeleton, location) {
        var tokens = [];
        try {
          tokens = (0, icu_skeleton_parser_1.parseNumberSkeletonFromString)(skeleton);
        } catch (e) {
          return this.error(error_1.ErrorKind.INVALID_NUMBER_SKELETON, location);
        }
        return {
          val: {
            type: types_1.SKELETON_TYPE.number,
            tokens,
            location,
            parsedOptions: this.shouldParseSkeletons ? (0, icu_skeleton_parser_1.parseNumberSkeleton)(tokens) : {}
          },
          err: null
        };
      };
      Parser2.prototype.tryParsePluralOrSelectOptions = function(nestingLevel, parentArgType, expectCloseTag, parsedFirstIdentifier) {
        var _a4;
        var hasOtherClause = false;
        var options = [];
        var parsedSelectors = /* @__PURE__ */ new Set();
        var selector = parsedFirstIdentifier.value, selectorLocation = parsedFirstIdentifier.location;
        while (true) {
          if (selector.length === 0) {
            var startPosition = this.clonePosition();
            if (parentArgType !== "select" && this.bumpIf("=")) {
              var result = this.tryParseDecimalInteger(error_1.ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, error_1.ErrorKind.INVALID_PLURAL_ARGUMENT_SELECTOR);
              if (result.err) {
                return result;
              }
              selectorLocation = createLocation(startPosition, this.clonePosition());
              selector = this.message.slice(startPosition.offset, this.offset());
            } else {
              break;
            }
          }
          if (parsedSelectors.has(selector)) {
            return this.error(parentArgType === "select" ? error_1.ErrorKind.DUPLICATE_SELECT_ARGUMENT_SELECTOR : error_1.ErrorKind.DUPLICATE_PLURAL_ARGUMENT_SELECTOR, selectorLocation);
          }
          if (selector === "other") {
            hasOtherClause = true;
          }
          this.bumpSpace();
          var openingBracePosition = this.clonePosition();
          if (!this.bumpIf("{")) {
            return this.error(parentArgType === "select" ? error_1.ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT : error_1.ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT, createLocation(this.clonePosition(), this.clonePosition()));
          }
          var fragmentResult = this.parseMessage(nestingLevel + 1, parentArgType, expectCloseTag);
          if (fragmentResult.err) {
            return fragmentResult;
          }
          var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
          if (argCloseResult.err) {
            return argCloseResult;
          }
          options.push([
            selector,
            {
              value: fragmentResult.val,
              location: createLocation(openingBracePosition, this.clonePosition())
            }
          ]);
          parsedSelectors.add(selector);
          this.bumpSpace();
          _a4 = this.parseIdentifierIfPossible(), selector = _a4.value, selectorLocation = _a4.location;
        }
        if (options.length === 0) {
          return this.error(parentArgType === "select" ? error_1.ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR : error_1.ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, createLocation(this.clonePosition(), this.clonePosition()));
        }
        if (this.requiresOtherClause && !hasOtherClause) {
          return this.error(error_1.ErrorKind.MISSING_OTHER_CLAUSE, createLocation(this.clonePosition(), this.clonePosition()));
        }
        return { val: options, err: null };
      };
      Parser2.prototype.tryParseDecimalInteger = function(expectNumberError, invalidNumberError) {
        var sign = 1;
        var startingPosition = this.clonePosition();
        if (this.bumpIf("+")) {
        } else if (this.bumpIf("-")) {
          sign = -1;
        }
        var hasDigits = false;
        var decimal = 0;
        while (!this.isEOF()) {
          var ch = this.char();
          if (ch >= 48 && ch <= 57) {
            hasDigits = true;
            decimal = decimal * 10 + (ch - 48);
            this.bump();
          } else {
            break;
          }
        }
        var location = createLocation(startingPosition, this.clonePosition());
        if (!hasDigits) {
          return this.error(expectNumberError, location);
        }
        decimal *= sign;
        if (!isSafeInteger(decimal)) {
          return this.error(invalidNumberError, location);
        }
        return { val: decimal, err: null };
      };
      Parser2.prototype.offset = function() {
        return this.position.offset;
      };
      Parser2.prototype.isEOF = function() {
        return this.offset() === this.message.length;
      };
      Parser2.prototype.clonePosition = function() {
        return {
          offset: this.position.offset,
          line: this.position.line,
          column: this.position.column
        };
      };
      Parser2.prototype.char = function() {
        var offset = this.position.offset;
        if (offset >= this.message.length) {
          throw Error("out of bound");
        }
        var code = codePointAt(this.message, offset);
        if (code === void 0) {
          throw Error("Offset ".concat(offset, " is at invalid UTF-16 code unit boundary"));
        }
        return code;
      };
      Parser2.prototype.error = function(kind, location) {
        return {
          val: null,
          err: {
            kind,
            message: this.message,
            location
          }
        };
      };
      Parser2.prototype.bump = function() {
        if (this.isEOF()) {
          return;
        }
        var code = this.char();
        if (code === 10) {
          this.position.line += 1;
          this.position.column = 1;
          this.position.offset += 1;
        } else {
          this.position.column += 1;
          this.position.offset += code < 65536 ? 1 : 2;
        }
      };
      Parser2.prototype.bumpIf = function(prefix) {
        if (startsWith(this.message, prefix, this.offset())) {
          for (var i = 0; i < prefix.length; i++) {
            this.bump();
          }
          return true;
        }
        return false;
      };
      Parser2.prototype.bumpUntil = function(pattern) {
        var currentOffset = this.offset();
        var index = this.message.indexOf(pattern, currentOffset);
        if (index >= 0) {
          this.bumpTo(index);
          return true;
        } else {
          this.bumpTo(this.message.length);
          return false;
        }
      };
      Parser2.prototype.bumpTo = function(targetOffset) {
        if (this.offset() > targetOffset) {
          throw Error("targetOffset ".concat(targetOffset, " must be greater than or equal to the current offset ").concat(this.offset()));
        }
        targetOffset = Math.min(targetOffset, this.message.length);
        while (true) {
          var offset = this.offset();
          if (offset === targetOffset) {
            break;
          }
          if (offset > targetOffset) {
            throw Error("targetOffset ".concat(targetOffset, " is at invalid UTF-16 code unit boundary"));
          }
          this.bump();
          if (this.isEOF()) {
            break;
          }
        }
      };
      Parser2.prototype.bumpSpace = function() {
        while (!this.isEOF() && _isWhiteSpace(this.char())) {
          this.bump();
        }
      };
      Parser2.prototype.peek = function() {
        if (this.isEOF()) {
          return null;
        }
        var code = this.char();
        var offset = this.offset();
        var nextCode = this.message.charCodeAt(offset + (code >= 65536 ? 2 : 1));
        return nextCode !== null && nextCode !== void 0 ? nextCode : null;
      };
      return Parser2;
    }();
    exports.Parser = Parser;
    function _isAlpha(codepoint) {
      return codepoint >= 97 && codepoint <= 122 || codepoint >= 65 && codepoint <= 90;
    }
    function _isAlphaOrSlash(codepoint) {
      return _isAlpha(codepoint) || codepoint === 47;
    }
    function _isPotentialElementNameChar(c) {
      return c === 45 || c === 46 || c >= 48 && c <= 57 || c === 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90 || c == 183 || c >= 192 && c <= 214 || c >= 216 && c <= 246 || c >= 248 && c <= 893 || c >= 895 && c <= 8191 || c >= 8204 && c <= 8205 || c >= 8255 && c <= 8256 || c >= 8304 && c <= 8591 || c >= 11264 && c <= 12271 || c >= 12289 && c <= 55295 || c >= 63744 && c <= 64975 || c >= 65008 && c <= 65533 || c >= 65536 && c <= 983039;
    }
    function _isWhiteSpace(c) {
      return c >= 9 && c <= 13 || c === 32 || c === 133 || c >= 8206 && c <= 8207 || c === 8232 || c === 8233;
    }
    function _isPatternSyntax(c) {
      return c >= 33 && c <= 35 || c === 36 || c >= 37 && c <= 39 || c === 40 || c === 41 || c === 42 || c === 43 || c === 44 || c === 45 || c >= 46 && c <= 47 || c >= 58 && c <= 59 || c >= 60 && c <= 62 || c >= 63 && c <= 64 || c === 91 || c === 92 || c === 93 || c === 94 || c === 96 || c === 123 || c === 124 || c === 125 || c === 126 || c === 161 || c >= 162 && c <= 165 || c === 166 || c === 167 || c === 169 || c === 171 || c === 172 || c === 174 || c === 176 || c === 177 || c === 182 || c === 187 || c === 191 || c === 215 || c === 247 || c >= 8208 && c <= 8213 || c >= 8214 && c <= 8215 || c === 8216 || c === 8217 || c === 8218 || c >= 8219 && c <= 8220 || c === 8221 || c === 8222 || c === 8223 || c >= 8224 && c <= 8231 || c >= 8240 && c <= 8248 || c === 8249 || c === 8250 || c >= 8251 && c <= 8254 || c >= 8257 && c <= 8259 || c === 8260 || c === 8261 || c === 8262 || c >= 8263 && c <= 8273 || c === 8274 || c === 8275 || c >= 8277 && c <= 8286 || c >= 8592 && c <= 8596 || c >= 8597 && c <= 8601 || c >= 8602 && c <= 8603 || c >= 8604 && c <= 8607 || c === 8608 || c >= 8609 && c <= 8610 || c === 8611 || c >= 8612 && c <= 8613 || c === 8614 || c >= 8615 && c <= 8621 || c === 8622 || c >= 8623 && c <= 8653 || c >= 8654 && c <= 8655 || c >= 8656 && c <= 8657 || c === 8658 || c === 8659 || c === 8660 || c >= 8661 && c <= 8691 || c >= 8692 && c <= 8959 || c >= 8960 && c <= 8967 || c === 8968 || c === 8969 || c === 8970 || c === 8971 || c >= 8972 && c <= 8991 || c >= 8992 && c <= 8993 || c >= 8994 && c <= 9e3 || c === 9001 || c === 9002 || c >= 9003 && c <= 9083 || c === 9084 || c >= 9085 && c <= 9114 || c >= 9115 && c <= 9139 || c >= 9140 && c <= 9179 || c >= 9180 && c <= 9185 || c >= 9186 && c <= 9254 || c >= 9255 && c <= 9279 || c >= 9280 && c <= 9290 || c >= 9291 && c <= 9311 || c >= 9472 && c <= 9654 || c === 9655 || c >= 9656 && c <= 9664 || c === 9665 || c >= 9666 && c <= 9719 || c >= 9720 && c <= 9727 || c >= 9728 && c <= 9838 || c === 9839 || c >= 9840 && c <= 10087 || c === 10088 || c === 10089 || c === 10090 || c === 10091 || c === 10092 || c === 10093 || c === 10094 || c === 10095 || c === 10096 || c === 10097 || c === 10098 || c === 10099 || c === 10100 || c === 10101 || c >= 10132 && c <= 10175 || c >= 10176 && c <= 10180 || c === 10181 || c === 10182 || c >= 10183 && c <= 10213 || c === 10214 || c === 10215 || c === 10216 || c === 10217 || c === 10218 || c === 10219 || c === 10220 || c === 10221 || c === 10222 || c === 10223 || c >= 10224 && c <= 10239 || c >= 10240 && c <= 10495 || c >= 10496 && c <= 10626 || c === 10627 || c === 10628 || c === 10629 || c === 10630 || c === 10631 || c === 10632 || c === 10633 || c === 10634 || c === 10635 || c === 10636 || c === 10637 || c === 10638 || c === 10639 || c === 10640 || c === 10641 || c === 10642 || c === 10643 || c === 10644 || c === 10645 || c === 10646 || c === 10647 || c === 10648 || c >= 10649 && c <= 10711 || c === 10712 || c === 10713 || c === 10714 || c === 10715 || c >= 10716 && c <= 10747 || c === 10748 || c === 10749 || c >= 10750 && c <= 11007 || c >= 11008 && c <= 11055 || c >= 11056 && c <= 11076 || c >= 11077 && c <= 11078 || c >= 11079 && c <= 11084 || c >= 11085 && c <= 11123 || c >= 11124 && c <= 11125 || c >= 11126 && c <= 11157 || c === 11158 || c >= 11159 && c <= 11263 || c >= 11776 && c <= 11777 || c === 11778 || c === 11779 || c === 11780 || c === 11781 || c >= 11782 && c <= 11784 || c === 11785 || c === 11786 || c === 11787 || c === 11788 || c === 11789 || c >= 11790 && c <= 11798 || c === 11799 || c >= 11800 && c <= 11801 || c === 11802 || c === 11803 || c === 11804 || c === 11805 || c >= 11806 && c <= 11807 || c === 11808 || c === 11809 || c === 11810 || c === 11811 || c === 11812 || c === 11813 || c === 11814 || c === 11815 || c === 11816 || c === 11817 || c >= 11818 && c <= 11822 || c === 11823 || c >= 11824 && c <= 11833 || c >= 11834 && c <= 11835 || c >= 11836 && c <= 11839 || c === 11840 || c === 11841 || c === 11842 || c >= 11843 && c <= 11855 || c >= 11856 && c <= 11857 || c === 11858 || c >= 11859 && c <= 11903 || c >= 12289 && c <= 12291 || c === 12296 || c === 12297 || c === 12298 || c === 12299 || c === 12300 || c === 12301 || c === 12302 || c === 12303 || c === 12304 || c === 12305 || c >= 12306 && c <= 12307 || c === 12308 || c === 12309 || c === 12310 || c === 12311 || c === 12312 || c === 12313 || c === 12314 || c === 12315 || c === 12316 || c === 12317 || c >= 12318 && c <= 12319 || c === 12320 || c === 12336 || c === 64830 || c === 64831 || c >= 65093 && c <= 65094;
    }
  }
});

// ../../node_modules/@formatjs/icu-messageformat-parser/index.js
var require_icu_messageformat_parser = __commonJS({
  "../../node_modules/@formatjs/icu-messageformat-parser/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports._Parser = exports.parse = void 0;
    var tslib_1 = require_tslib();
    var error_1 = require_error();
    var parser_1 = require_parser();
    var types_1 = require_types();
    function pruneLocation(els) {
      els.forEach(function(el) {
        delete el.location;
        if ((0, types_1.isSelectElement)(el) || (0, types_1.isPluralElement)(el)) {
          for (var k in el.options) {
            delete el.options[k].location;
            pruneLocation(el.options[k].value);
          }
        } else if ((0, types_1.isNumberElement)(el) && (0, types_1.isNumberSkeleton)(el.style)) {
          delete el.style.location;
        } else if (((0, types_1.isDateElement)(el) || (0, types_1.isTimeElement)(el)) && (0, types_1.isDateTimeSkeleton)(el.style)) {
          delete el.style.location;
        } else if ((0, types_1.isTagElement)(el)) {
          pruneLocation(el.children);
        }
      });
    }
    function parse(message, opts) {
      if (opts === void 0) {
        opts = {};
      }
      opts = tslib_1.__assign({ shouldParseSkeletons: true, requiresOtherClause: true }, opts);
      var result = new parser_1.Parser(message, opts).parse();
      if (result.err) {
        var error = SyntaxError(error_1.ErrorKind[result.err.kind]);
        error.location = result.err.location;
        error.originalMessage = result.err.message;
        throw error;
      }
      if (!(opts === null || opts === void 0 ? void 0 : opts.captureLocation)) {
        pruneLocation(result.val);
      }
      return result.val;
    }
    exports.parse = parse;
    tslib_1.__exportStar(require_types(), exports);
    exports._Parser = parser_1.Parser;
  }
});

// ../../node_modules/@formatjs/fast-memoize/index.js
var require_fast_memoize = __commonJS({
  "../../node_modules/@formatjs/fast-memoize/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.strategies = void 0;
    function memoize(fn, options) {
      var cache = options && options.cache ? options.cache : cacheDefault;
      var serializer = options && options.serializer ? options.serializer : serializerDefault;
      var strategy = options && options.strategy ? options.strategy : strategyDefault;
      return strategy(fn, {
        cache,
        serializer
      });
    }
    exports.default = memoize;
    function isPrimitive(value) {
      return value == null || typeof value === "number" || typeof value === "boolean";
    }
    function monadic(fn, cache, serializer, arg) {
      var cacheKey = isPrimitive(arg) ? arg : serializer(arg);
      var computedValue = cache.get(cacheKey);
      if (typeof computedValue === "undefined") {
        computedValue = fn.call(this, arg);
        cache.set(cacheKey, computedValue);
      }
      return computedValue;
    }
    function variadic(fn, cache, serializer) {
      var args = Array.prototype.slice.call(arguments, 3);
      var cacheKey = serializer(args);
      var computedValue = cache.get(cacheKey);
      if (typeof computedValue === "undefined") {
        computedValue = fn.apply(this, args);
        cache.set(cacheKey, computedValue);
      }
      return computedValue;
    }
    function assemble(fn, context, strategy, cache, serialize) {
      return strategy.bind(context, fn, cache, serialize);
    }
    function strategyDefault(fn, options) {
      var strategy = fn.length === 1 ? monadic : variadic;
      return assemble(fn, this, strategy, options.cache.create(), options.serializer);
    }
    function strategyVariadic(fn, options) {
      return assemble(fn, this, variadic, options.cache.create(), options.serializer);
    }
    function strategyMonadic(fn, options) {
      return assemble(fn, this, monadic, options.cache.create(), options.serializer);
    }
    var serializerDefault = function() {
      return JSON.stringify(arguments);
    };
    function ObjectWithoutPrototypeCache() {
      this.cache = /* @__PURE__ */ Object.create(null);
    }
    ObjectWithoutPrototypeCache.prototype.get = function(key) {
      return this.cache[key];
    };
    ObjectWithoutPrototypeCache.prototype.set = function(key, value) {
      this.cache[key] = value;
    };
    var cacheDefault = {
      create: function create() {
        return new ObjectWithoutPrototypeCache();
      }
    };
    exports.strategies = {
      variadic: strategyVariadic,
      monadic: strategyMonadic
    };
  }
});

// ../../node_modules/intl-messageformat/src/error.js
var require_error2 = __commonJS({
  "../../node_modules/intl-messageformat/src/error.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MissingValueError = exports.InvalidValueTypeError = exports.InvalidValueError = exports.FormatError = exports.ErrorCode = void 0;
    var tslib_1 = require_tslib();
    var ErrorCode;
    (function(ErrorCode2) {
      ErrorCode2["MISSING_VALUE"] = "MISSING_VALUE";
      ErrorCode2["INVALID_VALUE"] = "INVALID_VALUE";
      ErrorCode2["MISSING_INTL_API"] = "MISSING_INTL_API";
    })(ErrorCode = exports.ErrorCode || (exports.ErrorCode = {}));
    var FormatError = function(_super) {
      tslib_1.__extends(FormatError2, _super);
      function FormatError2(msg, code, originalMessage) {
        var _this = _super.call(this, msg) || this;
        _this.code = code;
        _this.originalMessage = originalMessage;
        return _this;
      }
      FormatError2.prototype.toString = function() {
        return "[formatjs Error: ".concat(this.code, "] ").concat(this.message);
      };
      return FormatError2;
    }(Error);
    exports.FormatError = FormatError;
    var InvalidValueError = function(_super) {
      tslib_1.__extends(InvalidValueError2, _super);
      function InvalidValueError2(variableId, value, options, originalMessage) {
        return _super.call(this, 'Invalid values for "'.concat(variableId, '": "').concat(value, '". Options are "').concat(Object.keys(options).join('", "'), '"'), ErrorCode.INVALID_VALUE, originalMessage) || this;
      }
      return InvalidValueError2;
    }(FormatError);
    exports.InvalidValueError = InvalidValueError;
    var InvalidValueTypeError = function(_super) {
      tslib_1.__extends(InvalidValueTypeError2, _super);
      function InvalidValueTypeError2(value, type, originalMessage) {
        return _super.call(this, 'Value for "'.concat(value, '" must be of type ').concat(type), ErrorCode.INVALID_VALUE, originalMessage) || this;
      }
      return InvalidValueTypeError2;
    }(FormatError);
    exports.InvalidValueTypeError = InvalidValueTypeError;
    var MissingValueError = function(_super) {
      tslib_1.__extends(MissingValueError2, _super);
      function MissingValueError2(variableId, originalMessage) {
        return _super.call(this, 'The intl string context variable "'.concat(variableId, '" was not provided to the string "').concat(originalMessage, '"'), ErrorCode.MISSING_VALUE, originalMessage) || this;
      }
      return MissingValueError2;
    }(FormatError);
    exports.MissingValueError = MissingValueError;
  }
});

// ../../node_modules/intl-messageformat/src/formatters.js
var require_formatters = __commonJS({
  "../../node_modules/intl-messageformat/src/formatters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.formatToParts = exports.isFormatXMLElementFn = exports.PART_TYPE = void 0;
    var icu_messageformat_parser_1 = require_icu_messageformat_parser();
    var error_1 = require_error2();
    var PART_TYPE;
    (function(PART_TYPE2) {
      PART_TYPE2[PART_TYPE2["literal"] = 0] = "literal";
      PART_TYPE2[PART_TYPE2["object"] = 1] = "object";
    })(PART_TYPE = exports.PART_TYPE || (exports.PART_TYPE = {}));
    function mergeLiteral(parts) {
      if (parts.length < 2) {
        return parts;
      }
      return parts.reduce(function(all, part) {
        var lastPart = all[all.length - 1];
        if (!lastPart || lastPart.type !== PART_TYPE.literal || part.type !== PART_TYPE.literal) {
          all.push(part);
        } else {
          lastPart.value += part.value;
        }
        return all;
      }, []);
    }
    function isFormatXMLElementFn(el) {
      return typeof el === "function";
    }
    exports.isFormatXMLElementFn = isFormatXMLElementFn;
    function formatToParts(els, locales, formatters, formats, values, currentPluralValue, originalMessage) {
      if (els.length === 1 && (0, icu_messageformat_parser_1.isLiteralElement)(els[0])) {
        return [
          {
            type: PART_TYPE.literal,
            value: els[0].value
          }
        ];
      }
      var result = [];
      for (var _i = 0, els_1 = els; _i < els_1.length; _i++) {
        var el = els_1[_i];
        if ((0, icu_messageformat_parser_1.isLiteralElement)(el)) {
          result.push({
            type: PART_TYPE.literal,
            value: el.value
          });
          continue;
        }
        if ((0, icu_messageformat_parser_1.isPoundElement)(el)) {
          if (typeof currentPluralValue === "number") {
            result.push({
              type: PART_TYPE.literal,
              value: formatters.getNumberFormat(locales).format(currentPluralValue)
            });
          }
          continue;
        }
        var varName = el.value;
        if (!(values && varName in values)) {
          throw new error_1.MissingValueError(varName, originalMessage);
        }
        var value = values[varName];
        if ((0, icu_messageformat_parser_1.isArgumentElement)(el)) {
          if (!value || typeof value === "string" || typeof value === "number") {
            value = typeof value === "string" || typeof value === "number" ? String(value) : "";
          }
          result.push({
            type: typeof value === "string" ? PART_TYPE.literal : PART_TYPE.object,
            value
          });
          continue;
        }
        if ((0, icu_messageformat_parser_1.isDateElement)(el)) {
          var style = typeof el.style === "string" ? formats.date[el.style] : (0, icu_messageformat_parser_1.isDateTimeSkeleton)(el.style) ? el.style.parsedOptions : void 0;
          result.push({
            type: PART_TYPE.literal,
            value: formatters.getDateTimeFormat(locales, style).format(value)
          });
          continue;
        }
        if ((0, icu_messageformat_parser_1.isTimeElement)(el)) {
          var style = typeof el.style === "string" ? formats.time[el.style] : (0, icu_messageformat_parser_1.isDateTimeSkeleton)(el.style) ? el.style.parsedOptions : formats.time.medium;
          result.push({
            type: PART_TYPE.literal,
            value: formatters.getDateTimeFormat(locales, style).format(value)
          });
          continue;
        }
        if ((0, icu_messageformat_parser_1.isNumberElement)(el)) {
          var style = typeof el.style === "string" ? formats.number[el.style] : (0, icu_messageformat_parser_1.isNumberSkeleton)(el.style) ? el.style.parsedOptions : void 0;
          if (style && style.scale) {
            value = value * (style.scale || 1);
          }
          result.push({
            type: PART_TYPE.literal,
            value: formatters.getNumberFormat(locales, style).format(value)
          });
          continue;
        }
        if ((0, icu_messageformat_parser_1.isTagElement)(el)) {
          var children = el.children, value_1 = el.value;
          var formatFn = values[value_1];
          if (!isFormatXMLElementFn(formatFn)) {
            throw new error_1.InvalidValueTypeError(value_1, "function", originalMessage);
          }
          var parts = formatToParts(children, locales, formatters, formats, values, currentPluralValue);
          var chunks = formatFn(parts.map(function(p) {
            return p.value;
          }));
          if (!Array.isArray(chunks)) {
            chunks = [chunks];
          }
          result.push.apply(result, chunks.map(function(c) {
            return {
              type: typeof c === "string" ? PART_TYPE.literal : PART_TYPE.object,
              value: c
            };
          }));
        }
        if ((0, icu_messageformat_parser_1.isSelectElement)(el)) {
          var opt = el.options[value] || el.options.other;
          if (!opt) {
            throw new error_1.InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);
          }
          result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));
          continue;
        }
        if ((0, icu_messageformat_parser_1.isPluralElement)(el)) {
          var opt = el.options["=".concat(value)];
          if (!opt) {
            if (!Intl.PluralRules) {
              throw new error_1.FormatError('Intl.PluralRules is not available in this environment.\nTry polyfilling it using "@formatjs/intl-pluralrules"\n', error_1.ErrorCode.MISSING_INTL_API, originalMessage);
            }
            var rule = formatters.getPluralRules(locales, { type: el.pluralType }).select(value - (el.offset || 0));
            opt = el.options[rule] || el.options.other;
          }
          if (!opt) {
            throw new error_1.InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);
          }
          result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values, value - (el.offset || 0)));
          continue;
        }
      }
      return mergeLiteral(result);
    }
    exports.formatToParts = formatToParts;
  }
});

// ../../node_modules/intl-messageformat/src/core.js
var require_core = __commonJS({
  "../../node_modules/intl-messageformat/src/core.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IntlMessageFormat = void 0;
    var tslib_1 = require_tslib();
    var icu_messageformat_parser_1 = require_icu_messageformat_parser();
    var fast_memoize_1 = tslib_1.__importStar(require_fast_memoize());
    var formatters_1 = require_formatters();
    function mergeConfig(c1, c2) {
      if (!c2) {
        return c1;
      }
      return tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, c1 || {}), c2 || {}), Object.keys(c1).reduce(function(all, k) {
        all[k] = tslib_1.__assign(tslib_1.__assign({}, c1[k]), c2[k] || {});
        return all;
      }, {}));
    }
    function mergeConfigs(defaultConfig, configs) {
      if (!configs) {
        return defaultConfig;
      }
      return Object.keys(defaultConfig).reduce(function(all, k) {
        all[k] = mergeConfig(defaultConfig[k], configs[k]);
        return all;
      }, tslib_1.__assign({}, defaultConfig));
    }
    function createFastMemoizeCache(store) {
      return {
        create: function() {
          return {
            get: function(key) {
              return store[key];
            },
            set: function(key, value) {
              store[key] = value;
            }
          };
        }
      };
    }
    function createDefaultFormatters(cache) {
      if (cache === void 0) {
        cache = {
          number: {},
          dateTime: {},
          pluralRules: {}
        };
      }
      return {
        getNumberFormat: (0, fast_memoize_1.default)(function() {
          var _a3;
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          return new ((_a3 = Intl.NumberFormat).bind.apply(_a3, tslib_1.__spreadArray([void 0], args, false)))();
        }, {
          cache: createFastMemoizeCache(cache.number),
          strategy: fast_memoize_1.strategies.variadic
        }),
        getDateTimeFormat: (0, fast_memoize_1.default)(function() {
          var _a3;
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          return new ((_a3 = Intl.DateTimeFormat).bind.apply(_a3, tslib_1.__spreadArray([void 0], args, false)))();
        }, {
          cache: createFastMemoizeCache(cache.dateTime),
          strategy: fast_memoize_1.strategies.variadic
        }),
        getPluralRules: (0, fast_memoize_1.default)(function() {
          var _a3;
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          return new ((_a3 = Intl.PluralRules).bind.apply(_a3, tslib_1.__spreadArray([void 0], args, false)))();
        }, {
          cache: createFastMemoizeCache(cache.pluralRules),
          strategy: fast_memoize_1.strategies.variadic
        })
      };
    }
    var IntlMessageFormat = function() {
      function IntlMessageFormat2(message, locales, overrideFormats, opts) {
        if (locales === void 0) {
          locales = IntlMessageFormat2.defaultLocale;
        }
        var _this = this;
        this.formatterCache = {
          number: {},
          dateTime: {},
          pluralRules: {}
        };
        this.format = function(values) {
          var parts = _this.formatToParts(values);
          if (parts.length === 1) {
            return parts[0].value;
          }
          var result = parts.reduce(function(all, part) {
            if (!all.length || part.type !== formatters_1.PART_TYPE.literal || typeof all[all.length - 1] !== "string") {
              all.push(part.value);
            } else {
              all[all.length - 1] += part.value;
            }
            return all;
          }, []);
          if (result.length <= 1) {
            return result[0] || "";
          }
          return result;
        };
        this.formatToParts = function(values) {
          return (0, formatters_1.formatToParts)(_this.ast, _this.locales, _this.formatters, _this.formats, values, void 0, _this.message);
        };
        this.resolvedOptions = function() {
          var _a3;
          return {
            locale: ((_a3 = _this.resolvedLocale) === null || _a3 === void 0 ? void 0 : _a3.toString()) || Intl.NumberFormat.supportedLocalesOf(_this.locales)[0]
          };
        };
        this.getAst = function() {
          return _this.ast;
        };
        this.locales = locales;
        this.resolvedLocale = IntlMessageFormat2.resolveLocale(locales);
        if (typeof message === "string") {
          this.message = message;
          if (!IntlMessageFormat2.__parse) {
            throw new TypeError("IntlMessageFormat.__parse must be set to process `message` of type `string`");
          }
          this.ast = IntlMessageFormat2.__parse(message, {
            ignoreTag: opts === null || opts === void 0 ? void 0 : opts.ignoreTag,
            locale: this.resolvedLocale
          });
        } else {
          this.ast = message;
        }
        if (!Array.isArray(this.ast)) {
          throw new TypeError("A message must be provided as a String or AST.");
        }
        this.formats = mergeConfigs(IntlMessageFormat2.formats, overrideFormats);
        this.formatters = opts && opts.formatters || createDefaultFormatters(this.formatterCache);
      }
      Object.defineProperty(IntlMessageFormat2, "defaultLocale", {
        get: function() {
          if (!IntlMessageFormat2.memoizedDefaultLocale) {
            IntlMessageFormat2.memoizedDefaultLocale = new Intl.NumberFormat().resolvedOptions().locale;
          }
          return IntlMessageFormat2.memoizedDefaultLocale;
        },
        enumerable: false,
        configurable: true
      });
      IntlMessageFormat2.memoizedDefaultLocale = null;
      IntlMessageFormat2.resolveLocale = function(locales) {
        if (typeof Intl.Locale === "undefined") {
          return;
        }
        var supportedLocales = Intl.NumberFormat.supportedLocalesOf(locales);
        if (supportedLocales.length > 0) {
          return new Intl.Locale(supportedLocales[0]);
        }
        return new Intl.Locale(typeof locales === "string" ? locales : locales[0]);
      };
      IntlMessageFormat2.__parse = icu_messageformat_parser_1.parse;
      IntlMessageFormat2.formats = {
        number: {
          integer: {
            maximumFractionDigits: 0
          },
          currency: {
            style: "currency"
          },
          percent: {
            style: "percent"
          }
        },
        date: {
          short: {
            month: "numeric",
            day: "numeric",
            year: "2-digit"
          },
          medium: {
            month: "short",
            day: "numeric",
            year: "numeric"
          },
          long: {
            month: "long",
            day: "numeric",
            year: "numeric"
          },
          full: {
            weekday: "long",
            month: "long",
            day: "numeric",
            year: "numeric"
          }
        },
        time: {
          short: {
            hour: "numeric",
            minute: "numeric"
          },
          medium: {
            hour: "numeric",
            minute: "numeric",
            second: "numeric"
          },
          long: {
            hour: "numeric",
            minute: "numeric",
            second: "numeric",
            timeZoneName: "short"
          },
          full: {
            hour: "numeric",
            minute: "numeric",
            second: "numeric",
            timeZoneName: "short"
          }
        }
      };
      return IntlMessageFormat2;
    }();
    exports.IntlMessageFormat = IntlMessageFormat;
  }
});

// ../../node_modules/intl-messageformat/index.js
var require_intl_messageformat = __commonJS({
  "../../node_modules/intl-messageformat/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    var core_1 = require_core();
    tslib_1.__exportStar(require_formatters(), exports);
    tslib_1.__exportStar(require_core(), exports);
    tslib_1.__exportStar(require_error2(), exports);
    exports.default = core_1.IntlMessageFormat;
  }
});

// ../../node_modules/@internationalized/message/dist/main.js
var require_main7 = __commonJS({
  "../../node_modules/@internationalized/message/dist/main.js"(exports, module) {
    var $g9nQA$intlmessageformat = require_intl_messageformat();
    function $parcel$export12(e, n, v, s) {
      Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
    }
    function $parcel$interopDefault12(a) {
      return a && a.__esModule ? a.default : a;
    }
    $parcel$export12(module.exports, "MessageDictionary", () => $9a5a7b8408290694$export$64839e615120df17);
    $parcel$export12(module.exports, "MessageFormatter", () => $7a31ee9993c13f0b$export$526ebc05ff964723);
    var $9a5a7b8408290694$export$64839e615120df17 = class {
      getStringForLocale(key, locale) {
        let strings = this.messages[locale];
        if (!strings) {
          strings = $9a5a7b8408290694$var$getStringsForLocale(locale, this.messages, this.defaultLocale);
          this.messages[locale] = strings;
        }
        let string = strings[key];
        if (!string)
          throw new Error(`Could not find intl message ${key} in ${locale} locale`);
        return string;
      }
      constructor(messages, defaultLocale = "en-US") {
        this.messages = __spreadValues({}, messages);
        this.defaultLocale = defaultLocale;
      }
    };
    function $9a5a7b8408290694$var$getStringsForLocale(locale, strings, defaultLocale = "en-US") {
      if (strings[locale])
        return strings[locale];
      let language = $9a5a7b8408290694$var$getLanguage(locale);
      if (strings[language])
        return strings[language];
      for (let key in strings) {
        if (key.startsWith(language + "-"))
          return strings[key];
      }
      return strings[defaultLocale];
    }
    function $9a5a7b8408290694$var$getLanguage(locale) {
      if (Intl.Locale)
        return new Intl.Locale(locale).language;
      return locale.split("-")[0];
    }
    var $7a31ee9993c13f0b$export$526ebc05ff964723 = class {
      format(key, variables) {
        let message = this.cache[key];
        if (!message) {
          let msg = this.messages.getStringForLocale(key, this.locale);
          if (!msg)
            throw new Error(`Could not find intl message ${key} in ${this.locale} locale`);
          message = new ($parcel$interopDefault12($g9nQA$intlmessageformat))(msg, this.locale);
          this.cache[key] = message;
        }
        let varCopy;
        if (variables)
          varCopy = Object.keys(variables).reduce((acc, key2) => {
            acc[key2] = variables[key2] == null ? false : variables[key2];
            return acc;
          }, {});
        return message.format(varCopy);
      }
      constructor(locale, messages) {
        this.locale = locale;
        this.messages = messages;
        this.cache = {};
      }
    };
  }
});

// ../../node_modules/@react-aria/i18n/dist/useMessageFormatter.cjs.js
var require_useMessageFormatter_cjs = __commonJS({
  "../../node_modules/@react-aria/i18n/dist/useMessageFormatter.cjs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.useMessageFormatter = useMessageFormatter;
    var _message = require_main7();
    var _react = (init_preact(), __toCommonJS(preact_exports));
    var _14 = require_main8();
    var cache = /* @__PURE__ */ new WeakMap();
    function getCachedDictionary(strings) {
      let dictionary = cache.get(strings);
      if (!dictionary) {
        dictionary = new _message.MessageDictionary(strings);
        cache.set(strings, dictionary);
      }
      return dictionary;
    }
    function useMessageFormatter(strings) {
      let {
        locale
      } = (0, _14.useLocale)();
      let dictionary = (0, _react.useMemo)(() => getCachedDictionary(strings), [strings]);
      let formatter = (0, _react.useMemo)(() => new _message.MessageFormatter(locale, dictionary), [locale, dictionary]);
      return (0, _react.useCallback)((key, variables) => formatter.format(key, variables), [formatter]);
    }
  }
});

// ../../node_modules/@react-aria/i18n/dist/main.js
var require_main8 = __commonJS({
  "../../node_modules/@react-aria/i18n/dist/main.js"(exports, module) {
    module.exports = require_real_main();
    Object.defineProperties(module.exports, Object.getOwnPropertyDescriptors(require_useMessageFormatter_cjs()));
  }
});

// ../../node_modules/@react-spectrum/utils/dist/main.js
var require_main9 = __commonJS({
  "../../node_modules/@react-spectrum/utils/dist/main.js"(exports, module) {
    var $cRUfp$reactariautils = require_main3();
    var $cRUfp$clsx = require_clsx();
    var $cRUfp$react = (init_preact(), __toCommonJS(preact_exports));
    var $cRUfp$reactariassr = require_main2();
    var $cRUfp$reactariai18n = require_main8();
    function $parcel$export12(e, n, v, s) {
      Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
    }
    function $parcel$interopDefault12(a) {
      return a && a.__esModule ? a.default : a;
    }
    $parcel$export12(module.exports, "shouldKeepSpectrumClassNames", () => $e720495fead531ee$export$46d604dce8bf8724);
    $parcel$export12(module.exports, "keepSpectrumClassNames", () => $e720495fead531ee$export$f9d3bfd10703eb31);
    $parcel$export12(module.exports, "classNames", () => $e720495fead531ee$export$ce4ab0c55987d1ff);
    $parcel$export12(module.exports, "getWrappedElement", () => $c588c81c05dac184$export$a5f5a6912b18861c);
    $parcel$export12(module.exports, "useMediaQuery", () => $471052aafc9c8aac$export$32d5543ab307c01);
    $parcel$export12(module.exports, "createDOMRef", () => $749a6c35064cd8c6$export$a5795cc979dfae80);
    $parcel$export12(module.exports, "createFocusableRef", () => $749a6c35064cd8c6$export$79d69eee6ae4b329);
    $parcel$export12(module.exports, "useDOMRef", () => $749a6c35064cd8c6$export$c2c55ef9111cafd8);
    $parcel$export12(module.exports, "useFocusableRef", () => $749a6c35064cd8c6$export$96a734597687c040);
    $parcel$export12(module.exports, "unwrapDOMRef", () => $749a6c35064cd8c6$export$c7e28c72a4823176);
    $parcel$export12(module.exports, "useUnwrapDOMRef", () => $749a6c35064cd8c6$export$1d5cc31d9d8df817);
    $parcel$export12(module.exports, "baseStyleProps", () => $d3b73be57066120b$export$fe9c6e915565b4e8);
    $parcel$export12(module.exports, "viewStyleProps", () => $d3b73be57066120b$export$e0705d1a55f297c);
    $parcel$export12(module.exports, "dimensionValue", () => $d3b73be57066120b$export$abc24f5b99744ea6);
    $parcel$export12(module.exports, "responsiveDimensionValue", () => $d3b73be57066120b$export$f348bec194f2e6b5);
    $parcel$export12(module.exports, "convertStyleProps", () => $d3b73be57066120b$export$f3c39bb9534218d0);
    $parcel$export12(module.exports, "useStyleProps", () => $d3b73be57066120b$export$b8e6fb9d2dff3f41);
    $parcel$export12(module.exports, "passthroughStyle", () => $d3b73be57066120b$export$46b6c81d11d2c30a);
    $parcel$export12(module.exports, "getResponsiveProp", () => $d3b73be57066120b$export$52dbfdbe1b2c3541);
    $parcel$export12(module.exports, "useSlotProps", () => $e81916440cf6fd84$export$1e5c9e6e4e15efe3);
    $parcel$export12(module.exports, "cssModuleToSlots", () => $e81916440cf6fd84$export$365cf34cda9978e2);
    $parcel$export12(module.exports, "SlotProvider", () => $e81916440cf6fd84$export$8107b24b91795686);
    $parcel$export12(module.exports, "ClearSlots", () => $e81916440cf6fd84$export$ceb145244332b7a2);
    $parcel$export12(module.exports, "useHasChild", () => $67043c48a01bef79$export$e52e2242b6d0f1d4);
    $parcel$export12(module.exports, "useIsMobileDevice", () => $e9c08f6fb6c823d1$export$736bf165441b18c7);
    $parcel$export12(module.exports, "useValueEffect", () => $cRUfp$reactariautils.useValueEffect);
    $parcel$export12(module.exports, "BreakpointProvider", () => $893a66ba513f4a66$export$8214320346cf5104);
    $parcel$export12(module.exports, "useMatchedBreakpoints", () => $893a66ba513f4a66$export$140ae7baa51cca23);
    $parcel$export12(module.exports, "useBreakpoint", () => $893a66ba513f4a66$export$199d6754bdf4e1e3);
    $parcel$export12(module.exports, "useResizeObserver", () => $cRUfp$reactariautils.useResizeObserver);
    var $e720495fead531ee$export$46d604dce8bf8724 = false;
    function $e720495fead531ee$export$f9d3bfd10703eb31() {
      $e720495fead531ee$export$46d604dce8bf8724 = true;
      console.warn("Legacy spectrum-prefixed class names enabled for backward compatibility. We recommend replacing instances of CSS overrides targeting spectrum selectors in your app with custom class names of your own, and disabling this flag.");
    }
    function $e720495fead531ee$export$ce4ab0c55987d1ff(cssModule, ...values) {
      let classes = [];
      for (let value of values) {
        if (typeof value === "object" && value) {
          let mapped = {};
          for (let key in value) {
            if (cssModule[key])
              mapped[cssModule[key]] = value[key];
            if ($e720495fead531ee$export$46d604dce8bf8724 || !cssModule[key])
              mapped[key] = value[key];
          }
          classes.push(mapped);
        } else if (typeof value === "string") {
          if (cssModule[value])
            classes.push(cssModule[value]);
          if ($e720495fead531ee$export$46d604dce8bf8724 || !cssModule[value])
            classes.push(value);
        } else
          classes.push(value);
      }
      return $parcel$interopDefault12($cRUfp$clsx)(...classes);
    }
    function $c588c81c05dac184$export$a5f5a6912b18861c(children) {
      let element;
      if (typeof children === "string")
        element = /* @__PURE__ */ $parcel$interopDefault12($cRUfp$react).createElement("span", null, children);
      else
        element = $parcel$interopDefault12($cRUfp$react).Children.only(children);
      return element;
    }
    function $471052aafc9c8aac$export$32d5543ab307c01(query) {
      let supportsMatchMedia = typeof window !== "undefined" && typeof window.matchMedia === "function";
      let [matches, setMatches] = $cRUfp$react.useState(
        () => supportsMatchMedia ? window.matchMedia(query).matches : false
      );
      $cRUfp$react.useEffect(() => {
        if (!supportsMatchMedia)
          return;
        let mq = window.matchMedia(query);
        let onChange = (evt) => {
          setMatches(evt.matches);
        };
        mq.addListener(onChange);
        return () => {
          mq.removeListener(onChange);
        };
      }, [
        supportsMatchMedia,
        query
      ]);
      let isSSR = $cRUfp$reactariassr.useIsSSR();
      return isSSR ? false : matches;
    }
    function $749a6c35064cd8c6$export$a5795cc979dfae80(ref) {
      return {
        UNSAFE_getDOMNode() {
          return ref.current;
        }
      };
    }
    function $749a6c35064cd8c6$export$79d69eee6ae4b329(domRef, focusableRef = domRef) {
      return __spreadProps(__spreadValues({}, $749a6c35064cd8c6$export$a5795cc979dfae80(domRef)), {
        focus() {
          if (focusableRef.current)
            focusableRef.current.focus();
        }
      });
    }
    function $749a6c35064cd8c6$export$c2c55ef9111cafd8(ref) {
      let domRef = $cRUfp$react.useRef(null);
      $cRUfp$react.useImperativeHandle(
        ref,
        () => $749a6c35064cd8c6$export$a5795cc979dfae80(domRef)
      );
      return domRef;
    }
    function $749a6c35064cd8c6$export$96a734597687c040(ref, focusableRef) {
      let domRef = $cRUfp$react.useRef(null);
      $cRUfp$react.useImperativeHandle(
        ref,
        () => $749a6c35064cd8c6$export$79d69eee6ae4b329(domRef, focusableRef)
      );
      return domRef;
    }
    function $749a6c35064cd8c6$export$c7e28c72a4823176(ref) {
      return {
        get current() {
          return ref.current && ref.current.UNSAFE_getDOMNode();
        }
      };
    }
    function $749a6c35064cd8c6$export$1d5cc31d9d8df817(ref) {
      return $cRUfp$react.useMemo(
        () => $749a6c35064cd8c6$export$c7e28c72a4823176(ref),
        [
          ref
        ]
      );
    }
    var $893a66ba513f4a66$var$Context = /* @__PURE__ */ $parcel$interopDefault12($cRUfp$react).createContext(null);
    $893a66ba513f4a66$var$Context.displayName = "BreakpointContext";
    function $893a66ba513f4a66$export$8214320346cf5104(props) {
      let { children, matchedBreakpoints } = props;
      return /* @__PURE__ */ $parcel$interopDefault12($cRUfp$react).createElement($893a66ba513f4a66$var$Context.Provider, {
        value: {
          matchedBreakpoints
        }
      }, children);
    }
    function $893a66ba513f4a66$export$140ae7baa51cca23(breakpoints) {
      let entries = Object.entries(breakpoints).sort(
        ([, valueA], [, valueB]) => valueB - valueA
      );
      let breakpointQueries = entries.map(
        ([, value]) => `(min-width: ${value}px)`
      );
      let supportsMatchMedia = typeof window !== "undefined" && typeof window.matchMedia === "function";
      let getBreakpointHandler = () => {
        let matched = [];
        for (let i in breakpointQueries) {
          let query = breakpointQueries[i];
          if (window.matchMedia(query).matches)
            matched.push(entries[i][0]);
        }
        matched.push("base");
        return matched;
      };
      let [breakpoint1, setBreakpoint] = $cRUfp$react.useState(
        () => supportsMatchMedia ? getBreakpointHandler() : [
          "base"
        ]
      );
      $cRUfp$react.useEffect(() => {
        if (!supportsMatchMedia)
          return;
        let onResize = () => {
          const breakpointHandler = getBreakpointHandler();
          setBreakpoint((previousBreakpointHandler) => {
            if (previousBreakpointHandler.length !== breakpointHandler.length || previousBreakpointHandler.some(
              (breakpoint, idx) => breakpoint !== breakpointHandler[idx]
            ))
              return [
                ...breakpointHandler
              ];
            return previousBreakpointHandler;
          });
        };
        window.addEventListener("resize", onResize);
        return () => {
          window.removeEventListener("resize", onResize);
        };
      }, [
        supportsMatchMedia
      ]);
      let isSSR = $cRUfp$reactariassr.useIsSSR();
      return isSSR ? [
        "base"
      ] : breakpoint1;
    }
    function $893a66ba513f4a66$export$199d6754bdf4e1e3() {
      return $cRUfp$react.useContext($893a66ba513f4a66$var$Context);
    }
    var $d3b73be57066120b$export$fe9c6e915565b4e8 = {
      margin: [
        "margin",
        $d3b73be57066120b$export$abc24f5b99744ea6
      ],
      marginStart: [
        $d3b73be57066120b$var$rtl("marginLeft", "marginRight"),
        $d3b73be57066120b$export$abc24f5b99744ea6
      ],
      marginEnd: [
        $d3b73be57066120b$var$rtl("marginRight", "marginLeft"),
        $d3b73be57066120b$export$abc24f5b99744ea6
      ],
      marginTop: [
        "marginTop",
        $d3b73be57066120b$export$abc24f5b99744ea6
      ],
      marginBottom: [
        "marginBottom",
        $d3b73be57066120b$export$abc24f5b99744ea6
      ],
      marginX: [
        [
          "marginLeft",
          "marginRight"
        ],
        $d3b73be57066120b$export$abc24f5b99744ea6
      ],
      marginY: [
        [
          "marginTop",
          "marginBottom"
        ],
        $d3b73be57066120b$export$abc24f5b99744ea6
      ],
      width: [
        "width",
        $d3b73be57066120b$export$abc24f5b99744ea6
      ],
      height: [
        "height",
        $d3b73be57066120b$export$abc24f5b99744ea6
      ],
      minWidth: [
        "minWidth",
        $d3b73be57066120b$export$abc24f5b99744ea6
      ],
      minHeight: [
        "minHeight",
        $d3b73be57066120b$export$abc24f5b99744ea6
      ],
      maxWidth: [
        "maxWidth",
        $d3b73be57066120b$export$abc24f5b99744ea6
      ],
      maxHeight: [
        "maxHeight",
        $d3b73be57066120b$export$abc24f5b99744ea6
      ],
      isHidden: [
        "display",
        $d3b73be57066120b$var$hiddenValue
      ],
      alignSelf: [
        "alignSelf",
        $d3b73be57066120b$export$46b6c81d11d2c30a
      ],
      justifySelf: [
        "justifySelf",
        $d3b73be57066120b$export$46b6c81d11d2c30a
      ],
      position: [
        "position",
        $d3b73be57066120b$var$anyValue
      ],
      zIndex: [
        "zIndex",
        $d3b73be57066120b$var$anyValue
      ],
      top: [
        "top",
        $d3b73be57066120b$export$abc24f5b99744ea6
      ],
      bottom: [
        "bottom",
        $d3b73be57066120b$export$abc24f5b99744ea6
      ],
      start: [
        $d3b73be57066120b$var$rtl("left", "right"),
        $d3b73be57066120b$export$abc24f5b99744ea6
      ],
      end: [
        $d3b73be57066120b$var$rtl("right", "left"),
        $d3b73be57066120b$export$abc24f5b99744ea6
      ],
      left: [
        "left",
        $d3b73be57066120b$export$abc24f5b99744ea6
      ],
      right: [
        "right",
        $d3b73be57066120b$export$abc24f5b99744ea6
      ],
      order: [
        "order",
        $d3b73be57066120b$var$anyValue
      ],
      flex: [
        "flex",
        $d3b73be57066120b$var$flexValue
      ],
      flexGrow: [
        "flexGrow",
        $d3b73be57066120b$export$46b6c81d11d2c30a
      ],
      flexShrink: [
        "flexShrink",
        $d3b73be57066120b$export$46b6c81d11d2c30a
      ],
      flexBasis: [
        "flexBasis",
        $d3b73be57066120b$export$46b6c81d11d2c30a
      ],
      gridArea: [
        "gridArea",
        $d3b73be57066120b$export$46b6c81d11d2c30a
      ],
      gridColumn: [
        "gridColumn",
        $d3b73be57066120b$export$46b6c81d11d2c30a
      ],
      gridColumnEnd: [
        "gridColumnEnd",
        $d3b73be57066120b$export$46b6c81d11d2c30a
      ],
      gridColumnStart: [
        "gridColumnStart",
        $d3b73be57066120b$export$46b6c81d11d2c30a
      ],
      gridRow: [
        "gridRow",
        $d3b73be57066120b$export$46b6c81d11d2c30a
      ],
      gridRowEnd: [
        "gridRowEnd",
        $d3b73be57066120b$export$46b6c81d11d2c30a
      ],
      gridRowStart: [
        "gridRowStart",
        $d3b73be57066120b$export$46b6c81d11d2c30a
      ]
    };
    var $d3b73be57066120b$export$e0705d1a55f297c = __spreadProps(__spreadValues({}, $d3b73be57066120b$export$fe9c6e915565b4e8), {
      backgroundColor: [
        "backgroundColor",
        $d3b73be57066120b$var$backgroundColorValue
      ],
      borderWidth: [
        "borderWidth",
        $d3b73be57066120b$var$borderSizeValue
      ],
      borderStartWidth: [
        $d3b73be57066120b$var$rtl("borderLeftWidth", "borderRightWidth"),
        $d3b73be57066120b$var$borderSizeValue
      ],
      borderEndWidth: [
        $d3b73be57066120b$var$rtl("borderRightWidth", "borderLeftWidth"),
        $d3b73be57066120b$var$borderSizeValue
      ],
      borderLeftWidth: [
        "borderLeftWidth",
        $d3b73be57066120b$var$borderSizeValue
      ],
      borderRightWidth: [
        "borderRightWidth",
        $d3b73be57066120b$var$borderSizeValue
      ],
      borderTopWidth: [
        "borderTopWidth",
        $d3b73be57066120b$var$borderSizeValue
      ],
      borderBottomWidth: [
        "borderBottomWidth",
        $d3b73be57066120b$var$borderSizeValue
      ],
      borderXWidth: [
        [
          "borderLeftWidth",
          "borderRightWidth"
        ],
        $d3b73be57066120b$var$borderSizeValue
      ],
      borderYWidth: [
        [
          "borderTopWidth",
          "borderBottomWidth"
        ],
        $d3b73be57066120b$var$borderSizeValue
      ],
      borderColor: [
        "borderColor",
        $d3b73be57066120b$var$borderColorValue
      ],
      borderStartColor: [
        $d3b73be57066120b$var$rtl("borderLeftColor", "borderRightColor"),
        $d3b73be57066120b$var$borderColorValue
      ],
      borderEndColor: [
        $d3b73be57066120b$var$rtl("borderRightColor", "borderLeftColor"),
        $d3b73be57066120b$var$borderColorValue
      ],
      borderLeftColor: [
        "borderLeftColor",
        $d3b73be57066120b$var$borderColorValue
      ],
      borderRightColor: [
        "borderRightColor",
        $d3b73be57066120b$var$borderColorValue
      ],
      borderTopColor: [
        "borderTopColor",
        $d3b73be57066120b$var$borderColorValue
      ],
      borderBottomColor: [
        "borderBottomColor",
        $d3b73be57066120b$var$borderColorValue
      ],
      borderXColor: [
        [
          "borderLeftColor",
          "borderRightColor"
        ],
        $d3b73be57066120b$var$borderColorValue
      ],
      borderYColor: [
        [
          "borderTopColor",
          "borderBottomColor"
        ],
        $d3b73be57066120b$var$borderColorValue
      ],
      borderRadius: [
        "borderRadius",
        $d3b73be57066120b$var$borderRadiusValue
      ],
      borderTopStartRadius: [
        $d3b73be57066120b$var$rtl("borderTopLeftRadius", "borderTopRightRadius"),
        $d3b73be57066120b$var$borderRadiusValue
      ],
      borderTopEndRadius: [
        $d3b73be57066120b$var$rtl("borderTopRightRadius", "borderTopLeftRadius"),
        $d3b73be57066120b$var$borderRadiusValue
      ],
      borderBottomStartRadius: [
        $d3b73be57066120b$var$rtl("borderBottomLeftRadius", "borderBottomRightRadius"),
        $d3b73be57066120b$var$borderRadiusValue
      ],
      borderBottomEndRadius: [
        $d3b73be57066120b$var$rtl("borderBottomRightRadius", "borderBottomLeftRadius"),
        $d3b73be57066120b$var$borderRadiusValue
      ],
      borderTopLeftRadius: [
        "borderTopLeftRadius",
        $d3b73be57066120b$var$borderRadiusValue
      ],
      borderTopRightRadius: [
        "borderTopRightRadius",
        $d3b73be57066120b$var$borderRadiusValue
      ],
      borderBottomLeftRadius: [
        "borderBottomLeftRadius",
        $d3b73be57066120b$var$borderRadiusValue
      ],
      borderBottomRightRadius: [
        "borderBottomRightRadius",
        $d3b73be57066120b$var$borderRadiusValue
      ],
      padding: [
        "padding",
        $d3b73be57066120b$export$abc24f5b99744ea6
      ],
      paddingStart: [
        $d3b73be57066120b$var$rtl("paddingLeft", "paddingRight"),
        $d3b73be57066120b$export$abc24f5b99744ea6
      ],
      paddingEnd: [
        $d3b73be57066120b$var$rtl("paddingRight", "paddingLeft"),
        $d3b73be57066120b$export$abc24f5b99744ea6
      ],
      paddingLeft: [
        "paddingLeft",
        $d3b73be57066120b$export$abc24f5b99744ea6
      ],
      paddingRight: [
        "paddingRight",
        $d3b73be57066120b$export$abc24f5b99744ea6
      ],
      paddingTop: [
        "paddingTop",
        $d3b73be57066120b$export$abc24f5b99744ea6
      ],
      paddingBottom: [
        "paddingBottom",
        $d3b73be57066120b$export$abc24f5b99744ea6
      ],
      paddingX: [
        [
          "paddingLeft",
          "paddingRight"
        ],
        $d3b73be57066120b$export$abc24f5b99744ea6
      ],
      paddingY: [
        [
          "paddingTop",
          "paddingBottom"
        ],
        $d3b73be57066120b$export$abc24f5b99744ea6
      ],
      overflow: [
        "overflow",
        $d3b73be57066120b$export$46b6c81d11d2c30a
      ]
    });
    var $d3b73be57066120b$var$borderStyleProps = {
      borderWidth: "borderStyle",
      borderLeftWidth: "borderLeftStyle",
      borderRightWidth: "borderRightStyle",
      borderTopWidth: "borderTopStyle",
      borderBottomWidth: "borderBottomStyle"
    };
    function $d3b73be57066120b$var$rtl(ltr, rtl) {
      return (direction) => direction === "rtl" ? rtl : ltr;
    }
    var $d3b73be57066120b$var$UNIT_RE = /(%|px|em|rem|vw|vh|auto|cm|mm|in|pt|pc|ex|ch|rem|vmin|vmax|fr)$/;
    var $d3b73be57066120b$var$FUNC_RE = /^\s*\w+\(/;
    var $d3b73be57066120b$var$SPECTRUM_VARIABLE_RE = /(static-)?size-\d+|single-line-(height|width)/g;
    function $d3b73be57066120b$export$abc24f5b99744ea6(value) {
      if (typeof value === "number")
        return value + "px";
      if ($d3b73be57066120b$var$UNIT_RE.test(value))
        return value;
      if ($d3b73be57066120b$var$FUNC_RE.test(value))
        return value.replace($d3b73be57066120b$var$SPECTRUM_VARIABLE_RE, "var(--spectrum-global-dimension-$&, var(--spectrum-alias-$&))");
      return `var(--spectrum-global-dimension-${value}, var(--spectrum-alias-${value}))`;
    }
    function $d3b73be57066120b$export$f348bec194f2e6b5(value, matchedBreakpoints) {
      value = $d3b73be57066120b$export$52dbfdbe1b2c3541(value, matchedBreakpoints);
      return $d3b73be57066120b$export$abc24f5b99744ea6(value);
    }
    function $d3b73be57066120b$var$colorValue(value, type = "default") {
      return `var(--spectrum-global-color-${value}, var(--spectrum-semantic-${value}-color-${type}))`;
    }
    function $d3b73be57066120b$var$backgroundColorValue(value) {
      return `var(--spectrum-alias-background-color-${value}, ${$d3b73be57066120b$var$colorValue(value, "background")})`;
    }
    function $d3b73be57066120b$var$borderColorValue(value) {
      if (value === "default")
        return "var(--spectrum-alias-border-color)";
      return `var(--spectrum-alias-border-color-${value}, ${$d3b73be57066120b$var$colorValue(value, "border")})`;
    }
    function $d3b73be57066120b$var$borderSizeValue(value) {
      return `var(--spectrum-alias-border-size-${value})`;
    }
    function $d3b73be57066120b$var$borderRadiusValue(value) {
      return `var(--spectrum-alias-border-radius-${value})`;
    }
    function $d3b73be57066120b$var$hiddenValue(value) {
      return value ? "none" : void 0;
    }
    function $d3b73be57066120b$var$anyValue(value) {
      return value;
    }
    function $d3b73be57066120b$var$flexValue(value) {
      if (typeof value === "boolean")
        return value ? "1" : void 0;
      return "" + value;
    }
    function $d3b73be57066120b$export$f3c39bb9534218d0(props, handlers, direction, matchedBreakpoints) {
      let style = {};
      for (let key in props) {
        let styleProp = handlers[key];
        if (!styleProp || props[key] == null)
          continue;
        let [name, convert] = styleProp;
        if (typeof name === "function")
          name = name(direction);
        let prop = $d3b73be57066120b$export$52dbfdbe1b2c3541(props[key], matchedBreakpoints);
        let value = convert(prop);
        if (Array.isArray(name))
          for (let k of name)
            style[k] = value;
        else
          style[name] = value;
      }
      for (let prop in $d3b73be57066120b$var$borderStyleProps)
        if (style[prop]) {
          style[$d3b73be57066120b$var$borderStyleProps[prop]] = "solid";
          style.boxSizing = "border-box";
        }
      return style;
    }
    function $d3b73be57066120b$export$b8e6fb9d2dff3f41(props, handlers = $d3b73be57066120b$export$fe9c6e915565b4e8, options = {}) {
      let _a3 = props, { UNSAFE_className, UNSAFE_style } = _a3, otherProps = __objRest(_a3, ["UNSAFE_className", "UNSAFE_style"]);
      let breakpointProvider = $893a66ba513f4a66$export$199d6754bdf4e1e3();
      let { direction } = $cRUfp$reactariai18n.useLocale();
      let { matchedBreakpoints = (breakpointProvider === null || breakpointProvider === void 0 ? void 0 : breakpointProvider.matchedBreakpoints) || [
        "base"
      ] } = options;
      let styles = $d3b73be57066120b$export$f3c39bb9534218d0(props, handlers, direction, matchedBreakpoints);
      let style = __spreadValues(__spreadValues({}, UNSAFE_style), styles);
      if (otherProps.className)
        console.warn("The className prop is unsafe and is unsupported in React Spectrum v3. Please use style props with Spectrum variables, or UNSAFE_className if you absolutely must do something custom. Note that this may break in future versions due to DOM structure changes.");
      if (otherProps.style)
        console.warn("The style prop is unsafe and is unsupported in React Spectrum v3. Please use style props with Spectrum variables, or UNSAFE_style if you absolutely must do something custom. Note that this may break in future versions due to DOM structure changes.");
      let styleProps = {
        style,
        className: UNSAFE_className
      };
      if ($d3b73be57066120b$export$52dbfdbe1b2c3541(props.isHidden, matchedBreakpoints))
        styleProps.hidden = true;
      return {
        styleProps
      };
    }
    function $d3b73be57066120b$export$46b6c81d11d2c30a(value) {
      return value;
    }
    function $d3b73be57066120b$export$52dbfdbe1b2c3541(prop, matchedBreakpoints) {
      if (prop && typeof prop === "object" && !Array.isArray(prop)) {
        for (let i = 0; i < matchedBreakpoints.length; i++) {
          let breakpoint = matchedBreakpoints[i];
          if (prop[breakpoint] != null)
            return prop[breakpoint];
        }
        return prop.base;
      }
      return prop;
    }
    var $e81916440cf6fd84$var$SlotContext = /* @__PURE__ */ $parcel$interopDefault12($cRUfp$react).createContext(null);
    function $e81916440cf6fd84$export$1e5c9e6e4e15efe3(props, defaultSlot) {
      let slot = props.slot || defaultSlot;
      let { [slot]: slotProps = {} } = $cRUfp$react.useContext($e81916440cf6fd84$var$SlotContext) || {};
      return $cRUfp$reactariautils.mergeProps(props, $cRUfp$reactariautils.mergeProps(slotProps, {
        id: props.id
      }));
    }
    function $e81916440cf6fd84$export$365cf34cda9978e2(cssModule) {
      return Object.keys(cssModule).reduce((acc, slot) => {
        acc[slot] = {
          UNSAFE_className: cssModule[slot]
        };
        return acc;
      }, {});
    }
    function $e81916440cf6fd84$export$8107b24b91795686(props) {
      let parentSlots = $cRUfp$react.useContext($e81916440cf6fd84$var$SlotContext) || {};
      let { slots = {}, children } = props;
      let value = $cRUfp$react.useMemo(
        () => Object.keys(parentSlots).concat(Object.keys(slots)).reduce(
          (o, p) => __spreadProps(__spreadValues({}, o), {
            [p]: $cRUfp$reactariautils.mergeProps(parentSlots[p] || {}, slots[p] || {})
          }),
          {}
        ),
        [
          parentSlots,
          slots
        ]
      );
      return /* @__PURE__ */ $parcel$interopDefault12($cRUfp$react).createElement($e81916440cf6fd84$var$SlotContext.Provider, {
        value
      }, children);
    }
    function $e81916440cf6fd84$export$ceb145244332b7a2(props) {
      let _a3 = props, { children } = _a3, otherProps = __objRest(_a3, ["children"]);
      let content = children;
      if ($parcel$interopDefault12($cRUfp$react).Children.toArray(children).length <= 1) {
        if (typeof children === "function")
          content = /* @__PURE__ */ $parcel$interopDefault12($cRUfp$react).cloneElement($parcel$interopDefault12($cRUfp$react).Children.only(children), otherProps);
      }
      return /* @__PURE__ */ $parcel$interopDefault12($cRUfp$react).createElement($e81916440cf6fd84$var$SlotContext.Provider, {
        value: {}
      }, content);
    }
    function $67043c48a01bef79$export$e52e2242b6d0f1d4(query, ref) {
      let [hasChild, setHasChild] = $cRUfp$react.useState(true);
      $cRUfp$reactariautils.useLayoutEffect(() => {
        setHasChild(!!(ref.current && ref.current.querySelector(query)));
      }, [
        setHasChild,
        query,
        ref
      ]);
      return hasChild;
    }
    var $e9c08f6fb6c823d1$var$MOBILE_SCREEN_WIDTH = 700;
    function $e9c08f6fb6c823d1$export$736bf165441b18c7() {
      let isSSR = $cRUfp$reactariassr.useIsSSR();
      if (isSSR || typeof window === "undefined")
        return false;
      return window.screen.width <= $e9c08f6fb6c823d1$var$MOBILE_SCREEN_WIDTH;
    }
  }
});

// ../../node_modules/@react-aria/interactions/dist/main.js
var require_main10 = __commonJS({
  "../../node_modules/@react-aria/interactions/dist/main.js"(exports, module) {
    var $goTMa$reactariautils = require_main3();
    var $goTMa$react = (init_preact(), __toCommonJS(preact_exports));
    function $parcel$export12(e, n, v, s) {
      Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
    }
    function $parcel$interopDefault12(a) {
      return a && a.__esModule ? a.default : a;
    }
    $parcel$export12(module.exports, "Pressable", () => $e1dbec26039c051d$export$27c701ed9e449e99);
    $parcel$export12(module.exports, "PressResponder", () => $3596bae48579386f$export$3351871ee4b288b8);
    $parcel$export12(module.exports, "useFocus", () => $5cb73d0ce355b0dc$export$f8168d8dd8fd66e6);
    $parcel$export12(module.exports, "isFocusVisible", () => $e77252a287ef94ab$export$b9b3dfddab17db27);
    $parcel$export12(module.exports, "getInteractionModality", () => $e77252a287ef94ab$export$630ff653c5ada6a9);
    $parcel$export12(module.exports, "setInteractionModality", () => $e77252a287ef94ab$export$8397ddfc504fdb9a);
    $parcel$export12(module.exports, "useInteractionModality", () => $e77252a287ef94ab$export$98e20ec92f614cfe);
    $parcel$export12(module.exports, "useFocusVisible", () => $e77252a287ef94ab$export$ffd9e5021c1fb2d6);
    $parcel$export12(module.exports, "useFocusVisibleListener", () => $e77252a287ef94ab$export$ec71b4b83ac08ec3);
    $parcel$export12(module.exports, "useFocusWithin", () => $d16842bbd0359d1b$export$420e68273165f4ec);
    $parcel$export12(module.exports, "useHover", () => $ffbc150311c75f01$export$ae780daf29e6d456);
    $parcel$export12(module.exports, "useInteractOutside", () => $edcfa848c42f94f4$export$872b660ac5a1ff98);
    $parcel$export12(module.exports, "useKeyboard", () => $892d64db2a3c53b0$export$8f71654801c2f7cd);
    $parcel$export12(module.exports, "useMove", () => $c09386fc48fa427d$export$36da96379f79f245);
    $parcel$export12(module.exports, "usePress", () => $0294ea432cd92340$export$45712eceda6fad21);
    $parcel$export12(module.exports, "useScrollWheel", () => $a3dbce0aed7087e2$export$2123ff2b87c81ca);
    $parcel$export12(module.exports, "useLongPress", () => $3cd7b5d0eebf0ca9$export$c24ed0104d07eab9);
    var $f7e14e656343df57$var$state = "default";
    var $f7e14e656343df57$var$savedUserSelect = "";
    var $f7e14e656343df57$var$modifiedElementMap = /* @__PURE__ */ new WeakMap();
    function $f7e14e656343df57$export$16a4697467175487(target) {
      if ($goTMa$reactariautils.isIOS()) {
        if ($f7e14e656343df57$var$state === "default") {
          $f7e14e656343df57$var$savedUserSelect = document.documentElement.style.webkitUserSelect;
          document.documentElement.style.webkitUserSelect = "none";
        }
        $f7e14e656343df57$var$state = "disabled";
      } else if (target instanceof HTMLElement || target instanceof SVGElement) {
        $f7e14e656343df57$var$modifiedElementMap.set(target, target.style.userSelect);
        target.style.userSelect = "none";
      }
    }
    function $f7e14e656343df57$export$b0d6fa1ab32e3295(target) {
      if ($goTMa$reactariautils.isIOS()) {
        if ($f7e14e656343df57$var$state !== "disabled")
          return;
        $f7e14e656343df57$var$state = "restoring";
        setTimeout(() => {
          $goTMa$reactariautils.runAfterTransition(() => {
            if ($f7e14e656343df57$var$state === "restoring") {
              if (document.documentElement.style.webkitUserSelect === "none")
                document.documentElement.style.webkitUserSelect = $f7e14e656343df57$var$savedUserSelect || "";
              $f7e14e656343df57$var$savedUserSelect = "";
              $f7e14e656343df57$var$state = "default";
            }
          });
        }, 300);
      } else if (target instanceof HTMLElement || target instanceof SVGElement) {
        if (target && $f7e14e656343df57$var$modifiedElementMap.has(target)) {
          let targetOldUserSelect = $f7e14e656343df57$var$modifiedElementMap.get(target);
          if (target.style.userSelect === "none")
            target.style.userSelect = targetOldUserSelect;
          if (target.getAttribute("style") === "")
            target.removeAttribute("style");
          $f7e14e656343df57$var$modifiedElementMap.delete(target);
        }
      }
    }
    function $625cf83917e112ad$export$60278871457622de(event) {
      if (event.mozInputSource === 0 && event.isTrusted)
        return true;
      return event.detail === 0 && !event.pointerType;
    }
    var $625cf83917e112ad$export$905e7fc544a71f36 = class {
      isDefaultPrevented() {
        return this.nativeEvent.defaultPrevented;
      }
      preventDefault() {
        this.defaultPrevented = true;
        this.nativeEvent.preventDefault();
      }
      stopPropagation() {
        this.nativeEvent.stopPropagation();
        this.isPropagationStopped = () => true;
      }
      isPropagationStopped() {
        return false;
      }
      persist() {
      }
      constructor(type, nativeEvent) {
        this.nativeEvent = nativeEvent;
        this.target = nativeEvent.target;
        this.currentTarget = nativeEvent.currentTarget;
        this.relatedTarget = nativeEvent.relatedTarget;
        this.bubbles = nativeEvent.bubbles;
        this.cancelable = nativeEvent.cancelable;
        this.defaultPrevented = nativeEvent.defaultPrevented;
        this.eventPhase = nativeEvent.eventPhase;
        this.isTrusted = nativeEvent.isTrusted;
        this.timeStamp = nativeEvent.timeStamp;
        this.type = type;
      }
    };
    function $625cf83917e112ad$export$715c682d09d639cc(onBlur) {
      let stateRef = $goTMa$react.useRef({
        isFocused: false,
        onBlur,
        observer: null
      });
      stateRef.current.onBlur = onBlur;
      $goTMa$reactariautils.useLayoutEffect(() => {
        const state = stateRef.current;
        return () => {
          if (state.observer) {
            state.observer.disconnect();
            state.observer = null;
          }
        };
      }, []);
      return $goTMa$react.useCallback((e1) => {
        if (e1.target instanceof HTMLButtonElement || e1.target instanceof HTMLInputElement || e1.target instanceof HTMLTextAreaElement || e1.target instanceof HTMLSelectElement) {
          stateRef.current.isFocused = true;
          let target = e1.target;
          let onBlurHandler = (e) => {
            var _current, ref;
            stateRef.current.isFocused = false;
            if (target.disabled)
              (ref = (_current = stateRef.current).onBlur) === null || ref === void 0 ? void 0 : ref.call(_current, new $625cf83917e112ad$export$905e7fc544a71f36("blur", e));
            if (stateRef.current.observer) {
              stateRef.current.observer.disconnect();
              stateRef.current.observer = null;
            }
          };
          target.addEventListener("focusout", onBlurHandler, {
            once: true
          });
          stateRef.current.observer = new MutationObserver(() => {
            if (stateRef.current.isFocused && target.disabled) {
              stateRef.current.observer.disconnect();
              target.dispatchEvent(new FocusEvent("blur"));
              target.dispatchEvent(new FocusEvent("focusout", {
                bubbles: true
              }));
            }
          });
          stateRef.current.observer.observe(target, {
            attributes: true,
            attributeFilter: [
              "disabled"
            ]
          });
        }
      }, []);
    }
    var $01d3f539e91688c8$export$5165eccb35aaadb5 = $parcel$interopDefault12($goTMa$react).createContext(null);
    $01d3f539e91688c8$export$5165eccb35aaadb5.displayName = "PressResponderContext";
    function $0294ea432cd92340$var$usePressResponderContext(props) {
      let context = $goTMa$react.useContext($01d3f539e91688c8$export$5165eccb35aaadb5);
      if (context) {
        let _a3 = context, { register } = _a3, contextProps = __objRest(_a3, ["register"]);
        props = $goTMa$reactariautils.mergeProps(contextProps, props);
        register();
      }
      $goTMa$reactariautils.useSyncRef(context, props.ref);
      return props;
    }
    function $0294ea432cd92340$export$45712eceda6fad21(props) {
      let _a3 = $0294ea432cd92340$var$usePressResponderContext(props), {
        onPress: onPress1,
        onPressChange: onPressChange1,
        onPressStart: onPressStart1,
        onPressEnd: onPressEnd1,
        onPressUp: onPressUp1,
        isDisabled: isDisabled1,
        isPressed: isPressedProp,
        preventFocusOnPress,
        shouldCancelOnPointerExit,
        allowTextSelectionOnPress,
        ref: _14
      } = _a3, domProps = __objRest(_a3, [
        "onPress",
        "onPressChange",
        "onPressStart",
        "onPressEnd",
        "onPressUp",
        "isDisabled",
        "isPressed",
        "preventFocusOnPress",
        "shouldCancelOnPointerExit",
        "allowTextSelectionOnPress",
        "ref"
      ]);
      let propsRef = $goTMa$react.useRef(null);
      propsRef.current = {
        onPress: onPress1,
        onPressChange: onPressChange1,
        onPressStart: onPressStart1,
        onPressEnd: onPressEnd1,
        onPressUp: onPressUp1,
        isDisabled: isDisabled1,
        shouldCancelOnPointerExit
      };
      let [isPressed, setPressed] = $goTMa$react.useState(false);
      let ref = $goTMa$react.useRef({
        isPressed: false,
        ignoreEmulatedMouseEvents: false,
        ignoreClickAfterPress: false,
        didFirePressStart: false,
        activePointerId: null,
        target: null,
        isOverTarget: false,
        pointerType: null
      });
      let { addGlobalListener, removeAllGlobalListeners } = $goTMa$reactariautils.useGlobalListeners();
      let pressProps1 = $goTMa$react.useMemo(() => {
        let state = ref.current;
        let triggerPressStart = (originalEvent, pointerType) => {
          let { onPressStart, onPressChange, isDisabled } = propsRef.current;
          if (isDisabled || state.didFirePressStart)
            return;
          if (onPressStart)
            onPressStart({
              type: "pressstart",
              pointerType,
              target: originalEvent.currentTarget,
              shiftKey: originalEvent.shiftKey,
              metaKey: originalEvent.metaKey,
              ctrlKey: originalEvent.ctrlKey,
              altKey: originalEvent.altKey
            });
          if (onPressChange)
            onPressChange(true);
          state.didFirePressStart = true;
          setPressed(true);
        };
        let triggerPressEnd = (originalEvent, pointerType, wasPressed = true) => {
          let { onPressEnd, onPressChange, onPress, isDisabled } = propsRef.current;
          if (!state.didFirePressStart)
            return;
          state.ignoreClickAfterPress = true;
          state.didFirePressStart = false;
          if (onPressEnd)
            onPressEnd({
              type: "pressend",
              pointerType,
              target: originalEvent.currentTarget,
              shiftKey: originalEvent.shiftKey,
              metaKey: originalEvent.metaKey,
              ctrlKey: originalEvent.ctrlKey,
              altKey: originalEvent.altKey
            });
          if (onPressChange)
            onPressChange(false);
          setPressed(false);
          if (onPress && wasPressed && !isDisabled)
            onPress({
              type: "press",
              pointerType,
              target: originalEvent.currentTarget,
              shiftKey: originalEvent.shiftKey,
              metaKey: originalEvent.metaKey,
              ctrlKey: originalEvent.ctrlKey,
              altKey: originalEvent.altKey
            });
        };
        let triggerPressUp = (originalEvent, pointerType) => {
          let { onPressUp, isDisabled } = propsRef.current;
          if (isDisabled)
            return;
          if (onPressUp)
            onPressUp({
              type: "pressup",
              pointerType,
              target: originalEvent.currentTarget,
              shiftKey: originalEvent.shiftKey,
              metaKey: originalEvent.metaKey,
              ctrlKey: originalEvent.ctrlKey,
              altKey: originalEvent.altKey
            });
        };
        let cancel = (e) => {
          if (state.isPressed) {
            if (state.isOverTarget)
              triggerPressEnd($0294ea432cd92340$var$createEvent(state.target, e), state.pointerType, false);
            state.isPressed = false;
            state.isOverTarget = false;
            state.activePointerId = null;
            state.pointerType = null;
            removeAllGlobalListeners();
            if (!allowTextSelectionOnPress)
              $f7e14e656343df57$export$b0d6fa1ab32e3295(state.target);
          }
        };
        let pressProps = {
          onKeyDown(e) {
            if ($0294ea432cd92340$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && e.currentTarget.contains(e.target)) {
              if ($0294ea432cd92340$var$shouldPreventDefaultKeyboard(e.target, e.key))
                e.preventDefault();
              e.stopPropagation();
              if (!state.isPressed && !e.repeat) {
                state.target = e.currentTarget;
                state.isPressed = true;
                triggerPressStart(e, "keyboard");
                addGlobalListener(document, "keyup", onKeyUp, false);
              }
            } else if (e.key === "Enter" && $0294ea432cd92340$var$isHTMLAnchorLink(e.currentTarget))
              e.stopPropagation();
          },
          onKeyUp(e) {
            if ($0294ea432cd92340$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && !e.repeat && e.currentTarget.contains(e.target))
              triggerPressUp($0294ea432cd92340$var$createEvent(state.target, e), "keyboard");
          },
          onClick(e) {
            if (e && !e.currentTarget.contains(e.target))
              return;
            if (e && e.button === 0) {
              e.stopPropagation();
              if (isDisabled1)
                e.preventDefault();
              if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && (state.pointerType === "virtual" || $625cf83917e112ad$export$60278871457622de(e.nativeEvent))) {
                if (!isDisabled1 && !preventFocusOnPress)
                  $goTMa$reactariautils.focusWithoutScrolling(e.currentTarget);
                triggerPressStart(e, "virtual");
                triggerPressUp(e, "virtual");
                triggerPressEnd(e, "virtual");
              }
              state.ignoreEmulatedMouseEvents = false;
              state.ignoreClickAfterPress = false;
            }
          }
        };
        let onKeyUp = (e) => {
          if (state.isPressed && $0294ea432cd92340$var$isValidKeyboardEvent(e, state.target)) {
            if ($0294ea432cd92340$var$shouldPreventDefaultKeyboard(e.target, e.key))
              e.preventDefault();
            e.stopPropagation();
            state.isPressed = false;
            let target = e.target;
            triggerPressEnd($0294ea432cd92340$var$createEvent(state.target, e), "keyboard", state.target.contains(target));
            removeAllGlobalListeners();
            if (state.target instanceof HTMLElement && state.target.contains(target) && ($0294ea432cd92340$var$isHTMLAnchorLink(state.target) || state.target.getAttribute("role") === "link"))
              state.target.click();
          }
        };
        if (typeof PointerEvent !== "undefined") {
          pressProps.onPointerDown = (e) => {
            if (e.button !== 0 || !e.currentTarget.contains(e.target))
              return;
            if ($0294ea432cd92340$var$isVirtualPointerEvent(e.nativeEvent)) {
              state.pointerType = "virtual";
              return;
            }
            if ($0294ea432cd92340$var$shouldPreventDefault(e.currentTarget))
              e.preventDefault();
            state.pointerType = e.pointerType;
            e.stopPropagation();
            if (!state.isPressed) {
              state.isPressed = true;
              state.isOverTarget = true;
              state.activePointerId = e.pointerId;
              state.target = e.currentTarget;
              if (!isDisabled1 && !preventFocusOnPress)
                $goTMa$reactariautils.focusWithoutScrolling(e.currentTarget);
              if (!allowTextSelectionOnPress)
                $f7e14e656343df57$export$16a4697467175487(state.target);
              triggerPressStart(e, state.pointerType);
              addGlobalListener(document, "pointermove", onPointerMove, false);
              addGlobalListener(document, "pointerup", onPointerUp, false);
              addGlobalListener(document, "pointercancel", onPointerCancel, false);
            }
          };
          pressProps.onMouseDown = (e) => {
            if (!e.currentTarget.contains(e.target))
              return;
            if (e.button === 0) {
              if ($0294ea432cd92340$var$shouldPreventDefault(e.currentTarget))
                e.preventDefault();
              e.stopPropagation();
            }
          };
          pressProps.onPointerUp = (e) => {
            if (!e.currentTarget.contains(e.target) || state.pointerType === "virtual")
              return;
            if (e.button === 0 && $0294ea432cd92340$var$isOverTarget(e, e.currentTarget))
              triggerPressUp(e, state.pointerType || e.pointerType);
          };
          let onPointerMove = (e) => {
            if (e.pointerId !== state.activePointerId)
              return;
            if ($0294ea432cd92340$var$isOverTarget(e, state.target)) {
              if (!state.isOverTarget) {
                state.isOverTarget = true;
                triggerPressStart($0294ea432cd92340$var$createEvent(state.target, e), state.pointerType);
              }
            } else if (state.isOverTarget) {
              state.isOverTarget = false;
              triggerPressEnd($0294ea432cd92340$var$createEvent(state.target, e), state.pointerType, false);
              if (propsRef.current.shouldCancelOnPointerExit)
                cancel(e);
            }
          };
          let onPointerUp = (e) => {
            if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {
              if ($0294ea432cd92340$var$isOverTarget(e, state.target))
                triggerPressEnd($0294ea432cd92340$var$createEvent(state.target, e), state.pointerType);
              else if (state.isOverTarget)
                triggerPressEnd($0294ea432cd92340$var$createEvent(state.target, e), state.pointerType, false);
              state.isPressed = false;
              state.isOverTarget = false;
              state.activePointerId = null;
              state.pointerType = null;
              removeAllGlobalListeners();
              if (!allowTextSelectionOnPress)
                $f7e14e656343df57$export$b0d6fa1ab32e3295(state.target);
            }
          };
          let onPointerCancel = (e) => {
            cancel(e);
          };
          pressProps.onDragStart = (e) => {
            if (!e.currentTarget.contains(e.target))
              return;
            cancel(e);
          };
        } else {
          pressProps.onMouseDown = (e) => {
            if (e.button !== 0 || !e.currentTarget.contains(e.target))
              return;
            if ($0294ea432cd92340$var$shouldPreventDefault(e.currentTarget))
              e.preventDefault();
            e.stopPropagation();
            if (state.ignoreEmulatedMouseEvents)
              return;
            state.isPressed = true;
            state.isOverTarget = true;
            state.target = e.currentTarget;
            state.pointerType = $625cf83917e112ad$export$60278871457622de(e.nativeEvent) ? "virtual" : "mouse";
            if (!isDisabled1 && !preventFocusOnPress)
              $goTMa$reactariautils.focusWithoutScrolling(e.currentTarget);
            triggerPressStart(e, state.pointerType);
            addGlobalListener(document, "mouseup", onMouseUp, false);
          };
          pressProps.onMouseEnter = (e) => {
            if (!e.currentTarget.contains(e.target))
              return;
            e.stopPropagation();
            if (state.isPressed && !state.ignoreEmulatedMouseEvents) {
              state.isOverTarget = true;
              triggerPressStart(e, state.pointerType);
            }
          };
          pressProps.onMouseLeave = (e) => {
            if (!e.currentTarget.contains(e.target))
              return;
            e.stopPropagation();
            if (state.isPressed && !state.ignoreEmulatedMouseEvents) {
              state.isOverTarget = false;
              triggerPressEnd(e, state.pointerType, false);
              if (propsRef.current.shouldCancelOnPointerExit)
                cancel(e);
            }
          };
          pressProps.onMouseUp = (e) => {
            if (!e.currentTarget.contains(e.target))
              return;
            if (!state.ignoreEmulatedMouseEvents && e.button === 0)
              triggerPressUp(e, state.pointerType);
          };
          let onMouseUp = (e) => {
            if (e.button !== 0)
              return;
            state.isPressed = false;
            removeAllGlobalListeners();
            if (state.ignoreEmulatedMouseEvents) {
              state.ignoreEmulatedMouseEvents = false;
              return;
            }
            if ($0294ea432cd92340$var$isOverTarget(e, state.target))
              triggerPressEnd($0294ea432cd92340$var$createEvent(state.target, e), state.pointerType);
            else if (state.isOverTarget)
              triggerPressEnd($0294ea432cd92340$var$createEvent(state.target, e), state.pointerType, false);
            state.isOverTarget = false;
          };
          pressProps.onTouchStart = (e) => {
            if (!e.currentTarget.contains(e.target))
              return;
            e.stopPropagation();
            let touch = $0294ea432cd92340$var$getTouchFromEvent(e.nativeEvent);
            if (!touch)
              return;
            state.activePointerId = touch.identifier;
            state.ignoreEmulatedMouseEvents = true;
            state.isOverTarget = true;
            state.isPressed = true;
            state.target = e.currentTarget;
            state.pointerType = "touch";
            if (!isDisabled1 && !preventFocusOnPress)
              $goTMa$reactariautils.focusWithoutScrolling(e.currentTarget);
            if (!allowTextSelectionOnPress)
              $f7e14e656343df57$export$16a4697467175487(state.target);
            triggerPressStart(e, state.pointerType);
            addGlobalListener(window, "scroll", onScroll, true);
          };
          pressProps.onTouchMove = (e) => {
            if (!e.currentTarget.contains(e.target))
              return;
            e.stopPropagation();
            if (!state.isPressed)
              return;
            let touch = $0294ea432cd92340$var$getTouchById(e.nativeEvent, state.activePointerId);
            if (touch && $0294ea432cd92340$var$isOverTarget(touch, e.currentTarget)) {
              if (!state.isOverTarget) {
                state.isOverTarget = true;
                triggerPressStart(e, state.pointerType);
              }
            } else if (state.isOverTarget) {
              state.isOverTarget = false;
              triggerPressEnd(e, state.pointerType, false);
              if (propsRef.current.shouldCancelOnPointerExit)
                cancel(e);
            }
          };
          pressProps.onTouchEnd = (e) => {
            if (!e.currentTarget.contains(e.target))
              return;
            e.stopPropagation();
            if (!state.isPressed)
              return;
            let touch = $0294ea432cd92340$var$getTouchById(e.nativeEvent, state.activePointerId);
            if (touch && $0294ea432cd92340$var$isOverTarget(touch, e.currentTarget)) {
              triggerPressUp(e, state.pointerType);
              triggerPressEnd(e, state.pointerType);
            } else if (state.isOverTarget)
              triggerPressEnd(e, state.pointerType, false);
            state.isPressed = false;
            state.activePointerId = null;
            state.isOverTarget = false;
            state.ignoreEmulatedMouseEvents = true;
            if (!allowTextSelectionOnPress)
              $f7e14e656343df57$export$b0d6fa1ab32e3295(state.target);
            removeAllGlobalListeners();
          };
          pressProps.onTouchCancel = (e) => {
            if (!e.currentTarget.contains(e.target))
              return;
            e.stopPropagation();
            if (state.isPressed)
              cancel(e);
          };
          let onScroll = (e) => {
            if (state.isPressed && e.target.contains(state.target))
              cancel({
                currentTarget: state.target,
                shiftKey: false,
                ctrlKey: false,
                metaKey: false,
                altKey: false
              });
          };
          pressProps.onDragStart = (e) => {
            if (!e.currentTarget.contains(e.target))
              return;
            cancel(e);
          };
        }
        return pressProps;
      }, [
        addGlobalListener,
        isDisabled1,
        preventFocusOnPress,
        removeAllGlobalListeners,
        allowTextSelectionOnPress
      ]);
      $goTMa$react.useEffect(() => {
        return () => {
          if (!allowTextSelectionOnPress)
            $f7e14e656343df57$export$b0d6fa1ab32e3295(ref.current.target);
        };
      }, [
        allowTextSelectionOnPress
      ]);
      return {
        isPressed: isPressedProp || isPressed,
        pressProps: $goTMa$reactariautils.mergeProps(domProps, pressProps1)
      };
    }
    function $0294ea432cd92340$var$isHTMLAnchorLink(target) {
      return target.tagName === "A" && target.hasAttribute("href");
    }
    function $0294ea432cd92340$var$isValidKeyboardEvent(event, currentTarget) {
      const { key, code } = event;
      const element = currentTarget;
      const role = element.getAttribute("role");
      return (key === "Enter" || key === " " || key === "Spacebar" || code === "Space") && !(element instanceof HTMLInputElement && !$0294ea432cd92340$var$isValidInputKey(element, key) || element instanceof HTMLTextAreaElement || element.isContentEditable) && (!$0294ea432cd92340$var$isHTMLAnchorLink(element) || role === "button" && key !== "Enter") && !(role === "link" && key !== "Enter");
    }
    function $0294ea432cd92340$var$getTouchFromEvent(event) {
      const { targetTouches } = event;
      if (targetTouches.length > 0)
        return targetTouches[0];
      return null;
    }
    function $0294ea432cd92340$var$getTouchById(event, pointerId) {
      const changedTouches = event.changedTouches;
      for (let i = 0; i < changedTouches.length; i++) {
        const touch = changedTouches[i];
        if (touch.identifier === pointerId)
          return touch;
      }
      return null;
    }
    function $0294ea432cd92340$var$createEvent(target, e) {
      return {
        currentTarget: target,
        shiftKey: e.shiftKey,
        ctrlKey: e.ctrlKey,
        metaKey: e.metaKey,
        altKey: e.altKey
      };
    }
    function $0294ea432cd92340$var$getPointClientRect(point) {
      let offsetX = point.width / 2 || point.radiusX || 0;
      let offsetY = point.height / 2 || point.radiusY || 0;
      return {
        top: point.clientY - offsetY,
        right: point.clientX + offsetX,
        bottom: point.clientY + offsetY,
        left: point.clientX - offsetX
      };
    }
    function $0294ea432cd92340$var$areRectanglesOverlapping(a, b) {
      if (a.left > b.right || b.left > a.right)
        return false;
      if (a.top > b.bottom || b.top > a.bottom)
        return false;
      return true;
    }
    function $0294ea432cd92340$var$isOverTarget(point, target) {
      let rect = target.getBoundingClientRect();
      let pointRect = $0294ea432cd92340$var$getPointClientRect(point);
      return $0294ea432cd92340$var$areRectanglesOverlapping(rect, pointRect);
    }
    function $0294ea432cd92340$var$shouldPreventDefault(target) {
      return !(target instanceof HTMLElement) || !target.draggable;
    }
    function $0294ea432cd92340$var$shouldPreventDefaultKeyboard(target, key) {
      if (target instanceof HTMLInputElement)
        return !$0294ea432cd92340$var$isValidInputKey(target, key);
      if (target instanceof HTMLButtonElement)
        return target.type !== "submit";
      return true;
    }
    var $0294ea432cd92340$var$nonTextInputTypes = /* @__PURE__ */ new Set([
      "checkbox",
      "radio",
      "range",
      "color",
      "file",
      "image",
      "button",
      "submit",
      "reset"
    ]);
    function $0294ea432cd92340$var$isValidInputKey(target, key) {
      return target.type === "checkbox" || target.type === "radio" ? key === " " : $0294ea432cd92340$var$nonTextInputTypes.has(target.type);
    }
    function $0294ea432cd92340$var$isVirtualPointerEvent(event) {
      return event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === "mouse";
    }
    var $e1dbec26039c051d$export$27c701ed9e449e99 = /* @__PURE__ */ $parcel$interopDefault12($goTMa$react).forwardRef((_a3, ref) => {
      var _b = _a3, { children } = _b, props = __objRest(_b, ["children"]);
      let newRef = $goTMa$react.useRef();
      ref = ref !== null && ref !== void 0 ? ref : newRef;
      let { pressProps } = $0294ea432cd92340$export$45712eceda6fad21(__spreadProps(__spreadValues({}, props), {
        ref
      }));
      let child = $parcel$interopDefault12($goTMa$react).Children.only(children);
      return /* @__PURE__ */ $parcel$interopDefault12($goTMa$react).cloneElement(
        child,
        __spreadValues({
          ref
        }, $goTMa$reactariautils.mergeProps(child.props, pressProps))
      );
    });
    var $3596bae48579386f$export$3351871ee4b288b8 = /* @__PURE__ */ $parcel$interopDefault12($goTMa$react).forwardRef((_a3, ref) => {
      var _b = _a3, { children } = _b, props = __objRest(_b, ["children"]);
      let isRegistered = $goTMa$react.useRef(false);
      let prevContext = $goTMa$react.useContext($01d3f539e91688c8$export$5165eccb35aaadb5);
      let context = $goTMa$reactariautils.mergeProps(prevContext || {}, __spreadProps(__spreadValues({}, props), {
        ref: ref || (prevContext === null || prevContext === void 0 ? void 0 : prevContext.ref),
        register() {
          isRegistered.current = true;
          if (prevContext)
            prevContext.register();
        }
      }));
      $goTMa$reactariautils.useSyncRef(prevContext, ref);
      $goTMa$react.useEffect(() => {
        if (!isRegistered.current)
          console.warn("A PressResponder was rendered without a pressable child. Either call the usePress hook, or wrap your DOM node with <Pressable> component.");
      }, []);
      return /* @__PURE__ */ $parcel$interopDefault12($goTMa$react).createElement($01d3f539e91688c8$export$5165eccb35aaadb5.Provider, {
        value: context
      }, children);
    });
    function $5cb73d0ce355b0dc$export$f8168d8dd8fd66e6(props) {
      let { isDisabled, onFocus: onFocusProp, onBlur: onBlurProp, onFocusChange } = props;
      const onBlur = $goTMa$react.useCallback((e) => {
        if (e.target === e.currentTarget) {
          if (onBlurProp)
            onBlurProp(e);
          if (onFocusChange)
            onFocusChange(false);
          return true;
        }
      }, [
        onBlurProp,
        onFocusChange
      ]);
      const onSyntheticFocus = $625cf83917e112ad$export$715c682d09d639cc(onBlur);
      const onFocus = $goTMa$react.useCallback((e) => {
        if (e.target === e.currentTarget) {
          if (onFocusProp)
            onFocusProp(e);
          if (onFocusChange)
            onFocusChange(true);
          onSyntheticFocus(e);
        }
      }, [
        onFocusChange,
        onFocusProp,
        onSyntheticFocus
      ]);
      return {
        focusProps: {
          onFocus: !isDisabled && (onFocusProp || onFocusChange || onBlurProp) ? onFocus : void 0,
          onBlur: !isDisabled && (onBlurProp || onFocusChange) ? onBlur : null
        }
      };
    }
    var $e77252a287ef94ab$var$currentModality = null;
    var $e77252a287ef94ab$var$changeHandlers = /* @__PURE__ */ new Set();
    var $e77252a287ef94ab$var$hasSetupGlobalListeners = false;
    var $e77252a287ef94ab$var$hasEventBeforeFocus = false;
    var $e77252a287ef94ab$var$hasBlurredWindowRecently = false;
    var $e77252a287ef94ab$var$FOCUS_VISIBLE_INPUT_KEYS = {
      Tab: true,
      Escape: true
    };
    function $e77252a287ef94ab$var$triggerChangeHandlers(modality, e) {
      for (let handler of $e77252a287ef94ab$var$changeHandlers)
        handler(modality, e);
    }
    function $e77252a287ef94ab$var$isValidKey(e) {
      return !(e.metaKey || !$goTMa$reactariautils.isMac() && e.altKey || e.ctrlKey || e.key === "Control" || e.key === "Shift" || e.key === "Meta");
    }
    function $e77252a287ef94ab$var$handleKeyboardEvent(e) {
      $e77252a287ef94ab$var$hasEventBeforeFocus = true;
      if ($e77252a287ef94ab$var$isValidKey(e)) {
        $e77252a287ef94ab$var$currentModality = "keyboard";
        $e77252a287ef94ab$var$triggerChangeHandlers("keyboard", e);
      }
    }
    function $e77252a287ef94ab$var$handlePointerEvent(e) {
      $e77252a287ef94ab$var$currentModality = "pointer";
      if (e.type === "mousedown" || e.type === "pointerdown") {
        $e77252a287ef94ab$var$hasEventBeforeFocus = true;
        $e77252a287ef94ab$var$triggerChangeHandlers("pointer", e);
      }
    }
    function $e77252a287ef94ab$var$handleClickEvent(e) {
      if ($625cf83917e112ad$export$60278871457622de(e)) {
        $e77252a287ef94ab$var$hasEventBeforeFocus = true;
        $e77252a287ef94ab$var$currentModality = "virtual";
      }
    }
    function $e77252a287ef94ab$var$handleFocusEvent(e) {
      if (e.target === window || e.target === document)
        return;
      if (!$e77252a287ef94ab$var$hasEventBeforeFocus && !$e77252a287ef94ab$var$hasBlurredWindowRecently) {
        $e77252a287ef94ab$var$currentModality = "virtual";
        $e77252a287ef94ab$var$triggerChangeHandlers("virtual", e);
      }
      $e77252a287ef94ab$var$hasEventBeforeFocus = false;
      $e77252a287ef94ab$var$hasBlurredWindowRecently = false;
    }
    function $e77252a287ef94ab$var$handleWindowBlur() {
      $e77252a287ef94ab$var$hasEventBeforeFocus = false;
      $e77252a287ef94ab$var$hasBlurredWindowRecently = true;
    }
    function $e77252a287ef94ab$var$setupGlobalFocusEvents() {
      if (typeof window === "undefined" || $e77252a287ef94ab$var$hasSetupGlobalListeners)
        return;
      let focus = HTMLElement.prototype.focus;
      HTMLElement.prototype.focus = function() {
        $e77252a287ef94ab$var$hasEventBeforeFocus = true;
        focus.apply(this, arguments);
      };
      document.addEventListener("keydown", $e77252a287ef94ab$var$handleKeyboardEvent, true);
      document.addEventListener("keyup", $e77252a287ef94ab$var$handleKeyboardEvent, true);
      document.addEventListener("click", $e77252a287ef94ab$var$handleClickEvent, true);
      window.addEventListener("focus", $e77252a287ef94ab$var$handleFocusEvent, true);
      window.addEventListener("blur", $e77252a287ef94ab$var$handleWindowBlur, false);
      if (typeof PointerEvent !== "undefined") {
        document.addEventListener("pointerdown", $e77252a287ef94ab$var$handlePointerEvent, true);
        document.addEventListener("pointermove", $e77252a287ef94ab$var$handlePointerEvent, true);
        document.addEventListener("pointerup", $e77252a287ef94ab$var$handlePointerEvent, true);
      } else {
        document.addEventListener("mousedown", $e77252a287ef94ab$var$handlePointerEvent, true);
        document.addEventListener("mousemove", $e77252a287ef94ab$var$handlePointerEvent, true);
        document.addEventListener("mouseup", $e77252a287ef94ab$var$handlePointerEvent, true);
      }
      $e77252a287ef94ab$var$hasSetupGlobalListeners = true;
    }
    if (typeof document !== "undefined") {
      if (document.readyState !== "loading")
        $e77252a287ef94ab$var$setupGlobalFocusEvents();
      else
        document.addEventListener("DOMContentLoaded", $e77252a287ef94ab$var$setupGlobalFocusEvents);
    }
    function $e77252a287ef94ab$export$b9b3dfddab17db27() {
      return $e77252a287ef94ab$var$currentModality !== "pointer";
    }
    function $e77252a287ef94ab$export$630ff653c5ada6a9() {
      return $e77252a287ef94ab$var$currentModality;
    }
    function $e77252a287ef94ab$export$8397ddfc504fdb9a(modality) {
      $e77252a287ef94ab$var$currentModality = modality;
      $e77252a287ef94ab$var$triggerChangeHandlers(modality, null);
    }
    function $e77252a287ef94ab$export$98e20ec92f614cfe() {
      $e77252a287ef94ab$var$setupGlobalFocusEvents();
      let [modality, setModality] = $goTMa$react.useState($e77252a287ef94ab$var$currentModality);
      $goTMa$react.useEffect(() => {
        let handler = () => {
          setModality($e77252a287ef94ab$var$currentModality);
        };
        $e77252a287ef94ab$var$changeHandlers.add(handler);
        return () => {
          $e77252a287ef94ab$var$changeHandlers.delete(handler);
        };
      }, []);
      return modality;
    }
    function $e77252a287ef94ab$var$isKeyboardFocusEvent(isTextInput, modality, e) {
      return !(isTextInput && modality === "keyboard" && e instanceof KeyboardEvent && !$e77252a287ef94ab$var$FOCUS_VISIBLE_INPUT_KEYS[e.key]);
    }
    function $e77252a287ef94ab$export$ffd9e5021c1fb2d6(props = {}) {
      let { isTextInput, autoFocus } = props;
      let [isFocusVisibleState, setFocusVisible] = $goTMa$react.useState(autoFocus || $e77252a287ef94ab$export$b9b3dfddab17db27());
      $e77252a287ef94ab$export$ec71b4b83ac08ec3(($e77252a287ef94ab$export$b9b3dfddab17db272) => {
        setFocusVisible($e77252a287ef94ab$export$b9b3dfddab17db272);
      }, [
        isTextInput
      ], {
        isTextInput
      });
      return {
        isFocusVisible: isFocusVisibleState
      };
    }
    function $e77252a287ef94ab$export$ec71b4b83ac08ec3(fn, deps, opts) {
      $e77252a287ef94ab$var$setupGlobalFocusEvents();
      $goTMa$react.useEffect(() => {
        let handler = (modality, e) => {
          if (!$e77252a287ef94ab$var$isKeyboardFocusEvent(opts === null || opts === void 0 ? void 0 : opts.isTextInput, modality, e))
            return;
          fn($e77252a287ef94ab$export$b9b3dfddab17db27());
        };
        $e77252a287ef94ab$var$changeHandlers.add(handler);
        return () => {
          $e77252a287ef94ab$var$changeHandlers.delete(handler);
        };
      }, deps);
    }
    function $d16842bbd0359d1b$export$420e68273165f4ec(props) {
      let { isDisabled, onBlurWithin, onFocusWithin, onFocusWithinChange } = props;
      let state = $goTMa$react.useRef({
        isFocusWithin: false
      });
      let onBlur = $goTMa$react.useCallback((e) => {
        if (state.current.isFocusWithin && !e.currentTarget.contains(e.relatedTarget)) {
          state.current.isFocusWithin = false;
          if (onBlurWithin)
            onBlurWithin(e);
          if (onFocusWithinChange)
            onFocusWithinChange(false);
        }
      }, [
        onBlurWithin,
        onFocusWithinChange,
        state
      ]);
      let onSyntheticFocus = $625cf83917e112ad$export$715c682d09d639cc(onBlur);
      let onFocus = $goTMa$react.useCallback((e) => {
        if (!state.current.isFocusWithin) {
          if (onFocusWithin)
            onFocusWithin(e);
          if (onFocusWithinChange)
            onFocusWithinChange(true);
          state.current.isFocusWithin = true;
          onSyntheticFocus(e);
        }
      }, [
        onFocusWithin,
        onFocusWithinChange,
        onSyntheticFocus
      ]);
      if (isDisabled)
        return {
          focusWithinProps: {
            onFocus: null,
            onBlur: null
          }
        };
      return {
        focusWithinProps: {
          onFocus,
          onBlur
        }
      };
    }
    var $ffbc150311c75f01$var$globalIgnoreEmulatedMouseEvents = false;
    var $ffbc150311c75f01$var$hoverCount = 0;
    function $ffbc150311c75f01$var$setGlobalIgnoreEmulatedMouseEvents() {
      $ffbc150311c75f01$var$globalIgnoreEmulatedMouseEvents = true;
      setTimeout(() => {
        $ffbc150311c75f01$var$globalIgnoreEmulatedMouseEvents = false;
      }, 50);
    }
    function $ffbc150311c75f01$var$handleGlobalPointerEvent(e) {
      if (e.pointerType === "touch")
        $ffbc150311c75f01$var$setGlobalIgnoreEmulatedMouseEvents();
    }
    function $ffbc150311c75f01$var$setupGlobalTouchEvents() {
      if (typeof document === "undefined")
        return;
      if (typeof PointerEvent !== "undefined")
        document.addEventListener("pointerup", $ffbc150311c75f01$var$handleGlobalPointerEvent);
      else
        document.addEventListener("touchend", $ffbc150311c75f01$var$setGlobalIgnoreEmulatedMouseEvents);
      $ffbc150311c75f01$var$hoverCount++;
      return () => {
        $ffbc150311c75f01$var$hoverCount--;
        if ($ffbc150311c75f01$var$hoverCount > 0)
          return;
        if (typeof PointerEvent !== "undefined")
          document.removeEventListener("pointerup", $ffbc150311c75f01$var$handleGlobalPointerEvent);
        else
          document.removeEventListener("touchend", $ffbc150311c75f01$var$setGlobalIgnoreEmulatedMouseEvents);
      };
    }
    function $ffbc150311c75f01$export$ae780daf29e6d456(props) {
      let { onHoverStart, onHoverChange, onHoverEnd, isDisabled } = props;
      let [isHovered, setHovered] = $goTMa$react.useState(false);
      let state = $goTMa$react.useRef({
        isHovered: false,
        ignoreEmulatedMouseEvents: false,
        pointerType: "",
        target: null
      }).current;
      $goTMa$react.useEffect($ffbc150311c75f01$var$setupGlobalTouchEvents, []);
      let { hoverProps: hoverProps1, triggerHoverEnd: triggerHoverEnd1 } = $goTMa$react.useMemo(() => {
        let triggerHoverStart = (event, pointerType) => {
          state.pointerType = pointerType;
          if (isDisabled || pointerType === "touch" || state.isHovered || !event.currentTarget.contains(event.target))
            return;
          state.isHovered = true;
          let target = event.currentTarget;
          state.target = target;
          if (onHoverStart)
            onHoverStart({
              type: "hoverstart",
              target,
              pointerType
            });
          if (onHoverChange)
            onHoverChange(true);
          setHovered(true);
        };
        let triggerHoverEnd = (event, pointerType) => {
          state.pointerType = "";
          state.target = null;
          if (pointerType === "touch" || !state.isHovered)
            return;
          state.isHovered = false;
          let target = event.currentTarget;
          if (onHoverEnd)
            onHoverEnd({
              type: "hoverend",
              target,
              pointerType
            });
          if (onHoverChange)
            onHoverChange(false);
          setHovered(false);
        };
        let hoverProps = {};
        if (typeof PointerEvent !== "undefined") {
          hoverProps.onPointerEnter = (e) => {
            if ($ffbc150311c75f01$var$globalIgnoreEmulatedMouseEvents && e.pointerType === "mouse")
              return;
            triggerHoverStart(e, e.pointerType);
          };
          hoverProps.onPointerLeave = (e) => {
            if (!isDisabled && e.currentTarget.contains(e.target))
              triggerHoverEnd(e, e.pointerType);
          };
        } else {
          hoverProps.onTouchStart = () => {
            state.ignoreEmulatedMouseEvents = true;
          };
          hoverProps.onMouseEnter = (e) => {
            if (!state.ignoreEmulatedMouseEvents && !$ffbc150311c75f01$var$globalIgnoreEmulatedMouseEvents)
              triggerHoverStart(e, "mouse");
            state.ignoreEmulatedMouseEvents = false;
          };
          hoverProps.onMouseLeave = (e) => {
            if (!isDisabled && e.currentTarget.contains(e.target))
              triggerHoverEnd(e, "mouse");
          };
        }
        return {
          hoverProps,
          triggerHoverEnd
        };
      }, [
        onHoverStart,
        onHoverChange,
        onHoverEnd,
        isDisabled,
        state
      ]);
      $goTMa$react.useEffect(() => {
        if (isDisabled)
          triggerHoverEnd1({
            currentTarget: state.target
          }, state.pointerType);
      }, [
        isDisabled
      ]);
      return {
        hoverProps: hoverProps1,
        isHovered
      };
    }
    function $edcfa848c42f94f4$export$872b660ac5a1ff98(props) {
      let { ref, onInteractOutside, isDisabled, onInteractOutsideStart } = props;
      let stateRef = $goTMa$react.useRef({
        isPointerDown: false,
        ignoreEmulatedMouseEvents: false,
        onInteractOutside,
        onInteractOutsideStart
      });
      let state = stateRef.current;
      state.onInteractOutside = onInteractOutside;
      state.onInteractOutsideStart = onInteractOutsideStart;
      $goTMa$react.useEffect(() => {
        if (isDisabled)
          return;
        let onPointerDown = (e) => {
          if ($edcfa848c42f94f4$var$isValidEvent(e, ref) && state.onInteractOutside) {
            if (state.onInteractOutsideStart)
              state.onInteractOutsideStart(e);
            state.isPointerDown = true;
          }
        };
        if (typeof PointerEvent !== "undefined") {
          let onPointerUp = (e) => {
            if (state.isPointerDown && state.onInteractOutside && $edcfa848c42f94f4$var$isValidEvent(e, ref)) {
              state.isPointerDown = false;
              state.onInteractOutside(e);
            }
          };
          document.addEventListener("pointerdown", onPointerDown, true);
          document.addEventListener("pointerup", onPointerUp, true);
          return () => {
            document.removeEventListener("pointerdown", onPointerDown, true);
            document.removeEventListener("pointerup", onPointerUp, true);
          };
        } else {
          let onMouseUp = (e) => {
            if (state.ignoreEmulatedMouseEvents)
              state.ignoreEmulatedMouseEvents = false;
            else if (state.isPointerDown && state.onInteractOutside && $edcfa848c42f94f4$var$isValidEvent(e, ref)) {
              state.isPointerDown = false;
              state.onInteractOutside(e);
            }
          };
          let onTouchEnd = (e) => {
            state.ignoreEmulatedMouseEvents = true;
            if (state.onInteractOutside && state.isPointerDown && $edcfa848c42f94f4$var$isValidEvent(e, ref)) {
              state.isPointerDown = false;
              state.onInteractOutside(e);
            }
          };
          document.addEventListener("mousedown", onPointerDown, true);
          document.addEventListener("mouseup", onMouseUp, true);
          document.addEventListener("touchstart", onPointerDown, true);
          document.addEventListener("touchend", onTouchEnd, true);
          return () => {
            document.removeEventListener("mousedown", onPointerDown, true);
            document.removeEventListener("mouseup", onMouseUp, true);
            document.removeEventListener("touchstart", onPointerDown, true);
            document.removeEventListener("touchend", onTouchEnd, true);
          };
        }
      }, [
        ref,
        state,
        isDisabled
      ]);
    }
    function $edcfa848c42f94f4$var$isValidEvent(event, ref) {
      if (event.button > 0)
        return false;
      if (event.target) {
        const ownerDocument = event.target.ownerDocument;
        if (!ownerDocument || !ownerDocument.documentElement.contains(event.target))
          return false;
      }
      return ref.current && !ref.current.contains(event.target);
    }
    function $951fbcbbca8db6ce$export$48d1ea6320830260(handler) {
      if (!handler)
        return;
      let shouldStopPropagation = true;
      return (e) => {
        let event = __spreadProps(__spreadValues({}, e), {
          preventDefault() {
            e.preventDefault();
          },
          isDefaultPrevented() {
            return e.isDefaultPrevented();
          },
          stopPropagation() {
            console.error("stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.");
          },
          continuePropagation() {
            shouldStopPropagation = false;
          }
        });
        handler(event);
        if (shouldStopPropagation)
          e.stopPropagation();
      };
    }
    function $892d64db2a3c53b0$export$8f71654801c2f7cd(props) {
      return {
        keyboardProps: props.isDisabled ? {} : {
          onKeyDown: $951fbcbbca8db6ce$export$48d1ea6320830260(props.onKeyDown),
          onKeyUp: $951fbcbbca8db6ce$export$48d1ea6320830260(props.onKeyUp)
        }
      };
    }
    function $c09386fc48fa427d$export$36da96379f79f245(props) {
      let { onMoveStart, onMove, onMoveEnd } = props;
      let state = $goTMa$react.useRef({
        didMove: false,
        lastPosition: null,
        id: null
      });
      let { addGlobalListener, removeGlobalListener } = $goTMa$reactariautils.useGlobalListeners();
      let moveProps1 = $goTMa$react.useMemo(() => {
        let moveProps = {};
        let start = () => {
          $f7e14e656343df57$export$16a4697467175487();
          state.current.didMove = false;
        };
        let move = (originalEvent, pointerType, deltaX, deltaY) => {
          if (deltaX === 0 && deltaY === 0)
            return;
          if (!state.current.didMove) {
            state.current.didMove = true;
            onMoveStart === null || onMoveStart === void 0 ? void 0 : onMoveStart({
              type: "movestart",
              pointerType,
              shiftKey: originalEvent.shiftKey,
              metaKey: originalEvent.metaKey,
              ctrlKey: originalEvent.ctrlKey,
              altKey: originalEvent.altKey
            });
          }
          onMove({
            type: "move",
            pointerType,
            deltaX,
            deltaY,
            shiftKey: originalEvent.shiftKey,
            metaKey: originalEvent.metaKey,
            ctrlKey: originalEvent.ctrlKey,
            altKey: originalEvent.altKey
          });
        };
        let end = (originalEvent, pointerType) => {
          $f7e14e656343df57$export$b0d6fa1ab32e3295();
          if (state.current.didMove)
            onMoveEnd === null || onMoveEnd === void 0 ? void 0 : onMoveEnd({
              type: "moveend",
              pointerType,
              shiftKey: originalEvent.shiftKey,
              metaKey: originalEvent.metaKey,
              ctrlKey: originalEvent.ctrlKey,
              altKey: originalEvent.altKey
            });
        };
        if (typeof PointerEvent === "undefined") {
          let onMouseMove = (e) => {
            if (e.button === 0) {
              move(e, "mouse", e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);
              state.current.lastPosition = {
                pageX: e.pageX,
                pageY: e.pageY
              };
            }
          };
          let onMouseUp = (e) => {
            if (e.button === 0) {
              end(e, "mouse");
              removeGlobalListener(window, "mousemove", onMouseMove, false);
              removeGlobalListener(window, "mouseup", onMouseUp, false);
            }
          };
          moveProps.onMouseDown = (e) => {
            if (e.button === 0) {
              start();
              e.stopPropagation();
              e.preventDefault();
              state.current.lastPosition = {
                pageX: e.pageX,
                pageY: e.pageY
              };
              addGlobalListener(window, "mousemove", onMouseMove, false);
              addGlobalListener(window, "mouseup", onMouseUp, false);
            }
          };
          let onTouchMove = (e) => {
            let touch = [
              ...e.changedTouches
            ].findIndex(
              ({ identifier }) => identifier === state.current.id
            );
            if (touch >= 0) {
              let { pageX, pageY } = e.changedTouches[touch];
              move(e, "touch", pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);
              state.current.lastPosition = {
                pageX,
                pageY
              };
            }
          };
          let onTouchEnd = (e) => {
            let touch = [
              ...e.changedTouches
            ].findIndex(
              ({ identifier }) => identifier === state.current.id
            );
            if (touch >= 0) {
              end(e, "touch");
              state.current.id = null;
              removeGlobalListener(window, "touchmove", onTouchMove);
              removeGlobalListener(window, "touchend", onTouchEnd);
              removeGlobalListener(window, "touchcancel", onTouchEnd);
            }
          };
          moveProps.onTouchStart = (e) => {
            if (e.changedTouches.length === 0 || state.current.id != null)
              return;
            let { pageX, pageY, identifier } = e.changedTouches[0];
            start();
            e.stopPropagation();
            e.preventDefault();
            state.current.lastPosition = {
              pageX,
              pageY
            };
            state.current.id = identifier;
            addGlobalListener(window, "touchmove", onTouchMove, false);
            addGlobalListener(window, "touchend", onTouchEnd, false);
            addGlobalListener(window, "touchcancel", onTouchEnd, false);
          };
        } else {
          let onPointerMove = (e) => {
            if (e.pointerId === state.current.id) {
              let pointerType = e.pointerType || "mouse";
              move(e, pointerType, e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);
              state.current.lastPosition = {
                pageX: e.pageX,
                pageY: e.pageY
              };
            }
          };
          let onPointerUp = (e) => {
            if (e.pointerId === state.current.id) {
              let pointerType = e.pointerType || "mouse";
              end(e, pointerType);
              state.current.id = null;
              removeGlobalListener(window, "pointermove", onPointerMove, false);
              removeGlobalListener(window, "pointerup", onPointerUp, false);
              removeGlobalListener(window, "pointercancel", onPointerUp, false);
            }
          };
          moveProps.onPointerDown = (e) => {
            if (e.button === 0 && state.current.id == null) {
              start();
              e.stopPropagation();
              e.preventDefault();
              state.current.lastPosition = {
                pageX: e.pageX,
                pageY: e.pageY
              };
              state.current.id = e.pointerId;
              addGlobalListener(window, "pointermove", onPointerMove, false);
              addGlobalListener(window, "pointerup", onPointerUp, false);
              addGlobalListener(window, "pointercancel", onPointerUp, false);
            }
          };
        }
        let triggerKeyboardMove = (e, deltaX, deltaY) => {
          start();
          move(e, "keyboard", deltaX, deltaY);
          end(e, "keyboard");
        };
        moveProps.onKeyDown = (e) => {
          switch (e.key) {
            case "Left":
            case "ArrowLeft":
              e.preventDefault();
              e.stopPropagation();
              triggerKeyboardMove(e, -1, 0);
              break;
            case "Right":
            case "ArrowRight":
              e.preventDefault();
              e.stopPropagation();
              triggerKeyboardMove(e, 1, 0);
              break;
            case "Up":
            case "ArrowUp":
              e.preventDefault();
              e.stopPropagation();
              triggerKeyboardMove(e, 0, -1);
              break;
            case "Down":
            case "ArrowDown":
              e.preventDefault();
              e.stopPropagation();
              triggerKeyboardMove(e, 0, 1);
              break;
          }
        };
        return moveProps;
      }, [
        state,
        onMoveStart,
        onMove,
        onMoveEnd,
        addGlobalListener,
        removeGlobalListener
      ]);
      return {
        moveProps: moveProps1
      };
    }
    function $a3dbce0aed7087e2$export$2123ff2b87c81ca(props, ref) {
      let { onScroll, isDisabled } = props;
      let onScrollHandler = $goTMa$react.useCallback((e) => {
        if (e.ctrlKey)
          return;
        e.preventDefault();
        e.stopPropagation();
        if (onScroll)
          onScroll({
            deltaX: e.deltaX,
            deltaY: e.deltaY
          });
      }, [
        onScroll
      ]);
      $goTMa$reactariautils.useEvent(ref, "wheel", isDisabled ? null : onScrollHandler);
    }
    var $3cd7b5d0eebf0ca9$var$DEFAULT_THRESHOLD = 500;
    function $3cd7b5d0eebf0ca9$export$c24ed0104d07eab9(props) {
      let { isDisabled, onLongPressStart, onLongPressEnd, onLongPress, threshold = $3cd7b5d0eebf0ca9$var$DEFAULT_THRESHOLD, accessibilityDescription } = props;
      const timeRef = $goTMa$react.useRef(null);
      let { addGlobalListener, removeGlobalListener } = $goTMa$reactariautils.useGlobalListeners();
      let { pressProps } = $0294ea432cd92340$export$45712eceda6fad21({
        isDisabled,
        onPressStart(e1) {
          if (e1.pointerType === "mouse" || e1.pointerType === "touch") {
            if (onLongPressStart)
              onLongPressStart(__spreadProps(__spreadValues({}, e1), {
                type: "longpressstart"
              }));
            timeRef.current = setTimeout(() => {
              e1.target.dispatchEvent(new PointerEvent("pointercancel", {
                bubbles: true
              }));
              if (onLongPress)
                onLongPress(__spreadProps(__spreadValues({}, e1), {
                  type: "longpress"
                }));
              timeRef.current = null;
            }, threshold);
            if (e1.pointerType === "touch") {
              let onContextMenu = (e) => {
                e.preventDefault();
              };
              addGlobalListener(e1.target, "contextmenu", onContextMenu, {
                once: true
              });
              addGlobalListener(window, "pointerup", () => {
                setTimeout(() => {
                  removeGlobalListener(e1.target, "contextmenu", onContextMenu);
                }, 30);
              }, {
                once: true
              });
            }
          }
        },
        onPressEnd(e) {
          if (timeRef.current)
            clearTimeout(timeRef.current);
          if (onLongPressEnd && (e.pointerType === "mouse" || e.pointerType === "touch"))
            onLongPressEnd(__spreadProps(__spreadValues({}, e), {
              type: "longpressend"
            }));
        }
      });
      let descriptionProps = $goTMa$reactariautils.useDescription(onLongPress && !isDisabled ? accessibilityDescription : null);
      return {
        longPressProps: $goTMa$reactariautils.mergeProps(pressProps, descriptionProps)
      };
    }
  }
});

// ../../node_modules/@react-spectrum/provider/dist/main.css
var require_ = __commonJS({
  "../../node_modules/@react-spectrum/provider/dist/main.css"(exports, module) {
    module.exports = {};
  }
});

// ../../node_modules/@react-aria/visually-hidden/dist/main.js
var require_main11 = __commonJS({
  "../../node_modules/@react-aria/visually-hidden/dist/main.js"(exports, module) {
    var $2Agrv$reactariautils = require_main3();
    var $2Agrv$react = (init_preact(), __toCommonJS(preact_exports));
    var $2Agrv$reactariainteractions = require_main10();
    function $parcel$export12(e, n, v, s) {
      Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
    }
    function $parcel$interopDefault12(a) {
      return a && a.__esModule ? a.default : a;
    }
    $parcel$export12(module.exports, "useVisuallyHidden", () => $b5c81b25cdf7a43c$export$a966af930f325cab);
    $parcel$export12(module.exports, "VisuallyHidden", () => $b5c81b25cdf7a43c$export$439d29a4e110a164);
    var $b5c81b25cdf7a43c$var$styles = {
      border: 0,
      clip: "rect(0 0 0 0)",
      clipPath: "inset(50%)",
      height: 1,
      margin: "0 -1px -1px 0",
      overflow: "hidden",
      padding: 0,
      position: "absolute",
      width: 1,
      whiteSpace: "nowrap"
    };
    function $b5c81b25cdf7a43c$export$a966af930f325cab(props = {}) {
      let { style, isFocusable } = props;
      let [isFocused, setFocused] = $2Agrv$react.useState(false);
      let { focusProps } = $2Agrv$reactariainteractions.useFocus({
        isDisabled: !isFocusable,
        onFocusChange: setFocused
      });
      let combinedStyles = $2Agrv$react.useMemo(() => {
        if (isFocused)
          return style;
        else if (style)
          return __spreadValues(__spreadValues({}, $b5c81b25cdf7a43c$var$styles), style);
        else
          return $b5c81b25cdf7a43c$var$styles;
      }, [
        isFocused
      ]);
      return {
        visuallyHiddenProps: __spreadProps(__spreadValues({}, focusProps), {
          style: combinedStyles
        })
      };
    }
    function $b5c81b25cdf7a43c$export$439d29a4e110a164(props) {
      let _a3 = props, { children, elementType: Element2 = "div", isFocusable, style } = _a3, otherProps = __objRest(_a3, ["children", "elementType", "isFocusable", "style"]);
      let { visuallyHiddenProps } = $b5c81b25cdf7a43c$export$a966af930f325cab(props);
      return /* @__PURE__ */ $parcel$interopDefault12($2Agrv$react).createElement(Element2, $2Agrv$reactariautils.mergeProps(otherProps, visuallyHiddenProps), children);
    }
  }
});

// ../../node_modules/@react-aria/overlays/dist/main.js
var require_main12 = __commonJS({
  "../../node_modules/@react-aria/overlays/dist/main.js"(exports, module) {
    var $6Zb2x$react = (init_preact(), __toCommonJS(preact_exports));
    var $6Zb2x$reactariautils = require_main3();
    var $6Zb2x$reactariai18n = require_main8();
    var $6Zb2x$reactariainteractions = require_main10();
    var $6Zb2x$reactdom = (init_preact(), __toCommonJS(preact_exports));
    var $6Zb2x$reactariassr = require_main2();
    var $6Zb2x$reactariavisuallyhidden = require_main11();
    function $parcel$export12(e, n, v, s) {
      Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
    }
    function $parcel$interopDefault12(a) {
      return a && a.__esModule ? a.default : a;
    }
    $parcel$export12(module.exports, "useOverlayPosition", () => $cd94b4896dd97759$export$d39e1813b3bdd0e1);
    $parcel$export12(module.exports, "useOverlay", () => $82711f9cb668ecdb$export$ea8f71083e90600f);
    $parcel$export12(module.exports, "useOverlayTrigger", () => $b4878eb6316f670a$export$f9d5c8beee7d008d);
    $parcel$export12(module.exports, "usePreventScroll", () => $5c2f5cd01815d369$export$ee0f7cc6afcd1c18);
    $parcel$export12(module.exports, "ModalProvider", () => $0775ea8ea6a0565e$export$178405afcd8c5eb);
    $parcel$export12(module.exports, "useModalProvider", () => $0775ea8ea6a0565e$export$d9aaed4c3ece1bc0);
    $parcel$export12(module.exports, "OverlayProvider", () => $0775ea8ea6a0565e$export$bf688221f59024e5);
    $parcel$export12(module.exports, "OverlayContainer", () => $0775ea8ea6a0565e$export$b47c3594eab58386);
    $parcel$export12(module.exports, "useModal", () => $0775ea8ea6a0565e$export$33ffd74ebf07f060);
    $parcel$export12(module.exports, "DismissButton", () => $f69bb3e6457495cc$export$2317d149ed6f78c4);
    $parcel$export12(module.exports, "ariaHideOutside", () => $08ef1685902b6011$export$1c3ebcada18427bf);
    var $5935ba4d7da2c103$var$AXIS = {
      top: "top",
      bottom: "top",
      left: "left",
      right: "left"
    };
    var $5935ba4d7da2c103$var$FLIPPED_DIRECTION = {
      top: "bottom",
      bottom: "top",
      left: "right",
      right: "left"
    };
    var $5935ba4d7da2c103$var$CROSS_AXIS = {
      top: "left",
      left: "top"
    };
    var $5935ba4d7da2c103$var$AXIS_SIZE = {
      top: "height",
      left: "width"
    };
    var $5935ba4d7da2c103$var$PARSED_PLACEMENT_CACHE = {};
    var $5935ba4d7da2c103$var$visualViewport = typeof window !== "undefined" && window.visualViewport;
    function $5935ba4d7da2c103$var$getContainerDimensions(containerNode) {
      let width = 0, height = 0, top = 0, left = 0;
      let scroll = {};
      if (containerNode.tagName === "BODY") {
        let documentElement = document.documentElement;
        var ref;
        width = (ref = $5935ba4d7da2c103$var$visualViewport === null || $5935ba4d7da2c103$var$visualViewport === void 0 ? void 0 : $5935ba4d7da2c103$var$visualViewport.width) !== null && ref !== void 0 ? ref : documentElement.clientWidth;
        var ref1;
        height = (ref1 = $5935ba4d7da2c103$var$visualViewport === null || $5935ba4d7da2c103$var$visualViewport === void 0 ? void 0 : $5935ba4d7da2c103$var$visualViewport.height) !== null && ref1 !== void 0 ? ref1 : documentElement.clientHeight;
        scroll.top = documentElement.scrollTop || containerNode.scrollTop;
        scroll.left = documentElement.scrollLeft || containerNode.scrollLeft;
      } else {
        ({ width, height, top, left } = $5935ba4d7da2c103$var$getOffset(containerNode));
        scroll.top = containerNode.scrollTop;
        scroll.left = containerNode.scrollLeft;
      }
      return {
        width,
        height,
        scroll,
        top,
        left
      };
    }
    function $5935ba4d7da2c103$var$getScroll(node) {
      return {
        top: node.scrollTop,
        left: node.scrollLeft,
        width: node.scrollWidth,
        height: node.scrollHeight
      };
    }
    function $5935ba4d7da2c103$var$getDelta(axis, offset, size, containerDimensions, padding) {
      let containerScroll = containerDimensions.scroll[axis];
      let containerHeight = containerDimensions[$5935ba4d7da2c103$var$AXIS_SIZE[axis]];
      let startEdgeOffset = offset - padding - containerScroll;
      let endEdgeOffset = offset + padding - containerScroll + size;
      if (startEdgeOffset < 0)
        return -startEdgeOffset;
      else if (endEdgeOffset > containerHeight)
        return Math.max(containerHeight - endEdgeOffset, -startEdgeOffset);
      else
        return 0;
    }
    function $5935ba4d7da2c103$var$getMargins(node) {
      let style = window.getComputedStyle(node);
      return {
        top: parseInt(style.marginTop, 10) || 0,
        bottom: parseInt(style.marginBottom, 10) || 0,
        left: parseInt(style.marginLeft, 10) || 0,
        right: parseInt(style.marginRight, 10) || 0
      };
    }
    function $5935ba4d7da2c103$var$parsePlacement(input) {
      if ($5935ba4d7da2c103$var$PARSED_PLACEMENT_CACHE[input])
        return $5935ba4d7da2c103$var$PARSED_PLACEMENT_CACHE[input];
      let [placement, crossPlacement] = input.split(" ");
      let axis = $5935ba4d7da2c103$var$AXIS[placement] || "right";
      let crossAxis = $5935ba4d7da2c103$var$CROSS_AXIS[axis];
      if (!$5935ba4d7da2c103$var$AXIS[crossPlacement])
        crossPlacement = "center";
      let size = $5935ba4d7da2c103$var$AXIS_SIZE[axis];
      let crossSize = $5935ba4d7da2c103$var$AXIS_SIZE[crossAxis];
      $5935ba4d7da2c103$var$PARSED_PLACEMENT_CACHE[input] = {
        placement,
        crossPlacement,
        axis,
        crossAxis,
        size,
        crossSize
      };
      return $5935ba4d7da2c103$var$PARSED_PLACEMENT_CACHE[input];
    }
    function $5935ba4d7da2c103$var$computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned) {
      let { placement, crossPlacement, axis, crossAxis, size, crossSize } = placementInfo;
      let position = {};
      position[crossAxis] = childOffset[crossAxis];
      if (crossPlacement === "center")
        position[crossAxis] += (childOffset[crossSize] - overlaySize[crossSize]) / 2;
      else if (crossPlacement !== crossAxis)
        position[crossAxis] += childOffset[crossSize] - overlaySize[crossSize];
      position[crossAxis] += crossOffset;
      let minViablePosition = childOffset[crossAxis] + childOffset[crossSize] / 2 - overlaySize[crossSize];
      let maxViablePosition = childOffset[crossAxis] + childOffset[crossSize] / 2;
      position[crossAxis] = Math.min(Math.max(minViablePosition, position[crossAxis]), maxViablePosition);
      if (placement === axis) {
        const containerHeight = isContainerPositioned ? containerOffsetWithBoundary[size] : boundaryDimensions[size];
        position[$5935ba4d7da2c103$var$FLIPPED_DIRECTION[axis]] = Math.floor(containerHeight - childOffset[axis] + offset);
      } else
        position[axis] = Math.floor(childOffset[axis] + childOffset[size] + offset);
      return position;
    }
    function $5935ba4d7da2c103$var$getMaxHeight(position, boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding) {
      return position.top != null ? Math.max(
        0,
        boundaryDimensions.height + boundaryDimensions.top + boundaryDimensions.scroll.top - (containerOffsetWithBoundary.top + position.top) - (margins.top + margins.bottom + padding)
      ) : Math.max(
        0,
        childOffset.top + containerOffsetWithBoundary.top - (boundaryDimensions.top + boundaryDimensions.scroll.top) - (margins.top + margins.bottom + padding)
      );
    }
    function $5935ba4d7da2c103$var$getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding, placementInfo) {
      let { placement, axis, size } = placementInfo;
      if (placement === axis)
        return Math.max(0, childOffset[axis] - boundaryDimensions[axis] - boundaryDimensions.scroll[axis] + containerOffsetWithBoundary[axis] - margins[axis] - margins[$5935ba4d7da2c103$var$FLIPPED_DIRECTION[axis]] - padding);
      return Math.max(0, boundaryDimensions[size] + boundaryDimensions[axis] + boundaryDimensions.scroll[axis] - containerOffsetWithBoundary[axis] - childOffset[axis] - childOffset[size] - margins[axis] - margins[$5935ba4d7da2c103$var$FLIPPED_DIRECTION[axis]] - padding);
    }
    function $5935ba4d7da2c103$export$6839422d1f33cee9(placementInput, childOffset, overlaySize, scrollSize, margins, padding, flip, boundaryDimensions, containerOffsetWithBoundary, offset, crossOffset, isContainerPositioned, userSetMaxHeight) {
      let placementInfo = $5935ba4d7da2c103$var$parsePlacement(placementInput);
      let { size, crossAxis, crossSize, placement, crossPlacement } = placementInfo;
      let position = $5935ba4d7da2c103$var$computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned);
      let normalizedOffset = offset;
      let space = $5935ba4d7da2c103$var$getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding + offset, placementInfo);
      if (flip && scrollSize[size] > space) {
        let flippedPlacementInfo = $5935ba4d7da2c103$var$parsePlacement(`${$5935ba4d7da2c103$var$FLIPPED_DIRECTION[placement]} ${crossPlacement}`);
        let flippedPosition = $5935ba4d7da2c103$var$computePosition(childOffset, boundaryDimensions, overlaySize, flippedPlacementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned);
        let flippedSpace = $5935ba4d7da2c103$var$getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding + offset, flippedPlacementInfo);
        if (flippedSpace > space) {
          placementInfo = flippedPlacementInfo;
          position = flippedPosition;
          normalizedOffset = offset;
        }
      }
      let delta = $5935ba4d7da2c103$var$getDelta(crossAxis, position[crossAxis], overlaySize[crossSize], boundaryDimensions, padding);
      position[crossAxis] += delta;
      let maxHeight = $5935ba4d7da2c103$var$getMaxHeight(position, boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding);
      if (userSetMaxHeight && userSetMaxHeight < maxHeight)
        maxHeight = userSetMaxHeight;
      overlaySize.height = Math.min(overlaySize.height, maxHeight);
      position = $5935ba4d7da2c103$var$computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, normalizedOffset, crossOffset, containerOffsetWithBoundary, isContainerPositioned);
      delta = $5935ba4d7da2c103$var$getDelta(crossAxis, position[crossAxis], overlaySize[crossSize], boundaryDimensions, padding);
      position[crossAxis] += delta;
      let arrowPosition = {};
      arrowPosition[crossAxis] = childOffset[crossAxis] - position[crossAxis] + childOffset[crossSize] / 2;
      return {
        position,
        maxHeight,
        arrowOffsetLeft: arrowPosition.left,
        arrowOffsetTop: arrowPosition.top,
        placement: placementInfo.placement
      };
    }
    function $5935ba4d7da2c103$export$b3ceb0cbf1056d98(opts) {
      let { placement, targetNode, overlayNode, scrollNode, padding, shouldFlip, boundaryElement, offset, crossOffset, maxHeight } = opts;
      let container = overlayNode instanceof HTMLElement && overlayNode.offsetParent || document.body;
      let isBodyContainer = container.tagName === "BODY";
      const containerPositionStyle = window.getComputedStyle(container).position;
      let isContainerPositioned = !!containerPositionStyle && containerPositionStyle !== "static";
      let childOffset = isBodyContainer ? $5935ba4d7da2c103$var$getOffset(targetNode) : $5935ba4d7da2c103$var$getPosition(targetNode, container);
      if (!isBodyContainer) {
        let { marginTop, marginLeft } = window.getComputedStyle(targetNode);
        childOffset.top += parseInt(marginTop, 10) || 0;
        childOffset.left += parseInt(marginLeft, 10) || 0;
      }
      let overlaySize = $5935ba4d7da2c103$var$getOffset(overlayNode);
      let margins = $5935ba4d7da2c103$var$getMargins(overlayNode);
      overlaySize.width += margins.left + margins.right;
      overlaySize.height += margins.top + margins.bottom;
      let scrollSize = $5935ba4d7da2c103$var$getScroll(scrollNode);
      let boundaryDimensions = $5935ba4d7da2c103$var$getContainerDimensions(boundaryElement);
      let containerOffsetWithBoundary = boundaryElement.tagName === "BODY" ? $5935ba4d7da2c103$var$getOffset(container) : $5935ba4d7da2c103$var$getPosition(container, boundaryElement);
      return $5935ba4d7da2c103$export$6839422d1f33cee9(placement, childOffset, overlaySize, scrollSize, margins, padding, shouldFlip, boundaryDimensions, containerOffsetWithBoundary, offset, crossOffset, isContainerPositioned, maxHeight);
    }
    function $5935ba4d7da2c103$var$getOffset(node) {
      let { top, left, width, height } = node.getBoundingClientRect();
      let { scrollTop, scrollLeft, clientTop, clientLeft } = document.documentElement;
      return {
        top: top + scrollTop - clientTop,
        left: left + scrollLeft - clientLeft,
        width,
        height
      };
    }
    function $5935ba4d7da2c103$var$getPosition(node, parent) {
      let style = window.getComputedStyle(node);
      let offset;
      if (style.position === "fixed") {
        let { top, left, width, height } = node.getBoundingClientRect();
        offset = {
          top,
          left,
          width,
          height
        };
      } else {
        offset = $5935ba4d7da2c103$var$getOffset(node);
        let parentOffset = $5935ba4d7da2c103$var$getOffset(parent);
        let parentStyle = window.getComputedStyle(parent);
        parentOffset.top += (parseInt(parentStyle.borderTopWidth, 10) || 0) - parent.scrollTop;
        parentOffset.left += (parseInt(parentStyle.borderLeftWidth, 10) || 0) - parent.scrollLeft;
        offset.top -= parentOffset.top;
        offset.left -= parentOffset.left;
      }
      offset.top -= parseInt(style.marginTop, 10) || 0;
      offset.left -= parseInt(style.marginLeft, 10) || 0;
      return offset;
    }
    var $9a8aa1b0b336ea3a$export$f6211563215e3b37 = /* @__PURE__ */ new WeakMap();
    function $9a8aa1b0b336ea3a$export$18fc8428861184da(opts) {
      let { triggerRef, isOpen, onClose } = opts;
      $6Zb2x$react.useEffect(() => {
        if (!isOpen)
          return;
        let onScroll = (e) => {
          let target = e.target;
          if (!triggerRef.current || target instanceof Node && !target.contains(triggerRef.current))
            return;
          let onCloseHandler = onClose || $9a8aa1b0b336ea3a$export$f6211563215e3b37.get(triggerRef.current);
          if (onCloseHandler)
            onCloseHandler();
        };
        window.addEventListener("scroll", onScroll, true);
        return () => {
          window.removeEventListener("scroll", onScroll, true);
        };
      }, [
        isOpen,
        onClose,
        triggerRef
      ]);
    }
    var $cd94b4896dd97759$var$visualViewport = typeof window !== "undefined" && window.visualViewport;
    function $cd94b4896dd97759$export$d39e1813b3bdd0e1(props) {
      let { direction } = $6Zb2x$reactariai18n.useLocale();
      let { targetRef, overlayRef, scrollRef = overlayRef, placement = "bottom", containerPadding = 12, shouldFlip = true, boundaryElement = typeof document !== "undefined" ? document.body : null, offset = 0, crossOffset = 0, shouldUpdatePosition = true, isOpen = true, onClose, maxHeight } = props;
      let [position, setPosition] = $6Zb2x$react.useState({
        position: {},
        arrowOffsetLeft: void 0,
        arrowOffsetTop: void 0,
        maxHeight: void 0,
        placement: void 0
      });
      let deps = [
        shouldUpdatePosition,
        placement,
        overlayRef.current,
        targetRef.current,
        scrollRef.current,
        containerPadding,
        shouldFlip,
        boundaryElement,
        offset,
        crossOffset,
        isOpen,
        direction,
        maxHeight
      ];
      let updatePosition = $6Zb2x$react.useCallback(() => {
        if (shouldUpdatePosition === false || !isOpen || !overlayRef.current || !targetRef.current || !scrollRef.current || !boundaryElement)
          return;
        setPosition($5935ba4d7da2c103$export$b3ceb0cbf1056d98({
          placement: $cd94b4896dd97759$var$translateRTL(placement, direction),
          overlayNode: overlayRef.current,
          targetNode: targetRef.current,
          scrollNode: scrollRef.current,
          padding: containerPadding,
          shouldFlip,
          boundaryElement,
          offset,
          crossOffset,
          maxHeight
        }));
      }, deps);
      $6Zb2x$reactariautils.useLayoutEffect(updatePosition, deps);
      $cd94b4896dd97759$var$useResize(updatePosition);
      let isResizing = $6Zb2x$react.useRef(false);
      $6Zb2x$reactariautils.useLayoutEffect(() => {
        let timeout;
        let onResize = () => {
          isResizing.current = true;
          clearTimeout(timeout);
          timeout = setTimeout(() => {
            isResizing.current = false;
          }, 500);
          updatePosition();
        };
        $cd94b4896dd97759$var$visualViewport === null || $cd94b4896dd97759$var$visualViewport === void 0 ? void 0 : $cd94b4896dd97759$var$visualViewport.addEventListener("resize", onResize);
        return () => {
          $cd94b4896dd97759$var$visualViewport === null || $cd94b4896dd97759$var$visualViewport === void 0 ? void 0 : $cd94b4896dd97759$var$visualViewport.removeEventListener("resize", onResize);
        };
      }, [
        updatePosition
      ]);
      let close = $6Zb2x$react.useCallback(() => {
        if (!isResizing.current)
          onClose();
      }, [
        onClose,
        isResizing
      ]);
      $9a8aa1b0b336ea3a$export$18fc8428861184da({
        triggerRef: targetRef,
        isOpen,
        onClose: onClose ? close : void 0
      });
      return {
        overlayProps: {
          style: __spreadProps(__spreadValues({
            position: "absolute",
            zIndex: 1e5
          }, position.position), {
            maxHeight: position.maxHeight
          })
        },
        placement: position.placement,
        arrowProps: {
          style: {
            left: position.arrowOffsetLeft,
            top: position.arrowOffsetTop
          }
        },
        updatePosition
      };
    }
    function $cd94b4896dd97759$var$useResize(onResize) {
      $6Zb2x$reactariautils.useLayoutEffect(() => {
        window.addEventListener("resize", onResize, false);
        return () => {
          window.removeEventListener("resize", onResize, false);
        };
      }, [
        onResize
      ]);
    }
    function $cd94b4896dd97759$var$translateRTL(position, direction) {
      if (direction === "rtl")
        return position.replace("start", "right").replace("end", "left");
      return position.replace("start", "left").replace("end", "right");
    }
    var $82711f9cb668ecdb$var$visibleOverlays = [];
    function $82711f9cb668ecdb$export$ea8f71083e90600f(props, ref) {
      let { onClose, shouldCloseOnBlur, isOpen, isDismissable = false, isKeyboardDismissDisabled = false, shouldCloseOnInteractOutside } = props;
      $6Zb2x$react.useEffect(() => {
        if (isOpen)
          $82711f9cb668ecdb$var$visibleOverlays.push(ref);
        return () => {
          let index = $82711f9cb668ecdb$var$visibleOverlays.indexOf(ref);
          if (index >= 0)
            $82711f9cb668ecdb$var$visibleOverlays.splice(index, 1);
        };
      }, [
        isOpen,
        ref
      ]);
      let onHide = () => {
        if ($82711f9cb668ecdb$var$visibleOverlays[$82711f9cb668ecdb$var$visibleOverlays.length - 1] === ref && onClose)
          onClose();
      };
      let onInteractOutsideStart = (e) => {
        if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.target)) {
          if ($82711f9cb668ecdb$var$visibleOverlays[$82711f9cb668ecdb$var$visibleOverlays.length - 1] === ref) {
            e.stopPropagation();
            e.preventDefault();
          }
        }
      };
      let onInteractOutside = (e) => {
        if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.target)) {
          if ($82711f9cb668ecdb$var$visibleOverlays[$82711f9cb668ecdb$var$visibleOverlays.length - 1] === ref) {
            e.stopPropagation();
            e.preventDefault();
          }
          onHide();
        }
      };
      let onKeyDown = (e) => {
        if (e.key === "Escape" && !isKeyboardDismissDisabled) {
          e.stopPropagation();
          e.preventDefault();
          onHide();
        }
      };
      $6Zb2x$reactariainteractions.useInteractOutside({
        ref,
        onInteractOutside: isDismissable ? onInteractOutside : null,
        onInteractOutsideStart
      });
      let { focusWithinProps } = $6Zb2x$reactariainteractions.useFocusWithin({
        isDisabled: !shouldCloseOnBlur,
        onBlurWithin: (e) => {
          if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.relatedTarget))
            onClose();
        }
      });
      let onPointerDownUnderlay = (e) => {
        if (e.target === e.currentTarget)
          e.preventDefault();
      };
      return {
        overlayProps: __spreadValues({
          onKeyDown
        }, focusWithinProps),
        underlayProps: {
          onPointerDown: onPointerDownUnderlay
        }
      };
    }
    function $b4878eb6316f670a$export$f9d5c8beee7d008d(props, state, ref) {
      let { type } = props;
      let { isOpen } = state;
      $6Zb2x$react.useEffect(() => {
        if (ref && ref.current)
          $9a8aa1b0b336ea3a$export$f6211563215e3b37.set(ref.current, state.close);
      });
      let ariaHasPopup = void 0;
      if (type === "menu")
        ariaHasPopup = true;
      else if (type === "listbox")
        ariaHasPopup = "listbox";
      let overlayId = $6Zb2x$reactariautils.useId();
      return {
        triggerProps: {
          "aria-haspopup": ariaHasPopup,
          "aria-expanded": isOpen,
          "aria-controls": isOpen ? overlayId : null,
          onPress: state.toggle
        },
        overlayProps: {
          id: overlayId
        }
      };
    }
    var $5c2f5cd01815d369$var$visualViewport = typeof window !== "undefined" && window.visualViewport;
    var $5c2f5cd01815d369$var$nonTextInputTypes = /* @__PURE__ */ new Set([
      "checkbox",
      "radio",
      "range",
      "color",
      "file",
      "image",
      "button",
      "submit",
      "reset"
    ]);
    function $5c2f5cd01815d369$export$ee0f7cc6afcd1c18(options = {}) {
      let { isDisabled } = options;
      $6Zb2x$reactariautils.useLayoutEffect(() => {
        if (isDisabled)
          return;
        if ($6Zb2x$reactariautils.isIOS())
          return $5c2f5cd01815d369$var$preventScrollMobileSafari();
        else
          return $5c2f5cd01815d369$var$preventScrollStandard();
      }, [
        isDisabled
      ]);
    }
    function $5c2f5cd01815d369$var$preventScrollStandard() {
      return $6Zb2x$reactariautils.chain($5c2f5cd01815d369$var$setStyle(document.documentElement, "paddingRight", `${window.innerWidth - document.documentElement.clientWidth}px`), $5c2f5cd01815d369$var$setStyle(document.documentElement, "overflow", "hidden"));
    }
    function $5c2f5cd01815d369$var$preventScrollMobileSafari() {
      let scrollable;
      let lastY = 0;
      let onTouchStart = (e) => {
        scrollable = $6Zb2x$reactariautils.getScrollParent(e.target);
        if (scrollable === document.documentElement && scrollable === document.body)
          return;
        lastY = e.changedTouches[0].pageY;
      };
      let onTouchMove = (e) => {
        if (scrollable === document.documentElement || scrollable === document.body) {
          e.preventDefault();
          return;
        }
        let y = e.changedTouches[0].pageY;
        let scrollTop = scrollable.scrollTop;
        let bottom = scrollable.scrollHeight - scrollable.clientHeight;
        if (scrollTop <= 0 && y > lastY || scrollTop >= bottom && y < lastY)
          e.preventDefault();
        lastY = y;
      };
      let onTouchEnd = (e) => {
        let target = e.target;
        if ($5c2f5cd01815d369$var$willOpenKeyboard(target) && target !== document.activeElement) {
          e.preventDefault();
          target.style.transform = "translateY(-2000px)";
          target.focus();
          requestAnimationFrame(() => {
            target.style.transform = "";
          });
        }
      };
      let onFocus = (e) => {
        let target = e.target;
        if ($5c2f5cd01815d369$var$willOpenKeyboard(target)) {
          target.style.transform = "translateY(-2000px)";
          requestAnimationFrame(() => {
            target.style.transform = "";
            if ($5c2f5cd01815d369$var$visualViewport) {
              if ($5c2f5cd01815d369$var$visualViewport.height < window.innerHeight)
                requestAnimationFrame(() => {
                  $5c2f5cd01815d369$var$scrollIntoView(target);
                });
              else
                $5c2f5cd01815d369$var$visualViewport.addEventListener(
                  "resize",
                  () => $5c2f5cd01815d369$var$scrollIntoView(target),
                  {
                    once: true
                  }
                );
            }
          });
        }
      };
      let onWindowScroll = () => {
        window.scrollTo(0, 0);
      };
      let scrollX = window.pageXOffset;
      let scrollY = window.pageYOffset;
      let restoreStyles = $6Zb2x$reactariautils.chain($5c2f5cd01815d369$var$setStyle(document.documentElement, "paddingRight", `${window.innerWidth - document.documentElement.clientWidth}px`), $5c2f5cd01815d369$var$setStyle(document.documentElement, "overflow", "hidden"), $5c2f5cd01815d369$var$setStyle(document.body, "marginTop", `-${scrollY}px`));
      window.scrollTo(0, 0);
      let removeEvents = $6Zb2x$reactariautils.chain($5c2f5cd01815d369$var$addEvent(document, "touchstart", onTouchStart, {
        passive: false,
        capture: true
      }), $5c2f5cd01815d369$var$addEvent(document, "touchmove", onTouchMove, {
        passive: false,
        capture: true
      }), $5c2f5cd01815d369$var$addEvent(document, "touchend", onTouchEnd, {
        passive: false,
        capture: true
      }), $5c2f5cd01815d369$var$addEvent(document, "focus", onFocus, true), $5c2f5cd01815d369$var$addEvent(window, "scroll", onWindowScroll));
      return () => {
        restoreStyles();
        removeEvents();
        window.scrollTo(scrollX, scrollY);
      };
    }
    function $5c2f5cd01815d369$var$setStyle(element, style, value) {
      let cur = element.style[style];
      element.style[style] = value;
      return () => {
        element.style[style] = cur;
      };
    }
    function $5c2f5cd01815d369$var$addEvent(target, event, handler, options) {
      target.addEventListener(event, handler, options);
      return () => {
        target.removeEventListener(event, handler, options);
      };
    }
    function $5c2f5cd01815d369$var$scrollIntoView(target) {
      let root3 = document.scrollingElement || document.documentElement;
      while (target && target !== root3) {
        let scrollable = $6Zb2x$reactariautils.getScrollParent(target);
        if (scrollable !== document.documentElement && scrollable !== document.body && scrollable !== target) {
          let scrollableTop = scrollable.getBoundingClientRect().top;
          let targetTop = target.getBoundingClientRect().top;
          if (targetTop > scrollableTop + target.clientHeight)
            scrollable.scrollTop += targetTop - scrollableTop;
        }
        target = scrollable.parentElement;
      }
    }
    function $5c2f5cd01815d369$var$willOpenKeyboard(target) {
      return target instanceof HTMLInputElement && !$5c2f5cd01815d369$var$nonTextInputTypes.has(target.type) || target instanceof HTMLTextAreaElement || target instanceof HTMLElement && target.isContentEditable;
    }
    var $0775ea8ea6a0565e$var$Context = /* @__PURE__ */ $parcel$interopDefault12($6Zb2x$react).createContext(null);
    function $0775ea8ea6a0565e$export$178405afcd8c5eb(props) {
      let { children } = props;
      let parent = $6Zb2x$react.useContext($0775ea8ea6a0565e$var$Context);
      let [modalCount, setModalCount] = $6Zb2x$react.useState(0);
      let context = $6Zb2x$react.useMemo(
        () => ({
          parent,
          modalCount,
          addModal() {
            setModalCount(
              (count) => count + 1
            );
            if (parent)
              parent.addModal();
          },
          removeModal() {
            setModalCount(
              (count) => count - 1
            );
            if (parent)
              parent.removeModal();
          }
        }),
        [
          parent,
          modalCount
        ]
      );
      return /* @__PURE__ */ $parcel$interopDefault12($6Zb2x$react).createElement($0775ea8ea6a0565e$var$Context.Provider, {
        value: context
      }, children);
    }
    function $0775ea8ea6a0565e$export$d9aaed4c3ece1bc0() {
      let context = $6Zb2x$react.useContext($0775ea8ea6a0565e$var$Context);
      return {
        modalProviderProps: {
          "aria-hidden": context && context.modalCount > 0 ? true : null
        }
      };
    }
    function $0775ea8ea6a0565e$var$OverlayContainerDOM(props) {
      let { modalProviderProps } = $0775ea8ea6a0565e$export$d9aaed4c3ece1bc0();
      return /* @__PURE__ */ $parcel$interopDefault12($6Zb2x$react).createElement("div", __spreadValues(__spreadValues({
        "data-overlay-container": true
      }, props), modalProviderProps));
    }
    function $0775ea8ea6a0565e$export$bf688221f59024e5(props) {
      return /* @__PURE__ */ $parcel$interopDefault12($6Zb2x$react).createElement($0775ea8ea6a0565e$export$178405afcd8c5eb, null, /* @__PURE__ */ $parcel$interopDefault12($6Zb2x$react).createElement($0775ea8ea6a0565e$var$OverlayContainerDOM, props));
    }
    function $0775ea8ea6a0565e$export$b47c3594eab58386(props) {
      let isSSR = $6Zb2x$reactariassr.useIsSSR();
      let _a3 = props, { portalContainer = isSSR ? null : document.body } = _a3, rest = __objRest(_a3, ["portalContainer"]);
      $parcel$interopDefault12($6Zb2x$react).useEffect(() => {
        if (portalContainer === null || portalContainer === void 0 ? void 0 : portalContainer.closest("[data-overlay-container]"))
          throw new Error("An OverlayContainer must not be inside another container. Please change the portalContainer prop.");
      }, [
        portalContainer
      ]);
      if (!portalContainer)
        return null;
      let contents = /* @__PURE__ */ $parcel$interopDefault12($6Zb2x$react).createElement($0775ea8ea6a0565e$export$bf688221f59024e5, rest);
      return /* @__PURE__ */ $parcel$interopDefault12($6Zb2x$reactdom).createPortal(contents, portalContainer);
    }
    function $0775ea8ea6a0565e$export$33ffd74ebf07f060(options) {
      let context = $6Zb2x$react.useContext($0775ea8ea6a0565e$var$Context);
      if (!context)
        throw new Error("Modal is not contained within a provider");
      $6Zb2x$react.useEffect(() => {
        if ((options === null || options === void 0 ? void 0 : options.isDisabled) || !context || !context.parent)
          return;
        context.parent.addModal();
        return () => {
          if (context && context.parent)
            context.parent.removeModal();
        };
      }, [
        context,
        context.parent,
        options === null || options === void 0 ? void 0 : options.isDisabled
      ]);
      return {
        modalProps: {
          "data-ismodal": !(options === null || options === void 0 ? void 0 : options.isDisabled)
        }
      };
    }
    var $18d014414048a7ba$exports = {};
    var $4393d9b86d3ad278$exports = {};
    $4393d9b86d3ad278$exports = {
      "dismiss": `\u062A\u062C\u0627\u0647\u0644`
    };
    var $254224013ae06959$exports = {};
    $254224013ae06959$exports = {
      "dismiss": `\u041E\u0442\u0445\u0432\u044A\u0440\u043B\u044F\u043D\u0435`
    };
    var $55d3567b59d09782$exports = {};
    $55d3567b59d09782$exports = {
      "dismiss": `Odstranit`
    };
    var $0e419a7be7773c16$exports = {};
    $0e419a7be7773c16$exports = {
      "dismiss": `Luk`
    };
    var $be606513c8356c34$exports = {};
    $be606513c8356c34$exports = {
      "dismiss": `Schlie\xDFen`
    };
    var $7d99787e5bd26f87$exports = {};
    $7d99787e5bd26f87$exports = {
      "dismiss": `\u0391\u03C0\u03CC\u03C1\u03C1\u03B9\u03C8\u03B7`
    };
    var $0360f2a6534752c1$exports = {};
    $0360f2a6534752c1$exports = {
      "dismiss": `Dismiss`
    };
    var $92bf4fdecfeb6a61$exports = {};
    $92bf4fdecfeb6a61$exports = {
      "dismiss": `Descartar`
    };
    var $7c02fa9b9c598043$exports = {};
    $7c02fa9b9c598043$exports = {
      "dismiss": `L\xF5peta`
    };
    var $ba53535dcca59343$exports = {};
    $ba53535dcca59343$exports = {
      "dismiss": `Hylk\xE4\xE4`
    };
    var $2fbbcddf7d252cb7$exports = {};
    $2fbbcddf7d252cb7$exports = {
      "dismiss": `Rejeter`
    };
    var $0a1f0520e07d3596$exports = {};
    $0a1f0520e07d3596$exports = {
      "dismiss": `\u05D4\u05EA\u05E2\u05DC\u05DD`
    };
    var $f7be5df1487823a9$exports = {};
    $f7be5df1487823a9$exports = {
      "dismiss": `Odbaci`
    };
    var $8dbe4363bfbba3f9$exports = {};
    $8dbe4363bfbba3f9$exports = {
      "dismiss": `Elutas\xEDt\xE1s`
    };
    var $90a445da1ad273e7$exports = {};
    $90a445da1ad273e7$exports = {
      "dismiss": `Ignora`
    };
    var $e1ebf18259c9b1ee$exports = {};
    $e1ebf18259c9b1ee$exports = {
      "dismiss": `\u9589\u3058\u308B`
    };
    var $765893642f3b4f72$exports = {};
    $765893642f3b4f72$exports = {
      "dismiss": `\uBB34\uC2DC`
    };
    var $af73ba24f63febd1$exports = {};
    $af73ba24f63febd1$exports = {
      "dismiss": `Atmesti`
    };
    var $97aac9f6740ee412$exports = {};
    $97aac9f6740ee412$exports = {
      "dismiss": `Ner\u0101d\u012Bt`
    };
    var $92fbe76e196d7e0a$exports = {};
    $92fbe76e196d7e0a$exports = {
      "dismiss": `Lukk`
    };
    var $44399897afb701ce$exports = {};
    $44399897afb701ce$exports = {
      "dismiss": `Negeren`
    };
    var $d679e258664d7384$exports = {};
    $d679e258664d7384$exports = {
      "dismiss": `Zignoruj`
    };
    var $b51fc2992648966b$exports = {};
    $b51fc2992648966b$exports = {
      "dismiss": `Descartar`
    };
    var $6abbc540dcd5f78c$exports = {};
    $6abbc540dcd5f78c$exports = {
      "dismiss": `Dispensar`
    };
    var $6cbc0c9bf574473b$exports = {};
    $6cbc0c9bf574473b$exports = {
      "dismiss": `Revocare`
    };
    var $009edbe58be6525b$exports = {};
    $009edbe58be6525b$exports = {
      "dismiss": `\u041F\u0440\u043E\u043F\u0443\u0441\u0442\u0438\u0442\u044C`
    };
    var $01cf6095489e78f7$exports = {};
    $01cf6095489e78f7$exports = {
      "dismiss": `Zru\u0161i\u0165`
    };
    var $33fd5a1a3753e83f$exports = {};
    $33fd5a1a3753e83f$exports = {
      "dismiss": `Opusti`
    };
    var $6b9373a558e74e84$exports = {};
    $6b9373a558e74e84$exports = {
      "dismiss": `Odbaci`
    };
    var $90008194c3db7fce$exports = {};
    $90008194c3db7fce$exports = {
      "dismiss": `Avvisa`
    };
    var $e29d21290b4ce15c$exports = {};
    $e29d21290b4ce15c$exports = {
      "dismiss": `Kapat`
    };
    var $96139c59e8ba3f85$exports = {};
    $96139c59e8ba3f85$exports = {
      "dismiss": `\u0421\u043A\u0430\u0441\u0443\u0432\u0430\u0442\u0438`
    };
    var $052554192ea8e826$exports = {};
    $052554192ea8e826$exports = {
      "dismiss": `\u53D6\u6D88`
    };
    var $3f3b5d798a5abdbc$exports = {};
    $3f3b5d798a5abdbc$exports = {
      "dismiss": `\u95DC\u9589`
    };
    $18d014414048a7ba$exports = {
      "ar-AE": $4393d9b86d3ad278$exports,
      "bg-BG": $254224013ae06959$exports,
      "cs-CZ": $55d3567b59d09782$exports,
      "da-DK": $0e419a7be7773c16$exports,
      "de-DE": $be606513c8356c34$exports,
      "el-GR": $7d99787e5bd26f87$exports,
      "en-US": $0360f2a6534752c1$exports,
      "es-ES": $92bf4fdecfeb6a61$exports,
      "et-EE": $7c02fa9b9c598043$exports,
      "fi-FI": $ba53535dcca59343$exports,
      "fr-FR": $2fbbcddf7d252cb7$exports,
      "he-IL": $0a1f0520e07d3596$exports,
      "hr-HR": $f7be5df1487823a9$exports,
      "hu-HU": $8dbe4363bfbba3f9$exports,
      "it-IT": $90a445da1ad273e7$exports,
      "ja-JP": $e1ebf18259c9b1ee$exports,
      "ko-KR": $765893642f3b4f72$exports,
      "lt-LT": $af73ba24f63febd1$exports,
      "lv-LV": $97aac9f6740ee412$exports,
      "nb-NO": $92fbe76e196d7e0a$exports,
      "nl-NL": $44399897afb701ce$exports,
      "pl-PL": $d679e258664d7384$exports,
      "pt-BR": $b51fc2992648966b$exports,
      "pt-PT": $6abbc540dcd5f78c$exports,
      "ro-RO": $6cbc0c9bf574473b$exports,
      "ru-RU": $009edbe58be6525b$exports,
      "sk-SK": $01cf6095489e78f7$exports,
      "sl-SI": $33fd5a1a3753e83f$exports,
      "sr-SP": $6b9373a558e74e84$exports,
      "sv-SE": $90008194c3db7fce$exports,
      "tr-TR": $e29d21290b4ce15c$exports,
      "uk-UA": $96139c59e8ba3f85$exports,
      "zh-CN": $052554192ea8e826$exports,
      "zh-TW": $3f3b5d798a5abdbc$exports
    };
    function $f69bb3e6457495cc$export$2317d149ed6f78c4(props) {
      let _a3 = props, { onDismiss } = _a3, otherProps = __objRest(_a3, ["onDismiss"]);
      let stringFormatter = $6Zb2x$reactariai18n.useLocalizedStringFormatter(/* @__PURE__ */ $parcel$interopDefault12($18d014414048a7ba$exports));
      let labels = $6Zb2x$reactariautils.useLabels(otherProps, stringFormatter.format("dismiss"));
      let onClick = () => {
        if (onDismiss)
          onDismiss();
      };
      return /* @__PURE__ */ $parcel$interopDefault12($6Zb2x$react).createElement($6Zb2x$reactariavisuallyhidden.VisuallyHidden, null, /* @__PURE__ */ $parcel$interopDefault12($6Zb2x$react).createElement("button", __spreadProps(__spreadValues({}, labels), {
        tabIndex: -1,
        onClick
      })));
    }
    var $08ef1685902b6011$var$refCountMap = /* @__PURE__ */ new WeakMap();
    function $08ef1685902b6011$export$1c3ebcada18427bf(targets, root3 = document.body) {
      let visibleNodes = new Set(targets);
      let hiddenNodes = /* @__PURE__ */ new Set();
      let walker = document.createTreeWalker(root3, NodeFilter.SHOW_ELEMENT, {
        acceptNode(node) {
          if ((node instanceof HTMLElement || node instanceof SVGElement) && node.dataset.liveAnnouncer === "true")
            visibleNodes.add(node);
          if (visibleNodes.has(node) || hiddenNodes.has(node.parentElement))
            return NodeFilter.FILTER_REJECT;
          if (node instanceof Element && node.getAttribute("role") === "row")
            return NodeFilter.FILTER_SKIP;
          if (targets.some(
            (target) => node.contains(target)
          ))
            return NodeFilter.FILTER_SKIP;
          return NodeFilter.FILTER_ACCEPT;
        }
      });
      let hide = (node) => {
        var ref;
        let refCount = (ref = $08ef1685902b6011$var$refCountMap.get(node)) !== null && ref !== void 0 ? ref : 0;
        if (node.getAttribute("aria-hidden") === "true" && refCount === 0)
          return;
        if (refCount === 0)
          node.setAttribute("aria-hidden", "true");
        hiddenNodes.add(node);
        $08ef1685902b6011$var$refCountMap.set(node, refCount + 1);
      };
      let node1 = walker.nextNode();
      while (node1 != null) {
        hide(node1);
        node1 = walker.nextNode();
      }
      let observer3 = new MutationObserver((changes) => {
        for (let change of changes) {
          if (change.type !== "childList" || change.addedNodes.length === 0)
            continue;
          if (![
            ...visibleNodes,
            ...hiddenNodes
          ].some(
            (node) => node.contains(change.target)
          ))
            for (let node2 of change.addedNodes) {
              if ((node2 instanceof HTMLElement || node2 instanceof SVGElement) && node2.dataset.liveAnnouncer === "true")
                visibleNodes.add(node2);
              else if (node2 instanceof Element)
                hide(node2);
            }
        }
      });
      observer3.observe(root3, {
        childList: true,
        subtree: true
      });
      return () => {
        observer3.disconnect();
        for (let node of hiddenNodes) {
          let count = $08ef1685902b6011$var$refCountMap.get(node);
          if (count === 1) {
            node.removeAttribute("aria-hidden");
            $08ef1685902b6011$var$refCountMap.delete(node);
          } else
            $08ef1685902b6011$var$refCountMap.set(node, count - 1);
        }
      };
    }
  }
});

// ../../node_modules/@react-spectrum/provider/dist/main.js
var require_main13 = __commonJS({
  "../../node_modules/@react-spectrum/provider/dist/main.js"(exports, module) {
    require_();
    var $kmRpa$reactspectrumutils = require_main9();
    var $kmRpa$clsx = require_clsx();
    var $kmRpa$reactariautils = require_main3();
    var $kmRpa$reactariai18n = require_main8();
    var $kmRpa$reactariaoverlays = require_main12();
    var $kmRpa$react = (init_preact(), __toCommonJS(preact_exports));
    function $parcel$export12(e, n, v, s) {
      Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
    }
    function $parcel$interopDefault12(a) {
      return a && a.__esModule ? a.default : a;
    }
    $parcel$export12(module.exports, "Provider", () => $96cabdf5b0aed55b$export$2881499e37b75b9a);
    $parcel$export12(module.exports, "useProvider", () => $96cabdf5b0aed55b$export$693cdb10cec23617);
    $parcel$export12(module.exports, "useProviderProps", () => $96cabdf5b0aed55b$export$521c373ccc32c300);
    var $22365f0f5f2dcdd5$exports = {};
    $parcel$export12($22365f0f5f2dcdd5$exports, "spectrum", () => $22365f0f5f2dcdd5$export$3311ab3a441bc141, (v) => $22365f0f5f2dcdd5$export$3311ab3a441bc141 = v);
    var $22365f0f5f2dcdd5$export$3311ab3a441bc141;
    $22365f0f5f2dcdd5$export$3311ab3a441bc141 = "spectrum_b37d53";
    var $19fbfce217006b12$exports = {};
    $parcel$export12($19fbfce217006b12$exports, "spectrum", () => $19fbfce217006b12$export$3311ab3a441bc141, (v) => $19fbfce217006b12$export$3311ab3a441bc141 = v);
    $parcel$export12($19fbfce217006b12$exports, "spectrum-Body", () => $19fbfce217006b12$export$a30bf7810c8453d1, (v) => $19fbfce217006b12$export$a30bf7810c8453d1 = v);
    $parcel$export12($19fbfce217006b12$exports, "spectrum-Body--italic", () => $19fbfce217006b12$export$7b2dac1166f6ec4c, (v) => $19fbfce217006b12$export$7b2dac1166f6ec4c = v);
    var $19fbfce217006b12$export$3311ab3a441bc141;
    var $19fbfce217006b12$export$a30bf7810c8453d1;
    var $19fbfce217006b12$export$7b2dac1166f6ec4c;
    $19fbfce217006b12$export$3311ab3a441bc141 = "spectrum_2a241c";
    $19fbfce217006b12$export$a30bf7810c8453d1 = "spectrum-Body_2a241c";
    $19fbfce217006b12$export$7b2dac1166f6ec4c = "spectrum-Body--italic_2a241c";
    function $a6e2b5f4621e4690$export$6343629ee1b29116(theme, defaultColorScheme) {
      let matchesDark = $kmRpa$reactspectrumutils.useMediaQuery("(prefers-color-scheme: dark)");
      let matchesLight = $kmRpa$reactspectrumutils.useMediaQuery("(prefers-color-scheme: light)");
      if (theme.dark && matchesDark)
        return "dark";
      if (theme.light && matchesLight)
        return "light";
      if (theme.dark && defaultColorScheme === "dark")
        return "dark";
      if (theme.light && defaultColorScheme === "light")
        return "light";
      if (!theme.dark)
        return "light";
      if (!theme.light)
        return "dark";
      return "light";
    }
    function $a6e2b5f4621e4690$export$a8d2043b2d807f4d(theme) {
      let matchesFine = $kmRpa$reactspectrumutils.useMediaQuery("(any-pointer: fine)");
      if (matchesFine && theme.medium)
        return "medium";
      if (theme.large)
        return "large";
      return "medium";
    }
    var $4db360e38265184f$exports = {};
    $4db360e38265184f$exports = JSON.parse('{"name":"@react-spectrum/provider","version":"3.5.1","description":"Spectrum UI components in React","license":"Apache-2.0","main":"dist/main.js","module":"dist/module.js","types":"dist/types.d.ts","source":"src/index.ts","files":["dist","src"],"sideEffects":["*.css"],"targets":{"main":{"includeNodeModules":["@adobe/spectrum-css-temp"]},"module":{"includeNodeModules":["@adobe/spectrum-css-temp"]}},"repository":{"type":"git","url":"https://github.com/adobe/react-spectrum"},"dependencies":{"@babel/runtime":"^7.6.2","@react-aria/i18n":"^3.6.0","@react-aria/overlays":"^3.10.1","@react-aria/utils":"^3.13.3","@react-spectrum/utils":"^3.7.3","@react-types/provider":"^3.5.3","@react-types/shared":"^3.14.1","clsx":"^1.1.1"},"devDependencies":{"@adobe/spectrum-css-temp":"3.0.0-alpha.1"},"peerDependencies":{"react":"^16.8.0 || ^17.0.0-rc.1 || ^18.0.0","react-dom":"^16.8.0 || ^17.0.0-rc.1 || ^18.0.0"},"publishConfig":{"access":"public"}}');
    var $96cabdf5b0aed55b$var$Context = /* @__PURE__ */ $parcel$interopDefault12($kmRpa$react).createContext(null);
    $96cabdf5b0aed55b$var$Context.displayName = "ProviderContext";
    var $96cabdf5b0aed55b$var$DEFAULT_BREAKPOINTS = {
      S: 640,
      M: 768,
      L: 1024,
      XL: 1280,
      XXL: 1536
    };
    function $96cabdf5b0aed55b$var$Provider(props, ref) {
      let prevContext = $96cabdf5b0aed55b$export$693cdb10cec23617();
      let prevColorScheme = prevContext && prevContext.colorScheme;
      let prevBreakpoints = prevContext && prevContext.breakpoints;
      let { theme = prevContext && prevContext.theme, defaultColorScheme } = props;
      if (!theme)
        throw new Error("theme not found, the parent provider must have a theme provided");
      let autoColorScheme = $a6e2b5f4621e4690$export$6343629ee1b29116(theme, defaultColorScheme);
      let autoScale = $a6e2b5f4621e4690$export$a8d2043b2d807f4d(theme);
      let { locale: prevLocale } = $kmRpa$reactariai18n.useLocale();
      let usePrevColorScheme = !!theme[prevColorScheme];
      let _a3 = props, { colorScheme = usePrevColorScheme ? prevColorScheme : autoColorScheme, scale = prevContext ? prevContext.scale : autoScale, locale = prevContext ? prevLocale : null, breakpoints = prevContext ? prevBreakpoints : $96cabdf5b0aed55b$var$DEFAULT_BREAKPOINTS, children, isQuiet, isEmphasized, isDisabled, isRequired, isReadOnly, validationState } = _a3, otherProps = __objRest(_a3, ["colorScheme", "scale", "locale", "breakpoints", "children", "isQuiet", "isEmphasized", "isDisabled", "isRequired", "isReadOnly", "validationState"]);
      let currentProps = {
        version: $4db360e38265184f$exports.version,
        theme,
        breakpoints,
        colorScheme,
        scale,
        isQuiet,
        isEmphasized,
        isDisabled,
        isRequired,
        isReadOnly,
        validationState
      };
      let matchedBreakpoints = $kmRpa$reactspectrumutils.useMatchedBreakpoints(breakpoints);
      let filteredProps = {};
      Object.entries(currentProps).forEach(
        ([key, value]) => value !== void 0 && (filteredProps[key] = value)
      );
      let context = Object.assign({}, prevContext, filteredProps);
      let contents = children;
      let domProps = $kmRpa$reactariautils.filterDOMProps(otherProps);
      let { styleProps } = $kmRpa$reactspectrumutils.useStyleProps(otherProps, void 0, {
        matchedBreakpoints
      });
      if (!prevContext || props.locale || theme !== prevContext.theme || colorScheme !== prevContext.colorScheme || scale !== prevContext.scale || Object.keys(domProps).length > 0 || otherProps.UNSAFE_className || Object.keys(styleProps.style).length > 0)
        contents = /* @__PURE__ */ $parcel$interopDefault12($kmRpa$react).createElement($96cabdf5b0aed55b$var$ProviderWrapper, __spreadProps(__spreadValues({}, props), {
          UNSAFE_style: __spreadValues({
            isolation: !prevContext ? "isolate" : void 0
          }, styleProps.style),
          ref
        }), contents);
      return /* @__PURE__ */ $parcel$interopDefault12($kmRpa$react).createElement($96cabdf5b0aed55b$var$Context.Provider, {
        value: context
      }, /* @__PURE__ */ $parcel$interopDefault12($kmRpa$react).createElement($kmRpa$reactariai18n.I18nProvider, {
        locale
      }, /* @__PURE__ */ $parcel$interopDefault12($kmRpa$react).createElement($kmRpa$reactspectrumutils.BreakpointProvider, {
        matchedBreakpoints
      }, /* @__PURE__ */ $parcel$interopDefault12($kmRpa$react).createElement($kmRpa$reactariaoverlays.ModalProvider, null, contents))));
    }
    var $96cabdf5b0aed55b$export$2881499e37b75b9a = /* @__PURE__ */ $parcel$interopDefault12($kmRpa$react).forwardRef($96cabdf5b0aed55b$var$Provider);
    var $96cabdf5b0aed55b$var$ProviderWrapper = /* @__PURE__ */ $parcel$interopDefault12($kmRpa$react).forwardRef(function ProviderWrapper(props, ref) {
      let _a3 = props, { children } = _a3, otherProps = __objRest(_a3, ["children"]);
      let { locale, direction } = $kmRpa$reactariai18n.useLocale();
      let { theme, colorScheme, scale } = $96cabdf5b0aed55b$export$693cdb10cec23617();
      let { modalProviderProps } = $kmRpa$reactariaoverlays.useModalProvider();
      let { styleProps } = $kmRpa$reactspectrumutils.useStyleProps(otherProps);
      let domRef = $kmRpa$reactspectrumutils.useDOMRef(ref);
      let themeKey = Object.keys(theme[colorScheme])[0];
      let scaleKey = Object.keys(theme[scale])[0];
      let className = $parcel$interopDefault12($kmRpa$clsx)(styleProps.className, (/* @__PURE__ */ $parcel$interopDefault12($22365f0f5f2dcdd5$exports))["spectrum"], (/* @__PURE__ */ $parcel$interopDefault12($19fbfce217006b12$exports))["spectrum"], theme[colorScheme][themeKey], theme[scale][scaleKey], theme.global ? Object.values(theme.global) : null, {
        "react-spectrum-provider": $kmRpa$reactspectrumutils.shouldKeepSpectrumClassNames,
        spectrum: $kmRpa$reactspectrumutils.shouldKeepSpectrumClassNames,
        [themeKey]: $kmRpa$reactspectrumutils.shouldKeepSpectrumClassNames,
        [scaleKey]: $kmRpa$reactspectrumutils.shouldKeepSpectrumClassNames
      });
      var _colorScheme, ref1;
      let style = __spreadProps(__spreadValues({}, styleProps.style), {
        colorScheme: (ref1 = (_colorScheme = props.colorScheme) !== null && _colorScheme !== void 0 ? _colorScheme : colorScheme) !== null && ref1 !== void 0 ? ref1 : Object.keys(theme).filter(
          (k) => k === "light" || k === "dark"
        ).join(" ")
      });
      let hasWarned = $kmRpa$react.useRef(false);
      $kmRpa$react.useEffect(() => {
        if (direction && domRef.current) {
          let closestDir = domRef.current.parentElement.closest("[dir]");
          let dir = closestDir && closestDir.getAttribute("dir");
          if (dir && dir !== direction && !hasWarned.current) {
            console.warn(`Language directions cannot be nested. ${direction} inside ${dir}.`);
            hasWarned.current = true;
          }
        }
      }, [
        direction,
        domRef,
        hasWarned
      ]);
      return /* @__PURE__ */ $parcel$interopDefault12($kmRpa$react).createElement("div", __spreadProps(__spreadValues(__spreadValues(__spreadValues({}, $kmRpa$reactariautils.filterDOMProps(otherProps)), styleProps), modalProviderProps), {
        className,
        style,
        lang: locale,
        dir: direction,
        ref: domRef
      }), children);
    });
    function $96cabdf5b0aed55b$export$693cdb10cec23617() {
      return $kmRpa$react.useContext($96cabdf5b0aed55b$var$Context);
    }
    function $96cabdf5b0aed55b$export$521c373ccc32c300(props) {
      let context = $96cabdf5b0aed55b$export$693cdb10cec23617();
      if (!context)
        return props;
      return Object.assign({}, {
        isQuiet: context.isQuiet,
        isEmphasized: context.isEmphasized,
        isDisabled: context.isDisabled,
        isRequired: context.isRequired,
        isReadOnly: context.isReadOnly,
        validationState: context.validationState
      }, props);
    }
  }
});

// ../../node_modules/@babel/runtime/helpers/interopRequireDefault.js
var require_interopRequireDefault = __commonJS({
  "../../node_modules/@babel/runtime/helpers/interopRequireDefault.js"(exports, module) {
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// ../../node_modules/@adobe/react-spectrum-ui/dist/CornerTriangle.js
var require_CornerTriangle = __commonJS({
  "../../node_modules/@adobe/react-spectrum-ui/dist/CornerTriangle.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CornerTriangle = CornerTriangle;
    var _react = _interopRequireDefault((init_preact(), __toCommonJS(preact_exports)));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function CornerTriangle(_ref) {
      var _ref$scale = _ref.scale, scale = _ref$scale === void 0 ? "M" : _ref$scale, props = _objectWithoutProperties(_ref, ["scale"]);
      return _react["default"].createElement("svg", _extends2({}, props, props), scale === "L" && _react["default"].createElement("path", {
        d: "M5.74.01a.25.25 0 0 0-.177.073l-5.48 5.48a.25.25 0 0 0 .177.427h5.48a.25.25 0 0 0 .25-.25V.26a.25.25 0 0 0-.25-.25z"
      }), scale === "M" && _react["default"].createElement("path", {
        d: "M4.74.01a.25.25 0 0 0-.177.073l-4.48 4.48a.25.25 0 0 0 .177.427h4.48a.25.25 0 0 0 .25-.25V.26a.25.25 0 0 0-.25-.25z"
      }));
    }
    CornerTriangle.displayName = "CornerTriangle";
  }
});

// ../../node_modules/@react-spectrum/icon/dist/main.css
var require_2 = __commonJS({
  "../../node_modules/@react-spectrum/icon/dist/main.css"(exports, module) {
    module.exports = {};
  }
});

// ../../node_modules/@react-spectrum/icon/dist/main.js
var require_main14 = __commonJS({
  "../../node_modules/@react-spectrum/icon/dist/main.js"(exports, module) {
    require_2();
    var $khAmQ$reactspectrumutils = require_main9();
    var $khAmQ$reactariautils = require_main3();
    var $khAmQ$react = (init_preact(), __toCommonJS(preact_exports));
    var $khAmQ$reactspectrumprovider = require_main13();
    function $parcel$export12(e, n, v, s) {
      Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
    }
    function $parcel$interopDefault12(a) {
      return a && a.__esModule ? a.default : a;
    }
    $parcel$export12(module.exports, "Icon", () => $2f297c87d3047269$export$f04a61298a47a40f);
    $parcel$export12(module.exports, "UIIcon", () => $722df481e3c1f593$export$906cc5990ff10700);
    $parcel$export12(module.exports, "Illustration", () => $ebfd4d66f1999633$export$d43c2e2ca9b2c105);
    var $5ef39e0c80b682c7$exports = {};
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-Icon", () => $5ef39e0c80b682c7$export$d374b04f30360026, (v) => $5ef39e0c80b682c7$export$d374b04f30360026 = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-UIIcon", () => $5ef39e0c80b682c7$export$c7db7fdc5aac13aa, (v) => $5ef39e0c80b682c7$export$c7db7fdc5aac13aa = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-Icon--sizeXXS", () => $5ef39e0c80b682c7$export$cab8448604b31f43, (v) => $5ef39e0c80b682c7$export$cab8448604b31f43 = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-Icon--sizeXS", () => $5ef39e0c80b682c7$export$557c0af6873b4222, (v) => $5ef39e0c80b682c7$export$557c0af6873b4222 = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-Icon--sizeS", () => $5ef39e0c80b682c7$export$34ce05647f0c65e, (v) => $5ef39e0c80b682c7$export$34ce05647f0c65e = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-Icon--sizeM", () => $5ef39e0c80b682c7$export$8f1693ac47916bbf, (v) => $5ef39e0c80b682c7$export$8f1693ac47916bbf = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-Icon--sizeL", () => $5ef39e0c80b682c7$export$8d23c37ef2a4f13e, (v) => $5ef39e0c80b682c7$export$8d23c37ef2a4f13e = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-Icon--sizeXL", () => $5ef39e0c80b682c7$export$c6e70a22e841bc1b, (v) => $5ef39e0c80b682c7$export$c6e70a22e841bc1b = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-Icon--sizeXXL", () => $5ef39e0c80b682c7$export$b37777493a27e620, (v) => $5ef39e0c80b682c7$export$b37777493a27e620 = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum--medium", () => $5ef39e0c80b682c7$export$4c0c83b3f4303ef8, (v) => $5ef39e0c80b682c7$export$4c0c83b3f4303ef8 = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-UIIcon--large", () => $5ef39e0c80b682c7$export$2265a487ad399d8b, (v) => $5ef39e0c80b682c7$export$2265a487ad399d8b = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-UIIcon--medium", () => $5ef39e0c80b682c7$export$a6044013cf72ddc9, (v) => $5ef39e0c80b682c7$export$a6044013cf72ddc9 = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum--large", () => $5ef39e0c80b682c7$export$a88a8dbe29386d31, (v) => $5ef39e0c80b682c7$export$a88a8dbe29386d31 = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-UIIcon-AlertMedium", () => $5ef39e0c80b682c7$export$83be8302c01b6478, (v) => $5ef39e0c80b682c7$export$83be8302c01b6478 = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-UIIcon-AlertSmall", () => $5ef39e0c80b682c7$export$57b49d6ee2e9f187, (v) => $5ef39e0c80b682c7$export$57b49d6ee2e9f187 = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-UIIcon-ArrowDownSmall", () => $5ef39e0c80b682c7$export$81968d05e3681b3f, (v) => $5ef39e0c80b682c7$export$81968d05e3681b3f = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-UIIcon-ArrowLeftMedium", () => $5ef39e0c80b682c7$export$c0d655f335b5bc31, (v) => $5ef39e0c80b682c7$export$c0d655f335b5bc31 = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-UIIcon-Asterisk", () => $5ef39e0c80b682c7$export$cca4342eca45562, (v) => $5ef39e0c80b682c7$export$cca4342eca45562 = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-UIIcon-CheckmarkMedium", () => $5ef39e0c80b682c7$export$edc4a2e9af971b26, (v) => $5ef39e0c80b682c7$export$edc4a2e9af971b26 = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-UIIcon-CheckmarkSmall", () => $5ef39e0c80b682c7$export$9e665cb12e71e037, (v) => $5ef39e0c80b682c7$export$9e665cb12e71e037 = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-UIIcon-ChevronDownMedium", () => $5ef39e0c80b682c7$export$2f91b7a7627906d5, (v) => $5ef39e0c80b682c7$export$2f91b7a7627906d5 = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-UIIcon-ChevronDownSmall", () => $5ef39e0c80b682c7$export$56efb4ec9eb35c07, (v) => $5ef39e0c80b682c7$export$56efb4ec9eb35c07 = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-UIIcon-ChevronLeftLarge", () => $5ef39e0c80b682c7$export$5861dfe1d581a528, (v) => $5ef39e0c80b682c7$export$5861dfe1d581a528 = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-UIIcon-ChevronLeftMedium", () => $5ef39e0c80b682c7$export$595a122b60890c78, (v) => $5ef39e0c80b682c7$export$595a122b60890c78 = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-UIIcon-ChevronRightLarge", () => $5ef39e0c80b682c7$export$596373794435f8bc, (v) => $5ef39e0c80b682c7$export$596373794435f8bc = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-UIIcon-ChevronRightMedium", () => $5ef39e0c80b682c7$export$32b379a02cafbfb3, (v) => $5ef39e0c80b682c7$export$32b379a02cafbfb3 = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-UIIcon-ChevronRightSmall", () => $5ef39e0c80b682c7$export$ee5de2c4d7c8faa4, (v) => $5ef39e0c80b682c7$export$ee5de2c4d7c8faa4 = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-UIIcon-ChevronUpSmall", () => $5ef39e0c80b682c7$export$c1cbae72fd236fd9, (v) => $5ef39e0c80b682c7$export$c1cbae72fd236fd9 = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-UIIcon-CornerTriangle", () => $5ef39e0c80b682c7$export$636d8cde4f6b7e6, (v) => $5ef39e0c80b682c7$export$636d8cde4f6b7e6 = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-UIIcon-CrossLarge", () => $5ef39e0c80b682c7$export$1f0ad4082256e3df, (v) => $5ef39e0c80b682c7$export$1f0ad4082256e3df = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-UIIcon-CrossMedium", () => $5ef39e0c80b682c7$export$1e0848411e254295, (v) => $5ef39e0c80b682c7$export$1e0848411e254295 = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-UIIcon-CrossSmall", () => $5ef39e0c80b682c7$export$1c1bddac0ae5fbe5, (v) => $5ef39e0c80b682c7$export$1c1bddac0ae5fbe5 = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-UIIcon-DashSmall", () => $5ef39e0c80b682c7$export$98de2b9917cd3b6a, (v) => $5ef39e0c80b682c7$export$98de2b9917cd3b6a = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-UIIcon-DoubleGripper", () => $5ef39e0c80b682c7$export$3c956876cb11c1e1, (v) => $5ef39e0c80b682c7$export$3c956876cb11c1e1 = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-UIIcon-FolderBreadcrumb", () => $5ef39e0c80b682c7$export$55cf2795737352fc, (v) => $5ef39e0c80b682c7$export$55cf2795737352fc = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-UIIcon-HelpMedium", () => $5ef39e0c80b682c7$export$d5d1e3e09ea6cd5, (v) => $5ef39e0c80b682c7$export$d5d1e3e09ea6cd5 = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-UIIcon-HelpSmall", () => $5ef39e0c80b682c7$export$f51b22382127207d, (v) => $5ef39e0c80b682c7$export$f51b22382127207d = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-UIIcon-InfoMedium", () => $5ef39e0c80b682c7$export$825a6c2340d3b7e5, (v) => $5ef39e0c80b682c7$export$825a6c2340d3b7e5 = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-UIIcon-InfoSmall", () => $5ef39e0c80b682c7$export$4828f4a6bfd26c04, (v) => $5ef39e0c80b682c7$export$4828f4a6bfd26c04 = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-UIIcon-ListGripper", () => $5ef39e0c80b682c7$export$1254ece141a8dac6, (v) => $5ef39e0c80b682c7$export$1254ece141a8dac6 = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-UIIcon-Magnifier", () => $5ef39e0c80b682c7$export$a33650c9f4cc191e, (v) => $5ef39e0c80b682c7$export$a33650c9f4cc191e = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-UIIcon-SkipLeft", () => $5ef39e0c80b682c7$export$9eb19533e4b8cc28, (v) => $5ef39e0c80b682c7$export$9eb19533e4b8cc28 = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-UIIcon-SkipRight", () => $5ef39e0c80b682c7$export$67704939e41f705a, (v) => $5ef39e0c80b682c7$export$67704939e41f705a = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-UIIcon-Star", () => $5ef39e0c80b682c7$export$c4d219c150b98c92, (v) => $5ef39e0c80b682c7$export$c4d219c150b98c92 = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-UIIcon-StarOutline", () => $5ef39e0c80b682c7$export$bcda0a6a6d7202af, (v) => $5ef39e0c80b682c7$export$bcda0a6a6d7202af = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-UIIcon-SuccessMedium", () => $5ef39e0c80b682c7$export$d18d2d837989a797, (v) => $5ef39e0c80b682c7$export$d18d2d837989a797 = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-UIIcon-SuccessSmall", () => $5ef39e0c80b682c7$export$506ac7a1a72a2c65, (v) => $5ef39e0c80b682c7$export$506ac7a1a72a2c65 = v);
    $parcel$export12($5ef39e0c80b682c7$exports, "spectrum-UIIcon-TripleGripper", () => $5ef39e0c80b682c7$export$12b8600bcd969018, (v) => $5ef39e0c80b682c7$export$12b8600bcd969018 = v);
    var $5ef39e0c80b682c7$export$d374b04f30360026;
    var $5ef39e0c80b682c7$export$c7db7fdc5aac13aa;
    var $5ef39e0c80b682c7$export$cab8448604b31f43;
    var $5ef39e0c80b682c7$export$557c0af6873b4222;
    var $5ef39e0c80b682c7$export$34ce05647f0c65e;
    var $5ef39e0c80b682c7$export$8f1693ac47916bbf;
    var $5ef39e0c80b682c7$export$8d23c37ef2a4f13e;
    var $5ef39e0c80b682c7$export$c6e70a22e841bc1b;
    var $5ef39e0c80b682c7$export$b37777493a27e620;
    var $5ef39e0c80b682c7$export$4c0c83b3f4303ef8;
    var $5ef39e0c80b682c7$export$2265a487ad399d8b;
    var $5ef39e0c80b682c7$export$a6044013cf72ddc9;
    var $5ef39e0c80b682c7$export$a88a8dbe29386d31;
    var $5ef39e0c80b682c7$export$83be8302c01b6478;
    var $5ef39e0c80b682c7$export$57b49d6ee2e9f187;
    var $5ef39e0c80b682c7$export$81968d05e3681b3f;
    var $5ef39e0c80b682c7$export$c0d655f335b5bc31;
    var $5ef39e0c80b682c7$export$cca4342eca45562;
    var $5ef39e0c80b682c7$export$edc4a2e9af971b26;
    var $5ef39e0c80b682c7$export$9e665cb12e71e037;
    var $5ef39e0c80b682c7$export$2f91b7a7627906d5;
    var $5ef39e0c80b682c7$export$56efb4ec9eb35c07;
    var $5ef39e0c80b682c7$export$5861dfe1d581a528;
    var $5ef39e0c80b682c7$export$595a122b60890c78;
    var $5ef39e0c80b682c7$export$596373794435f8bc;
    var $5ef39e0c80b682c7$export$32b379a02cafbfb3;
    var $5ef39e0c80b682c7$export$ee5de2c4d7c8faa4;
    var $5ef39e0c80b682c7$export$c1cbae72fd236fd9;
    var $5ef39e0c80b682c7$export$636d8cde4f6b7e6;
    var $5ef39e0c80b682c7$export$1f0ad4082256e3df;
    var $5ef39e0c80b682c7$export$1e0848411e254295;
    var $5ef39e0c80b682c7$export$1c1bddac0ae5fbe5;
    var $5ef39e0c80b682c7$export$98de2b9917cd3b6a;
    var $5ef39e0c80b682c7$export$3c956876cb11c1e1;
    var $5ef39e0c80b682c7$export$55cf2795737352fc;
    var $5ef39e0c80b682c7$export$d5d1e3e09ea6cd5;
    var $5ef39e0c80b682c7$export$f51b22382127207d;
    var $5ef39e0c80b682c7$export$825a6c2340d3b7e5;
    var $5ef39e0c80b682c7$export$4828f4a6bfd26c04;
    var $5ef39e0c80b682c7$export$1254ece141a8dac6;
    var $5ef39e0c80b682c7$export$a33650c9f4cc191e;
    var $5ef39e0c80b682c7$export$9eb19533e4b8cc28;
    var $5ef39e0c80b682c7$export$67704939e41f705a;
    var $5ef39e0c80b682c7$export$c4d219c150b98c92;
    var $5ef39e0c80b682c7$export$bcda0a6a6d7202af;
    var $5ef39e0c80b682c7$export$d18d2d837989a797;
    var $5ef39e0c80b682c7$export$506ac7a1a72a2c65;
    var $5ef39e0c80b682c7$export$12b8600bcd969018;
    $5ef39e0c80b682c7$export$d374b04f30360026 = "spectrum-Icon_368b34";
    $5ef39e0c80b682c7$export$c7db7fdc5aac13aa = "spectrum-UIIcon_368b34";
    $5ef39e0c80b682c7$export$cab8448604b31f43 = "spectrum-Icon--sizeXXS_368b34";
    $5ef39e0c80b682c7$export$557c0af6873b4222 = "spectrum-Icon--sizeXS_368b34";
    $5ef39e0c80b682c7$export$34ce05647f0c65e = "spectrum-Icon--sizeS_368b34";
    $5ef39e0c80b682c7$export$8f1693ac47916bbf = "spectrum-Icon--sizeM_368b34";
    $5ef39e0c80b682c7$export$8d23c37ef2a4f13e = "spectrum-Icon--sizeL_368b34";
    $5ef39e0c80b682c7$export$c6e70a22e841bc1b = "spectrum-Icon--sizeXL_368b34";
    $5ef39e0c80b682c7$export$b37777493a27e620 = "spectrum-Icon--sizeXXL_368b34";
    $5ef39e0c80b682c7$export$4c0c83b3f4303ef8 = "spectrum--medium_368b34";
    $5ef39e0c80b682c7$export$2265a487ad399d8b = "spectrum-UIIcon--large_368b34";
    $5ef39e0c80b682c7$export$a6044013cf72ddc9 = "spectrum-UIIcon--medium_368b34";
    $5ef39e0c80b682c7$export$a88a8dbe29386d31 = "spectrum--large_368b34";
    $5ef39e0c80b682c7$export$83be8302c01b6478 = "spectrum-UIIcon-AlertMedium_368b34";
    $5ef39e0c80b682c7$export$57b49d6ee2e9f187 = "spectrum-UIIcon-AlertSmall_368b34";
    $5ef39e0c80b682c7$export$81968d05e3681b3f = "spectrum-UIIcon-ArrowDownSmall_368b34";
    $5ef39e0c80b682c7$export$c0d655f335b5bc31 = "spectrum-UIIcon-ArrowLeftMedium_368b34";
    $5ef39e0c80b682c7$export$cca4342eca45562 = "spectrum-UIIcon-Asterisk_368b34";
    $5ef39e0c80b682c7$export$edc4a2e9af971b26 = "spectrum-UIIcon-CheckmarkMedium_368b34";
    $5ef39e0c80b682c7$export$9e665cb12e71e037 = "spectrum-UIIcon-CheckmarkSmall_368b34";
    $5ef39e0c80b682c7$export$2f91b7a7627906d5 = "spectrum-UIIcon-ChevronDownMedium_368b34";
    $5ef39e0c80b682c7$export$56efb4ec9eb35c07 = "spectrum-UIIcon-ChevronDownSmall_368b34";
    $5ef39e0c80b682c7$export$5861dfe1d581a528 = "spectrum-UIIcon-ChevronLeftLarge_368b34";
    $5ef39e0c80b682c7$export$595a122b60890c78 = "spectrum-UIIcon-ChevronLeftMedium_368b34";
    $5ef39e0c80b682c7$export$596373794435f8bc = "spectrum-UIIcon-ChevronRightLarge_368b34";
    $5ef39e0c80b682c7$export$32b379a02cafbfb3 = "spectrum-UIIcon-ChevronRightMedium_368b34";
    $5ef39e0c80b682c7$export$ee5de2c4d7c8faa4 = "spectrum-UIIcon-ChevronRightSmall_368b34";
    $5ef39e0c80b682c7$export$c1cbae72fd236fd9 = "spectrum-UIIcon-ChevronUpSmall_368b34";
    $5ef39e0c80b682c7$export$636d8cde4f6b7e6 = "spectrum-UIIcon-CornerTriangle_368b34";
    $5ef39e0c80b682c7$export$1f0ad4082256e3df = "spectrum-UIIcon-CrossLarge_368b34";
    $5ef39e0c80b682c7$export$1e0848411e254295 = "spectrum-UIIcon-CrossMedium_368b34";
    $5ef39e0c80b682c7$export$1c1bddac0ae5fbe5 = "spectrum-UIIcon-CrossSmall_368b34";
    $5ef39e0c80b682c7$export$98de2b9917cd3b6a = "spectrum-UIIcon-DashSmall_368b34";
    $5ef39e0c80b682c7$export$3c956876cb11c1e1 = "spectrum-UIIcon-DoubleGripper_368b34";
    $5ef39e0c80b682c7$export$55cf2795737352fc = "spectrum-UIIcon-FolderBreadcrumb_368b34";
    $5ef39e0c80b682c7$export$d5d1e3e09ea6cd5 = "spectrum-UIIcon-HelpMedium_368b34";
    $5ef39e0c80b682c7$export$f51b22382127207d = "spectrum-UIIcon-HelpSmall_368b34";
    $5ef39e0c80b682c7$export$825a6c2340d3b7e5 = "spectrum-UIIcon-InfoMedium_368b34";
    $5ef39e0c80b682c7$export$4828f4a6bfd26c04 = "spectrum-UIIcon-InfoSmall_368b34";
    $5ef39e0c80b682c7$export$1254ece141a8dac6 = "spectrum-UIIcon-ListGripper_368b34";
    $5ef39e0c80b682c7$export$a33650c9f4cc191e = "spectrum-UIIcon-Magnifier_368b34";
    $5ef39e0c80b682c7$export$9eb19533e4b8cc28 = "spectrum-UIIcon-SkipLeft_368b34";
    $5ef39e0c80b682c7$export$67704939e41f705a = "spectrum-UIIcon-SkipRight_368b34";
    $5ef39e0c80b682c7$export$c4d219c150b98c92 = "spectrum-UIIcon-Star_368b34";
    $5ef39e0c80b682c7$export$bcda0a6a6d7202af = "spectrum-UIIcon-StarOutline_368b34";
    $5ef39e0c80b682c7$export$d18d2d837989a797 = "spectrum-UIIcon-SuccessMedium_368b34";
    $5ef39e0c80b682c7$export$506ac7a1a72a2c65 = "spectrum-UIIcon-SuccessSmall_368b34";
    $5ef39e0c80b682c7$export$12b8600bcd969018 = "spectrum-UIIcon-TripleGripper_368b34";
    function $2f297c87d3047269$var$iconColorValue(value) {
      return `var(--spectrum-semantic-${value}-color-icon)`;
    }
    var $2f297c87d3047269$var$iconStyleProps = __spreadProps(__spreadValues({}, $khAmQ$reactspectrumutils.baseStyleProps), {
      color: [
        "color",
        $2f297c87d3047269$var$iconColorValue
      ]
    });
    function $2f297c87d3047269$export$f04a61298a47a40f(props) {
      props = $khAmQ$reactspectrumutils.useSlotProps(props, "icon");
      let _a3 = props, { children, size, "aria-label": ariaLabel, "aria-hidden": ariaHidden } = _a3, otherProps = __objRest(_a3, ["children", "size", "aria-label", "aria-hidden"]);
      let { styleProps } = $khAmQ$reactspectrumutils.useStyleProps(otherProps, $2f297c87d3047269$var$iconStyleProps);
      let provider = $khAmQ$reactspectrumprovider.useProvider();
      let scale = "M";
      if (provider !== null)
        scale = provider.scale === "large" ? "L" : "M";
      if (!ariaHidden)
        ariaHidden = void 0;
      let iconSize = size ? size : scale;
      return /* @__PURE__ */ $parcel$interopDefault12($khAmQ$react).cloneElement(children, __spreadProps(__spreadValues(__spreadValues({}, $khAmQ$reactariautils.filterDOMProps(otherProps)), styleProps), {
        focusable: "false",
        "aria-label": ariaLabel,
        "aria-hidden": ariaLabel ? ariaHidden || void 0 : true,
        role: "img",
        className: $khAmQ$reactspectrumutils.classNames(/* @__PURE__ */ $parcel$interopDefault12($5ef39e0c80b682c7$exports), children.props.className, "spectrum-Icon", `spectrum-Icon--size${iconSize}`, styleProps.className)
      }));
    }
    function $722df481e3c1f593$export$906cc5990ff10700(props) {
      props = $khAmQ$reactspectrumutils.useSlotProps(props, "icon");
      let _a3 = props, { children, "aria-label": ariaLabel, "aria-hidden": ariaHidden } = _a3, otherProps = __objRest(_a3, ["children", "aria-label", "aria-hidden"]);
      let { styleProps } = $khAmQ$reactspectrumutils.useStyleProps(otherProps);
      let provider = $khAmQ$reactspectrumprovider.useProvider();
      let scale = "M";
      if (provider !== null)
        scale = provider.scale === "large" ? "L" : "M";
      if (!ariaHidden)
        ariaHidden = void 0;
      return /* @__PURE__ */ $parcel$interopDefault12($khAmQ$react).cloneElement(children, __spreadProps(__spreadValues(__spreadValues({}, $khAmQ$reactariautils.filterDOMProps(otherProps)), styleProps), {
        scale,
        focusable: "false",
        "aria-label": ariaLabel,
        "aria-hidden": ariaLabel ? ariaHidden || void 0 : true,
        role: "img",
        className: $khAmQ$reactspectrumutils.classNames(/* @__PURE__ */ $parcel$interopDefault12($5ef39e0c80b682c7$exports), children.props.className, "spectrum-Icon", {
          [`spectrum-UIIcon-${children.type["displayName"]}`]: children.type["displayName"]
        }, styleProps.className)
      }));
    }
    function $ebfd4d66f1999633$export$d43c2e2ca9b2c105(props) {
      props = $khAmQ$reactspectrumutils.useSlotProps(props, "illustration");
      let _a3 = props, { children, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, "aria-hidden": ariaHidden } = _a3, otherProps = __objRest(_a3, ["children", "aria-label", "aria-labelledby", "aria-hidden"]);
      let { styleProps } = $khAmQ$reactspectrumutils.useStyleProps(otherProps);
      let hasLabel = ariaLabel || ariaLabelledby;
      if (!ariaHidden)
        ariaHidden = void 0;
      return /* @__PURE__ */ $parcel$interopDefault12($khAmQ$react).cloneElement(children, __spreadProps(__spreadValues(__spreadValues({}, $khAmQ$reactariautils.filterDOMProps(otherProps)), styleProps), {
        focusable: "false",
        "aria-label": ariaLabel,
        "aria-labelledby": ariaLabelledby,
        "aria-hidden": ariaHidden,
        role: hasLabel ? "img" : void 0
      }));
    }
  }
});

// ../../node_modules/@spectrum-icons/ui/CornerTriangle.js
var require_CornerTriangle2 = __commonJS({
  "../../node_modules/@spectrum-icons/ui/CornerTriangle.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.default = CornerTriangle;
    var _CornerTriangle = require_CornerTriangle();
    var _icon = require_main14();
    var _react = _interopRequireDefault((init_preact(), __toCommonJS(preact_exports)));
    function CornerTriangle(props) {
      return /* @__PURE__ */ _react.default.createElement(_icon.UIIcon, props, /* @__PURE__ */ _react.default.createElement(_CornerTriangle.CornerTriangle, null));
    }
  }
});

// ../../node_modules/@adobe/react-spectrum-ui/dist/CrossSmall.js
var require_CrossSmall = __commonJS({
  "../../node_modules/@adobe/react-spectrum-ui/dist/CrossSmall.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CrossSmall = CrossSmall;
    var _react = _interopRequireDefault((init_preact(), __toCommonJS(preact_exports)));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function CrossSmall(_ref) {
      var _ref$scale = _ref.scale, scale = _ref$scale === void 0 ? "M" : _ref$scale, props = _objectWithoutProperties(_ref, ["scale"]);
      return _react["default"].createElement("svg", _extends2({}, props, props), scale === "L" && _react["default"].createElement("path", {
        d: "M9.317 8.433L5.884 5l3.433-3.433a.625.625 0 1 0-.884-.884L5 4.116 1.567.683a.625.625 0 1 0-.884.884C.83 1.713 2.77 3.657 4.116 5L.683 8.433a.625.625 0 1 0 .884.884L5 5.884l3.433 3.433a.625.625 0 0 0 .884-.884z"
      }), scale === "M" && _react["default"].createElement("path", {
        d: "M7.317 6.433L4.884 4l2.433-2.433a.625.625 0 1 0-.884-.884L4 3.116 1.567.683a.625.625 0 1 0-.884.884L3.116 4 .683 6.433a.625.625 0 1 0 .884.884L4 4.884l2.433 2.433a.625.625 0 0 0 .884-.884z"
      }));
    }
    CrossSmall.displayName = "CrossSmall";
  }
});

// ../../node_modules/@spectrum-icons/ui/CrossSmall.js
var require_CrossSmall2 = __commonJS({
  "../../node_modules/@spectrum-icons/ui/CrossSmall.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.default = CrossSmall;
    var _CrossSmall = require_CrossSmall();
    var _icon = require_main14();
    var _react = _interopRequireDefault((init_preact(), __toCommonJS(preact_exports)));
    function CrossSmall(props) {
      return /* @__PURE__ */ _react.default.createElement(_icon.UIIcon, props, /* @__PURE__ */ _react.default.createElement(_CrossSmall.CrossSmall, null));
    }
  }
});

// ../../node_modules/@adobe/react-spectrum-ui/dist/ChevronDownMedium.js
var require_ChevronDownMedium = __commonJS({
  "../../node_modules/@adobe/react-spectrum-ui/dist/ChevronDownMedium.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ChevronDownMedium = ChevronDownMedium;
    var _react = _interopRequireDefault((init_preact(), __toCommonJS(preact_exports)));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function ChevronDownMedium(_ref) {
      var _ref$scale = _ref.scale, scale = _ref$scale === void 0 ? "M" : _ref$scale, props = _objectWithoutProperties(_ref, ["scale"]);
      return _react["default"].createElement("svg", _extends2({}, props, props), scale === "L" && _react["default"].createElement("path", {
        d: "M11.99 1.51a1 1 0 0 0-1.707-.707L6 5.086 1.717.803A1 1 0 1 0 .303 2.217l4.99 4.99a1 1 0 0 0 1.414 0l4.99-4.99a.997.997 0 0 0 .293-.707z"
      }), scale === "M" && _react["default"].createElement("path", {
        d: "M9.99 1.01A1 1 0 0 0 8.283.303L5 3.586 1.717.303A1 1 0 1 0 .303 1.717l3.99 3.98a1 1 0 0 0 1.414 0l3.99-3.98a.997.997 0 0 0 .293-.707z"
      }));
    }
    ChevronDownMedium.displayName = "ChevronDownMedium";
  }
});

// ../../node_modules/@spectrum-icons/ui/ChevronDownMedium.js
var require_ChevronDownMedium2 = __commonJS({
  "../../node_modules/@spectrum-icons/ui/ChevronDownMedium.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.default = ChevronDownMedium;
    var _ChevronDownMedium = require_ChevronDownMedium();
    var _icon = require_main14();
    var _react = _interopRequireDefault((init_preact(), __toCommonJS(preact_exports)));
    function ChevronDownMedium(props) {
      return /* @__PURE__ */ _react.default.createElement(_icon.UIIcon, props, /* @__PURE__ */ _react.default.createElement(_ChevronDownMedium.ChevronDownMedium, null));
    }
  }
});

// ../../node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "../../node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol3 = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol3 ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol3 ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol3 ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol3 ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol3 ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol3 ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol3 ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol3 ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol3 ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol3 ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol3 ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol3 ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol3 ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol3 ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol3 ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol3 ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol3 ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol3 ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object2) {
          if (typeof object2 === "object" && object2 !== null) {
            var $$typeof = object2.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object2.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment7 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object2) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object2) || typeOf(object2) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object2) {
          return typeOf(object2) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object2) {
          return typeOf(object2) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object2) {
          return typeOf(object2) === REACT_PROVIDER_TYPE;
        }
        function isElement(object2) {
          return typeof object2 === "object" && object2 !== null && object2.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object2) {
          return typeOf(object2) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object2) {
          return typeOf(object2) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object2) {
          return typeOf(object2) === REACT_LAZY_TYPE;
        }
        function isMemo(object2) {
          return typeOf(object2) === REACT_MEMO_TYPE;
        }
        function isPortal(object2) {
          return typeOf(object2) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object2) {
          return typeOf(object2) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object2) {
          return typeOf(object2) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object2) {
          return typeOf(object2) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment7;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// ../../node_modules/react-is/index.js
var require_react_is = __commonJS({
  "../../node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// ../../node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "../../node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// ../../node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "../../node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// ../../node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "../../node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// ../../node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "../../node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has2 = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has2;
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has2(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// ../../node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "../../node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is();
    var assign2 = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has2 = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement2, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement2(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has2(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has2(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign2({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has2(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement2(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// ../../node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "../../node_modules/prop-types/index.js"(exports, module) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// ../../node_modules/react-lifecycles-compat/react-lifecycles-compat.cjs.js
var require_react_lifecycles_compat_cjs = __commonJS({
  "../../node_modules/react-lifecycles-compat/react-lifecycles-compat.cjs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function componentWillMount() {
      var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
      if (state !== null && state !== void 0) {
        this.setState(state);
      }
    }
    function componentWillReceiveProps(nextProps) {
      function updater(prevState) {
        var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
        return state !== null && state !== void 0 ? state : null;
      }
      this.setState(updater.bind(this));
    }
    function componentWillUpdate(nextProps, nextState) {
      try {
        var prevProps = this.props;
        var prevState = this.state;
        this.props = nextProps;
        this.state = nextState;
        this.__reactInternalSnapshotFlag = true;
        this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(
          prevProps,
          prevState
        );
      } finally {
        this.props = prevProps;
        this.state = prevState;
      }
    }
    componentWillMount.__suppressDeprecationWarning = true;
    componentWillReceiveProps.__suppressDeprecationWarning = true;
    componentWillUpdate.__suppressDeprecationWarning = true;
    function polyfill(Component2) {
      var prototype = Component2.prototype;
      if (!prototype || !prototype.isReactComponent) {
        throw new Error("Can only polyfill class components");
      }
      if (typeof Component2.getDerivedStateFromProps !== "function" && typeof prototype.getSnapshotBeforeUpdate !== "function") {
        return Component2;
      }
      var foundWillMountName = null;
      var foundWillReceivePropsName = null;
      var foundWillUpdateName = null;
      if (typeof prototype.componentWillMount === "function") {
        foundWillMountName = "componentWillMount";
      } else if (typeof prototype.UNSAFE_componentWillMount === "function") {
        foundWillMountName = "UNSAFE_componentWillMount";
      }
      if (typeof prototype.componentWillReceiveProps === "function") {
        foundWillReceivePropsName = "componentWillReceiveProps";
      } else if (typeof prototype.UNSAFE_componentWillReceiveProps === "function") {
        foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
      }
      if (typeof prototype.componentWillUpdate === "function") {
        foundWillUpdateName = "componentWillUpdate";
      } else if (typeof prototype.UNSAFE_componentWillUpdate === "function") {
        foundWillUpdateName = "UNSAFE_componentWillUpdate";
      }
      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
        var componentName = Component2.displayName || Component2.name;
        var newApiName = typeof Component2.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
        throw Error(
          "Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n" + componentName + " uses " + newApiName + " but also contains the following legacy lifecycles:" + (foundWillMountName !== null ? "\n  " + foundWillMountName : "") + (foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "") + (foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "") + "\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks"
        );
      }
      if (typeof Component2.getDerivedStateFromProps === "function") {
        prototype.componentWillMount = componentWillMount;
        prototype.componentWillReceiveProps = componentWillReceiveProps;
      }
      if (typeof prototype.getSnapshotBeforeUpdate === "function") {
        if (typeof prototype.componentDidUpdate !== "function") {
          throw new Error(
            "Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype"
          );
        }
        prototype.componentWillUpdate = componentWillUpdate;
        var componentDidUpdate = prototype.componentDidUpdate;
        prototype.componentDidUpdate = function componentDidUpdatePolyfill(prevProps, prevState, maybeSnapshot) {
          var snapshot = this.__reactInternalSnapshotFlag ? this.__reactInternalSnapshot : maybeSnapshot;
          componentDidUpdate.call(this, prevProps, prevState, snapshot);
        };
      }
      return Component2;
    }
    exports.polyfill = polyfill;
  }
});

// ../../node_modules/react-transition-group/utils/PropTypes.js
var require_PropTypes = __commonJS({
  "../../node_modules/react-transition-group/utils/PropTypes.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.classNamesShape = exports.timeoutsShape = void 0;
    var _propTypes = _interopRequireDefault(require_prop_types());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var timeoutsShape = true ? _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
      enter: _propTypes.default.number,
      exit: _propTypes.default.number,
      appear: _propTypes.default.number
    }).isRequired]) : null;
    exports.timeoutsShape = timeoutsShape;
    var classNamesShape = true ? _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.shape({
      enter: _propTypes.default.string,
      exit: _propTypes.default.string,
      active: _propTypes.default.string
    }), _propTypes.default.shape({
      enter: _propTypes.default.string,
      enterDone: _propTypes.default.string,
      enterActive: _propTypes.default.string,
      exit: _propTypes.default.string,
      exitDone: _propTypes.default.string,
      exitActive: _propTypes.default.string
    })]) : null;
    exports.classNamesShape = classNamesShape;
  }
});

// ../../node_modules/react-transition-group/Transition.js
var require_Transition = __commonJS({
  "../../node_modules/react-transition-group/Transition.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = exports.EXITING = exports.ENTERED = exports.ENTERING = exports.EXITED = exports.UNMOUNTED = void 0;
    var PropTypes = _interopRequireWildcard(require_prop_types());
    var _react = _interopRequireDefault((init_preact(), __toCommonJS(preact_exports)));
    var _reactDom = _interopRequireDefault((init_preact(), __toCommonJS(preact_exports)));
    var _reactLifecyclesCompat = require_react_lifecycles_compat_cjs();
    var _PropTypes = require_PropTypes();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      } else {
        var newObj = {};
        if (obj != null) {
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
              var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
              if (desc.get || desc.set) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
        }
        newObj.default = obj;
        return newObj;
      }
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function _inheritsLoose2(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var UNMOUNTED = "unmounted";
    exports.UNMOUNTED = UNMOUNTED;
    var EXITED = "exited";
    exports.EXITED = EXITED;
    var ENTERING = "entering";
    exports.ENTERING = ENTERING;
    var ENTERED = "entered";
    exports.ENTERED = ENTERED;
    var EXITING = "exiting";
    exports.EXITING = EXITING;
    var Transition = /* @__PURE__ */ function(_React$Component) {
      _inheritsLoose2(Transition2, _React$Component);
      function Transition2(props, context) {
        var _this;
        _this = _React$Component.call(this, props, context) || this;
        var parentGroup = context.transitionGroup;
        var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
        var initialStatus;
        _this.appearStatus = null;
        if (props.in) {
          if (appear) {
            initialStatus = EXITED;
            _this.appearStatus = ENTERING;
          } else {
            initialStatus = ENTERED;
          }
        } else {
          if (props.unmountOnExit || props.mountOnEnter) {
            initialStatus = UNMOUNTED;
          } else {
            initialStatus = EXITED;
          }
        }
        _this.state = {
          status: initialStatus
        };
        _this.nextCallback = null;
        return _this;
      }
      var _proto = Transition2.prototype;
      _proto.getChildContext = function getChildContext() {
        return {
          transitionGroup: null
        };
      };
      Transition2.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
        var nextIn = _ref.in;
        if (nextIn && prevState.status === UNMOUNTED) {
          return {
            status: EXITED
          };
        }
        return null;
      };
      _proto.componentDidMount = function componentDidMount() {
        this.updateStatus(true, this.appearStatus);
      };
      _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
        var nextStatus = null;
        if (prevProps !== this.props) {
          var status = this.state.status;
          if (this.props.in) {
            if (status !== ENTERING && status !== ENTERED) {
              nextStatus = ENTERING;
            }
          } else {
            if (status === ENTERING || status === ENTERED) {
              nextStatus = EXITING;
            }
          }
        }
        this.updateStatus(false, nextStatus);
      };
      _proto.componentWillUnmount = function componentWillUnmount() {
        this.cancelNextCallback();
      };
      _proto.getTimeouts = function getTimeouts() {
        var timeout = this.props.timeout;
        var exit, enter, appear;
        exit = enter = appear = timeout;
        if (timeout != null && typeof timeout !== "number") {
          exit = timeout.exit;
          enter = timeout.enter;
          appear = timeout.appear !== void 0 ? timeout.appear : enter;
        }
        return {
          exit,
          enter,
          appear
        };
      };
      _proto.updateStatus = function updateStatus(mounting, nextStatus) {
        if (mounting === void 0) {
          mounting = false;
        }
        if (nextStatus !== null) {
          this.cancelNextCallback();
          var node = _reactDom.default.findDOMNode(this);
          if (nextStatus === ENTERING) {
            this.performEnter(node, mounting);
          } else {
            this.performExit(node);
          }
        } else if (this.props.unmountOnExit && this.state.status === EXITED) {
          this.setState({
            status: UNMOUNTED
          });
        }
      };
      _proto.performEnter = function performEnter(node, mounting) {
        var _this2 = this;
        var enter = this.props.enter;
        var appearing = this.context.transitionGroup ? this.context.transitionGroup.isMounting : mounting;
        var timeouts = this.getTimeouts();
        var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
        if (!mounting && !enter) {
          this.safeSetState({
            status: ENTERED
          }, function() {
            _this2.props.onEntered(node);
          });
          return;
        }
        this.props.onEnter(node, appearing);
        this.safeSetState({
          status: ENTERING
        }, function() {
          _this2.props.onEntering(node, appearing);
          _this2.onTransitionEnd(node, enterTimeout, function() {
            _this2.safeSetState({
              status: ENTERED
            }, function() {
              _this2.props.onEntered(node, appearing);
            });
          });
        });
      };
      _proto.performExit = function performExit(node) {
        var _this3 = this;
        var exit = this.props.exit;
        var timeouts = this.getTimeouts();
        if (!exit) {
          this.safeSetState({
            status: EXITED
          }, function() {
            _this3.props.onExited(node);
          });
          return;
        }
        this.props.onExit(node);
        this.safeSetState({
          status: EXITING
        }, function() {
          _this3.props.onExiting(node);
          _this3.onTransitionEnd(node, timeouts.exit, function() {
            _this3.safeSetState({
              status: EXITED
            }, function() {
              _this3.props.onExited(node);
            });
          });
        });
      };
      _proto.cancelNextCallback = function cancelNextCallback() {
        if (this.nextCallback !== null) {
          this.nextCallback.cancel();
          this.nextCallback = null;
        }
      };
      _proto.safeSetState = function safeSetState(nextState, callback) {
        callback = this.setNextCallback(callback);
        this.setState(nextState, callback);
      };
      _proto.setNextCallback = function setNextCallback(callback) {
        var _this4 = this;
        var active = true;
        this.nextCallback = function(event) {
          if (active) {
            active = false;
            _this4.nextCallback = null;
            callback(event);
          }
        };
        this.nextCallback.cancel = function() {
          active = false;
        };
        return this.nextCallback;
      };
      _proto.onTransitionEnd = function onTransitionEnd(node, timeout, handler) {
        this.setNextCallback(handler);
        var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;
        if (!node || doesNotHaveTimeoutOrListener) {
          setTimeout(this.nextCallback, 0);
          return;
        }
        if (this.props.addEndListener) {
          this.props.addEndListener(node, this.nextCallback);
        }
        if (timeout != null) {
          setTimeout(this.nextCallback, timeout);
        }
      };
      _proto.render = function render4() {
        var status = this.state.status;
        if (status === UNMOUNTED) {
          return null;
        }
        var _this$props = this.props, children = _this$props.children, childProps = _objectWithoutPropertiesLoose(_this$props, ["children"]);
        delete childProps.in;
        delete childProps.mountOnEnter;
        delete childProps.unmountOnExit;
        delete childProps.appear;
        delete childProps.enter;
        delete childProps.exit;
        delete childProps.timeout;
        delete childProps.addEndListener;
        delete childProps.onEnter;
        delete childProps.onEntering;
        delete childProps.onEntered;
        delete childProps.onExit;
        delete childProps.onExiting;
        delete childProps.onExited;
        if (typeof children === "function") {
          return children(status, childProps);
        }
        var child = _react.default.Children.only(children);
        return _react.default.cloneElement(child, childProps);
      };
      return Transition2;
    }(_react.default.Component);
    Transition.contextTypes = {
      transitionGroup: PropTypes.object
    };
    Transition.childContextTypes = {
      transitionGroup: function transitionGroup() {
      }
    };
    Transition.propTypes = true ? {
      children: PropTypes.oneOfType([PropTypes.func.isRequired, PropTypes.element.isRequired]).isRequired,
      in: PropTypes.bool,
      mountOnEnter: PropTypes.bool,
      unmountOnExit: PropTypes.bool,
      appear: PropTypes.bool,
      enter: PropTypes.bool,
      exit: PropTypes.bool,
      timeout: function timeout(props) {
        var pt = _PropTypes.timeoutsShape;
        if (!props.addEndListener)
          pt = pt.isRequired;
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        return pt.apply(void 0, [props].concat(args));
      },
      addEndListener: PropTypes.func,
      onEnter: PropTypes.func,
      onEntering: PropTypes.func,
      onEntered: PropTypes.func,
      onExit: PropTypes.func,
      onExiting: PropTypes.func,
      onExited: PropTypes.func
    } : {};
    function noop3() {
    }
    Transition.defaultProps = {
      in: false,
      mountOnEnter: false,
      unmountOnExit: false,
      appear: false,
      enter: true,
      exit: true,
      onEnter: noop3,
      onEntering: noop3,
      onEntered: noop3,
      onExit: noop3,
      onExiting: noop3,
      onExited: noop3
    };
    Transition.UNMOUNTED = 0;
    Transition.EXITED = 1;
    Transition.ENTERING = 2;
    Transition.ENTERED = 3;
    Transition.EXITING = 4;
    var _default = (0, _reactLifecyclesCompat.polyfill)(Transition);
    exports.default = _default;
  }
});

// ../../node_modules/@adobe/react-spectrum-ui/dist/CheckmarkMedium.js
var require_CheckmarkMedium = __commonJS({
  "../../node_modules/@adobe/react-spectrum-ui/dist/CheckmarkMedium.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CheckmarkMedium = CheckmarkMedium;
    var _react = _interopRequireDefault((init_preact(), __toCommonJS(preact_exports)));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function CheckmarkMedium(_ref) {
      var _ref$scale = _ref.scale, scale = _ref$scale === void 0 ? "M" : _ref$scale, props = _objectWithoutProperties(_ref, ["scale"]);
      return _react["default"].createElement("svg", _extends2({}, props, props), scale === "L" && _react["default"].createElement("path", {
        d: "M6 14a1 1 0 0 1-.789-.385l-4-5a1 1 0 1 1 1.577-1.23L6 11.376l7.213-8.99a1 1 0 1 1 1.576 1.23l-8 10a1 1 0 0 1-.789.384z"
      }), scale === "M" && _react["default"].createElement("path", {
        d: "M4.5 10a1.022 1.022 0 0 1-.799-.384l-2.488-3a1 1 0 0 1 1.576-1.233L4.5 7.376l4.712-5.991a1 1 0 1 1 1.576 1.23l-5.51 7A.978.978 0 0 1 4.5 10z"
      }));
    }
    CheckmarkMedium.displayName = "CheckmarkMedium";
  }
});

// ../../node_modules/@spectrum-icons/ui/CheckmarkMedium.js
var require_CheckmarkMedium2 = __commonJS({
  "../../node_modules/@spectrum-icons/ui/CheckmarkMedium.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.default = CheckmarkMedium;
    var _CheckmarkMedium = require_CheckmarkMedium();
    var _icon = require_main14();
    var _react = _interopRequireDefault((init_preact(), __toCommonJS(preact_exports)));
    function CheckmarkMedium(props) {
      return /* @__PURE__ */ _react.default.createElement(_icon.UIIcon, props, /* @__PURE__ */ _react.default.createElement(_CheckmarkMedium.CheckmarkMedium, null));
    }
  }
});

// ../../node_modules/@adobe/react-spectrum-ui/dist/AlertMedium.js
var require_AlertMedium = __commonJS({
  "../../node_modules/@adobe/react-spectrum-ui/dist/AlertMedium.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AlertMedium = AlertMedium;
    var _react = _interopRequireDefault((init_preact(), __toCommonJS(preact_exports)));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function AlertMedium(_ref) {
      var _ref$scale = _ref.scale, scale = _ref$scale === void 0 ? "M" : _ref$scale, props = _objectWithoutProperties(_ref, ["scale"]);
      return _react["default"].createElement("svg", _extends2({}, props, props), scale === "L" && _react["default"].createElement("path", {
        d: "M10.563 2.206l-9.249 16.55a.5.5 0 0 0 .436.744h18.5a.5.5 0 0 0 .436-.744l-9.251-16.55a.5.5 0 0 0-.872 0zm1.436 15.044a.25.25 0 0 1-.25.25h-1.5a.25.25 0 0 1-.25-.25v-1.5a.25.25 0 0 1 .25-.25h1.5a.25.25 0 0 1 .25.25zm0-3.5a.25.25 0 0 1-.25.25h-1.5a.25.25 0 0 1-.25-.25v-6a.25.25 0 0 1 .25-.25h1.5a.25.25 0 0 1 .25.25z"
      }), scale === "M" && _react["default"].createElement("path", {
        d: "M8.564 1.289L.2 16.256A.5.5 0 0 0 .636 17h16.728a.5.5 0 0 0 .436-.744L9.436 1.289a.5.5 0 0 0-.872 0zM10 14.75a.25.25 0 0 1-.25.25h-1.5a.25.25 0 0 1-.25-.25v-1.5a.25.25 0 0 1 .25-.25h1.5a.25.25 0 0 1 .25.25zm0-3a.25.25 0 0 1-.25.25h-1.5a.25.25 0 0 1-.25-.25v-6a.25.25 0 0 1 .25-.25h1.5a.25.25 0 0 1 .25.25z"
      }));
    }
    AlertMedium.displayName = "AlertMedium";
  }
});

// ../../node_modules/@spectrum-icons/ui/AlertMedium.js
var require_AlertMedium2 = __commonJS({
  "../../node_modules/@spectrum-icons/ui/AlertMedium.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.default = AlertMedium;
    var _AlertMedium = require_AlertMedium();
    var _icon = require_main14();
    var _react = _interopRequireDefault((init_preact(), __toCommonJS(preact_exports)));
    function AlertMedium(props) {
      return /* @__PURE__ */ _react.default.createElement(_icon.UIIcon, props, /* @__PURE__ */ _react.default.createElement(_AlertMedium.AlertMedium, null));
    }
  }
});

// ../../node_modules/@adobe/react-spectrum-ui/dist/Asterisk.js
var require_Asterisk = __commonJS({
  "../../node_modules/@adobe/react-spectrum-ui/dist/Asterisk.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Asterisk = Asterisk;
    var _react = _interopRequireDefault((init_preact(), __toCommonJS(preact_exports)));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function Asterisk(_ref) {
      var _ref$scale = _ref.scale, scale = _ref$scale === void 0 ? "M" : _ref$scale, props = _objectWithoutProperties(_ref, ["scale"]);
      return _react["default"].createElement("svg", _extends2({}, props, props), scale === "L" && _react["default"].createElement("path", {
        d: "M7.867 7.872c.061.062.103.145 0 .228l-1.283.827c-.104.061-.145.02-.186-.083L4.804 6.07l-2.09 2.297c-.021.042-.083.083-.145 0l-.994-1.035c-.103-.062-.082-.124 0-.186l2.36-1.966-2.691-1.014c-.042 0-.104-.083-.062-.186l.703-1.41a.11.11 0 0 1 .187-.04L4.43 4.06l.145-3.02A.109.109 0 0 1 4.7.917l1.718.227c.104 0 .124.042.104.145l-.808 2.96 2.734-.828c.061-.042.124-.042.165.082l.27 1.532c.02.103 0 .145-.084.145l-2.856.227z"
      }), scale === "M" && _react["default"].createElement("path", {
        d: "M6.573 6.558c.056.055.092.13 0 .204l-1.148.74c-.093.056-.13.02-.167-.073L3.832 4.947l-1.87 2.055c-.02.037-.075.074-.13 0l-.889-.926c-.092-.055-.074-.111 0-.167l2.111-1.76-2.408-.906c-.037 0-.092-.074-.055-.167l.63-1.259a.097.097 0 0 1 .166-.036l2.111 1.37.13-2.704a.097.097 0 0 1 .111-.11L5.277.54c.092 0 .11.037.092.13l-.722 2.647 2.444-.74c.056-.038.111-.038.148.073l.241 1.37c.019.093 0 .13-.074.13l-2.556.204z"
      }));
    }
    Asterisk.displayName = "Asterisk";
  }
});

// ../../node_modules/@spectrum-icons/ui/Asterisk.js
var require_Asterisk2 = __commonJS({
  "../../node_modules/@spectrum-icons/ui/Asterisk.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.default = Asterisk;
    var _Asterisk = require_Asterisk();
    var _icon = require_main14();
    var _react = _interopRequireDefault((init_preact(), __toCommonJS(preact_exports)));
    function Asterisk(props) {
      return /* @__PURE__ */ _react.default.createElement(_icon.UIIcon, props, /* @__PURE__ */ _react.default.createElement(_Asterisk.Asterisk, null));
    }
  }
});

// ../../node_modules/@adobe/react-spectrum-workflow/dist/Edit.js
var require_Edit = __commonJS({
  "../../node_modules/@adobe/react-spectrum-workflow/dist/Edit.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.A4uEdit = A4uEdit;
    var _react = _interopRequireDefault((init_preact(), __toCommonJS(preact_exports)));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function A4uEdit(_ref) {
      var props = _extends2({}, _ref);
      return /* @__PURE__ */ _react["default"].createElement("svg", _extends2({
        viewBox: "0 0 36 36"
      }, props, props), /* @__PURE__ */ _react["default"].createElement("path", {
        fillRule: "evenodd",
        d: "M33.567,8.2,27.8,2.432a1.215,1.215,0,0,0-.866-.353H26.9a1.371,1.371,0,0,0-.927.406L5.084,23.372a.99.99,0,0,0-.251.422L2.055,33.1c-.114.377.459.851.783.851a.251.251,0,0,0,.062-.007c.276-.063,7.866-2.344,9.311-2.778a.972.972,0,0,0,.414-.249L33.513,10.028a1.372,1.372,0,0,0,.4-.883A1.221,1.221,0,0,0,33.567,8.2ZM11.4,29.316c-2.161.649-4.862,1.465-6.729,2.022l2.009-6.73Z"
      }));
    }
  }
});

// ../../node_modules/@spectrum-icons/workflow/Edit.js
var require_Edit2 = __commonJS({
  "../../node_modules/@spectrum-icons/workflow/Edit.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.default = Edit2;
    var _Edit2 = require_Edit();
    var _icon = require_main14();
    var _react = _interopRequireDefault((init_preact(), __toCommonJS(preact_exports)));
    function Edit2(props) {
      return /* @__PURE__ */ _react.default.createElement(_icon.Icon, props, /* @__PURE__ */ _react.default.createElement(_Edit2.A4uEdit, null));
    }
  }
});

// src/setup.ts
globalThis.UI = true;
globalThis.UI_ENDPOINT = "http://localhost:3000";
globalThis.PLUGIN_ID = "1152303696398026079";
globalThis.DEV = true;

// src/index.tsx
import { render as render3 } from "/public/vendor/preact.min.js";

// src/Provider.tsx
import { PureComponent as PureComponent2 } from "/public/vendor/preact.min.js";
import { useEffect } from "/public/vendor/preact.min.js";

// src/state/provider.tsx
import { createContext as createContext2 } from "/public/vendor/preact.min.js";
import { useContext } from "/public/vendor/preact.min.js";

// ../../node_modules/mobx/dist/mobx.esm.js
var niceErrors = {
  0: "Invalid value for configuration 'enforceActions', expected 'never', 'always' or 'observed'",
  1: function _(annotationType, key) {
    return "Cannot apply '" + annotationType + "' to '" + key.toString() + "': Field not found.";
  },
  5: "'keys()' can only be used on observable objects, arrays, sets and maps",
  6: "'values()' can only be used on observable objects, arrays, sets and maps",
  7: "'entries()' can only be used on observable objects, arrays and maps",
  8: "'set()' can only be used on observable objects, arrays and maps",
  9: "'remove()' can only be used on observable objects, arrays and maps",
  10: "'has()' can only be used on observable objects, arrays and maps",
  11: "'get()' can only be used on observable objects, arrays and maps",
  12: "Invalid annotation",
  13: "Dynamic observable objects cannot be frozen. If you're passing observables to 3rd party component/function that calls Object.freeze, pass copy instead: toJS(observable)",
  14: "Intercept handlers should return nothing or a change object",
  15: "Observable arrays cannot be frozen. If you're passing observables to 3rd party component/function that calls Object.freeze, pass copy instead: toJS(observable)",
  16: "Modification exception: the internal structure of an observable array was changed.",
  17: function _2(index, length) {
    return "[mobx.array] Index out of bounds, " + index + " is larger than " + length;
  },
  18: "mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js",
  19: function _3(other) {
    return "Cannot initialize from classes that inherit from Map: " + other.constructor.name;
  },
  20: function _4(other) {
    return "Cannot initialize map from " + other;
  },
  21: function _5(dataStructure) {
    return "Cannot convert to map from '" + dataStructure + "'";
  },
  22: "mobx.set requires Set polyfill for the current browser. Check babel-polyfill or core-js/es6/set.js",
  23: "It is not possible to get index atoms from arrays",
  24: function _6(thing) {
    return "Cannot obtain administration from " + thing;
  },
  25: function _7(property, name) {
    return "the entry '" + property + "' does not exist in the observable map '" + name + "'";
  },
  26: "please specify a property",
  27: function _8(property, name) {
    return "no observable property '" + property.toString() + "' found on the observable object '" + name + "'";
  },
  28: function _9(thing) {
    return "Cannot obtain atom from " + thing;
  },
  29: "Expecting some object",
  30: "invalid action stack. did you forget to finish an action?",
  31: "missing option for computed: get",
  32: function _10(name, derivation) {
    return "Cycle detected in computation " + name + ": " + derivation;
  },
  33: function _11(name) {
    return "The setter of computed value '" + name + "' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?";
  },
  34: function _12(name) {
    return "[ComputedValue '" + name + "'] It is not possible to assign a new value to a computed value.";
  },
  35: "There are multiple, different versions of MobX active. Make sure MobX is loaded only once or use `configure({ isolateGlobalState: true })`",
  36: "isolateGlobalState should be called before MobX is running any reactions",
  37: function _13(method) {
    return "[mobx] `observableArray." + method + "()` mutates the array in-place, which is not allowed inside a derivation. Use `array.slice()." + method + "()` instead";
  },
  38: "'ownKeys()' can only be used on observable objects",
  39: "'defineProperty()' can only be used on observable objects"
};
var errors = true ? niceErrors : {};
function die(error) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  if (true) {
    var e = typeof error === "string" ? error : errors[error];
    if (typeof e === "function")
      e = e.apply(null, args);
    throw new Error("[MobX] " + e);
  }
  throw new Error(typeof error === "number" ? "[MobX] minified error nr: " + error + (args.length ? " " + args.map(String).join(",") : "") + ". Find the full error at: https://github.com/mobxjs/mobx/blob/main/packages/mobx/src/errors.ts" : "[MobX] " + error);
}
var mockGlobal = {};
function getGlobal() {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  return mockGlobal;
}
var assign = Object.assign;
var getDescriptor = Object.getOwnPropertyDescriptor;
var defineProperty = Object.defineProperty;
var objectPrototype = Object.prototype;
var EMPTY_ARRAY = [];
Object.freeze(EMPTY_ARRAY);
var EMPTY_OBJECT = {};
Object.freeze(EMPTY_OBJECT);
var hasProxy = typeof Proxy !== "undefined";
var plainObjectString = /* @__PURE__ */ Object.toString();
function assertProxies() {
  if (!hasProxy) {
    die(true ? "`Proxy` objects are not available in the current environment. Please configure MobX to enable a fallback implementation.`" : "Proxy not available");
  }
}
function warnAboutProxyRequirement(msg) {
  if (globalState.verifyProxies) {
    die("MobX is currently configured to be able to run in ES5 mode, but in ES5 MobX won't be able to " + msg);
  }
}
function getNextId() {
  return ++globalState.mobxGuid;
}
function once(func) {
  var invoked = false;
  return function() {
    if (invoked) {
      return;
    }
    invoked = true;
    return func.apply(this, arguments);
  };
}
var noop = function noop2() {
};
function isFunction(fn) {
  return typeof fn === "function";
}
function isStringish(value) {
  var t = typeof value;
  switch (t) {
    case "string":
    case "symbol":
    case "number":
      return true;
  }
  return false;
}
function isObject(value) {
  return value !== null && typeof value === "object";
}
function isPlainObject(value) {
  if (!isObject(value)) {
    return false;
  }
  var proto = Object.getPrototypeOf(value);
  if (proto == null) {
    return true;
  }
  var protoConstructor = Object.hasOwnProperty.call(proto, "constructor") && proto.constructor;
  return typeof protoConstructor === "function" && protoConstructor.toString() === plainObjectString;
}
function isGenerator(obj) {
  var constructor = obj == null ? void 0 : obj.constructor;
  if (!constructor) {
    return false;
  }
  if ("GeneratorFunction" === constructor.name || "GeneratorFunction" === constructor.displayName) {
    return true;
  }
  return false;
}
function addHiddenProp(object2, propName, value) {
  defineProperty(object2, propName, {
    enumerable: false,
    writable: true,
    configurable: true,
    value
  });
}
function addHiddenFinalProp(object2, propName, value) {
  defineProperty(object2, propName, {
    enumerable: false,
    writable: false,
    configurable: true,
    value
  });
}
function createInstanceofPredicate(name, theClass) {
  var propName = "isMobX" + name;
  theClass.prototype[propName] = true;
  return function(x) {
    return isObject(x) && x[propName] === true;
  };
}
function isES6Map(thing) {
  return thing instanceof Map;
}
function isES6Set(thing) {
  return thing instanceof Set;
}
var hasGetOwnPropertySymbols = typeof Object.getOwnPropertySymbols !== "undefined";
function getPlainObjectKeys(object2) {
  var keys = Object.keys(object2);
  if (!hasGetOwnPropertySymbols) {
    return keys;
  }
  var symbols = Object.getOwnPropertySymbols(object2);
  if (!symbols.length) {
    return keys;
  }
  return [].concat(keys, symbols.filter(function(s) {
    return objectPrototype.propertyIsEnumerable.call(object2, s);
  }));
}
var ownKeys = typeof Reflect !== "undefined" && Reflect.ownKeys ? Reflect.ownKeys : hasGetOwnPropertySymbols ? function(obj) {
  return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));
} : Object.getOwnPropertyNames;
function stringifyKey(key) {
  if (typeof key === "string") {
    return key;
  }
  if (typeof key === "symbol") {
    return key.toString();
  }
  return new String(key).toString();
}
function toPrimitive(value) {
  return value === null ? null : typeof value === "object" ? "" + value : value;
}
function hasProp(target, prop) {
  return objectPrototype.hasOwnProperty.call(target, prop);
}
var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors2(target) {
  var res = {};
  ownKeys(target).forEach(function(key) {
    res[key] = getDescriptor(target, key);
  });
  return res;
};
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _assertThisInitialized(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return {
          done: true
        };
      return {
        done: false,
        value: o[i++]
      };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
var storedAnnotationsSymbol = /* @__PURE__ */ Symbol("mobx-stored-annotations");
function createDecoratorAnnotation(annotation) {
  function decorator(target, property) {
    storeAnnotation(target, property, annotation);
  }
  return Object.assign(decorator, annotation);
}
function storeAnnotation(prototype, key, annotation) {
  if (!hasProp(prototype, storedAnnotationsSymbol)) {
    addHiddenProp(prototype, storedAnnotationsSymbol, _extends({}, prototype[storedAnnotationsSymbol]));
  }
  if (isOverride(annotation) && !hasProp(prototype[storedAnnotationsSymbol], key)) {
    var fieldName = prototype.constructor.name + ".prototype." + key.toString();
    die("'" + fieldName + "' is decorated with 'override', but no such decorated member was found on prototype.");
  }
  assertNotDecorated(prototype, annotation, key);
  if (!isOverride(annotation)) {
    prototype[storedAnnotationsSymbol][key] = annotation;
  }
}
function assertNotDecorated(prototype, annotation, key) {
  if (!isOverride(annotation) && hasProp(prototype[storedAnnotationsSymbol], key)) {
    var fieldName = prototype.constructor.name + ".prototype." + key.toString();
    var currentAnnotationType = prototype[storedAnnotationsSymbol][key].annotationType_;
    var requestedAnnotationType = annotation.annotationType_;
    die("Cannot apply '@" + requestedAnnotationType + "' to '" + fieldName + "':" + ("\nThe field is already decorated with '@" + currentAnnotationType + "'.") + "\nRe-decorating fields is not allowed.\nUse '@override' decorator for methods overridden by subclass.");
  }
}
function collectStoredAnnotations(target) {
  if (!hasProp(target, storedAnnotationsSymbol)) {
    if (!target[storedAnnotationsSymbol]) {
      die("No annotations were passed to makeObservable, but no decorated members have been found either");
    }
    addHiddenProp(target, storedAnnotationsSymbol, _extends({}, target[storedAnnotationsSymbol]));
  }
  return target[storedAnnotationsSymbol];
}
var $mobx = /* @__PURE__ */ Symbol("mobx administration");
var Atom = /* @__PURE__ */ function() {
  function Atom2(name_) {
    if (name_ === void 0) {
      name_ = true ? "Atom@" + getNextId() : "Atom";
    }
    this.name_ = void 0;
    this.isPendingUnobservation_ = false;
    this.isBeingObserved_ = false;
    this.observers_ = /* @__PURE__ */ new Set();
    this.diffValue_ = 0;
    this.lastAccessedBy_ = 0;
    this.lowestObserverState_ = IDerivationState_.NOT_TRACKING_;
    this.onBOL = void 0;
    this.onBUOL = void 0;
    this.name_ = name_;
  }
  var _proto = Atom2.prototype;
  _proto.onBO = function onBO() {
    if (this.onBOL) {
      this.onBOL.forEach(function(listener) {
        return listener();
      });
    }
  };
  _proto.onBUO = function onBUO() {
    if (this.onBUOL) {
      this.onBUOL.forEach(function(listener) {
        return listener();
      });
    }
  };
  _proto.reportObserved = function reportObserved$1() {
    return reportObserved(this);
  };
  _proto.reportChanged = function reportChanged() {
    startBatch();
    propagateChanged(this);
    endBatch();
  };
  _proto.toString = function toString2() {
    return this.name_;
  };
  return Atom2;
}();
var isAtom = /* @__PURE__ */ createInstanceofPredicate("Atom", Atom);
function createAtom(name, onBecomeObservedHandler, onBecomeUnobservedHandler) {
  if (onBecomeObservedHandler === void 0) {
    onBecomeObservedHandler = noop;
  }
  if (onBecomeUnobservedHandler === void 0) {
    onBecomeUnobservedHandler = noop;
  }
  var atom = new Atom(name);
  if (onBecomeObservedHandler !== noop) {
    onBecomeObserved(atom, onBecomeObservedHandler);
  }
  if (onBecomeUnobservedHandler !== noop) {
    onBecomeUnobserved(atom, onBecomeUnobservedHandler);
  }
  return atom;
}
function identityComparer(a, b) {
  return a === b;
}
function structuralComparer(a, b) {
  return deepEqual(a, b);
}
function shallowComparer(a, b) {
  return deepEqual(a, b, 1);
}
function defaultComparer(a, b) {
  if (Object.is) {
    return Object.is(a, b);
  }
  return a === b ? a !== 0 || 1 / a === 1 / b : a !== a && b !== b;
}
var comparer = {
  identity: identityComparer,
  structural: structuralComparer,
  "default": defaultComparer,
  shallow: shallowComparer
};
function deepEnhancer(v, _14, name) {
  if (isObservable(v)) {
    return v;
  }
  if (Array.isArray(v)) {
    return observable.array(v, {
      name
    });
  }
  if (isPlainObject(v)) {
    return observable.object(v, void 0, {
      name
    });
  }
  if (isES6Map(v)) {
    return observable.map(v, {
      name
    });
  }
  if (isES6Set(v)) {
    return observable.set(v, {
      name
    });
  }
  if (typeof v === "function" && !isAction(v) && !isFlow(v)) {
    if (isGenerator(v)) {
      return flow(v);
    } else {
      return autoAction(name, v);
    }
  }
  return v;
}
function shallowEnhancer(v, _14, name) {
  if (v === void 0 || v === null) {
    return v;
  }
  if (isObservableObject(v) || isObservableArray(v) || isObservableMap(v) || isObservableSet(v)) {
    return v;
  }
  if (Array.isArray(v)) {
    return observable.array(v, {
      name,
      deep: false
    });
  }
  if (isPlainObject(v)) {
    return observable.object(v, void 0, {
      name,
      deep: false
    });
  }
  if (isES6Map(v)) {
    return observable.map(v, {
      name,
      deep: false
    });
  }
  if (isES6Set(v)) {
    return observable.set(v, {
      name,
      deep: false
    });
  }
  if (true) {
    die("The shallow modifier / decorator can only used in combination with arrays, objects, maps and sets");
  }
}
function referenceEnhancer(newValue) {
  return newValue;
}
function refStructEnhancer(v, oldValue) {
  if (isObservable(v)) {
    die("observable.struct should not be used with observable values");
  }
  if (deepEqual(v, oldValue)) {
    return oldValue;
  }
  return v;
}
var OVERRIDE = "override";
function isOverride(annotation) {
  return annotation.annotationType_ === OVERRIDE;
}
function createActionAnnotation(name, options) {
  return {
    annotationType_: name,
    options_: options,
    make_: make_$1,
    extend_: extend_$1
  };
}
function make_$1(adm, key, descriptor, source) {
  var _this$options_;
  if ((_this$options_ = this.options_) != null && _this$options_.bound) {
    return this.extend_(adm, key, descriptor, false) === null ? 0 : 1;
  }
  if (source === adm.target_) {
    return this.extend_(adm, key, descriptor, false) === null ? 0 : 2;
  }
  if (isAction(descriptor.value)) {
    return 1;
  }
  var actionDescriptor = createActionDescriptor(adm, this, key, descriptor, false);
  defineProperty(source, key, actionDescriptor);
  return 2;
}
function extend_$1(adm, key, descriptor, proxyTrap) {
  var actionDescriptor = createActionDescriptor(adm, this, key, descriptor);
  return adm.defineProperty_(key, actionDescriptor, proxyTrap);
}
function assertActionDescriptor(adm, _ref, key, _ref2) {
  var annotationType_ = _ref.annotationType_;
  var value = _ref2.value;
  if (!isFunction(value)) {
    die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' can only be used on properties with a function value."));
  }
}
function createActionDescriptor(adm, annotation, key, descriptor, safeDescriptors) {
  var _annotation$options_, _annotation$options_$, _annotation$options_2, _annotation$options_$2, _annotation$options_3, _annotation$options_4, _adm$proxy_2;
  if (safeDescriptors === void 0) {
    safeDescriptors = globalState.safeDescriptors;
  }
  assertActionDescriptor(adm, annotation, key, descriptor);
  var value = descriptor.value;
  if ((_annotation$options_ = annotation.options_) != null && _annotation$options_.bound) {
    var _adm$proxy_;
    value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);
  }
  return {
    value: createAction(
      (_annotation$options_$ = (_annotation$options_2 = annotation.options_) == null ? void 0 : _annotation$options_2.name) != null ? _annotation$options_$ : key.toString(),
      value,
      (_annotation$options_$2 = (_annotation$options_3 = annotation.options_) == null ? void 0 : _annotation$options_3.autoAction) != null ? _annotation$options_$2 : false,
      (_annotation$options_4 = annotation.options_) != null && _annotation$options_4.bound ? (_adm$proxy_2 = adm.proxy_) != null ? _adm$proxy_2 : adm.target_ : void 0
    ),
    configurable: safeDescriptors ? adm.isPlainObject_ : true,
    enumerable: false,
    writable: safeDescriptors ? false : true
  };
}
function createFlowAnnotation(name, options) {
  return {
    annotationType_: name,
    options_: options,
    make_: make_$2,
    extend_: extend_$2
  };
}
function make_$2(adm, key, descriptor, source) {
  var _this$options_;
  if (source === adm.target_) {
    return this.extend_(adm, key, descriptor, false) === null ? 0 : 2;
  }
  if ((_this$options_ = this.options_) != null && _this$options_.bound && (!hasProp(adm.target_, key) || !isFlow(adm.target_[key]))) {
    if (this.extend_(adm, key, descriptor, false) === null) {
      return 0;
    }
  }
  if (isFlow(descriptor.value)) {
    return 1;
  }
  var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, false, false);
  defineProperty(source, key, flowDescriptor);
  return 2;
}
function extend_$2(adm, key, descriptor, proxyTrap) {
  var _this$options_2;
  var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, (_this$options_2 = this.options_) == null ? void 0 : _this$options_2.bound);
  return adm.defineProperty_(key, flowDescriptor, proxyTrap);
}
function assertFlowDescriptor(adm, _ref, key, _ref2) {
  var annotationType_ = _ref.annotationType_;
  var value = _ref2.value;
  if (!isFunction(value)) {
    die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' can only be used on properties with a generator function value."));
  }
}
function createFlowDescriptor(adm, annotation, key, descriptor, bound, safeDescriptors) {
  if (safeDescriptors === void 0) {
    safeDescriptors = globalState.safeDescriptors;
  }
  assertFlowDescriptor(adm, annotation, key, descriptor);
  var value = descriptor.value;
  if (!isFlow(value)) {
    value = flow(value);
  }
  if (bound) {
    var _adm$proxy_;
    value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);
    value.isMobXFlow = true;
  }
  return {
    value,
    configurable: safeDescriptors ? adm.isPlainObject_ : true,
    enumerable: false,
    writable: safeDescriptors ? false : true
  };
}
function createComputedAnnotation(name, options) {
  return {
    annotationType_: name,
    options_: options,
    make_: make_$3,
    extend_: extend_$3
  };
}
function make_$3(adm, key, descriptor) {
  return this.extend_(adm, key, descriptor, false) === null ? 0 : 1;
}
function extend_$3(adm, key, descriptor, proxyTrap) {
  assertComputedDescriptor(adm, this, key, descriptor);
  return adm.defineComputedProperty_(key, _extends({}, this.options_, {
    get: descriptor.get,
    set: descriptor.set
  }), proxyTrap);
}
function assertComputedDescriptor(adm, _ref, key, _ref2) {
  var annotationType_ = _ref.annotationType_;
  var get3 = _ref2.get;
  if (!get3) {
    die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' can only be used on getter(+setter) properties."));
  }
}
function createObservableAnnotation(name, options) {
  return {
    annotationType_: name,
    options_: options,
    make_: make_$4,
    extend_: extend_$4
  };
}
function make_$4(adm, key, descriptor) {
  return this.extend_(adm, key, descriptor, false) === null ? 0 : 1;
}
function extend_$4(adm, key, descriptor, proxyTrap) {
  var _this$options_$enhanc, _this$options_;
  assertObservableDescriptor(adm, this, key, descriptor);
  return adm.defineObservableProperty_(key, descriptor.value, (_this$options_$enhanc = (_this$options_ = this.options_) == null ? void 0 : _this$options_.enhancer) != null ? _this$options_$enhanc : deepEnhancer, proxyTrap);
}
function assertObservableDescriptor(adm, _ref, key, descriptor) {
  var annotationType_ = _ref.annotationType_;
  if (!("value" in descriptor)) {
    die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' cannot be used on getter/setter properties"));
  }
}
var AUTO = "true";
var autoAnnotation = /* @__PURE__ */ createAutoAnnotation();
function createAutoAnnotation(options) {
  return {
    annotationType_: AUTO,
    options_: options,
    make_: make_$5,
    extend_: extend_$5
  };
}
function make_$5(adm, key, descriptor, source) {
  var _this$options_3, _this$options_4;
  if (descriptor.get) {
    return computed.make_(adm, key, descriptor, source);
  }
  if (descriptor.set) {
    var set4 = createAction(key.toString(), descriptor.set);
    if (source === adm.target_) {
      return adm.defineProperty_(key, {
        configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,
        set: set4
      }) === null ? 0 : 2;
    }
    defineProperty(source, key, {
      configurable: true,
      set: set4
    });
    return 2;
  }
  if (source !== adm.target_ && typeof descriptor.value === "function") {
    var _this$options_2;
    if (isGenerator(descriptor.value)) {
      var _this$options_;
      var flowAnnotation2 = (_this$options_ = this.options_) != null && _this$options_.autoBind ? flow.bound : flow;
      return flowAnnotation2.make_(adm, key, descriptor, source);
    }
    var actionAnnotation2 = (_this$options_2 = this.options_) != null && _this$options_2.autoBind ? autoAction.bound : autoAction;
    return actionAnnotation2.make_(adm, key, descriptor, source);
  }
  var observableAnnotation2 = ((_this$options_3 = this.options_) == null ? void 0 : _this$options_3.deep) === false ? observable.ref : observable;
  if (typeof descriptor.value === "function" && (_this$options_4 = this.options_) != null && _this$options_4.autoBind) {
    var _adm$proxy_;
    descriptor.value = descriptor.value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);
  }
  return observableAnnotation2.make_(adm, key, descriptor, source);
}
function extend_$5(adm, key, descriptor, proxyTrap) {
  var _this$options_5, _this$options_6;
  if (descriptor.get) {
    return computed.extend_(adm, key, descriptor, proxyTrap);
  }
  if (descriptor.set) {
    return adm.defineProperty_(key, {
      configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,
      set: createAction(key.toString(), descriptor.set)
    }, proxyTrap);
  }
  if (typeof descriptor.value === "function" && (_this$options_5 = this.options_) != null && _this$options_5.autoBind) {
    var _adm$proxy_2;
    descriptor.value = descriptor.value.bind((_adm$proxy_2 = adm.proxy_) != null ? _adm$proxy_2 : adm.target_);
  }
  var observableAnnotation2 = ((_this$options_6 = this.options_) == null ? void 0 : _this$options_6.deep) === false ? observable.ref : observable;
  return observableAnnotation2.extend_(adm, key, descriptor, proxyTrap);
}
var OBSERVABLE = "observable";
var OBSERVABLE_REF = "observable.ref";
var OBSERVABLE_SHALLOW = "observable.shallow";
var OBSERVABLE_STRUCT = "observable.struct";
var defaultCreateObservableOptions = {
  deep: true,
  name: void 0,
  defaultDecorator: void 0,
  proxy: true
};
Object.freeze(defaultCreateObservableOptions);
function asCreateObservableOptions(thing) {
  return thing || defaultCreateObservableOptions;
}
var observableAnnotation = /* @__PURE__ */ createObservableAnnotation(OBSERVABLE);
var observableRefAnnotation = /* @__PURE__ */ createObservableAnnotation(OBSERVABLE_REF, {
  enhancer: referenceEnhancer
});
var observableShallowAnnotation = /* @__PURE__ */ createObservableAnnotation(OBSERVABLE_SHALLOW, {
  enhancer: shallowEnhancer
});
var observableStructAnnotation = /* @__PURE__ */ createObservableAnnotation(OBSERVABLE_STRUCT, {
  enhancer: refStructEnhancer
});
var observableDecoratorAnnotation = /* @__PURE__ */ createDecoratorAnnotation(observableAnnotation);
function getEnhancerFromOptions(options) {
  return options.deep === true ? deepEnhancer : options.deep === false ? referenceEnhancer : getEnhancerFromAnnotation(options.defaultDecorator);
}
function getAnnotationFromOptions(options) {
  var _options$defaultDecor;
  return options ? (_options$defaultDecor = options.defaultDecorator) != null ? _options$defaultDecor : createAutoAnnotation(options) : void 0;
}
function getEnhancerFromAnnotation(annotation) {
  var _annotation$options_$, _annotation$options_;
  return !annotation ? deepEnhancer : (_annotation$options_$ = (_annotation$options_ = annotation.options_) == null ? void 0 : _annotation$options_.enhancer) != null ? _annotation$options_$ : deepEnhancer;
}
function createObservable(v, arg2, arg3) {
  if (isStringish(arg2)) {
    storeAnnotation(v, arg2, observableAnnotation);
    return;
  }
  if (isObservable(v)) {
    return v;
  }
  if (isPlainObject(v)) {
    return observable.object(v, arg2, arg3);
  }
  if (Array.isArray(v)) {
    return observable.array(v, arg2);
  }
  if (isES6Map(v)) {
    return observable.map(v, arg2);
  }
  if (isES6Set(v)) {
    return observable.set(v, arg2);
  }
  if (typeof v === "object" && v !== null) {
    return v;
  }
  return observable.box(v, arg2);
}
Object.assign(createObservable, observableDecoratorAnnotation);
var observableFactories = {
  box: function box(value, options) {
    var o = asCreateObservableOptions(options);
    return new ObservableValue(value, getEnhancerFromOptions(o), o.name, true, o.equals);
  },
  array: function array(initialValues, options) {
    var o = asCreateObservableOptions(options);
    return (globalState.useProxies === false || o.proxy === false ? createLegacyArray : createObservableArray)(initialValues, getEnhancerFromOptions(o), o.name);
  },
  map: function map(initialValues, options) {
    var o = asCreateObservableOptions(options);
    return new ObservableMap(initialValues, getEnhancerFromOptions(o), o.name);
  },
  set: function set(initialValues, options) {
    var o = asCreateObservableOptions(options);
    return new ObservableSet(initialValues, getEnhancerFromOptions(o), o.name);
  },
  object: function object(props, decorators, options) {
    return extendObservable(globalState.useProxies === false || (options == null ? void 0 : options.proxy) === false ? asObservableObject({}, options) : asDynamicObservableObject({}, options), props, decorators);
  },
  ref: /* @__PURE__ */ createDecoratorAnnotation(observableRefAnnotation),
  shallow: /* @__PURE__ */ createDecoratorAnnotation(observableShallowAnnotation),
  deep: observableDecoratorAnnotation,
  struct: /* @__PURE__ */ createDecoratorAnnotation(observableStructAnnotation)
};
var observable = /* @__PURE__ */ assign(createObservable, observableFactories);
var COMPUTED = "computed";
var COMPUTED_STRUCT = "computed.struct";
var computedAnnotation = /* @__PURE__ */ createComputedAnnotation(COMPUTED);
var computedStructAnnotation = /* @__PURE__ */ createComputedAnnotation(COMPUTED_STRUCT, {
  equals: comparer.structural
});
var computed = function computed2(arg1, arg2) {
  if (isStringish(arg2)) {
    return storeAnnotation(arg1, arg2, computedAnnotation);
  }
  if (isPlainObject(arg1)) {
    return createDecoratorAnnotation(createComputedAnnotation(COMPUTED, arg1));
  }
  if (true) {
    if (!isFunction(arg1)) {
      die("First argument to `computed` should be an expression.");
    }
    if (isFunction(arg2)) {
      die("A setter as second argument is no longer supported, use `{ set: fn }` option instead");
    }
  }
  var opts = isPlainObject(arg2) ? arg2 : {};
  opts.get = arg1;
  opts.name || (opts.name = arg1.name || "");
  return new ComputedValue(opts);
};
Object.assign(computed, computedAnnotation);
computed.struct = /* @__PURE__ */ createDecoratorAnnotation(computedStructAnnotation);
var _getDescriptor$config;
var _getDescriptor;
var currentActionId = 0;
var nextActionId = 1;
var isFunctionNameConfigurable = (_getDescriptor$config = (_getDescriptor = /* @__PURE__ */ getDescriptor(function() {
}, "name")) == null ? void 0 : _getDescriptor.configurable) != null ? _getDescriptor$config : false;
var tmpNameDescriptor = {
  value: "action",
  configurable: true,
  writable: false,
  enumerable: false
};
function createAction(actionName, fn, autoAction2, ref) {
  if (autoAction2 === void 0) {
    autoAction2 = false;
  }
  if (true) {
    if (!isFunction(fn)) {
      die("`action` can only be invoked on functions");
    }
    if (typeof actionName !== "string" || !actionName) {
      die("actions should have valid names, got: '" + actionName + "'");
    }
  }
  function res() {
    return executeAction(actionName, autoAction2, fn, ref || this, arguments);
  }
  res.isMobxAction = true;
  if (isFunctionNameConfigurable) {
    tmpNameDescriptor.value = actionName;
    Object.defineProperty(res, "name", tmpNameDescriptor);
  }
  return res;
}
function executeAction(actionName, canRunAsDerivation, fn, scope, args) {
  var runInfo = _startAction(actionName, canRunAsDerivation, scope, args);
  try {
    return fn.apply(scope, args);
  } catch (err) {
    runInfo.error_ = err;
    throw err;
  } finally {
    _endAction(runInfo);
  }
}
function _startAction(actionName, canRunAsDerivation, scope, args) {
  var notifySpy_ = isSpyEnabled() && !!actionName;
  var startTime_ = 0;
  if (notifySpy_) {
    startTime_ = Date.now();
    var flattenedArgs = args ? Array.from(args) : EMPTY_ARRAY;
    spyReportStart({
      type: ACTION,
      name: actionName,
      object: scope,
      arguments: flattenedArgs
    });
  }
  var prevDerivation_ = globalState.trackingDerivation;
  var runAsAction = !canRunAsDerivation || !prevDerivation_;
  startBatch();
  var prevAllowStateChanges_ = globalState.allowStateChanges;
  if (runAsAction) {
    untrackedStart();
    prevAllowStateChanges_ = allowStateChangesStart(true);
  }
  var prevAllowStateReads_ = allowStateReadsStart(true);
  var runInfo = {
    runAsAction_: runAsAction,
    prevDerivation_,
    prevAllowStateChanges_,
    prevAllowStateReads_,
    notifySpy_,
    startTime_,
    actionId_: nextActionId++,
    parentActionId_: currentActionId
  };
  currentActionId = runInfo.actionId_;
  return runInfo;
}
function _endAction(runInfo) {
  if (currentActionId !== runInfo.actionId_) {
    die(30);
  }
  currentActionId = runInfo.parentActionId_;
  if (runInfo.error_ !== void 0) {
    globalState.suppressReactionErrors = true;
  }
  allowStateChangesEnd(runInfo.prevAllowStateChanges_);
  allowStateReadsEnd(runInfo.prevAllowStateReads_);
  endBatch();
  if (runInfo.runAsAction_) {
    untrackedEnd(runInfo.prevDerivation_);
  }
  if (runInfo.notifySpy_) {
    spyReportEnd({
      time: Date.now() - runInfo.startTime_
    });
  }
  globalState.suppressReactionErrors = false;
}
function allowStateChanges(allowStateChanges2, func) {
  var prev = allowStateChangesStart(allowStateChanges2);
  try {
    return func();
  } finally {
    allowStateChangesEnd(prev);
  }
}
function allowStateChangesStart(allowStateChanges2) {
  var prev = globalState.allowStateChanges;
  globalState.allowStateChanges = allowStateChanges2;
  return prev;
}
function allowStateChangesEnd(prev) {
  globalState.allowStateChanges = prev;
}
var _Symbol$toPrimitive;
var CREATE = "create";
_Symbol$toPrimitive = Symbol.toPrimitive;
var ObservableValue = /* @__PURE__ */ function(_Atom) {
  _inheritsLoose(ObservableValue2, _Atom);
  function ObservableValue2(value, enhancer, name_, notifySpy, equals) {
    var _this;
    if (name_ === void 0) {
      name_ = true ? "ObservableValue@" + getNextId() : "ObservableValue";
    }
    if (notifySpy === void 0) {
      notifySpy = true;
    }
    if (equals === void 0) {
      equals = comparer["default"];
    }
    _this = _Atom.call(this, name_) || this;
    _this.enhancer = void 0;
    _this.name_ = void 0;
    _this.equals = void 0;
    _this.hasUnreportedChange_ = false;
    _this.interceptors_ = void 0;
    _this.changeListeners_ = void 0;
    _this.value_ = void 0;
    _this.dehancer = void 0;
    _this.enhancer = enhancer;
    _this.name_ = name_;
    _this.equals = equals;
    _this.value_ = enhancer(value, void 0, name_);
    if (notifySpy && isSpyEnabled()) {
      spyReport({
        type: CREATE,
        object: _assertThisInitialized(_this),
        observableKind: "value",
        debugObjectName: _this.name_,
        newValue: "" + _this.value_
      });
    }
    return _this;
  }
  var _proto = ObservableValue2.prototype;
  _proto.dehanceValue = function dehanceValue(value) {
    if (this.dehancer !== void 0) {
      return this.dehancer(value);
    }
    return value;
  };
  _proto.set = function set4(newValue) {
    var oldValue = this.value_;
    newValue = this.prepareNewValue_(newValue);
    if (newValue !== globalState.UNCHANGED) {
      var notifySpy = isSpyEnabled();
      if (notifySpy) {
        spyReportStart({
          type: UPDATE,
          object: this,
          observableKind: "value",
          debugObjectName: this.name_,
          newValue,
          oldValue
        });
      }
      this.setNewValue_(newValue);
      if (notifySpy) {
        spyReportEnd();
      }
    }
  };
  _proto.prepareNewValue_ = function prepareNewValue_(newValue) {
    checkIfStateModificationsAreAllowed(this);
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        object: this,
        type: UPDATE,
        newValue
      });
      if (!change) {
        return globalState.UNCHANGED;
      }
      newValue = change.newValue;
    }
    newValue = this.enhancer(newValue, this.value_, this.name_);
    return this.equals(this.value_, newValue) ? globalState.UNCHANGED : newValue;
  };
  _proto.setNewValue_ = function setNewValue_(newValue) {
    var oldValue = this.value_;
    this.value_ = newValue;
    this.reportChanged();
    if (hasListeners(this)) {
      notifyListeners(this, {
        type: UPDATE,
        object: this,
        newValue,
        oldValue
      });
    }
  };
  _proto.get = function get3() {
    this.reportObserved();
    return this.dehanceValue(this.value_);
  };
  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };
  _proto.observe_ = function observe_(listener, fireImmediately) {
    if (fireImmediately) {
      listener({
        observableKind: "value",
        debugObjectName: this.name_,
        object: this,
        type: UPDATE,
        newValue: this.value_,
        oldValue: void 0
      });
    }
    return registerListener(this, listener);
  };
  _proto.raw = function raw() {
    return this.value_;
  };
  _proto.toJSON = function toJSON2() {
    return this.get();
  };
  _proto.toString = function toString2() {
    return this.name_ + "[" + this.value_ + "]";
  };
  _proto.valueOf = function valueOf() {
    return toPrimitive(this.get());
  };
  _proto[_Symbol$toPrimitive] = function() {
    return this.valueOf();
  };
  return ObservableValue2;
}(Atom);
var _Symbol$toPrimitive$1;
_Symbol$toPrimitive$1 = Symbol.toPrimitive;
var ComputedValue = /* @__PURE__ */ function() {
  function ComputedValue2(options) {
    this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
    this.observing_ = [];
    this.newObserving_ = null;
    this.isBeingObserved_ = false;
    this.isPendingUnobservation_ = false;
    this.observers_ = /* @__PURE__ */ new Set();
    this.diffValue_ = 0;
    this.runId_ = 0;
    this.lastAccessedBy_ = 0;
    this.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
    this.unboundDepsCount_ = 0;
    this.value_ = new CaughtException(null);
    this.name_ = void 0;
    this.triggeredBy_ = void 0;
    this.isComputing_ = false;
    this.isRunningSetter_ = false;
    this.derivation = void 0;
    this.setter_ = void 0;
    this.isTracing_ = TraceMode.NONE;
    this.scope_ = void 0;
    this.equals_ = void 0;
    this.requiresReaction_ = void 0;
    this.keepAlive_ = void 0;
    this.onBOL = void 0;
    this.onBUOL = void 0;
    if (!options.get) {
      die(31);
    }
    this.derivation = options.get;
    this.name_ = options.name || (true ? "ComputedValue@" + getNextId() : "ComputedValue");
    if (options.set) {
      this.setter_ = createAction(true ? this.name_ + "-setter" : "ComputedValue-setter", options.set);
    }
    this.equals_ = options.equals || (options.compareStructural || options.struct ? comparer.structural : comparer["default"]);
    this.scope_ = options.context;
    this.requiresReaction_ = options.requiresReaction;
    this.keepAlive_ = !!options.keepAlive;
  }
  var _proto = ComputedValue2.prototype;
  _proto.onBecomeStale_ = function onBecomeStale_() {
    propagateMaybeChanged(this);
  };
  _proto.onBO = function onBO() {
    if (this.onBOL) {
      this.onBOL.forEach(function(listener) {
        return listener();
      });
    }
  };
  _proto.onBUO = function onBUO() {
    if (this.onBUOL) {
      this.onBUOL.forEach(function(listener) {
        return listener();
      });
    }
  };
  _proto.get = function get3() {
    if (this.isComputing_) {
      die(32, this.name_, this.derivation);
    }
    if (globalState.inBatch === 0 && this.observers_.size === 0 && !this.keepAlive_) {
      if (shouldCompute(this)) {
        this.warnAboutUntrackedRead_();
        startBatch();
        this.value_ = this.computeValue_(false);
        endBatch();
      }
    } else {
      reportObserved(this);
      if (shouldCompute(this)) {
        var prevTrackingContext = globalState.trackingContext;
        if (this.keepAlive_ && !prevTrackingContext) {
          globalState.trackingContext = this;
        }
        if (this.trackAndCompute()) {
          propagateChangeConfirmed(this);
        }
        globalState.trackingContext = prevTrackingContext;
      }
    }
    var result = this.value_;
    if (isCaughtException(result)) {
      throw result.cause;
    }
    return result;
  };
  _proto.set = function set4(value) {
    if (this.setter_) {
      if (this.isRunningSetter_) {
        die(33, this.name_);
      }
      this.isRunningSetter_ = true;
      try {
        this.setter_.call(this.scope_, value);
      } finally {
        this.isRunningSetter_ = false;
      }
    } else {
      die(34, this.name_);
    }
  };
  _proto.trackAndCompute = function trackAndCompute() {
    var oldValue = this.value_;
    var wasSuspended = this.dependenciesState_ === IDerivationState_.NOT_TRACKING_;
    var newValue = this.computeValue_(true);
    var changed = wasSuspended || isCaughtException(oldValue) || isCaughtException(newValue) || !this.equals_(oldValue, newValue);
    if (changed) {
      this.value_ = newValue;
      if (isSpyEnabled()) {
        spyReport({
          observableKind: "computed",
          debugObjectName: this.name_,
          object: this.scope_,
          type: "update",
          oldValue,
          newValue
        });
      }
    }
    return changed;
  };
  _proto.computeValue_ = function computeValue_(track) {
    this.isComputing_ = true;
    var prev = allowStateChangesStart(false);
    var res;
    if (track) {
      res = trackDerivedFunction(this, this.derivation, this.scope_);
    } else {
      if (globalState.disableErrorBoundaries === true) {
        res = this.derivation.call(this.scope_);
      } else {
        try {
          res = this.derivation.call(this.scope_);
        } catch (e) {
          res = new CaughtException(e);
        }
      }
    }
    allowStateChangesEnd(prev);
    this.isComputing_ = false;
    return res;
  };
  _proto.suspend_ = function suspend_() {
    if (!this.keepAlive_) {
      clearObserving(this);
      this.value_ = void 0;
      if (this.isTracing_ !== TraceMode.NONE) {
        console.log("[mobx.trace] Computed value '" + this.name_ + "' was suspended and it will recompute on the next access.");
      }
    }
  };
  _proto.observe_ = function observe_(listener, fireImmediately) {
    var _this = this;
    var firstTime = true;
    var prevValue = void 0;
    return autorun(function() {
      var newValue = _this.get();
      if (!firstTime || fireImmediately) {
        var prevU = untrackedStart();
        listener({
          observableKind: "computed",
          debugObjectName: _this.name_,
          type: UPDATE,
          object: _this,
          newValue,
          oldValue: prevValue
        });
        untrackedEnd(prevU);
      }
      firstTime = false;
      prevValue = newValue;
    });
  };
  _proto.warnAboutUntrackedRead_ = function warnAboutUntrackedRead_() {
    if (false) {
      return;
    }
    if (this.isTracing_ !== TraceMode.NONE) {
      console.log("[mobx.trace] Computed value '" + this.name_ + "' is being read outside a reactive context. Doing a full recompute.");
    }
    if (typeof this.requiresReaction_ === "boolean" ? this.requiresReaction_ : globalState.computedRequiresReaction) {
      console.warn("[mobx] Computed value '" + this.name_ + "' is being read outside a reactive context. Doing a full recompute.");
    }
  };
  _proto.toString = function toString2() {
    return this.name_ + "[" + this.derivation.toString() + "]";
  };
  _proto.valueOf = function valueOf() {
    return toPrimitive(this.get());
  };
  _proto[_Symbol$toPrimitive$1] = function() {
    return this.valueOf();
  };
  return ComputedValue2;
}();
var isComputedValue = /* @__PURE__ */ createInstanceofPredicate("ComputedValue", ComputedValue);
var IDerivationState_;
(function(IDerivationState_2) {
  IDerivationState_2[IDerivationState_2["NOT_TRACKING_"] = -1] = "NOT_TRACKING_";
  IDerivationState_2[IDerivationState_2["UP_TO_DATE_"] = 0] = "UP_TO_DATE_";
  IDerivationState_2[IDerivationState_2["POSSIBLY_STALE_"] = 1] = "POSSIBLY_STALE_";
  IDerivationState_2[IDerivationState_2["STALE_"] = 2] = "STALE_";
})(IDerivationState_ || (IDerivationState_ = {}));
var TraceMode;
(function(TraceMode2) {
  TraceMode2[TraceMode2["NONE"] = 0] = "NONE";
  TraceMode2[TraceMode2["LOG"] = 1] = "LOG";
  TraceMode2[TraceMode2["BREAK"] = 2] = "BREAK";
})(TraceMode || (TraceMode = {}));
var CaughtException = function CaughtException2(cause) {
  this.cause = void 0;
  this.cause = cause;
};
function isCaughtException(e) {
  return e instanceof CaughtException;
}
function shouldCompute(derivation) {
  switch (derivation.dependenciesState_) {
    case IDerivationState_.UP_TO_DATE_:
      return false;
    case IDerivationState_.NOT_TRACKING_:
    case IDerivationState_.STALE_:
      return true;
    case IDerivationState_.POSSIBLY_STALE_: {
      var prevAllowStateReads = allowStateReadsStart(true);
      var prevUntracked = untrackedStart();
      var obs = derivation.observing_, l = obs.length;
      for (var i = 0; i < l; i++) {
        var obj = obs[i];
        if (isComputedValue(obj)) {
          if (globalState.disableErrorBoundaries) {
            obj.get();
          } else {
            try {
              obj.get();
            } catch (e) {
              untrackedEnd(prevUntracked);
              allowStateReadsEnd(prevAllowStateReads);
              return true;
            }
          }
          if (derivation.dependenciesState_ === IDerivationState_.STALE_) {
            untrackedEnd(prevUntracked);
            allowStateReadsEnd(prevAllowStateReads);
            return true;
          }
        }
      }
      changeDependenciesStateTo0(derivation);
      untrackedEnd(prevUntracked);
      allowStateReadsEnd(prevAllowStateReads);
      return false;
    }
  }
}
function checkIfStateModificationsAreAllowed(atom) {
  if (false) {
    return;
  }
  var hasObservers = atom.observers_.size > 0;
  if (!globalState.allowStateChanges && (hasObservers || globalState.enforceActions === "always")) {
    console.warn("[MobX] " + (globalState.enforceActions ? "Since strict-mode is enabled, changing (observed) observable values without using an action is not allowed. Tried to modify: " : "Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, a computed value or the render function of a React component? You can wrap side effects in 'runInAction' (or decorate functions with 'action') if needed. Tried to modify: ") + atom.name_);
  }
}
function checkIfStateReadsAreAllowed(observable2) {
  if (!globalState.allowStateReads && globalState.observableRequiresReaction) {
    console.warn("[mobx] Observable '" + observable2.name_ + "' being read outside a reactive context.");
  }
}
function trackDerivedFunction(derivation, f, context) {
  var prevAllowStateReads = allowStateReadsStart(true);
  changeDependenciesStateTo0(derivation);
  derivation.newObserving_ = new Array(derivation.observing_.length + 100);
  derivation.unboundDepsCount_ = 0;
  derivation.runId_ = ++globalState.runId;
  var prevTracking = globalState.trackingDerivation;
  globalState.trackingDerivation = derivation;
  globalState.inBatch++;
  var result;
  if (globalState.disableErrorBoundaries === true) {
    result = f.call(context);
  } else {
    try {
      result = f.call(context);
    } catch (e) {
      result = new CaughtException(e);
    }
  }
  globalState.inBatch--;
  globalState.trackingDerivation = prevTracking;
  bindDependencies(derivation);
  warnAboutDerivationWithoutDependencies(derivation);
  allowStateReadsEnd(prevAllowStateReads);
  return result;
}
function warnAboutDerivationWithoutDependencies(derivation) {
  if (false) {
    return;
  }
  if (derivation.observing_.length !== 0) {
    return;
  }
  if (typeof derivation.requiresObservable_ === "boolean" ? derivation.requiresObservable_ : globalState.reactionRequiresObservable) {
    console.warn("[mobx] Derivation '" + derivation.name_ + "' is created/updated without reading any observable value.");
  }
}
function bindDependencies(derivation) {
  var prevObserving = derivation.observing_;
  var observing = derivation.observing_ = derivation.newObserving_;
  var lowestNewObservingDerivationState = IDerivationState_.UP_TO_DATE_;
  var i0 = 0, l = derivation.unboundDepsCount_;
  for (var i = 0; i < l; i++) {
    var dep = observing[i];
    if (dep.diffValue_ === 0) {
      dep.diffValue_ = 1;
      if (i0 !== i) {
        observing[i0] = dep;
      }
      i0++;
    }
    if (dep.dependenciesState_ > lowestNewObservingDerivationState) {
      lowestNewObservingDerivationState = dep.dependenciesState_;
    }
  }
  observing.length = i0;
  derivation.newObserving_ = null;
  l = prevObserving.length;
  while (l--) {
    var _dep = prevObserving[l];
    if (_dep.diffValue_ === 0) {
      removeObserver(_dep, derivation);
    }
    _dep.diffValue_ = 0;
  }
  while (i0--) {
    var _dep2 = observing[i0];
    if (_dep2.diffValue_ === 1) {
      _dep2.diffValue_ = 0;
      addObserver(_dep2, derivation);
    }
  }
  if (lowestNewObservingDerivationState !== IDerivationState_.UP_TO_DATE_) {
    derivation.dependenciesState_ = lowestNewObservingDerivationState;
    derivation.onBecomeStale_();
  }
}
function clearObserving(derivation) {
  var obs = derivation.observing_;
  derivation.observing_ = [];
  var i = obs.length;
  while (i--) {
    removeObserver(obs[i], derivation);
  }
  derivation.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
}
function untracked(action2) {
  var prev = untrackedStart();
  try {
    return action2();
  } finally {
    untrackedEnd(prev);
  }
}
function untrackedStart() {
  var prev = globalState.trackingDerivation;
  globalState.trackingDerivation = null;
  return prev;
}
function untrackedEnd(prev) {
  globalState.trackingDerivation = prev;
}
function allowStateReadsStart(allowStateReads) {
  var prev = globalState.allowStateReads;
  globalState.allowStateReads = allowStateReads;
  return prev;
}
function allowStateReadsEnd(prev) {
  globalState.allowStateReads = prev;
}
function changeDependenciesStateTo0(derivation) {
  if (derivation.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
    return;
  }
  derivation.dependenciesState_ = IDerivationState_.UP_TO_DATE_;
  var obs = derivation.observing_;
  var i = obs.length;
  while (i--) {
    obs[i].lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
  }
}
var MobXGlobals = function MobXGlobals2() {
  this.version = 6;
  this.UNCHANGED = {};
  this.trackingDerivation = null;
  this.trackingContext = null;
  this.runId = 0;
  this.mobxGuid = 0;
  this.inBatch = 0;
  this.pendingUnobservations = [];
  this.pendingReactions = [];
  this.isRunningReactions = false;
  this.allowStateChanges = false;
  this.allowStateReads = true;
  this.enforceActions = true;
  this.spyListeners = [];
  this.globalReactionErrorHandlers = [];
  this.computedRequiresReaction = false;
  this.reactionRequiresObservable = false;
  this.observableRequiresReaction = false;
  this.disableErrorBoundaries = false;
  this.suppressReactionErrors = false;
  this.useProxies = true;
  this.verifyProxies = false;
  this.safeDescriptors = true;
};
var canMergeGlobalState = true;
var isolateCalled = false;
var globalState = /* @__PURE__ */ function() {
  var global2 = /* @__PURE__ */ getGlobal();
  if (global2.__mobxInstanceCount > 0 && !global2.__mobxGlobals) {
    canMergeGlobalState = false;
  }
  if (global2.__mobxGlobals && global2.__mobxGlobals.version !== new MobXGlobals().version) {
    canMergeGlobalState = false;
  }
  if (!canMergeGlobalState) {
    setTimeout(function() {
      if (!isolateCalled) {
        die(35);
      }
    }, 1);
    return new MobXGlobals();
  } else if (global2.__mobxGlobals) {
    global2.__mobxInstanceCount += 1;
    if (!global2.__mobxGlobals.UNCHANGED) {
      global2.__mobxGlobals.UNCHANGED = {};
    }
    return global2.__mobxGlobals;
  } else {
    global2.__mobxInstanceCount = 1;
    return global2.__mobxGlobals = /* @__PURE__ */ new MobXGlobals();
  }
}();
function isolateGlobalState() {
  if (globalState.pendingReactions.length || globalState.inBatch || globalState.isRunningReactions) {
    die(36);
  }
  isolateCalled = true;
  if (canMergeGlobalState) {
    var global2 = getGlobal();
    if (--global2.__mobxInstanceCount === 0) {
      global2.__mobxGlobals = void 0;
    }
    globalState = new MobXGlobals();
  }
}
function addObserver(observable2, node) {
  observable2.observers_.add(node);
  if (observable2.lowestObserverState_ > node.dependenciesState_) {
    observable2.lowestObserverState_ = node.dependenciesState_;
  }
}
function removeObserver(observable2, node) {
  observable2.observers_["delete"](node);
  if (observable2.observers_.size === 0) {
    queueForUnobservation(observable2);
  }
}
function queueForUnobservation(observable2) {
  if (observable2.isPendingUnobservation_ === false) {
    observable2.isPendingUnobservation_ = true;
    globalState.pendingUnobservations.push(observable2);
  }
}
function startBatch() {
  globalState.inBatch++;
}
function endBatch() {
  if (--globalState.inBatch === 0) {
    runReactions();
    var list = globalState.pendingUnobservations;
    for (var i = 0; i < list.length; i++) {
      var observable2 = list[i];
      observable2.isPendingUnobservation_ = false;
      if (observable2.observers_.size === 0) {
        if (observable2.isBeingObserved_) {
          observable2.isBeingObserved_ = false;
          observable2.onBUO();
        }
        if (observable2 instanceof ComputedValue) {
          observable2.suspend_();
        }
      }
    }
    globalState.pendingUnobservations = [];
  }
}
function reportObserved(observable2) {
  checkIfStateReadsAreAllowed(observable2);
  var derivation = globalState.trackingDerivation;
  if (derivation !== null) {
    if (derivation.runId_ !== observable2.lastAccessedBy_) {
      observable2.lastAccessedBy_ = derivation.runId_;
      derivation.newObserving_[derivation.unboundDepsCount_++] = observable2;
      if (!observable2.isBeingObserved_ && globalState.trackingContext) {
        observable2.isBeingObserved_ = true;
        observable2.onBO();
      }
    }
    return true;
  } else if (observable2.observers_.size === 0 && globalState.inBatch > 0) {
    queueForUnobservation(observable2);
  }
  return false;
}
function propagateChanged(observable2) {
  if (observable2.lowestObserverState_ === IDerivationState_.STALE_) {
    return;
  }
  observable2.lowestObserverState_ = IDerivationState_.STALE_;
  observable2.observers_.forEach(function(d) {
    if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
      if (d.isTracing_ !== TraceMode.NONE) {
        logTraceInfo(d, observable2);
      }
      d.onBecomeStale_();
    }
    d.dependenciesState_ = IDerivationState_.STALE_;
  });
}
function propagateChangeConfirmed(observable2) {
  if (observable2.lowestObserverState_ === IDerivationState_.STALE_) {
    return;
  }
  observable2.lowestObserverState_ = IDerivationState_.STALE_;
  observable2.observers_.forEach(function(d) {
    if (d.dependenciesState_ === IDerivationState_.POSSIBLY_STALE_) {
      d.dependenciesState_ = IDerivationState_.STALE_;
      if (d.isTracing_ !== TraceMode.NONE) {
        logTraceInfo(d, observable2);
      }
    } else if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
      observable2.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
    }
  });
}
function propagateMaybeChanged(observable2) {
  if (observable2.lowestObserverState_ !== IDerivationState_.UP_TO_DATE_) {
    return;
  }
  observable2.lowestObserverState_ = IDerivationState_.POSSIBLY_STALE_;
  observable2.observers_.forEach(function(d) {
    if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
      d.dependenciesState_ = IDerivationState_.POSSIBLY_STALE_;
      d.onBecomeStale_();
    }
  });
}
function logTraceInfo(derivation, observable2) {
  console.log("[mobx.trace] '" + derivation.name_ + "' is invalidated due to a change in: '" + observable2.name_ + "'");
  if (derivation.isTracing_ === TraceMode.BREAK) {
    var lines = [];
    printDepTree(getDependencyTree(derivation), lines, 1);
    new Function("debugger;\n/*\nTracing '" + derivation.name_ + "'\n\nYou are entering this break point because derivation '" + derivation.name_ + "' is being traced and '" + observable2.name_ + "' is now forcing it to update.\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\n\n" + (derivation instanceof ComputedValue ? derivation.derivation.toString().replace(/[*]\//g, "/") : "") + "\n\nThe dependencies for this derivation are:\n\n" + lines.join("\n") + "\n*/\n    ")();
  }
}
function printDepTree(tree, lines, depth) {
  if (lines.length >= 1e3) {
    lines.push("(and many more)");
    return;
  }
  lines.push("" + "	".repeat(depth - 1) + tree.name);
  if (tree.dependencies) {
    tree.dependencies.forEach(function(child) {
      return printDepTree(child, lines, depth + 1);
    });
  }
}
var Reaction = /* @__PURE__ */ function() {
  function Reaction2(name_, onInvalidate_, errorHandler_, requiresObservable_) {
    if (name_ === void 0) {
      name_ = true ? "Reaction@" + getNextId() : "Reaction";
    }
    this.name_ = void 0;
    this.onInvalidate_ = void 0;
    this.errorHandler_ = void 0;
    this.requiresObservable_ = void 0;
    this.observing_ = [];
    this.newObserving_ = [];
    this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
    this.diffValue_ = 0;
    this.runId_ = 0;
    this.unboundDepsCount_ = 0;
    this.isDisposed_ = false;
    this.isScheduled_ = false;
    this.isTrackPending_ = false;
    this.isRunning_ = false;
    this.isTracing_ = TraceMode.NONE;
    this.name_ = name_;
    this.onInvalidate_ = onInvalidate_;
    this.errorHandler_ = errorHandler_;
    this.requiresObservable_ = requiresObservable_;
  }
  var _proto = Reaction2.prototype;
  _proto.onBecomeStale_ = function onBecomeStale_() {
    this.schedule_();
  };
  _proto.schedule_ = function schedule_() {
    if (!this.isScheduled_) {
      this.isScheduled_ = true;
      globalState.pendingReactions.push(this);
      runReactions();
    }
  };
  _proto.isScheduled = function isScheduled() {
    return this.isScheduled_;
  };
  _proto.runReaction_ = function runReaction_() {
    if (!this.isDisposed_) {
      startBatch();
      this.isScheduled_ = false;
      var prev = globalState.trackingContext;
      globalState.trackingContext = this;
      if (shouldCompute(this)) {
        this.isTrackPending_ = true;
        try {
          this.onInvalidate_();
          if (this.isTrackPending_ && isSpyEnabled()) {
            spyReport({
              name: this.name_,
              type: "scheduled-reaction"
            });
          }
        } catch (e) {
          this.reportExceptionInDerivation_(e);
        }
      }
      globalState.trackingContext = prev;
      endBatch();
    }
  };
  _proto.track = function track(fn) {
    if (this.isDisposed_) {
      return;
    }
    startBatch();
    var notify = isSpyEnabled();
    var startTime;
    if (notify) {
      startTime = Date.now();
      spyReportStart({
        name: this.name_,
        type: "reaction"
      });
    }
    this.isRunning_ = true;
    var prevReaction = globalState.trackingContext;
    globalState.trackingContext = this;
    var result = trackDerivedFunction(this, fn, void 0);
    globalState.trackingContext = prevReaction;
    this.isRunning_ = false;
    this.isTrackPending_ = false;
    if (this.isDisposed_) {
      clearObserving(this);
    }
    if (isCaughtException(result)) {
      this.reportExceptionInDerivation_(result.cause);
    }
    if (notify) {
      spyReportEnd({
        time: Date.now() - startTime
      });
    }
    endBatch();
  };
  _proto.reportExceptionInDerivation_ = function reportExceptionInDerivation_(error) {
    var _this = this;
    if (this.errorHandler_) {
      this.errorHandler_(error, this);
      return;
    }
    if (globalState.disableErrorBoundaries) {
      throw error;
    }
    var message = true ? "[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '" + this + "'" : "[mobx] uncaught error in '" + this + "'";
    if (!globalState.suppressReactionErrors) {
      console.error(message, error);
    } else if (true) {
      console.warn("[mobx] (error in reaction '" + this.name_ + "' suppressed, fix error of causing action below)");
    }
    if (isSpyEnabled()) {
      spyReport({
        type: "error",
        name: this.name_,
        message,
        error: "" + error
      });
    }
    globalState.globalReactionErrorHandlers.forEach(function(f) {
      return f(error, _this);
    });
  };
  _proto.dispose = function dispose() {
    if (!this.isDisposed_) {
      this.isDisposed_ = true;
      if (!this.isRunning_) {
        startBatch();
        clearObserving(this);
        endBatch();
      }
    }
  };
  _proto.getDisposer_ = function getDisposer_() {
    var r = this.dispose.bind(this);
    r[$mobx] = this;
    return r;
  };
  _proto.toString = function toString2() {
    return "Reaction[" + this.name_ + "]";
  };
  _proto.trace = function trace$1(enterBreakPoint) {
    if (enterBreakPoint === void 0) {
      enterBreakPoint = false;
    }
    trace(this, enterBreakPoint);
  };
  return Reaction2;
}();
var MAX_REACTION_ITERATIONS = 100;
var reactionScheduler = function reactionScheduler2(f) {
  return f();
};
function runReactions() {
  if (globalState.inBatch > 0 || globalState.isRunningReactions) {
    return;
  }
  reactionScheduler(runReactionsHelper);
}
function runReactionsHelper() {
  globalState.isRunningReactions = true;
  var allReactions = globalState.pendingReactions;
  var iterations = 0;
  while (allReactions.length > 0) {
    if (++iterations === MAX_REACTION_ITERATIONS) {
      console.error(true ? "Reaction doesn't converge to a stable state after " + MAX_REACTION_ITERATIONS + " iterations." + (" Probably there is a cycle in the reactive function: " + allReactions[0]) : "[mobx] cycle in reaction: " + allReactions[0]);
      allReactions.splice(0);
    }
    var remainingReactions = allReactions.splice(0);
    for (var i = 0, l = remainingReactions.length; i < l; i++) {
      remainingReactions[i].runReaction_();
    }
  }
  globalState.isRunningReactions = false;
}
var isReaction = /* @__PURE__ */ createInstanceofPredicate("Reaction", Reaction);
function setReactionScheduler(fn) {
  var baseScheduler = reactionScheduler;
  reactionScheduler = function reactionScheduler3(f) {
    return fn(function() {
      return baseScheduler(f);
    });
  };
}
function isSpyEnabled() {
  return !!globalState.spyListeners.length;
}
function spyReport(event) {
  if (false) {
    return;
  }
  if (!globalState.spyListeners.length) {
    return;
  }
  var listeners = globalState.spyListeners;
  for (var i = 0, l = listeners.length; i < l; i++) {
    listeners[i](event);
  }
}
function spyReportStart(event) {
  if (false) {
    return;
  }
  var change = _extends({}, event, {
    spyReportStart: true
  });
  spyReport(change);
}
var END_EVENT = {
  type: "report-end",
  spyReportEnd: true
};
function spyReportEnd(change) {
  if (false) {
    return;
  }
  if (change) {
    spyReport(_extends({}, change, {
      type: "report-end",
      spyReportEnd: true
    }));
  } else {
    spyReport(END_EVENT);
  }
}
function spy(listener) {
  if (false) {
    console.warn("[mobx.spy] Is a no-op in production builds");
    return function() {
    };
  } else {
    globalState.spyListeners.push(listener);
    return once(function() {
      globalState.spyListeners = globalState.spyListeners.filter(function(l) {
        return l !== listener;
      });
    });
  }
}
var ACTION = "action";
var ACTION_BOUND = "action.bound";
var AUTOACTION = "autoAction";
var AUTOACTION_BOUND = "autoAction.bound";
var DEFAULT_ACTION_NAME = "<unnamed action>";
var actionAnnotation = /* @__PURE__ */ createActionAnnotation(ACTION);
var actionBoundAnnotation = /* @__PURE__ */ createActionAnnotation(ACTION_BOUND, {
  bound: true
});
var autoActionAnnotation = /* @__PURE__ */ createActionAnnotation(AUTOACTION, {
  autoAction: true
});
var autoActionBoundAnnotation = /* @__PURE__ */ createActionAnnotation(AUTOACTION_BOUND, {
  autoAction: true,
  bound: true
});
function createActionFactory(autoAction2) {
  var res = function action2(arg1, arg2) {
    if (isFunction(arg1)) {
      return createAction(arg1.name || DEFAULT_ACTION_NAME, arg1, autoAction2);
    }
    if (isFunction(arg2)) {
      return createAction(arg1, arg2, autoAction2);
    }
    if (isStringish(arg2)) {
      return storeAnnotation(arg1, arg2, autoAction2 ? autoActionAnnotation : actionAnnotation);
    }
    if (isStringish(arg1)) {
      return createDecoratorAnnotation(createActionAnnotation(autoAction2 ? AUTOACTION : ACTION, {
        name: arg1,
        autoAction: autoAction2
      }));
    }
    if (true) {
      die("Invalid arguments for `action`");
    }
  };
  return res;
}
var action = /* @__PURE__ */ createActionFactory(false);
Object.assign(action, actionAnnotation);
var autoAction = /* @__PURE__ */ createActionFactory(true);
Object.assign(autoAction, autoActionAnnotation);
action.bound = /* @__PURE__ */ createDecoratorAnnotation(actionBoundAnnotation);
autoAction.bound = /* @__PURE__ */ createDecoratorAnnotation(autoActionBoundAnnotation);
function runInAction(fn) {
  return executeAction(fn.name || DEFAULT_ACTION_NAME, false, fn, this, void 0);
}
function isAction(thing) {
  return isFunction(thing) && thing.isMobxAction === true;
}
function autorun(view, opts) {
  var _opts$name, _opts;
  if (opts === void 0) {
    opts = EMPTY_OBJECT;
  }
  if (true) {
    if (!isFunction(view)) {
      die("Autorun expects a function as first argument");
    }
    if (isAction(view)) {
      die("Autorun does not accept actions since actions are untrackable");
    }
  }
  var name = (_opts$name = (_opts = opts) == null ? void 0 : _opts.name) != null ? _opts$name : true ? view.name || "Autorun@" + getNextId() : "Autorun";
  var runSync = !opts.scheduler && !opts.delay;
  var reaction;
  if (runSync) {
    reaction = new Reaction(name, function() {
      this.track(reactionRunner);
    }, opts.onError, opts.requiresObservable);
  } else {
    var scheduler = createSchedulerFromOptions(opts);
    var isScheduled = false;
    reaction = new Reaction(name, function() {
      if (!isScheduled) {
        isScheduled = true;
        scheduler(function() {
          isScheduled = false;
          if (!reaction.isDisposed_) {
            reaction.track(reactionRunner);
          }
        });
      }
    }, opts.onError, opts.requiresObservable);
  }
  function reactionRunner() {
    view(reaction);
  }
  reaction.schedule_();
  return reaction.getDisposer_();
}
var run = function run2(f) {
  return f();
};
function createSchedulerFromOptions(opts) {
  return opts.scheduler ? opts.scheduler : opts.delay ? function(f) {
    return setTimeout(f, opts.delay);
  } : run;
}
var ON_BECOME_OBSERVED = "onBO";
var ON_BECOME_UNOBSERVED = "onBUO";
function onBecomeObserved(thing, arg2, arg3) {
  return interceptHook(ON_BECOME_OBSERVED, thing, arg2, arg3);
}
function onBecomeUnobserved(thing, arg2, arg3) {
  return interceptHook(ON_BECOME_UNOBSERVED, thing, arg2, arg3);
}
function interceptHook(hook, thing, arg2, arg3) {
  var atom = typeof arg3 === "function" ? getAtom(thing, arg2) : getAtom(thing);
  var cb = isFunction(arg3) ? arg3 : arg2;
  var listenersKey = hook + "L";
  if (atom[listenersKey]) {
    atom[listenersKey].add(cb);
  } else {
    atom[listenersKey] = /* @__PURE__ */ new Set([cb]);
  }
  return function() {
    var hookListeners = atom[listenersKey];
    if (hookListeners) {
      hookListeners["delete"](cb);
      if (hookListeners.size === 0) {
        delete atom[listenersKey];
      }
    }
  };
}
var NEVER = "never";
var ALWAYS = "always";
var OBSERVED = "observed";
function configure(options) {
  if (options.isolateGlobalState === true) {
    isolateGlobalState();
  }
  var useProxies = options.useProxies, enforceActions = options.enforceActions;
  if (useProxies !== void 0) {
    globalState.useProxies = useProxies === ALWAYS ? true : useProxies === NEVER ? false : typeof Proxy !== "undefined";
  }
  if (useProxies === "ifavailable") {
    globalState.verifyProxies = true;
  }
  if (enforceActions !== void 0) {
    var ea = enforceActions === ALWAYS ? ALWAYS : enforceActions === OBSERVED;
    globalState.enforceActions = ea;
    globalState.allowStateChanges = ea === true || ea === ALWAYS ? false : true;
  }
  ["computedRequiresReaction", "reactionRequiresObservable", "observableRequiresReaction", "disableErrorBoundaries", "safeDescriptors"].forEach(function(key) {
    if (key in options) {
      globalState[key] = !!options[key];
    }
  });
  globalState.allowStateReads = !globalState.observableRequiresReaction;
  if (globalState.disableErrorBoundaries === true) {
    console.warn("WARNING: Debug feature only. MobX will NOT recover from errors when `disableErrorBoundaries` is enabled.");
  }
  if (options.reactionScheduler) {
    setReactionScheduler(options.reactionScheduler);
  }
}
function extendObservable(target, properties, annotations, options) {
  if (true) {
    if (arguments.length > 4) {
      die("'extendObservable' expected 2-4 arguments");
    }
    if (typeof target !== "object") {
      die("'extendObservable' expects an object as first argument");
    }
    if (isObservableMap(target)) {
      die("'extendObservable' should not be used on maps, use map.merge instead");
    }
    if (!isPlainObject(properties)) {
      die("'extendObservable' only accepts plain objects as second argument");
    }
    if (isObservable(properties) || isObservable(annotations)) {
      die("Extending an object with another observable (object) is not supported");
    }
  }
  var descriptors = getOwnPropertyDescriptors(properties);
  var adm = asObservableObject(target, options)[$mobx];
  startBatch();
  try {
    ownKeys(descriptors).forEach(function(key) {
      adm.extend_(
        key,
        descriptors[key],
        !annotations ? true : key in annotations ? annotations[key] : true
      );
    });
  } finally {
    endBatch();
  }
  return target;
}
function getDependencyTree(thing, property) {
  return nodeToDependencyTree(getAtom(thing, property));
}
function nodeToDependencyTree(node) {
  var result = {
    name: node.name_
  };
  if (node.observing_ && node.observing_.length > 0) {
    result.dependencies = unique(node.observing_).map(nodeToDependencyTree);
  }
  return result;
}
function unique(list) {
  return Array.from(new Set(list));
}
var generatorId = 0;
function FlowCancellationError() {
  this.message = "FLOW_CANCELLED";
}
FlowCancellationError.prototype = /* @__PURE__ */ Object.create(Error.prototype);
var flowAnnotation = /* @__PURE__ */ createFlowAnnotation("flow");
var flowBoundAnnotation = /* @__PURE__ */ createFlowAnnotation("flow.bound", {
  bound: true
});
var flow = /* @__PURE__ */ Object.assign(function flow2(arg1, arg2) {
  if (isStringish(arg2)) {
    return storeAnnotation(arg1, arg2, flowAnnotation);
  }
  if (arguments.length !== 1) {
    die("Flow expects single argument with generator function");
  }
  var generator = arg1;
  var name = generator.name || "<unnamed flow>";
  var res = function res2() {
    var ctx = this;
    var args = arguments;
    var runId = ++generatorId;
    var gen = action(name + " - runid: " + runId + " - init", generator).apply(ctx, args);
    var rejector;
    var pendingPromise = void 0;
    var promise = new Promise(function(resolve, reject) {
      var stepId = 0;
      rejector = reject;
      function onFulfilled(res3) {
        pendingPromise = void 0;
        var ret;
        try {
          ret = action(name + " - runid: " + runId + " - yield " + stepId++, gen.next).call(gen, res3);
        } catch (e) {
          return reject(e);
        }
        next(ret);
      }
      function onRejected(err) {
        pendingPromise = void 0;
        var ret;
        try {
          ret = action(name + " - runid: " + runId + " - yield " + stepId++, gen["throw"]).call(gen, err);
        } catch (e) {
          return reject(e);
        }
        next(ret);
      }
      function next(ret) {
        if (isFunction(ret == null ? void 0 : ret.then)) {
          ret.then(next, reject);
          return;
        }
        if (ret.done) {
          return resolve(ret.value);
        }
        pendingPromise = Promise.resolve(ret.value);
        return pendingPromise.then(onFulfilled, onRejected);
      }
      onFulfilled(void 0);
    });
    promise.cancel = action(name + " - runid: " + runId + " - cancel", function() {
      try {
        if (pendingPromise) {
          cancelPromise(pendingPromise);
        }
        var _res = gen["return"](void 0);
        var yieldedPromise = Promise.resolve(_res.value);
        yieldedPromise.then(noop, noop);
        cancelPromise(yieldedPromise);
        rejector(new FlowCancellationError());
      } catch (e) {
        rejector(e);
      }
    });
    return promise;
  };
  res.isMobXFlow = true;
  return res;
}, flowAnnotation);
flow.bound = /* @__PURE__ */ createDecoratorAnnotation(flowBoundAnnotation);
function cancelPromise(promise) {
  if (isFunction(promise.cancel)) {
    promise.cancel();
  }
}
function isFlow(fn) {
  return (fn == null ? void 0 : fn.isMobXFlow) === true;
}
function _isObservable(value, property) {
  if (!value) {
    return false;
  }
  if (property !== void 0) {
    if (isObservableMap(value) || isObservableArray(value)) {
      return die("isObservable(object, propertyName) is not supported for arrays and maps. Use map.has or array.length instead.");
    }
    if (isObservableObject(value)) {
      return value[$mobx].values_.has(property);
    }
    return false;
  }
  return isObservableObject(value) || !!value[$mobx] || isAtom(value) || isReaction(value) || isComputedValue(value);
}
function isObservable(value) {
  if (arguments.length !== 1) {
    die("isObservable expects only 1 argument. Use isObservableProp to inspect the observability of a property");
  }
  return _isObservable(value);
}
function trace() {
  if (false) {
    die("trace() is not available in production builds");
  }
  var enterBreakPoint = false;
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  if (typeof args[args.length - 1] === "boolean") {
    enterBreakPoint = args.pop();
  }
  var derivation = getAtomFromArgs(args);
  if (!derivation) {
    return die("'trace(break?)' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly");
  }
  if (derivation.isTracing_ === TraceMode.NONE) {
    console.log("[mobx.trace] '" + derivation.name_ + "' tracing enabled");
  }
  derivation.isTracing_ = enterBreakPoint ? TraceMode.BREAK : TraceMode.LOG;
}
function getAtomFromArgs(args) {
  switch (args.length) {
    case 0:
      return globalState.trackingDerivation;
    case 1:
      return getAtom(args[0]);
    case 2:
      return getAtom(args[0], args[1]);
  }
}
function transaction(action2, thisArg) {
  if (thisArg === void 0) {
    thisArg = void 0;
  }
  startBatch();
  try {
    return action2.apply(thisArg);
  } finally {
    endBatch();
  }
}
function getAdm(target) {
  return target[$mobx];
}
var objectProxyTraps = {
  has: function has(target, name) {
    if (globalState.trackingDerivation) {
      warnAboutProxyRequirement("detect new properties using the 'in' operator. Use 'has' from 'mobx' instead.");
    }
    return getAdm(target).has_(name);
  },
  get: function get(target, name) {
    return getAdm(target).get_(name);
  },
  set: function set2(target, name, value) {
    var _getAdm$set_;
    if (!isStringish(name)) {
      return false;
    }
    if (!getAdm(target).values_.has(name)) {
      warnAboutProxyRequirement("add a new observable property through direct assignment. Use 'set' from 'mobx' instead.");
    }
    return (_getAdm$set_ = getAdm(target).set_(name, value, true)) != null ? _getAdm$set_ : true;
  },
  deleteProperty: function deleteProperty(target, name) {
    var _getAdm$delete_;
    if (true) {
      warnAboutProxyRequirement("delete properties from an observable object. Use 'remove' from 'mobx' instead.");
    }
    if (!isStringish(name)) {
      return false;
    }
    return (_getAdm$delete_ = getAdm(target).delete_(name, true)) != null ? _getAdm$delete_ : true;
  },
  defineProperty: function defineProperty2(target, name, descriptor) {
    var _getAdm$definePropert;
    if (true) {
      warnAboutProxyRequirement("define property on an observable object. Use 'defineProperty' from 'mobx' instead.");
    }
    return (_getAdm$definePropert = getAdm(target).defineProperty_(name, descriptor)) != null ? _getAdm$definePropert : true;
  },
  ownKeys: function ownKeys2(target) {
    if (globalState.trackingDerivation) {
      warnAboutProxyRequirement("iterate keys to detect added / removed properties. Use 'keys' from 'mobx' instead.");
    }
    return getAdm(target).ownKeys_();
  },
  preventExtensions: function preventExtensions(target) {
    die(13);
  }
};
function asDynamicObservableObject(target, options) {
  var _target$$mobx, _target$$mobx$proxy_;
  assertProxies();
  target = asObservableObject(target, options);
  return (_target$$mobx$proxy_ = (_target$$mobx = target[$mobx]).proxy_) != null ? _target$$mobx$proxy_ : _target$$mobx.proxy_ = new Proxy(target, objectProxyTraps);
}
function hasInterceptors(interceptable) {
  return interceptable.interceptors_ !== void 0 && interceptable.interceptors_.length > 0;
}
function registerInterceptor(interceptable, handler) {
  var interceptors = interceptable.interceptors_ || (interceptable.interceptors_ = []);
  interceptors.push(handler);
  return once(function() {
    var idx = interceptors.indexOf(handler);
    if (idx !== -1) {
      interceptors.splice(idx, 1);
    }
  });
}
function interceptChange(interceptable, change) {
  var prevU = untrackedStart();
  try {
    var interceptors = [].concat(interceptable.interceptors_ || []);
    for (var i = 0, l = interceptors.length; i < l; i++) {
      change = interceptors[i](change);
      if (change && !change.type) {
        die(14);
      }
      if (!change) {
        break;
      }
    }
    return change;
  } finally {
    untrackedEnd(prevU);
  }
}
function hasListeners(listenable) {
  return listenable.changeListeners_ !== void 0 && listenable.changeListeners_.length > 0;
}
function registerListener(listenable, handler) {
  var listeners = listenable.changeListeners_ || (listenable.changeListeners_ = []);
  listeners.push(handler);
  return once(function() {
    var idx = listeners.indexOf(handler);
    if (idx !== -1) {
      listeners.splice(idx, 1);
    }
  });
}
function notifyListeners(listenable, change) {
  var prevU = untrackedStart();
  var listeners = listenable.changeListeners_;
  if (!listeners) {
    return;
  }
  listeners = listeners.slice();
  for (var i = 0, l = listeners.length; i < l; i++) {
    listeners[i](change);
  }
  untrackedEnd(prevU);
}
function makeObservable(target, annotations, options) {
  var adm = asObservableObject(target, options)[$mobx];
  startBatch();
  try {
    var _annotations;
    if (annotations && target[storedAnnotationsSymbol]) {
      die("makeObservable second arg must be nullish when using decorators. Mixing @decorator syntax with annotations is not supported.");
    }
    (_annotations = annotations) != null ? _annotations : annotations = collectStoredAnnotations(target);
    ownKeys(annotations).forEach(function(key) {
      return adm.make_(key, annotations[key]);
    });
  } finally {
    endBatch();
  }
  return target;
}
var SPLICE = "splice";
var UPDATE = "update";
var MAX_SPLICE_SIZE = 1e4;
var arrayTraps = {
  get: function get2(target, name) {
    var adm = target[$mobx];
    if (name === $mobx) {
      return adm;
    }
    if (name === "length") {
      return adm.getArrayLength_();
    }
    if (typeof name === "string" && !isNaN(name)) {
      return adm.get_(parseInt(name));
    }
    if (hasProp(arrayExtensions, name)) {
      return arrayExtensions[name];
    }
    return target[name];
  },
  set: function set3(target, name, value) {
    var adm = target[$mobx];
    if (name === "length") {
      adm.setArrayLength_(value);
    }
    if (typeof name === "symbol" || isNaN(name)) {
      target[name] = value;
    } else {
      adm.set_(parseInt(name), value);
    }
    return true;
  },
  preventExtensions: function preventExtensions2() {
    die(15);
  }
};
var ObservableArrayAdministration = /* @__PURE__ */ function() {
  function ObservableArrayAdministration2(name, enhancer, owned_, legacyMode_) {
    if (name === void 0) {
      name = true ? "ObservableArray@" + getNextId() : "ObservableArray";
    }
    this.owned_ = void 0;
    this.legacyMode_ = void 0;
    this.atom_ = void 0;
    this.values_ = [];
    this.interceptors_ = void 0;
    this.changeListeners_ = void 0;
    this.enhancer_ = void 0;
    this.dehancer = void 0;
    this.proxy_ = void 0;
    this.lastKnownLength_ = 0;
    this.owned_ = owned_;
    this.legacyMode_ = legacyMode_;
    this.atom_ = new Atom(name);
    this.enhancer_ = function(newV, oldV) {
      return enhancer(newV, oldV, true ? name + "[..]" : "ObservableArray[..]");
    };
  }
  var _proto = ObservableArrayAdministration2.prototype;
  _proto.dehanceValue_ = function dehanceValue_(value) {
    if (this.dehancer !== void 0) {
      return this.dehancer(value);
    }
    return value;
  };
  _proto.dehanceValues_ = function dehanceValues_(values) {
    if (this.dehancer !== void 0 && values.length > 0) {
      return values.map(this.dehancer);
    }
    return values;
  };
  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };
  _proto.observe_ = function observe_(listener, fireImmediately) {
    if (fireImmediately === void 0) {
      fireImmediately = false;
    }
    if (fireImmediately) {
      listener({
        observableKind: "array",
        object: this.proxy_,
        debugObjectName: this.atom_.name_,
        type: "splice",
        index: 0,
        added: this.values_.slice(),
        addedCount: this.values_.length,
        removed: [],
        removedCount: 0
      });
    }
    return registerListener(this, listener);
  };
  _proto.getArrayLength_ = function getArrayLength_() {
    this.atom_.reportObserved();
    return this.values_.length;
  };
  _proto.setArrayLength_ = function setArrayLength_(newLength) {
    if (typeof newLength !== "number" || isNaN(newLength) || newLength < 0) {
      die("Out of range: " + newLength);
    }
    var currentLength = this.values_.length;
    if (newLength === currentLength) {
      return;
    } else if (newLength > currentLength) {
      var newItems = new Array(newLength - currentLength);
      for (var i = 0; i < newLength - currentLength; i++) {
        newItems[i] = void 0;
      }
      this.spliceWithArray_(currentLength, 0, newItems);
    } else {
      this.spliceWithArray_(newLength, currentLength - newLength);
    }
  };
  _proto.updateArrayLength_ = function updateArrayLength_(oldLength, delta) {
    if (oldLength !== this.lastKnownLength_) {
      die(16);
    }
    this.lastKnownLength_ += delta;
    if (this.legacyMode_ && delta > 0) {
      reserveArrayBuffer(oldLength + delta + 1);
    }
  };
  _proto.spliceWithArray_ = function spliceWithArray_(index, deleteCount, newItems) {
    var _this = this;
    checkIfStateModificationsAreAllowed(this.atom_);
    var length = this.values_.length;
    if (index === void 0) {
      index = 0;
    } else if (index > length) {
      index = length;
    } else if (index < 0) {
      index = Math.max(0, length + index);
    }
    if (arguments.length === 1) {
      deleteCount = length - index;
    } else if (deleteCount === void 0 || deleteCount === null) {
      deleteCount = 0;
    } else {
      deleteCount = Math.max(0, Math.min(deleteCount, length - index));
    }
    if (newItems === void 0) {
      newItems = EMPTY_ARRAY;
    }
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        object: this.proxy_,
        type: SPLICE,
        index,
        removedCount: deleteCount,
        added: newItems
      });
      if (!change) {
        return EMPTY_ARRAY;
      }
      deleteCount = change.removedCount;
      newItems = change.added;
    }
    newItems = newItems.length === 0 ? newItems : newItems.map(function(v) {
      return _this.enhancer_(v, void 0);
    });
    if (this.legacyMode_ || true) {
      var lengthDelta = newItems.length - deleteCount;
      this.updateArrayLength_(length, lengthDelta);
    }
    var res = this.spliceItemsIntoValues_(index, deleteCount, newItems);
    if (deleteCount !== 0 || newItems.length !== 0) {
      this.notifyArraySplice_(index, newItems, res);
    }
    return this.dehanceValues_(res);
  };
  _proto.spliceItemsIntoValues_ = function spliceItemsIntoValues_(index, deleteCount, newItems) {
    if (newItems.length < MAX_SPLICE_SIZE) {
      var _this$values_;
      return (_this$values_ = this.values_).splice.apply(_this$values_, [index, deleteCount].concat(newItems));
    } else {
      var res = this.values_.slice(index, index + deleteCount);
      var oldItems = this.values_.slice(index + deleteCount);
      this.values_.length += newItems.length - deleteCount;
      for (var i = 0; i < newItems.length; i++) {
        this.values_[index + i] = newItems[i];
      }
      for (var _i = 0; _i < oldItems.length; _i++) {
        this.values_[index + newItems.length + _i] = oldItems[_i];
      }
      return res;
    }
  };
  _proto.notifyArrayChildUpdate_ = function notifyArrayChildUpdate_(index, newValue, oldValue) {
    var notifySpy = !this.owned_ && isSpyEnabled();
    var notify = hasListeners(this);
    var change = notify || notifySpy ? {
      observableKind: "array",
      object: this.proxy_,
      type: UPDATE,
      debugObjectName: this.atom_.name_,
      index,
      newValue,
      oldValue
    } : null;
    if (notifySpy) {
      spyReportStart(change);
    }
    this.atom_.reportChanged();
    if (notify) {
      notifyListeners(this, change);
    }
    if (notifySpy) {
      spyReportEnd();
    }
  };
  _proto.notifyArraySplice_ = function notifyArraySplice_(index, added, removed) {
    var notifySpy = !this.owned_ && isSpyEnabled();
    var notify = hasListeners(this);
    var change = notify || notifySpy ? {
      observableKind: "array",
      object: this.proxy_,
      debugObjectName: this.atom_.name_,
      type: SPLICE,
      index,
      removed,
      added,
      removedCount: removed.length,
      addedCount: added.length
    } : null;
    if (notifySpy) {
      spyReportStart(change);
    }
    this.atom_.reportChanged();
    if (notify) {
      notifyListeners(this, change);
    }
    if (notifySpy) {
      spyReportEnd();
    }
  };
  _proto.get_ = function get_(index) {
    if (index < this.values_.length) {
      this.atom_.reportObserved();
      return this.dehanceValue_(this.values_[index]);
    }
    console.warn(true ? "[mobx] Out of bounds read: " + index : "[mobx.array] Attempt to read an array index (" + index + ") that is out of bounds (" + this.values_.length + "). Please check length first. Out of bound indices will not be tracked by MobX");
  };
  _proto.set_ = function set_(index, newValue) {
    var values = this.values_;
    if (index < values.length) {
      checkIfStateModificationsAreAllowed(this.atom_);
      var oldValue = values[index];
      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          type: UPDATE,
          object: this.proxy_,
          index,
          newValue
        });
        if (!change) {
          return;
        }
        newValue = change.newValue;
      }
      newValue = this.enhancer_(newValue, oldValue);
      var changed = newValue !== oldValue;
      if (changed) {
        values[index] = newValue;
        this.notifyArrayChildUpdate_(index, newValue, oldValue);
      }
    } else if (index === values.length) {
      this.spliceWithArray_(index, 0, [newValue]);
    } else {
      die(17, index, values.length);
    }
  };
  return ObservableArrayAdministration2;
}();
function createObservableArray(initialValues, enhancer, name, owned) {
  if (name === void 0) {
    name = true ? "ObservableArray@" + getNextId() : "ObservableArray";
  }
  if (owned === void 0) {
    owned = false;
  }
  assertProxies();
  var adm = new ObservableArrayAdministration(name, enhancer, owned, false);
  addHiddenFinalProp(adm.values_, $mobx, adm);
  var proxy = new Proxy(adm.values_, arrayTraps);
  adm.proxy_ = proxy;
  if (initialValues && initialValues.length) {
    var prev = allowStateChangesStart(true);
    adm.spliceWithArray_(0, 0, initialValues);
    allowStateChangesEnd(prev);
  }
  return proxy;
}
var arrayExtensions = {
  clear: function clear() {
    return this.splice(0);
  },
  replace: function replace(newItems) {
    var adm = this[$mobx];
    return adm.spliceWithArray_(0, adm.values_.length, newItems);
  },
  toJSON: function toJSON() {
    return this.slice();
  },
  splice: function splice(index, deleteCount) {
    for (var _len = arguments.length, newItems = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      newItems[_key - 2] = arguments[_key];
    }
    var adm = this[$mobx];
    switch (arguments.length) {
      case 0:
        return [];
      case 1:
        return adm.spliceWithArray_(index);
      case 2:
        return adm.spliceWithArray_(index, deleteCount);
    }
    return adm.spliceWithArray_(index, deleteCount, newItems);
  },
  spliceWithArray: function spliceWithArray(index, deleteCount, newItems) {
    return this[$mobx].spliceWithArray_(index, deleteCount, newItems);
  },
  push: function push() {
    var adm = this[$mobx];
    for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      items[_key2] = arguments[_key2];
    }
    adm.spliceWithArray_(adm.values_.length, 0, items);
    return adm.values_.length;
  },
  pop: function pop() {
    return this.splice(Math.max(this[$mobx].values_.length - 1, 0), 1)[0];
  },
  shift: function shift() {
    return this.splice(0, 1)[0];
  },
  unshift: function unshift() {
    var adm = this[$mobx];
    for (var _len3 = arguments.length, items = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      items[_key3] = arguments[_key3];
    }
    adm.spliceWithArray_(0, 0, items);
    return adm.values_.length;
  },
  reverse: function reverse() {
    if (globalState.trackingDerivation) {
      die(37, "reverse");
    }
    this.replace(this.slice().reverse());
    return this;
  },
  sort: function sort() {
    if (globalState.trackingDerivation) {
      die(37, "sort");
    }
    var copy = this.slice();
    copy.sort.apply(copy, arguments);
    this.replace(copy);
    return this;
  },
  remove: function remove(value) {
    var adm = this[$mobx];
    var idx = adm.dehanceValues_(adm.values_).indexOf(value);
    if (idx > -1) {
      this.splice(idx, 1);
      return true;
    }
    return false;
  }
};
addArrayExtension("concat", simpleFunc);
addArrayExtension("flat", simpleFunc);
addArrayExtension("includes", simpleFunc);
addArrayExtension("indexOf", simpleFunc);
addArrayExtension("join", simpleFunc);
addArrayExtension("lastIndexOf", simpleFunc);
addArrayExtension("slice", simpleFunc);
addArrayExtension("toString", simpleFunc);
addArrayExtension("toLocaleString", simpleFunc);
addArrayExtension("every", mapLikeFunc);
addArrayExtension("filter", mapLikeFunc);
addArrayExtension("find", mapLikeFunc);
addArrayExtension("findIndex", mapLikeFunc);
addArrayExtension("flatMap", mapLikeFunc);
addArrayExtension("forEach", mapLikeFunc);
addArrayExtension("map", mapLikeFunc);
addArrayExtension("some", mapLikeFunc);
addArrayExtension("reduce", reduceLikeFunc);
addArrayExtension("reduceRight", reduceLikeFunc);
function addArrayExtension(funcName, funcFactory) {
  if (typeof Array.prototype[funcName] === "function") {
    arrayExtensions[funcName] = funcFactory(funcName);
  }
}
function simpleFunc(funcName) {
  return function() {
    var adm = this[$mobx];
    adm.atom_.reportObserved();
    var dehancedValues = adm.dehanceValues_(adm.values_);
    return dehancedValues[funcName].apply(dehancedValues, arguments);
  };
}
function mapLikeFunc(funcName) {
  return function(callback, thisArg) {
    var _this2 = this;
    var adm = this[$mobx];
    adm.atom_.reportObserved();
    var dehancedValues = adm.dehanceValues_(adm.values_);
    return dehancedValues[funcName](function(element, index) {
      return callback.call(thisArg, element, index, _this2);
    });
  };
}
function reduceLikeFunc(funcName) {
  return function() {
    var _this3 = this;
    var adm = this[$mobx];
    adm.atom_.reportObserved();
    var dehancedValues = adm.dehanceValues_(adm.values_);
    var callback = arguments[0];
    arguments[0] = function(accumulator, currentValue, index) {
      return callback(accumulator, currentValue, index, _this3);
    };
    return dehancedValues[funcName].apply(dehancedValues, arguments);
  };
}
var isObservableArrayAdministration = /* @__PURE__ */ createInstanceofPredicate("ObservableArrayAdministration", ObservableArrayAdministration);
function isObservableArray(thing) {
  return isObject(thing) && isObservableArrayAdministration(thing[$mobx]);
}
var _Symbol$iterator;
var _Symbol$toStringTag;
var ObservableMapMarker = {};
var ADD = "add";
var DELETE = "delete";
_Symbol$iterator = Symbol.iterator;
_Symbol$toStringTag = Symbol.toStringTag;
var ObservableMap = /* @__PURE__ */ function() {
  function ObservableMap2(initialData, enhancer_, name_) {
    var _this = this;
    if (enhancer_ === void 0) {
      enhancer_ = deepEnhancer;
    }
    if (name_ === void 0) {
      name_ = true ? "ObservableMap@" + getNextId() : "ObservableMap";
    }
    this.enhancer_ = void 0;
    this.name_ = void 0;
    this[$mobx] = ObservableMapMarker;
    this.data_ = void 0;
    this.hasMap_ = void 0;
    this.keysAtom_ = void 0;
    this.interceptors_ = void 0;
    this.changeListeners_ = void 0;
    this.dehancer = void 0;
    this.enhancer_ = enhancer_;
    this.name_ = name_;
    if (!isFunction(Map)) {
      die(18);
    }
    this.keysAtom_ = createAtom(true ? this.name_ + ".keys()" : "ObservableMap.keys()");
    this.data_ = /* @__PURE__ */ new Map();
    this.hasMap_ = /* @__PURE__ */ new Map();
    allowStateChanges(true, function() {
      _this.merge(initialData);
    });
  }
  var _proto = ObservableMap2.prototype;
  _proto.has_ = function has_(key) {
    return this.data_.has(key);
  };
  _proto.has = function has2(key) {
    var _this2 = this;
    if (!globalState.trackingDerivation) {
      return this.has_(key);
    }
    var entry = this.hasMap_.get(key);
    if (!entry) {
      var newEntry = entry = new ObservableValue(this.has_(key), referenceEnhancer, true ? this.name_ + "." + stringifyKey(key) + "?" : "ObservableMap.key?", false);
      this.hasMap_.set(key, newEntry);
      onBecomeUnobserved(newEntry, function() {
        return _this2.hasMap_["delete"](key);
      });
    }
    return entry.get();
  };
  _proto.set = function set4(key, value) {
    var hasKey = this.has_(key);
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: hasKey ? UPDATE : ADD,
        object: this,
        newValue: value,
        name: key
      });
      if (!change) {
        return this;
      }
      value = change.newValue;
    }
    if (hasKey) {
      this.updateValue_(key, value);
    } else {
      this.addValue_(key, value);
    }
    return this;
  };
  _proto["delete"] = function _delete(key) {
    var _this3 = this;
    checkIfStateModificationsAreAllowed(this.keysAtom_);
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: DELETE,
        object: this,
        name: key
      });
      if (!change) {
        return false;
      }
    }
    if (this.has_(key)) {
      var notifySpy = isSpyEnabled();
      var notify = hasListeners(this);
      var _change = notify || notifySpy ? {
        observableKind: "map",
        debugObjectName: this.name_,
        type: DELETE,
        object: this,
        oldValue: this.data_.get(key).value_,
        name: key
      } : null;
      if (notifySpy) {
        spyReportStart(_change);
      }
      transaction(function() {
        var _this3$hasMap_$get;
        _this3.keysAtom_.reportChanged();
        (_this3$hasMap_$get = _this3.hasMap_.get(key)) == null ? void 0 : _this3$hasMap_$get.setNewValue_(false);
        var observable2 = _this3.data_.get(key);
        observable2.setNewValue_(void 0);
        _this3.data_["delete"](key);
      });
      if (notify) {
        notifyListeners(this, _change);
      }
      if (notifySpy) {
        spyReportEnd();
      }
      return true;
    }
    return false;
  };
  _proto.updateValue_ = function updateValue_(key, newValue) {
    var observable2 = this.data_.get(key);
    newValue = observable2.prepareNewValue_(newValue);
    if (newValue !== globalState.UNCHANGED) {
      var notifySpy = isSpyEnabled();
      var notify = hasListeners(this);
      var change = notify || notifySpy ? {
        observableKind: "map",
        debugObjectName: this.name_,
        type: UPDATE,
        object: this,
        oldValue: observable2.value_,
        name: key,
        newValue
      } : null;
      if (notifySpy) {
        spyReportStart(change);
      }
      observable2.setNewValue_(newValue);
      if (notify) {
        notifyListeners(this, change);
      }
      if (notifySpy) {
        spyReportEnd();
      }
    }
  };
  _proto.addValue_ = function addValue_(key, newValue) {
    var _this4 = this;
    checkIfStateModificationsAreAllowed(this.keysAtom_);
    transaction(function() {
      var _this4$hasMap_$get;
      var observable2 = new ObservableValue(newValue, _this4.enhancer_, true ? _this4.name_ + "." + stringifyKey(key) : "ObservableMap.key", false);
      _this4.data_.set(key, observable2);
      newValue = observable2.value_;
      (_this4$hasMap_$get = _this4.hasMap_.get(key)) == null ? void 0 : _this4$hasMap_$get.setNewValue_(true);
      _this4.keysAtom_.reportChanged();
    });
    var notifySpy = isSpyEnabled();
    var notify = hasListeners(this);
    var change = notify || notifySpy ? {
      observableKind: "map",
      debugObjectName: this.name_,
      type: ADD,
      object: this,
      name: key,
      newValue
    } : null;
    if (notifySpy) {
      spyReportStart(change);
    }
    if (notify) {
      notifyListeners(this, change);
    }
    if (notifySpy) {
      spyReportEnd();
    }
  };
  _proto.get = function get3(key) {
    if (this.has(key)) {
      return this.dehanceValue_(this.data_.get(key).get());
    }
    return this.dehanceValue_(void 0);
  };
  _proto.dehanceValue_ = function dehanceValue_(value) {
    if (this.dehancer !== void 0) {
      return this.dehancer(value);
    }
    return value;
  };
  _proto.keys = function keys() {
    this.keysAtom_.reportObserved();
    return this.data_.keys();
  };
  _proto.values = function values() {
    var self2 = this;
    var keys = this.keys();
    return makeIterable({
      next: function next() {
        var _keys$next = keys.next(), done = _keys$next.done, value = _keys$next.value;
        return {
          done,
          value: done ? void 0 : self2.get(value)
        };
      }
    });
  };
  _proto.entries = function entries() {
    var self2 = this;
    var keys = this.keys();
    return makeIterable({
      next: function next() {
        var _keys$next2 = keys.next(), done = _keys$next2.done, value = _keys$next2.value;
        return {
          done,
          value: done ? void 0 : [value, self2.get(value)]
        };
      }
    });
  };
  _proto[_Symbol$iterator] = function() {
    return this.entries();
  };
  _proto.forEach = function forEach(callback, thisArg) {
    for (var _iterator = _createForOfIteratorHelperLoose(this), _step; !(_step = _iterator()).done; ) {
      var _step$value = _step.value, key = _step$value[0], value = _step$value[1];
      callback.call(thisArg, value, key, this);
    }
  };
  _proto.merge = function merge(other) {
    var _this5 = this;
    if (isObservableMap(other)) {
      other = new Map(other);
    }
    transaction(function() {
      if (isPlainObject(other)) {
        getPlainObjectKeys(other).forEach(function(key) {
          return _this5.set(key, other[key]);
        });
      } else if (Array.isArray(other)) {
        other.forEach(function(_ref) {
          var key = _ref[0], value = _ref[1];
          return _this5.set(key, value);
        });
      } else if (isES6Map(other)) {
        if (other.constructor !== Map) {
          die(19, other);
        }
        other.forEach(function(value, key) {
          return _this5.set(key, value);
        });
      } else if (other !== null && other !== void 0) {
        die(20, other);
      }
    });
    return this;
  };
  _proto.clear = function clear2() {
    var _this6 = this;
    transaction(function() {
      untracked(function() {
        for (var _iterator2 = _createForOfIteratorHelperLoose(_this6.keys()), _step2; !(_step2 = _iterator2()).done; ) {
          var key = _step2.value;
          _this6["delete"](key);
        }
      });
    });
  };
  _proto.replace = function replace2(values) {
    var _this7 = this;
    transaction(function() {
      var replacementMap = convertToMap(values);
      var orderedData = /* @__PURE__ */ new Map();
      var keysReportChangedCalled = false;
      for (var _iterator3 = _createForOfIteratorHelperLoose(_this7.data_.keys()), _step3; !(_step3 = _iterator3()).done; ) {
        var key = _step3.value;
        if (!replacementMap.has(key)) {
          var deleted = _this7["delete"](key);
          if (deleted) {
            keysReportChangedCalled = true;
          } else {
            var value = _this7.data_.get(key);
            orderedData.set(key, value);
          }
        }
      }
      for (var _iterator4 = _createForOfIteratorHelperLoose(replacementMap.entries()), _step4; !(_step4 = _iterator4()).done; ) {
        var _step4$value = _step4.value, _key = _step4$value[0], _value = _step4$value[1];
        var keyExisted = _this7.data_.has(_key);
        _this7.set(_key, _value);
        if (_this7.data_.has(_key)) {
          var _value2 = _this7.data_.get(_key);
          orderedData.set(_key, _value2);
          if (!keyExisted) {
            keysReportChangedCalled = true;
          }
        }
      }
      if (!keysReportChangedCalled) {
        if (_this7.data_.size !== orderedData.size) {
          _this7.keysAtom_.reportChanged();
        } else {
          var iter1 = _this7.data_.keys();
          var iter2 = orderedData.keys();
          var next1 = iter1.next();
          var next2 = iter2.next();
          while (!next1.done) {
            if (next1.value !== next2.value) {
              _this7.keysAtom_.reportChanged();
              break;
            }
            next1 = iter1.next();
            next2 = iter2.next();
          }
        }
      }
      _this7.data_ = orderedData;
    });
    return this;
  };
  _proto.toString = function toString2() {
    return "[object ObservableMap]";
  };
  _proto.toJSON = function toJSON2() {
    return Array.from(this);
  };
  _proto.observe_ = function observe_(listener, fireImmediately) {
    if (fireImmediately === true) {
      die("`observe` doesn't support fireImmediately=true in combination with maps.");
    }
    return registerListener(this, listener);
  };
  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };
  _createClass(ObservableMap2, [{
    key: "size",
    get: function get3() {
      this.keysAtom_.reportObserved();
      return this.data_.size;
    }
  }, {
    key: _Symbol$toStringTag,
    get: function get3() {
      return "Map";
    }
  }]);
  return ObservableMap2;
}();
var isObservableMap = /* @__PURE__ */ createInstanceofPredicate("ObservableMap", ObservableMap);
function convertToMap(dataStructure) {
  if (isES6Map(dataStructure) || isObservableMap(dataStructure)) {
    return dataStructure;
  } else if (Array.isArray(dataStructure)) {
    return new Map(dataStructure);
  } else if (isPlainObject(dataStructure)) {
    var map2 = /* @__PURE__ */ new Map();
    for (var key in dataStructure) {
      map2.set(key, dataStructure[key]);
    }
    return map2;
  } else {
    return die(21, dataStructure);
  }
}
var _Symbol$iterator$1;
var _Symbol$toStringTag$1;
var ObservableSetMarker = {};
_Symbol$iterator$1 = Symbol.iterator;
_Symbol$toStringTag$1 = Symbol.toStringTag;
var ObservableSet = /* @__PURE__ */ function() {
  function ObservableSet2(initialData, enhancer, name_) {
    if (enhancer === void 0) {
      enhancer = deepEnhancer;
    }
    if (name_ === void 0) {
      name_ = true ? "ObservableSet@" + getNextId() : "ObservableSet";
    }
    this.name_ = void 0;
    this[$mobx] = ObservableSetMarker;
    this.data_ = /* @__PURE__ */ new Set();
    this.atom_ = void 0;
    this.changeListeners_ = void 0;
    this.interceptors_ = void 0;
    this.dehancer = void 0;
    this.enhancer_ = void 0;
    this.name_ = name_;
    if (!isFunction(Set)) {
      die(22);
    }
    this.atom_ = createAtom(this.name_);
    this.enhancer_ = function(newV, oldV) {
      return enhancer(newV, oldV, name_);
    };
    if (initialData) {
      this.replace(initialData);
    }
  }
  var _proto = ObservableSet2.prototype;
  _proto.dehanceValue_ = function dehanceValue_(value) {
    if (this.dehancer !== void 0) {
      return this.dehancer(value);
    }
    return value;
  };
  _proto.clear = function clear2() {
    var _this = this;
    transaction(function() {
      untracked(function() {
        for (var _iterator = _createForOfIteratorHelperLoose(_this.data_.values()), _step; !(_step = _iterator()).done; ) {
          var value = _step.value;
          _this["delete"](value);
        }
      });
    });
  };
  _proto.forEach = function forEach(callbackFn, thisArg) {
    for (var _iterator2 = _createForOfIteratorHelperLoose(this), _step2; !(_step2 = _iterator2()).done; ) {
      var value = _step2.value;
      callbackFn.call(thisArg, value, value, this);
    }
  };
  _proto.add = function add(value) {
    var _this2 = this;
    checkIfStateModificationsAreAllowed(this.atom_);
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: ADD,
        object: this,
        newValue: value
      });
      if (!change) {
        return this;
      }
    }
    if (!this.has(value)) {
      transaction(function() {
        _this2.data_.add(_this2.enhancer_(value, void 0));
        _this2.atom_.reportChanged();
      });
      var notifySpy = isSpyEnabled();
      var notify = hasListeners(this);
      var _change = notify || notifySpy ? {
        observableKind: "set",
        debugObjectName: this.name_,
        type: ADD,
        object: this,
        newValue: value
      } : null;
      if (notifySpy && true) {
        spyReportStart(_change);
      }
      if (notify) {
        notifyListeners(this, _change);
      }
      if (notifySpy && true) {
        spyReportEnd();
      }
    }
    return this;
  };
  _proto["delete"] = function _delete(value) {
    var _this3 = this;
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: DELETE,
        object: this,
        oldValue: value
      });
      if (!change) {
        return false;
      }
    }
    if (this.has(value)) {
      var notifySpy = isSpyEnabled();
      var notify = hasListeners(this);
      var _change2 = notify || notifySpy ? {
        observableKind: "set",
        debugObjectName: this.name_,
        type: DELETE,
        object: this,
        oldValue: value
      } : null;
      if (notifySpy && true) {
        spyReportStart(_change2);
      }
      transaction(function() {
        _this3.atom_.reportChanged();
        _this3.data_["delete"](value);
      });
      if (notify) {
        notifyListeners(this, _change2);
      }
      if (notifySpy && true) {
        spyReportEnd();
      }
      return true;
    }
    return false;
  };
  _proto.has = function has2(value) {
    this.atom_.reportObserved();
    return this.data_.has(this.dehanceValue_(value));
  };
  _proto.entries = function entries() {
    var nextIndex = 0;
    var keys = Array.from(this.keys());
    var values = Array.from(this.values());
    return makeIterable({
      next: function next() {
        var index = nextIndex;
        nextIndex += 1;
        return index < values.length ? {
          value: [keys[index], values[index]],
          done: false
        } : {
          done: true
        };
      }
    });
  };
  _proto.keys = function keys() {
    return this.values();
  };
  _proto.values = function values() {
    this.atom_.reportObserved();
    var self2 = this;
    var nextIndex = 0;
    var observableValues = Array.from(this.data_.values());
    return makeIterable({
      next: function next() {
        return nextIndex < observableValues.length ? {
          value: self2.dehanceValue_(observableValues[nextIndex++]),
          done: false
        } : {
          done: true
        };
      }
    });
  };
  _proto.replace = function replace2(other) {
    var _this4 = this;
    if (isObservableSet(other)) {
      other = new Set(other);
    }
    transaction(function() {
      if (Array.isArray(other)) {
        _this4.clear();
        other.forEach(function(value) {
          return _this4.add(value);
        });
      } else if (isES6Set(other)) {
        _this4.clear();
        other.forEach(function(value) {
          return _this4.add(value);
        });
      } else if (other !== null && other !== void 0) {
        die("Cannot initialize set from " + other);
      }
    });
    return this;
  };
  _proto.observe_ = function observe_(listener, fireImmediately) {
    if (fireImmediately === true) {
      die("`observe` doesn't support fireImmediately=true in combination with sets.");
    }
    return registerListener(this, listener);
  };
  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };
  _proto.toJSON = function toJSON2() {
    return Array.from(this);
  };
  _proto.toString = function toString2() {
    return "[object ObservableSet]";
  };
  _proto[_Symbol$iterator$1] = function() {
    return this.values();
  };
  _createClass(ObservableSet2, [{
    key: "size",
    get: function get3() {
      this.atom_.reportObserved();
      return this.data_.size;
    }
  }, {
    key: _Symbol$toStringTag$1,
    get: function get3() {
      return "Set";
    }
  }]);
  return ObservableSet2;
}();
var isObservableSet = /* @__PURE__ */ createInstanceofPredicate("ObservableSet", ObservableSet);
var descriptorCache = /* @__PURE__ */ Object.create(null);
var REMOVE = "remove";
var ObservableObjectAdministration = /* @__PURE__ */ function() {
  function ObservableObjectAdministration2(target_, values_, name_, defaultAnnotation_) {
    if (values_ === void 0) {
      values_ = /* @__PURE__ */ new Map();
    }
    if (defaultAnnotation_ === void 0) {
      defaultAnnotation_ = autoAnnotation;
    }
    this.target_ = void 0;
    this.values_ = void 0;
    this.name_ = void 0;
    this.defaultAnnotation_ = void 0;
    this.keysAtom_ = void 0;
    this.changeListeners_ = void 0;
    this.interceptors_ = void 0;
    this.proxy_ = void 0;
    this.isPlainObject_ = void 0;
    this.appliedAnnotations_ = void 0;
    this.pendingKeys_ = void 0;
    this.target_ = target_;
    this.values_ = values_;
    this.name_ = name_;
    this.defaultAnnotation_ = defaultAnnotation_;
    this.keysAtom_ = new Atom(true ? this.name_ + ".keys" : "ObservableObject.keys");
    this.isPlainObject_ = isPlainObject(this.target_);
    if (!isAnnotation(this.defaultAnnotation_)) {
      die("defaultAnnotation must be valid annotation");
    }
    if (true) {
      this.appliedAnnotations_ = {};
    }
  }
  var _proto = ObservableObjectAdministration2.prototype;
  _proto.getObservablePropValue_ = function getObservablePropValue_(key) {
    return this.values_.get(key).get();
  };
  _proto.setObservablePropValue_ = function setObservablePropValue_(key, newValue) {
    var observable2 = this.values_.get(key);
    if (observable2 instanceof ComputedValue) {
      observable2.set(newValue);
      return true;
    }
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: UPDATE,
        object: this.proxy_ || this.target_,
        name: key,
        newValue
      });
      if (!change) {
        return null;
      }
      newValue = change.newValue;
    }
    newValue = observable2.prepareNewValue_(newValue);
    if (newValue !== globalState.UNCHANGED) {
      var notify = hasListeners(this);
      var notifySpy = isSpyEnabled();
      var _change = notify || notifySpy ? {
        type: UPDATE,
        observableKind: "object",
        debugObjectName: this.name_,
        object: this.proxy_ || this.target_,
        oldValue: observable2.value_,
        name: key,
        newValue
      } : null;
      if (notifySpy) {
        spyReportStart(_change);
      }
      observable2.setNewValue_(newValue);
      if (notify) {
        notifyListeners(this, _change);
      }
      if (notifySpy) {
        spyReportEnd();
      }
    }
    return true;
  };
  _proto.get_ = function get_(key) {
    if (globalState.trackingDerivation && !hasProp(this.target_, key)) {
      this.has_(key);
    }
    return this.target_[key];
  };
  _proto.set_ = function set_(key, value, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }
    if (hasProp(this.target_, key)) {
      if (this.values_.has(key)) {
        return this.setObservablePropValue_(key, value);
      } else if (proxyTrap) {
        return Reflect.set(this.target_, key, value);
      } else {
        this.target_[key] = value;
        return true;
      }
    } else {
      return this.extend_(key, {
        value,
        enumerable: true,
        writable: true,
        configurable: true
      }, this.defaultAnnotation_, proxyTrap);
    }
  };
  _proto.has_ = function has_(key) {
    if (!globalState.trackingDerivation) {
      return key in this.target_;
    }
    this.pendingKeys_ || (this.pendingKeys_ = /* @__PURE__ */ new Map());
    var entry = this.pendingKeys_.get(key);
    if (!entry) {
      entry = new ObservableValue(key in this.target_, referenceEnhancer, true ? this.name_ + "." + stringifyKey(key) + "?" : "ObservableObject.key?", false);
      this.pendingKeys_.set(key, entry);
    }
    return entry.get();
  };
  _proto.make_ = function make_(key, annotation) {
    if (annotation === true) {
      annotation = this.defaultAnnotation_;
    }
    if (annotation === false) {
      return;
    }
    assertAnnotable(this, annotation, key);
    if (!(key in this.target_)) {
      var _this$target_$storedA;
      if ((_this$target_$storedA = this.target_[storedAnnotationsSymbol]) != null && _this$target_$storedA[key]) {
        return;
      } else {
        die(1, annotation.annotationType_, this.name_ + "." + key.toString());
      }
    }
    var source = this.target_;
    while (source && source !== objectPrototype) {
      var descriptor = getDescriptor(source, key);
      if (descriptor) {
        var outcome = annotation.make_(this, key, descriptor, source);
        if (outcome === 0) {
          return;
        }
        if (outcome === 1) {
          break;
        }
      }
      source = Object.getPrototypeOf(source);
    }
    recordAnnotationApplied(this, annotation, key);
  };
  _proto.extend_ = function extend_(key, descriptor, annotation, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }
    if (annotation === true) {
      annotation = this.defaultAnnotation_;
    }
    if (annotation === false) {
      return this.defineProperty_(key, descriptor, proxyTrap);
    }
    assertAnnotable(this, annotation, key);
    var outcome = annotation.extend_(this, key, descriptor, proxyTrap);
    if (outcome) {
      recordAnnotationApplied(this, annotation, key);
    }
    return outcome;
  };
  _proto.defineProperty_ = function defineProperty_(key, descriptor, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }
    try {
      startBatch();
      var deleteOutcome = this.delete_(key);
      if (!deleteOutcome) {
        return deleteOutcome;
      }
      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          object: this.proxy_ || this.target_,
          name: key,
          type: ADD,
          newValue: descriptor.value
        });
        if (!change) {
          return null;
        }
        var newValue = change.newValue;
        if (descriptor.value !== newValue) {
          descriptor = _extends({}, descriptor, {
            value: newValue
          });
        }
      }
      if (proxyTrap) {
        if (!Reflect.defineProperty(this.target_, key, descriptor)) {
          return false;
        }
      } else {
        defineProperty(this.target_, key, descriptor);
      }
      this.notifyPropertyAddition_(key, descriptor.value);
    } finally {
      endBatch();
    }
    return true;
  };
  _proto.defineObservableProperty_ = function defineObservableProperty_(key, value, enhancer, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }
    try {
      startBatch();
      var deleteOutcome = this.delete_(key);
      if (!deleteOutcome) {
        return deleteOutcome;
      }
      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          object: this.proxy_ || this.target_,
          name: key,
          type: ADD,
          newValue: value
        });
        if (!change) {
          return null;
        }
        value = change.newValue;
      }
      var cachedDescriptor = getCachedObservablePropDescriptor(key);
      var descriptor = {
        configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,
        enumerable: true,
        get: cachedDescriptor.get,
        set: cachedDescriptor.set
      };
      if (proxyTrap) {
        if (!Reflect.defineProperty(this.target_, key, descriptor)) {
          return false;
        }
      } else {
        defineProperty(this.target_, key, descriptor);
      }
      var observable2 = new ObservableValue(value, enhancer, true ? this.name_ + "." + key.toString() : "ObservableObject.key", false);
      this.values_.set(key, observable2);
      this.notifyPropertyAddition_(key, observable2.value_);
    } finally {
      endBatch();
    }
    return true;
  };
  _proto.defineComputedProperty_ = function defineComputedProperty_(key, options, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }
    try {
      startBatch();
      var deleteOutcome = this.delete_(key);
      if (!deleteOutcome) {
        return deleteOutcome;
      }
      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          object: this.proxy_ || this.target_,
          name: key,
          type: ADD,
          newValue: void 0
        });
        if (!change) {
          return null;
        }
      }
      options.name || (options.name = true ? this.name_ + "." + key.toString() : "ObservableObject.key");
      options.context = this.proxy_ || this.target_;
      var cachedDescriptor = getCachedObservablePropDescriptor(key);
      var descriptor = {
        configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,
        enumerable: false,
        get: cachedDescriptor.get,
        set: cachedDescriptor.set
      };
      if (proxyTrap) {
        if (!Reflect.defineProperty(this.target_, key, descriptor)) {
          return false;
        }
      } else {
        defineProperty(this.target_, key, descriptor);
      }
      this.values_.set(key, new ComputedValue(options));
      this.notifyPropertyAddition_(key, void 0);
    } finally {
      endBatch();
    }
    return true;
  };
  _proto.delete_ = function delete_(key, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }
    if (!hasProp(this.target_, key)) {
      return true;
    }
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        object: this.proxy_ || this.target_,
        name: key,
        type: REMOVE
      });
      if (!change) {
        return null;
      }
    }
    try {
      var _this$pendingKeys_, _this$pendingKeys_$ge;
      startBatch();
      var notify = hasListeners(this);
      var notifySpy = isSpyEnabled();
      var observable2 = this.values_.get(key);
      var value = void 0;
      if (!observable2 && (notify || notifySpy)) {
        var _getDescriptor2;
        value = (_getDescriptor2 = getDescriptor(this.target_, key)) == null ? void 0 : _getDescriptor2.value;
      }
      if (proxyTrap) {
        if (!Reflect.deleteProperty(this.target_, key)) {
          return false;
        }
      } else {
        delete this.target_[key];
      }
      if (true) {
        delete this.appliedAnnotations_[key];
      }
      if (observable2) {
        this.values_["delete"](key);
        if (observable2 instanceof ObservableValue) {
          value = observable2.value_;
        }
        propagateChanged(observable2);
      }
      this.keysAtom_.reportChanged();
      (_this$pendingKeys_ = this.pendingKeys_) == null ? void 0 : (_this$pendingKeys_$ge = _this$pendingKeys_.get(key)) == null ? void 0 : _this$pendingKeys_$ge.set(key in this.target_);
      if (notify || notifySpy) {
        var _change2 = {
          type: REMOVE,
          observableKind: "object",
          object: this.proxy_ || this.target_,
          debugObjectName: this.name_,
          oldValue: value,
          name: key
        };
        if (notifySpy) {
          spyReportStart(_change2);
        }
        if (notify) {
          notifyListeners(this, _change2);
        }
        if (notifySpy) {
          spyReportEnd();
        }
      }
    } finally {
      endBatch();
    }
    return true;
  };
  _proto.observe_ = function observe_(callback, fireImmediately) {
    if (fireImmediately === true) {
      die("`observe` doesn't support the fire immediately property for observable objects.");
    }
    return registerListener(this, callback);
  };
  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };
  _proto.notifyPropertyAddition_ = function notifyPropertyAddition_(key, value) {
    var _this$pendingKeys_2, _this$pendingKeys_2$g;
    var notify = hasListeners(this);
    var notifySpy = isSpyEnabled();
    if (notify || notifySpy) {
      var change = notify || notifySpy ? {
        type: ADD,
        observableKind: "object",
        debugObjectName: this.name_,
        object: this.proxy_ || this.target_,
        name: key,
        newValue: value
      } : null;
      if (notifySpy) {
        spyReportStart(change);
      }
      if (notify) {
        notifyListeners(this, change);
      }
      if (notifySpy) {
        spyReportEnd();
      }
    }
    (_this$pendingKeys_2 = this.pendingKeys_) == null ? void 0 : (_this$pendingKeys_2$g = _this$pendingKeys_2.get(key)) == null ? void 0 : _this$pendingKeys_2$g.set(true);
    this.keysAtom_.reportChanged();
  };
  _proto.ownKeys_ = function ownKeys_() {
    this.keysAtom_.reportObserved();
    return ownKeys(this.target_);
  };
  _proto.keys_ = function keys_() {
    this.keysAtom_.reportObserved();
    return Object.keys(this.target_);
  };
  return ObservableObjectAdministration2;
}();
function asObservableObject(target, options) {
  var _options$name;
  if (options && isObservableObject(target)) {
    die("Options can't be provided for already observable objects.");
  }
  if (hasProp(target, $mobx)) {
    if (!(getAdministration(target) instanceof ObservableObjectAdministration)) {
      die("Cannot convert '" + getDebugName(target) + "' into observable object:\nThe target is already observable of different type.\nExtending builtins is not supported.");
    }
    return target;
  }
  if (!Object.isExtensible(target)) {
    die("Cannot make the designated object observable; it is not extensible");
  }
  var name = (_options$name = options == null ? void 0 : options.name) != null ? _options$name : true ? (isPlainObject(target) ? "ObservableObject" : target.constructor.name) + "@" + getNextId() : "ObservableObject";
  var adm = new ObservableObjectAdministration(target, /* @__PURE__ */ new Map(), String(name), getAnnotationFromOptions(options));
  addHiddenProp(target, $mobx, adm);
  return target;
}
var isObservableObjectAdministration = /* @__PURE__ */ createInstanceofPredicate("ObservableObjectAdministration", ObservableObjectAdministration);
function getCachedObservablePropDescriptor(key) {
  return descriptorCache[key] || (descriptorCache[key] = {
    get: function get3() {
      return this[$mobx].getObservablePropValue_(key);
    },
    set: function set4(value) {
      return this[$mobx].setObservablePropValue_(key, value);
    }
  });
}
function isObservableObject(thing) {
  if (isObject(thing)) {
    return isObservableObjectAdministration(thing[$mobx]);
  }
  return false;
}
function recordAnnotationApplied(adm, annotation, key) {
  var _adm$target_$storedAn;
  if (true) {
    adm.appliedAnnotations_[key] = annotation;
  }
  (_adm$target_$storedAn = adm.target_[storedAnnotationsSymbol]) == null ? true : delete _adm$target_$storedAn[key];
}
function assertAnnotable(adm, annotation, key) {
  if (!isAnnotation(annotation)) {
    die("Cannot annotate '" + adm.name_ + "." + key.toString() + "': Invalid annotation.");
  }
  if (!isOverride(annotation) && hasProp(adm.appliedAnnotations_, key)) {
    var fieldName = adm.name_ + "." + key.toString();
    var currentAnnotationType = adm.appliedAnnotations_[key].annotationType_;
    var requestedAnnotationType = annotation.annotationType_;
    die("Cannot apply '" + requestedAnnotationType + "' to '" + fieldName + "':" + ("\nThe field is already annotated with '" + currentAnnotationType + "'.") + "\nRe-annotating fields is not allowed.\nUse 'override' annotation for methods overridden by subclass.");
  }
}
var ENTRY_0 = /* @__PURE__ */ createArrayEntryDescriptor(0);
var OBSERVABLE_ARRAY_BUFFER_SIZE = 0;
var StubArray = function StubArray2() {
};
function inherit(ctor, proto) {
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(ctor.prototype, proto);
  } else if (ctor.prototype.__proto__ !== void 0) {
    ctor.prototype.__proto__ = proto;
  } else {
    ctor.prototype = proto;
  }
}
inherit(StubArray, Array.prototype);
var LegacyObservableArray = /* @__PURE__ */ function(_StubArray, _Symbol$toStringTag2, _Symbol$iterator2) {
  _inheritsLoose(LegacyObservableArray2, _StubArray);
  function LegacyObservableArray2(initialValues, enhancer, name, owned) {
    var _this;
    if (name === void 0) {
      name = true ? "ObservableArray@" + getNextId() : "ObservableArray";
    }
    if (owned === void 0) {
      owned = false;
    }
    _this = _StubArray.call(this) || this;
    var adm = new ObservableArrayAdministration(name, enhancer, owned, true);
    adm.proxy_ = _assertThisInitialized(_this);
    addHiddenFinalProp(_assertThisInitialized(_this), $mobx, adm);
    if (initialValues && initialValues.length) {
      var prev = allowStateChangesStart(true);
      _this.spliceWithArray(0, 0, initialValues);
      allowStateChangesEnd(prev);
    }
    {
      Object.defineProperty(_assertThisInitialized(_this), "0", ENTRY_0);
    }
    return _this;
  }
  var _proto = LegacyObservableArray2.prototype;
  _proto.concat = function concat() {
    this[$mobx].atom_.reportObserved();
    for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {
      arrays[_key] = arguments[_key];
    }
    return Array.prototype.concat.apply(
      this.slice(),
      arrays.map(function(a) {
        return isObservableArray(a) ? a.slice() : a;
      })
    );
  };
  _proto[_Symbol$iterator2] = function() {
    var self2 = this;
    var nextIndex = 0;
    return makeIterable({
      next: function next() {
        return nextIndex < self2.length ? {
          value: self2[nextIndex++],
          done: false
        } : {
          done: true,
          value: void 0
        };
      }
    });
  };
  _createClass(LegacyObservableArray2, [{
    key: "length",
    get: function get3() {
      return this[$mobx].getArrayLength_();
    },
    set: function set4(newLength) {
      this[$mobx].setArrayLength_(newLength);
    }
  }, {
    key: _Symbol$toStringTag2,
    get: function get3() {
      return "Array";
    }
  }]);
  return LegacyObservableArray2;
}(StubArray, Symbol.toStringTag, Symbol.iterator);
Object.entries(arrayExtensions).forEach(function(_ref) {
  var prop = _ref[0], fn = _ref[1];
  if (prop !== "concat") {
    addHiddenProp(LegacyObservableArray.prototype, prop, fn);
  }
});
function createArrayEntryDescriptor(index) {
  return {
    enumerable: false,
    configurable: true,
    get: function get3() {
      return this[$mobx].get_(index);
    },
    set: function set4(value) {
      this[$mobx].set_(index, value);
    }
  };
}
function createArrayBufferItem(index) {
  defineProperty(LegacyObservableArray.prototype, "" + index, createArrayEntryDescriptor(index));
}
function reserveArrayBuffer(max) {
  if (max > OBSERVABLE_ARRAY_BUFFER_SIZE) {
    for (var index = OBSERVABLE_ARRAY_BUFFER_SIZE; index < max + 100; index++) {
      createArrayBufferItem(index);
    }
    OBSERVABLE_ARRAY_BUFFER_SIZE = max;
  }
}
reserveArrayBuffer(1e3);
function createLegacyArray(initialValues, enhancer, name) {
  return new LegacyObservableArray(initialValues, enhancer, name);
}
function getAtom(thing, property) {
  if (typeof thing === "object" && thing !== null) {
    if (isObservableArray(thing)) {
      if (property !== void 0) {
        die(23);
      }
      return thing[$mobx].atom_;
    }
    if (isObservableSet(thing)) {
      return thing[$mobx];
    }
    if (isObservableMap(thing)) {
      if (property === void 0) {
        return thing.keysAtom_;
      }
      var observable2 = thing.data_.get(property) || thing.hasMap_.get(property);
      if (!observable2) {
        die(25, property, getDebugName(thing));
      }
      return observable2;
    }
    if (isObservableObject(thing)) {
      if (!property) {
        return die(26);
      }
      var _observable = thing[$mobx].values_.get(property);
      if (!_observable) {
        die(27, property, getDebugName(thing));
      }
      return _observable;
    }
    if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {
      return thing;
    }
  } else if (isFunction(thing)) {
    if (isReaction(thing[$mobx])) {
      return thing[$mobx];
    }
  }
  die(28);
}
function getAdministration(thing, property) {
  if (!thing) {
    die(29);
  }
  if (property !== void 0) {
    return getAdministration(getAtom(thing, property));
  }
  if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {
    return thing;
  }
  if (isObservableMap(thing) || isObservableSet(thing)) {
    return thing;
  }
  if (thing[$mobx]) {
    return thing[$mobx];
  }
  die(24, thing);
}
function getDebugName(thing, property) {
  var named;
  if (property !== void 0) {
    named = getAtom(thing, property);
  } else if (isAction(thing)) {
    return thing.name;
  } else if (isObservableObject(thing) || isObservableMap(thing) || isObservableSet(thing)) {
    named = getAdministration(thing);
  } else {
    named = getAtom(thing);
  }
  return named.name_;
}
var toString = objectPrototype.toString;
function deepEqual(a, b, depth) {
  if (depth === void 0) {
    depth = -1;
  }
  return eq(a, b, depth);
}
function eq(a, b, depth, aStack, bStack) {
  if (a === b) {
    return a !== 0 || 1 / a === 1 / b;
  }
  if (a == null || b == null) {
    return false;
  }
  if (a !== a) {
    return b !== b;
  }
  var type = typeof a;
  if (type !== "function" && type !== "object" && typeof b != "object") {
    return false;
  }
  var className = toString.call(a);
  if (className !== toString.call(b)) {
    return false;
  }
  switch (className) {
    case "[object RegExp]":
    case "[object String]":
      return "" + a === "" + b;
    case "[object Number]":
      if (+a !== +a) {
        return +b !== +b;
      }
      return +a === 0 ? 1 / +a === 1 / b : +a === +b;
    case "[object Date]":
    case "[object Boolean]":
      return +a === +b;
    case "[object Symbol]":
      return typeof Symbol !== "undefined" && Symbol.valueOf.call(a) === Symbol.valueOf.call(b);
    case "[object Map]":
    case "[object Set]":
      if (depth >= 0) {
        depth++;
      }
      break;
  }
  a = unwrap(a);
  b = unwrap(b);
  var areArrays = className === "[object Array]";
  if (!areArrays) {
    if (typeof a != "object" || typeof b != "object") {
      return false;
    }
    var aCtor = a.constructor, bCtor = b.constructor;
    if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor && isFunction(bCtor) && bCtor instanceof bCtor) && "constructor" in a && "constructor" in b) {
      return false;
    }
  }
  if (depth === 0) {
    return false;
  } else if (depth < 0) {
    depth = -1;
  }
  aStack = aStack || [];
  bStack = bStack || [];
  var length = aStack.length;
  while (length--) {
    if (aStack[length] === a) {
      return bStack[length] === b;
    }
  }
  aStack.push(a);
  bStack.push(b);
  if (areArrays) {
    length = a.length;
    if (length !== b.length) {
      return false;
    }
    while (length--) {
      if (!eq(a[length], b[length], depth - 1, aStack, bStack)) {
        return false;
      }
    }
  } else {
    var keys = Object.keys(a);
    var key;
    length = keys.length;
    if (Object.keys(b).length !== length) {
      return false;
    }
    while (length--) {
      key = keys[length];
      if (!(hasProp(b, key) && eq(a[key], b[key], depth - 1, aStack, bStack))) {
        return false;
      }
    }
  }
  aStack.pop();
  bStack.pop();
  return true;
}
function unwrap(a) {
  if (isObservableArray(a)) {
    return a.slice();
  }
  if (isES6Map(a) || isObservableMap(a)) {
    return Array.from(a.entries());
  }
  if (isES6Set(a) || isObservableSet(a)) {
    return Array.from(a.entries());
  }
  return a;
}
function makeIterable(iterator) {
  iterator[Symbol.iterator] = getSelf;
  return iterator;
}
function getSelf() {
  return this;
}
function isAnnotation(thing) {
  return thing instanceof Object && typeof thing.annotationType_ === "string" && isFunction(thing.make_) && isFunction(thing.extend_);
}
["Symbol", "Map", "Set"].forEach(function(m) {
  var g = getGlobal();
  if (typeof g[m] === "undefined") {
    die("MobX requires global '" + m + "' to be available or polyfilled");
  }
});
if (typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === "object") {
  __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({
    spy,
    extras: {
      getDebugName
    },
    $mobx
  });
}

// src/util/error.ts
function setErrorMessage(error, message) {
  if (!error.publicMessage) {
    error.publicMessage = message;
  }
  if (typeof error.data !== "object") {
    error._data = {};
  }
  if (typeof error.setData !== "function") {
    error.setData = (key, val) => {
      let nKey = key;
      if (key in error._data) {
        let i = 0;
        nKey = `${key}-${i++}`;
        while (nKey in error._data) {
          nKey = `${key}-${i++}`;
        }
      }
      error._data[nKey] = val;
    };
  }
  return error;
}
function makePublicError(message) {
  return setErrorMessage(Error(message), message);
}

// src/util/object.ts
function isStrictlyObject(o) {
  return !!o && typeof o === "object" && !Array.isArray(o);
}
function sleep(t) {
  return new Promise((r) => setTimeout(r, t));
}
function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

// src/util/fetch.ts
var ENCODED_FORM_CONTENT_TYPE = "application/x-www-form-urlencoded;charset=UTF-8";
function makeEncodedFormData(obj) {
  const formBody = [];
  for (const [key, val] of Object.entries(obj)) {
    const eKey = encodeURIComponent(key);
    const eVal = encodeURIComponent(val);
    formBody.push(`${eKey}=${eVal}`);
  }
  return formBody.join("&");
}
async function poll(url, ctx, init, interval = 5, timeout = 120) {
  console.debug(`poll(${url})`);
  const _poll = async () => {
    const resp = await fetch(url, init);
    if (!resp.ok) {
      let err;
      let data;
      try {
        data = await resp.json();
      } catch (e) {
      }
      if (resp.status !== 400 && resp.status !== 428) {
        console.warn("[util/fetch] poll() error, status: ", resp.status, resp, data);
        err = makePublicError(`Failed to authenticate: ${resp.status}`);
      }
      if (!err) {
        console.warn("[util/fetch] poll() error, data: ", resp.status, resp, data);
        if (data.error) {
          if (data.error === "authorization_pending") {
            return void 0;
          }
          err = makePublicError(`Failed to authenticate: ${data.error}`);
        }
      }
      if (!err) {
        console.warn("[util/fetch] poll() error, data: ", resp.status, resp);
        err = makePublicError("Failed to authenticate: unknown error");
      }
      err.setData("response", resp);
      throw err;
    }
    if (resp.status === 204) {
      return void 0;
    }
    return resp;
  };
  let timer = 0;
  while (timer < timeout && !ctx.canceled) {
    const resp = await _poll();
    if (resp) {
      return resp;
    }
    await sleep(interval * 1e3);
    timer += interval;
  }
  if (ctx.canceled) {
    return;
  }
  throw makePublicError("Failed to authenticate: timeout");
}
function cancelableFetch(url, init = {}) {
  const controller = new AbortController();
  const { signal, abort } = controller;
  const promise = _cancelableFetch(
    url,
    __spreadProps(__spreadValues({}, init), {
      signal
    })
  );
  promise.cancel = abort;
  return promise;
}
async function _cancelableFetch(url, init) {
  const resp = await fetch(url, init);
  if (!resp.ok) {
    let errMessage;
    try {
      const respBody = await resp.json();
      console.error(`[util/fetch] _cancelableFetch() Error: url=${url} status=${resp.status} body=${typeof respBody === "object" ? JSON.stringify(respBody, void 0, 2) : respBody}`);
      errMessage = respBody.message;
    } catch (e) {
      console.error(`[util/fetch] _cancelableFetch() Error: url=${url} status=${resp.status} body=${typeof resp.body === "object" ? JSON.stringify(resp.body, void 0, 2) : resp.body}`);
    }
    let error;
    if (errMessage) {
      error = makePublicError(`Failed to fetch: ${errMessage} (${resp.status})`);
    } else {
      error = Error(`Failed to fetch: ${resp.status}`);
    }
    error.response = resp;
    throw error;
  }
  return resp;
}

// src/util/node.ts
function findAncestor(node, predicate) {
  if (predicate(node)) {
    return node;
  }
  if (node.parent) {
    return findAncestor(node.parent, predicate);
  }
}

// src/support/figma/storage.ts
import MessageBus from "/public/vendor/MessageBus.min.js";
function retrieve(key) {
  return MessageBus.execute((figma) => {
    return figma.clientStorage.getAsync(key);
  }, { key });
}
function setOrRemove(key, value) {
  return MessageBus.execute((figma) => {
    return figma.clientStorage.setAsync(key, value);
  }, { key });
}

// src/support/figma/index.ts
function openBrowser(url) {
  window.open(url, "_blank");
}

// src/support/auth/accesscode.ts
var ENDPOINT = "http://localhost:3001";
function doFetch(provider, path, init = {}, query = {}) {
  query["provider"] = provider;
  const params = new URLSearchParams(query);
  const url = `${ENDPOINT}/api/auth${path}?${params.toString()}`;
  return cancelableFetch(url, init);
}
async function pollForAuthData(location, ctx) {
  const resp = await poll(location, ctx);
  const data = await resp.json();
  return data.access_token;
}
async function authenticate(provider, ctx) {
  let data;
  try {
    const resp = await doFetch(provider, "/session", { method: "POST" });
    if (!resp.ok) {
      throw makePublicError(`Failed to authenticate: ${resp.status}`);
    }
    const session = await resp.json();
    const { url } = session;
    const pollUrl = resp.headers.get("location");
    openBrowser(url);
    data = await pollForAuthData(pollUrl, ctx);
  } catch (e) {
    throw setErrorMessage(e, "Failed to authenticate.");
  }
  if (!data) {
    throw makePublicError("Invalid code");
  }
  return makeAuthData(data);
}
function makeAuthData(data) {
  const authData = {
    accessToken: data.access_token,
    expiresIn: data.expires_in,
    expiresAt: new Date(Date.now() + data.expires_in * 1e3),
    refreshToken: data.refresh_token,
    tokenType: data.token_type,
    scope: data.scope
  };
  return authData;
}
async function refreshAccessToken(provider, refreshToken) {
  try {
    const grant_type = "refresh_token";
    let data;
    try {
      const resp = await doFetch(provider, "/token", void 0, { refresh_token: refreshToken, grant_type });
      data = await resp.json();
    } catch (e) {
      if (isStrictlyObject(e.response) && e.response.status === 400) {
        throw setErrorMessage(e, `Invalid credentials. Try reconnecting ${capitalize(provider)} account.`);
      }
      throw e;
    }
    return makeAuthData(data);
  } catch (e) {
    throw setErrorMessage(e, "Failed to refresh access token.");
  }
}

// src/support/auth/devicecode.ts
var flow3 = "access_code";
var MICROSOFT_TENANT_ID = void 0;
var MICROSOFT_CLIENT_ID = void 0;
var GOOGLE_DEVICECODE_CLIENT_ID = void 0;
var GOOGLE_CLIENT_ID = void 0;
var GRANTTYPE_DEVICE_CODE = "urn:ietf:params:oauth:grant-type:device_code";
var AUTH_ENDPOINT = "http://localhost:3001";
var MIN_POLL_INTERVAL = 5;
if (flow3 === "device_code") {
  if (!MICROSOFT_TENANT_ID) {
    throw makePublicError(
      "Build Error: Missing Microsoft OAuth tenant ID. Set using env variable `MICROSOFT_TENANT_ID`."
    );
  }
  if (!MICROSOFT_CLIENT_ID) {
    throw makePublicError(
      "Build Error: Missing Microsoft OAuth client ID. Set using env variable `MICROSOFT_CLIENT_ID`."
    );
  }
}
var config = {
  microsoft: {
    client_id: MICROSOFT_CLIENT_ID,
    baseUrl: `https://login.microsoftonline.com/${MICROSOFT_TENANT_ID}/oauth2/v2.0`,
    scopes: ["files.readwrite", "offline_access", "openid", "profile"]
  },
  google: {
    device_client_id: GOOGLE_DEVICECODE_CLIENT_ID,
    client_id: GOOGLE_CLIENT_ID,
    baseUrl: "https://oauth2.googleapis.com",
    scopes: ["https://www.googleapis.com/auth/drive.file", "openid", "profile"]
  }
};
function doFetch2(provider, pathOrUrl, init, query) {
  const { baseUrl } = config[provider];
  let url;
  if (pathOrUrl.startsWith("http://") || pathOrUrl.startsWith("https://")) {
    url = new URL(pathOrUrl);
  } else {
    url = new URL(`${baseUrl}${pathOrUrl}`);
  }
  if (query) {
    const params = new URLSearchParams(query);
    url.search = params.toString();
  }
  return cancelableFetch(url.toString(), init);
}
async function pollForAuthData2(provider, device_code, ctx, interval) {
  const { client_id, device_client_id, baseUrl } = config[provider];
  let url = `${baseUrl}/token`;
  if (provider === "google") {
    if (!AUTH_ENDPOINT) {
      throw makePublicError("Auth endpoint not set, this build does not support Google accounts.");
    }
    url = `${AUTH_ENDPOINT}/api/auth/google/devicecode/token`;
  }
  const resp = await poll(
    url,
    ctx,
    {
      method: "POST",
      headers: {
        "content-type": ENCODED_FORM_CONTENT_TYPE,
        "x-poll-interval": `${interval}`
      },
      body: makeEncodedFormData({
        grant_type: GRANTTYPE_DEVICE_CODE,
        device_code,
        client_id: device_client_id != null ? device_client_id : client_id
      })
    },
    Math.max(interval, MIN_POLL_INTERVAL)
  );
  if (ctx.canceled || !resp) {
    return;
  }
  const body = await resp.json();
  const {
    token_type: tokenType,
    scope,
    expires_in: expiresIn,
    access_token: accessToken,
    refresh_token: refreshToken
  } = body;
  const expiresAt = new Date(+Date.now() + expiresIn * 1e3);
  return {
    accessToken,
    expiresAt,
    expiresIn,
    refreshToken,
    scope,
    tokenType
  };
}
async function authenticate2(provider, ctx) {
  try {
    const { client_id, device_client_id, scopes } = config[provider];
    const path = provider === "google" ? "/device/code" : "/devicecode";
    const resp = await doFetch2(provider, path, {
      method: "POST",
      headers: {
        "content-type": ENCODED_FORM_CONTENT_TYPE
      },
      body: makeEncodedFormData({
        client_id: device_client_id != null ? device_client_id : client_id,
        scope: scopes.join(" ")
      })
    });
    const codeData = await resp.json();
    if (ctx.canceled || !resp) {
      return;
    }
    const { device_code: deviceCode, user_code: userCode, interval } = codeData;
    const url = codeData.verification_uri ? codeData.verification_uri : codeData.verification_url;
    ctx.setMessage("todo");
    openBrowser(url);
    const data = await pollForAuthData2(provider, deviceCode, ctx, interval);
    ctx.setMessage("");
    return data;
  } catch (e) {
    throw setErrorMessage(e, "Failed to authenticate.");
  }
}
async function refreshAccessToken2(provider, refresh_token) {
  try {
    let { client_id } = config[provider];
    let url = "/token";
    if (provider === "google") {
      if (!AUTH_ENDPOINT) {
        throw makePublicError(
          "Auth endpoint not set, this build does not support Google accounts."
        );
      }
      url = `${AUTH_ENDPOINT}/api/auth/google/devicecode/token`;
      client_id = config[provider].device_client_id;
    }
    const resp = await doFetch2(provider, url, {
      method: "POST",
      headers: {
        "content-type": ENCODED_FORM_CONTENT_TYPE
      },
      body: makeEncodedFormData({
        refresh_token,
        client_id,
        grant_type: "refresh_token"
      })
    });
    const data = await resp.json();
    const expiresAt = new Date(Date.now() + data.expires_in * 1e3);
    return {
      accessToken: data.access_token,
      scope: data.scope,
      tokenType: data.token_type,
      expiresAt,
      expiresIn: data.expires_in
    };
  } catch (e) {
    if (isStrictlyObject(e.response) && e.response.status === 400) {
      throw setErrorMessage(
        e,
        `Invalid credentials. Try reconnecting ${capitalize(provider)} account.`
      );
    }
    throw setErrorMessage(e, "Failed to refresh access token.");
  }
}

// src/support/auth/index.ts
var OAUTH_FLOWS = ["device_code", "access_code"];
var flow4 = "access_code";
if (!OAUTH_FLOWS.includes(flow4)) {
  throw makePublicError(`Build Error! Invalid OAuth flow: ${flow4}. Supported types: ${OAUTH_FLOWS.join(", ")}.`);
}
var authenticate3 = flow4 === "access_code" ? authenticate : authenticate2;
var refreshAccessToken3 = flow4 === "access_code" ? refreshAccessToken : refreshAccessToken2;
async function revokeAccessToken(provider, token) {
  if (typeof token !== "string") {
    return;
  }
  if (provider === "microsoft") {
    return;
  }
  try {
    await cancelableFetch(`https://accounts.google.com/o/oauth2/revoke?token=${token}`);
  } catch (e) {
    console.warn("[auth] Failed to revoke access token: ", e);
  }
}

// src/state/stores/BaseStore.ts
var BaseStore = class {
  constructor(root3) {
    this.ready = false;
    this.root = void 0;
    this._discard = [];
    this.root = root3;
    makeObservable(this, {
      ready: observable,
      onInit: action,
      onReset: action
    });
  }
  discard(fn) {
    this._discard.push(fn);
  }
  async init() {
    await this.onInit();
    runInAction(() => {
      this.ready = true;
    });
  }
  reset() {
    this._discard.forEach((h2) => h2 && h2.call(null));
    this._discard = [];
    return this.onReset();
  }
};

// src/state/stores/auth.store.ts
function restoreAuthData(authData) {
  if (authData && authData.expiresAt) {
    authData.expiresAt = new Date(authData.expiresAt);
  }
  return authData;
}
var AuthStore = class extends BaseStore {
  constructor(root3) {
    super(root3);
    this.authData = {
      microsoft: void 0,
      google: void 0
    };
    makeObservable(this, {
      authData: observable,
      isMicrosoftAuthenticated: computed,
      isGoogleAuthenticated: computed,
      microsoftAccessToken: computed,
      microsoftRefreshToken: computed,
      googleAccessToken: computed,
      googleRefreshToken: computed,
      authenticate: action,
      logout: action,
      getAccessToken: action,
      setAuthData: action,
      refreshToken: action,
      clearAuthData: action,
      getMicrosoftToken: action,
      getGoogleToken: action
    });
  }
  get microsoftAccessToken() {
    var _a3;
    return (_a3 = this.authData.microsoft) == null ? void 0 : _a3.accessToken;
  }
  get microsoftRefreshToken() {
    var _a3;
    return (_a3 = this.authData.microsoft) == null ? void 0 : _a3.refreshToken;
  }
  get microsoftExpiresAt() {
    var _a3;
    return (_a3 = this.authData.microsoft) == null ? void 0 : _a3.expiresAt;
  }
  get isMicrosoftAuthenticated() {
    const authData = this.authData.microsoft;
    return authData && !!authData.accessToken && !!authData.refreshToken;
  }
  get googleAccessToken() {
    var _a3;
    return (_a3 = this.authData.google) == null ? void 0 : _a3.accessToken;
  }
  get googleRefreshToken() {
    var _a3;
    return (_a3 = this.authData.google) == null ? void 0 : _a3.refreshToken;
  }
  get googleExpiresAt() {
    var _a3;
    return (_a3 = this.authData.google) == null ? void 0 : _a3.expiresAt;
  }
  get isGoogleAuthenticated() {
    const authData = this.authData.google;
    return !!authData && !!authData.accessToken && !!authData.refreshToken;
  }
  async onInit() {
    let data = await retrieve("google_auth_data");
    if (data && data.refreshToken) {
      runInAction(() => {
        this.authData.google = restoreAuthData(data);
      });
    }
    data = await retrieve("microsoft_auth_data");
    if (data && data.refreshToken) {
      runInAction(() => {
        this.authData.microsoft = restoreAuthData(data);
      });
    }
  }
  onReset() {
    this.authData = {
      microsoft: void 0,
      google: void 0
    };
  }
  getAuthData(provider) {
    return this.authData[provider];
  }
  async setAuthData(provider, data) {
    var _a3;
    this.authData[provider] = __spreadValues(__spreadValues({}, (_a3 = this.authData[provider]) != null ? _a3 : {}), data);
    await setOrRemove(`${provider}_auth_data`, this.authData[provider]);
    return this.authData[provider];
  }
  async clearAuthData(provider) {
    this.authData[provider] = void 0;
    await setOrRemove(`${provider}_auth_data`, void 0);
  }
  isTokenValid(provider) {
    const authData = this.getAuthData(provider);
    if (!authData) {
      return false;
    }
    const { expiresAt } = authData;
    if (!expiresAt) {
      return false;
    }
    return +expiresAt > Date.now();
  }
  isAuthenticated(provider) {
    return provider === "google" ? this.isGoogleAuthenticated : this.isMicrosoftAuthenticated;
  }
  assertAuthenticated(provider) {
    if (!this.isAuthenticated(provider)) {
      throw makePublicError(`Not authenticated with ${capitalize(provider)}`);
    }
  }
  async refreshToken(provider) {
    this.assertAuthenticated(provider);
    const refreshToken = provider === "google" ? this.googleRefreshToken : this.microsoftRefreshToken;
    if (!refreshToken) {
      throw makePublicError("No refresh token.");
    }
    const data = await refreshAccessToken3(provider, refreshToken);
    return this.setAuthData(provider, data);
  }
  async getAccessToken(provider) {
    this.assertAuthenticated(provider);
    let { accessToken } = this.authData[provider];
    if (this.isTokenValid(provider)) {
      return accessToken;
    }
    try {
      ({ accessToken } = await this.refreshToken(provider));
    } catch (e) {
      if (e.publicMessage.startsWith("Invalid credentials")) {
        try {
          await this.logout(provider);
        } catch (_14) {
        }
      }
      throw e;
    }
    return accessToken;
  }
  async authenticate(provider, ctx) {
    const data = await authenticate3(provider, ctx);
    await this.setAuthData(provider, data);
    return data;
  }
  async logout(provider) {
    var _a3;
    const authData = this.authData[provider];
    if (authData) {
      const token = (_a3 = authData.refreshToken) != null ? _a3 : authData.accessToken;
      await revokeAccessToken(provider, token);
    }
    await this.clearAuthData(provider);
  }
  async getMicrosoftToken() {
    return this.getAccessToken("microsoft");
  }
  async getGoogleToken() {
    return this.getAccessToken("google");
  }
};

// src/state/stores/selection.store.ts
import MessageBus2 from "/public/vendor/MessageBus.min.js";
var SelectionStore = class extends BaseStore {
  constructor(root3) {
    super(root3);
    this.enabled = false;
    this.nodes = [];
    makeObservable(this, {
      nodes: observable,
      enabled: observable,
      nodesUnderRoot: computed,
      setNodes: action,
      enable: action
    });
  }
  async enable() {
    if (this.enabled) {
      return;
    }
    this.enabled = true;
    const selectedNodes = await MessageBus2.execute((figma) => {
      return figma.currentPage.selection;
    });
    console.log("[stores/selection] enabled: ", selectedNodes);
    this.setNodes(selectedNodes);
    this.discard(
      MessageBus2.on("selection:change", ({ nodes }) => {
        this.setNodes(nodes);
      })
    );
  }
  get nodesUnderRoot() {
    if (!this.root.nodeId) {
      return this.nodes;
    }
    return this.nodes.filter((node) => !!findAncestor(node, (parent) => parent.id === this.root.nodeId));
  }
  setNodes(nodes) {
    this.nodes = nodes;
  }
  onInit() {
    console.debug("[SelectionStore] ready!");
  }
  onReset() {
    this.nodes = [];
    this.enabled = false;
  }
};

// ../../node_modules/@react-stately/collections/dist/module.js
init_preact();
function $c1d7fb2ec91bae71$var$Item(props) {
  return null;
}
$c1d7fb2ec91bae71$var$Item.getCollectionNode = function* getCollectionNode(props, context) {
  let { childItems, title, children } = props;
  let rendered = props.title || props.children;
  let textValue = props.textValue || (typeof rendered === "string" ? rendered : "") || props["aria-label"] || "";
  if (!textValue && !(context === null || context === void 0 ? void 0 : context.suppressTextValueWarning))
    console.warn("<Item> with non-plain text contents is unsupported by type to select for accessibility. Please add a `textValue` prop.");
  yield {
    type: "item",
    props,
    rendered,
    textValue,
    "aria-label": props["aria-label"],
    hasChildNodes: $c1d7fb2ec91bae71$var$hasChildItems(props),
    *childNodes() {
      if (childItems)
        for (let child1 of childItems)
          yield {
            type: "item",
            value: child1
          };
      else if (title) {
        let items = [];
        preact_default.Children.forEach(children, (child) => {
          items.push({
            type: "item",
            element: child
          });
        });
        yield* items;
      }
    }
  };
};
function $c1d7fb2ec91bae71$var$hasChildItems(props) {
  if (props.hasChildItems != null)
    return props.hasChildItems;
  if (props.childItems)
    return true;
  if (props.title && preact_default.Children.count(props.children) > 0)
    return true;
  return false;
}
var $c1d7fb2ec91bae71$export$6d08773d2e66f8f2 = $c1d7fb2ec91bae71$var$Item;
function $9fc4852771d079eb$var$Section(props) {
  return null;
}
$9fc4852771d079eb$var$Section.getCollectionNode = function* getCollectionNode2(props) {
  let { children, title, items: items1 } = props;
  yield {
    type: "section",
    hasChildNodes: true,
    rendered: title,
    "aria-label": props["aria-label"],
    *childNodes() {
      if (typeof children === "function") {
        if (!items1)
          throw new Error("props.children was a function but props.items is missing");
        for (let item of items1)
          yield {
            type: "item",
            value: item,
            renderer: children
          };
      } else {
        let items = [];
        preact_default.Children.forEach(children, (child) => {
          items.push({
            type: "item",
            element: child
          });
        });
        yield* items;
      }
    }
  };
};
var $eb2240fc39a57fa5$export$bf788dd355e3a401 = class {
  build(props, context) {
    this.context = context;
    return $eb2240fc39a57fa5$var$iterable(
      () => this.iterateCollection(props)
    );
  }
  *iterateCollection(props) {
    let { children, items } = props;
    if (typeof children === "function") {
      if (!items)
        throw new Error("props.children was a function but props.items is missing");
      for (let item of props.items)
        yield* this.getFullNode({
          value: item
        }, {
          renderer: children
        });
    } else {
      let items2 = [];
      preact_default.Children.forEach(children, (child) => {
        items2.push(child);
      });
      let index = 0;
      for (let item of items2) {
        let nodes = this.getFullNode({
          element: item,
          index
        }, {});
        for (let node of nodes) {
          index++;
          yield node;
        }
      }
    }
  }
  getKey(item, partialNode, state, parentKey) {
    if (item.key != null)
      return item.key;
    if (partialNode.type === "cell" && partialNode.key != null)
      return `${parentKey}${partialNode.key}`;
    let v = partialNode.value;
    if (v != null) {
      var _key;
      let key = (_key = v.key) !== null && _key !== void 0 ? _key : v.id;
      if (key == null)
        throw new Error("No key found for item");
      return key;
    }
    return parentKey ? `${parentKey}.${partialNode.index}` : `$.${partialNode.index}`;
  }
  getChildState(state, partialNode) {
    return {
      renderer: partialNode.renderer || state.renderer
    };
  }
  *getFullNode(partialNode, state, parentKey, parentNode) {
    let element = partialNode.element;
    if (!element && partialNode.value && state && state.renderer) {
      let cached = this.cache.get(partialNode.value);
      if (cached && (!cached.shouldInvalidate || !cached.shouldInvalidate(this.context))) {
        cached.index = partialNode.index;
        cached.parentKey = parentNode ? parentNode.key : null;
        yield cached;
        return;
      }
      element = state.renderer(partialNode.value);
    }
    if (preact_default.isValidElement(element)) {
      let type = element.type;
      if (typeof type !== "function" && typeof type.getCollectionNode !== "function") {
        let name = typeof element.type === "function" ? element.type.name : element.type;
        throw new Error(`Unknown element <${name}> in collection.`);
      }
      let childNodes = type.getCollectionNode(element.props, this.context);
      let index = partialNode.index;
      let result = childNodes.next();
      while (!result.done && result.value) {
        let childNode = result.value;
        partialNode.index = index;
        let nodeKey = childNode.key;
        if (!nodeKey)
          nodeKey = childNode.element ? null : this.getKey(element, partialNode, state, parentKey);
        let nodes = this.getFullNode(__spreadProps(__spreadValues({}, childNode), {
          key: nodeKey,
          index,
          wrapper: $eb2240fc39a57fa5$var$compose(partialNode.wrapper, childNode.wrapper)
        }), this.getChildState(state, childNode), parentKey ? `${parentKey}${element.key}` : element.key, parentNode);
        let children = [
          ...nodes
        ];
        for (let node2 of children) {
          node2.value = childNode.value || partialNode.value;
          if (node2.value)
            this.cache.set(node2.value, node2);
          if (partialNode.type && node2.type !== partialNode.type)
            throw new Error(`Unsupported type <${$eb2240fc39a57fa5$var$capitalize(node2.type)}> in <${$eb2240fc39a57fa5$var$capitalize(parentNode.type)}>. Only <${$eb2240fc39a57fa5$var$capitalize(partialNode.type)}> is supported.`);
          index++;
          yield node2;
        }
        result = childNodes.next(children);
      }
      return;
    }
    if (partialNode.key == null)
      return;
    let builder = this;
    let node = {
      type: partialNode.type,
      props: partialNode.props,
      key: partialNode.key,
      parentKey: parentNode ? parentNode.key : null,
      value: partialNode.value,
      level: parentNode ? parentNode.level + 1 : 0,
      index: partialNode.index,
      rendered: partialNode.rendered,
      textValue: partialNode.textValue,
      "aria-label": partialNode["aria-label"],
      wrapper: partialNode.wrapper,
      shouldInvalidate: partialNode.shouldInvalidate,
      hasChildNodes: partialNode.hasChildNodes,
      childNodes: $eb2240fc39a57fa5$var$iterable(function* () {
        if (!partialNode.hasChildNodes)
          return;
        let index = 0;
        for (let child of partialNode.childNodes()) {
          if (child.key != null)
            child.key = `${node.key}${child.key}`;
          child.index = index;
          let nodes = builder.getFullNode(child, builder.getChildState(state, child), node.key, node);
          for (let node1 of nodes) {
            index++;
            yield node1;
          }
        }
      })
    };
    yield node;
  }
  constructor() {
    this.cache = /* @__PURE__ */ new WeakMap();
  }
};
function $eb2240fc39a57fa5$var$iterable(iterator) {
  let cache = [];
  let iterable = null;
  return {
    *[Symbol.iterator]() {
      for (let item of cache)
        yield item;
      if (!iterable)
        iterable = iterator();
      for (let item1 of iterable) {
        cache.push(item1);
        yield item1;
      }
    }
  };
}
function $eb2240fc39a57fa5$var$compose(outer, inner) {
  if (outer && inner)
    return (element) => outer(inner(element));
  if (outer)
    return outer;
  if (inner)
    return inner;
}
function $eb2240fc39a57fa5$var$capitalize(str) {
  return str[0].toUpperCase() + str.slice(1);
}
function $7613b1592d41b092$export$6cd28814d92fa9c9(props, factory, context, invalidators = []) {
  let builder = (0, preact_exports.useMemo)(
    () => new $eb2240fc39a57fa5$export$bf788dd355e3a401(),
    []
  );
  let prev = (0, preact_exports.useRef)(null);
  return (0, preact_exports.useMemo)(() => {
    let nodes = builder.build(props, context);
    prev.current = factory(nodes, prev.current);
    return prev.current;
  }, [
    builder,
    props.children,
    props.items,
    context,
    ...invalidators
  ]);
}
var $453cc9f0df89c0a5$var$cache = /* @__PURE__ */ new WeakMap();
function $453cc9f0df89c0a5$export$77d5aafae4e095b2(collection) {
  let count = $453cc9f0df89c0a5$var$cache.get(collection);
  if (count != null)
    return count;
  count = 0;
  for (let item of collection)
    if (item.type === "section")
      count += $453cc9f0df89c0a5$export$77d5aafae4e095b2(item.childNodes);
    else
      count++;
  $453cc9f0df89c0a5$var$cache.set(collection, count);
  return count;
}

// ../../node_modules/@react-spectrum/button/dist/module.js
var import_utils5 = __toESM(require_main9());

// ../../node_modules/@react-aria/focus/dist/module.js
init_preact();
var import_utils = __toESM(require_main3());
var import_interactions = __toESM(require_main10());
var import_clsx = __toESM(require_clsx());
function $6a99195332edec8b$export$80f3e147d781571c(element) {
  if ((0, import_interactions.getInteractionModality)() === "virtual") {
    let lastFocusedElement = document.activeElement;
    (0, import_utils.runAfterTransition)(() => {
      if (document.activeElement === lastFocusedElement && document.contains(element))
        (0, import_utils.focusWithoutScrolling)(element);
    });
  } else
    (0, import_utils.focusWithoutScrolling)(element);
}
function $645f2e67b85a24c9$var$isStyleVisible(element) {
  if (!(element instanceof HTMLElement) && !(element instanceof SVGElement))
    return false;
  let { display, visibility } = element.style;
  let isVisible = display !== "none" && visibility !== "hidden" && visibility !== "collapse";
  if (isVisible) {
    const { getComputedStyle } = element.ownerDocument.defaultView;
    let { display: computedDisplay, visibility: computedVisibility } = getComputedStyle(element);
    isVisible = computedDisplay !== "none" && computedVisibility !== "hidden" && computedVisibility !== "collapse";
  }
  return isVisible;
}
function $645f2e67b85a24c9$var$isAttributeVisible(element, childElement) {
  return !element.hasAttribute("hidden") && (element.nodeName === "DETAILS" && childElement && childElement.nodeName !== "SUMMARY" ? element.hasAttribute("open") : true);
}
function $645f2e67b85a24c9$export$e989c0fffaa6b27a(element, childElement) {
  return element.nodeName !== "#comment" && $645f2e67b85a24c9$var$isStyleVisible(element) && $645f2e67b85a24c9$var$isAttributeVisible(element, childElement) && (!element.parentElement || $645f2e67b85a24c9$export$e989c0fffaa6b27a(element.parentElement, element));
}
var $9bf71ea28793e738$var$FocusContext = /* @__PURE__ */ preact_default.createContext(null);
var $9bf71ea28793e738$var$activeScope = null;
function $9bf71ea28793e738$export$20e40289641fbbb6(props) {
  let { children, contain, restoreFocus, autoFocus } = props;
  let startRef = (0, preact_exports.useRef)();
  let endRef = (0, preact_exports.useRef)();
  let scopeRef = (0, preact_exports.useRef)([]);
  let ctx = (0, preact_exports.useContext)($9bf71ea28793e738$var$FocusContext);
  var ref;
  let parentScope = (ref = ctx === null || ctx === void 0 ? void 0 : ctx.scopeRef) !== null && ref !== void 0 ? ref : null;
  (0, import_utils.useLayoutEffect)(() => {
    let node = startRef.current.nextSibling;
    let nodes = [];
    while (node && node !== endRef.current) {
      nodes.push(node);
      node = node.nextSibling;
    }
    scopeRef.current = nodes;
  }, [
    children,
    parentScope
  ]);
  if ($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parentScope) && !$9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef))
    $9bf71ea28793e738$export$d06fae2ee68b101e.addTreeNode(scopeRef, parentScope);
  let node1 = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);
  node1.contain = contain;
  $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain);
  $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain);
  $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus);
  (0, import_utils.useLayoutEffect)(() => {
    if (scopeRef && (parentScope || parentScope == null))
      return () => {
        if ((scopeRef === $9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope(scopeRef, $9bf71ea28793e738$var$activeScope)) && (!parentScope || $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parentScope)))
          $9bf71ea28793e738$var$activeScope = parentScope;
        $9bf71ea28793e738$export$d06fae2ee68b101e.removeTreeNode(scopeRef);
      };
  }, [
    scopeRef,
    parentScope
  ]);
  let focusManager = $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef);
  return /* @__PURE__ */ preact_default.createElement($9bf71ea28793e738$var$FocusContext.Provider, {
    value: {
      scopeRef,
      focusManager
    }
  }, /* @__PURE__ */ preact_default.createElement("span", {
    "data-focus-scope-start": true,
    hidden: true,
    ref: startRef
  }), children, /* @__PURE__ */ preact_default.createElement("span", {
    "data-focus-scope-end": true,
    hidden: true,
    ref: endRef
  }));
}
function $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef) {
  return {
    focusNext(opts = {}) {
      let scope = scopeRef.current;
      let { from, tabbable, wrap, accept } = opts;
      let node = from || document.activeElement;
      let sentinel = scope[0].previousElementSibling;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {
        tabbable,
        accept
      }, scope);
      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;
      let nextNode = walker.nextNode();
      if (!nextNode && wrap) {
        walker.currentNode = sentinel;
        nextNode = walker.nextNode();
      }
      if (nextNode)
        $9bf71ea28793e738$var$focusElement(nextNode, true);
      return nextNode;
    },
    focusPrevious(opts = {}) {
      let scope = scopeRef.current;
      let { from, tabbable, wrap, accept } = opts;
      let node = from || document.activeElement;
      let sentinel = scope[scope.length - 1].nextElementSibling;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {
        tabbable,
        accept
      }, scope);
      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;
      let previousNode = walker.previousNode();
      if (!previousNode && wrap) {
        walker.currentNode = sentinel;
        previousNode = walker.previousNode();
      }
      if (previousNode)
        $9bf71ea28793e738$var$focusElement(previousNode, true);
      return previousNode;
    },
    focusFirst(opts = {}) {
      let scope = scopeRef.current;
      let { tabbable, accept } = opts;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {
        tabbable,
        accept
      }, scope);
      walker.currentNode = scope[0].previousElementSibling;
      let nextNode = walker.nextNode();
      if (nextNode)
        $9bf71ea28793e738$var$focusElement(nextNode, true);
      return nextNode;
    },
    focusLast(opts = {}) {
      let scope = scopeRef.current;
      let { tabbable, accept } = opts;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {
        tabbable,
        accept
      }, scope);
      walker.currentNode = scope[scope.length - 1].nextElementSibling;
      let previousNode = walker.previousNode();
      if (previousNode)
        $9bf71ea28793e738$var$focusElement(previousNode, true);
      return previousNode;
    }
  };
}
var $9bf71ea28793e738$var$focusableElements = [
  "input:not([disabled]):not([type=hidden])",
  "select:not([disabled])",
  "textarea:not([disabled])",
  "button:not([disabled])",
  "a[href]",
  "area[href]",
  "summary",
  "iframe",
  "object",
  "embed",
  "audio[controls]",
  "video[controls]",
  "[contenteditable]"
];
var $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(":not([hidden]),") + ",[tabindex]:not([disabled]):not([hidden])";
$9bf71ea28793e738$var$focusableElements.push('[tabindex]:not([tabindex="-1"]):not([disabled])');
var $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(':not([hidden]):not([tabindex="-1"]),');
function $9bf71ea28793e738$var$getScopeRoot(scope) {
  return scope[0].parentElement;
}
function $9bf71ea28793e738$var$shouldContainFocus(scopeRef) {
  let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);
  while (scope && scope.scopeRef !== scopeRef) {
    if (scope.contain)
      return false;
    scope = scope.parent;
  }
  return true;
}
function $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain) {
  let focusedNode = (0, preact_exports.useRef)();
  let raf = (0, preact_exports.useRef)(null);
  (0, import_utils.useLayoutEffect)(() => {
    let scope1 = scopeRef.current;
    if (!contain) {
      if (raf.current) {
        cancelAnimationFrame(raf.current);
        raf.current = null;
      }
      return;
    }
    let onKeyDown = (e) => {
      if (e.key !== "Tab" || e.altKey || e.ctrlKey || e.metaKey || !$9bf71ea28793e738$var$shouldContainFocus(scopeRef))
        return;
      let focusedElement = document.activeElement;
      let scope = scopeRef.current;
      if (!$9bf71ea28793e738$var$isElementInScope(focusedElement, scope))
        return;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {
        tabbable: true
      }, scope);
      walker.currentNode = focusedElement;
      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
      if (!nextElement) {
        walker.currentNode = e.shiftKey ? scope[scope.length - 1].nextElementSibling : scope[0].previousElementSibling;
        nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
      }
      e.preventDefault();
      if (nextElement)
        $9bf71ea28793e738$var$focusElement(nextElement, true);
    };
    let onFocus = (e) => {
      if (!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) {
        $9bf71ea28793e738$var$activeScope = scopeRef;
        focusedNode.current = e.target;
      } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope(e.target, scopeRef)) {
        if (focusedNode.current)
          focusedNode.current.focus();
        else if ($9bf71ea28793e738$var$activeScope)
          $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);
      } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef))
        focusedNode.current = e.target;
    };
    let onBlur = (e) => {
      raf.current = requestAnimationFrame(() => {
        if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope(document.activeElement, scopeRef)) {
          $9bf71ea28793e738$var$activeScope = scopeRef;
          if (document.body.contains(e.target)) {
            focusedNode.current = e.target;
            focusedNode.current.focus();
          } else if ($9bf71ea28793e738$var$activeScope)
            $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);
        }
      });
    };
    document.addEventListener("keydown", onKeyDown, false);
    document.addEventListener("focusin", onFocus, false);
    scope1.forEach(
      (element) => element.addEventListener("focusin", onFocus, false)
    );
    scope1.forEach(
      (element) => element.addEventListener("focusout", onBlur, false)
    );
    return () => {
      document.removeEventListener("keydown", onKeyDown, false);
      document.removeEventListener("focusin", onFocus, false);
      scope1.forEach(
        (element) => element.removeEventListener("focusin", onFocus, false)
      );
      scope1.forEach(
        (element) => element.removeEventListener("focusout", onBlur, false)
      );
    };
  }, [
    scopeRef,
    contain
  ]);
  (0, preact_exports.useEffect)(() => {
    return () => {
      if (raf.current)
        cancelAnimationFrame(raf.current);
    };
  }, [
    raf
  ]);
}
function $9bf71ea28793e738$var$isElementInAnyScope(element) {
  return $9bf71ea28793e738$var$isElementInChildScope(element);
}
function $9bf71ea28793e738$var$isElementInScope(element, scope) {
  return scope.some(
    (node) => node.contains(element)
  );
}
function $9bf71ea28793e738$var$isElementInChildScope(element, scope = null) {
  for (let { scopeRef: s } of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope))) {
    if ($9bf71ea28793e738$var$isElementInScope(element, s.current))
      return true;
  }
  return false;
}
function $9bf71ea28793e738$var$isAncestorScope(ancestor, scope) {
  var ref;
  let parent = (ref = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope)) === null || ref === void 0 ? void 0 : ref.parent;
  while (parent) {
    if (parent.scopeRef === ancestor)
      return true;
    parent = parent.parent;
  }
  return false;
}
function $9bf71ea28793e738$var$focusElement(element, scroll = false) {
  if (element != null && !scroll)
    try {
      $6a99195332edec8b$export$80f3e147d781571c(element);
    } catch (err) {
    }
  else if (element != null)
    try {
      element.focus();
    } catch (err1) {
    }
}
function $9bf71ea28793e738$var$focusFirstInScope(scope, tabbable = true) {
  let sentinel = scope[0].previousElementSibling;
  let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {
    tabbable
  }, scope);
  walker.currentNode = sentinel;
  let nextNode = walker.nextNode();
  if (tabbable && !nextNode) {
    walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {
      tabbable: false
    }, scope);
    walker.currentNode = sentinel;
    nextNode = walker.nextNode();
  }
  $9bf71ea28793e738$var$focusElement(nextNode);
}
function $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus) {
  const autoFocusRef = preact_default.useRef(autoFocus);
  (0, preact_exports.useEffect)(() => {
    if (autoFocusRef.current) {
      $9bf71ea28793e738$var$activeScope = scopeRef;
      if (!$9bf71ea28793e738$var$isElementInScope(document.activeElement, $9bf71ea28793e738$var$activeScope.current))
        $9bf71ea28793e738$var$focusFirstInScope(scopeRef.current);
    }
    autoFocusRef.current = false;
  }, [
    scopeRef
  ]);
}
function $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain) {
  const nodeToRestoreRef = (0, preact_exports.useRef)(typeof document !== "undefined" ? document.activeElement : null);
  (0, import_utils.useLayoutEffect)(() => {
    let scope = scopeRef.current;
    if (!restoreFocus || contain)
      return;
    let onFocus = () => {
      if (!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef))
        $9bf71ea28793e738$var$activeScope = scopeRef;
    };
    document.addEventListener("focusin", onFocus, false);
    scope.forEach(
      (element) => element.addEventListener("focusin", onFocus, false)
    );
    return () => {
      document.removeEventListener("focusin", onFocus, false);
      scope.forEach(
        (element) => element.removeEventListener("focusin", onFocus, false)
      );
    };
  }, [
    scopeRef,
    contain
  ]);
  (0, import_utils.useLayoutEffect)(() => {
    $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore = nodeToRestoreRef.current;
    if (!restoreFocus)
      return;
    let onKeyDown = (e) => {
      if (e.key !== "Tab" || e.altKey || e.ctrlKey || e.metaKey)
        return;
      let focusedElement = document.activeElement;
      if (!$9bf71ea28793e738$var$isElementInScope(focusedElement, scopeRef.current))
        return;
      let nodeToRestore = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(document.body, {
        tabbable: true
      });
      walker.currentNode = focusedElement;
      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
      if (!document.body.contains(nodeToRestore) || nodeToRestore === document.body) {
        nodeToRestore = null;
        $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore = null;
      }
      if ((!nextElement || !$9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current)) && nodeToRestore) {
        walker.currentNode = nodeToRestore;
        do
          nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
        while ($9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current));
        e.preventDefault();
        e.stopPropagation();
        if (nextElement)
          $9bf71ea28793e738$var$focusElement(nextElement, true);
        else if (!$9bf71ea28793e738$var$isElementInAnyScope(nodeToRestore))
          focusedElement.blur();
        else
          $9bf71ea28793e738$var$focusElement(nodeToRestore, true);
      }
    };
    if (!contain)
      document.addEventListener("keydown", onKeyDown, true);
    return () => {
      if (!contain)
        document.removeEventListener("keydown", onKeyDown, true);
      let nodeToRestore = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore;
      if (restoreFocus && nodeToRestore && ($9bf71ea28793e738$var$isElementInScope(document.activeElement, scopeRef.current) || document.activeElement === document.body && $9bf71ea28793e738$var$activeScope === scopeRef)) {
        let clonedTree = $9bf71ea28793e738$export$d06fae2ee68b101e.clone();
        requestAnimationFrame(() => {
          if (document.activeElement === document.body) {
            let treeNode = clonedTree.getTreeNode(scopeRef);
            while (treeNode) {
              if (treeNode.nodeToRestore && document.body.contains(treeNode.nodeToRestore)) {
                $9bf71ea28793e738$var$focusElement(treeNode.nodeToRestore);
                return;
              }
              treeNode = treeNode.parent;
            }
          }
        });
      }
    };
  }, [
    scopeRef,
    restoreFocus,
    contain
  ]);
}
function $9bf71ea28793e738$export$2d6ec8fc375ceafa(root3, opts, scope) {
  let selector = (opts === null || opts === void 0 ? void 0 : opts.tabbable) ? $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR : $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR;
  let walker = document.createTreeWalker(root3, NodeFilter.SHOW_ELEMENT, {
    acceptNode(node) {
      var ref;
      if (opts === null || opts === void 0 ? void 0 : (ref = opts.from) === null || ref === void 0 ? void 0 : ref.contains(node))
        return NodeFilter.FILTER_REJECT;
      if (node.matches(selector) && $645f2e67b85a24c9$export$e989c0fffaa6b27a(node) && (!scope || $9bf71ea28793e738$var$isElementInScope(node, scope)) && (!(opts === null || opts === void 0 ? void 0 : opts.accept) || opts.accept(node)))
        return NodeFilter.FILTER_ACCEPT;
      return NodeFilter.FILTER_SKIP;
    }
  });
  if (opts === null || opts === void 0 ? void 0 : opts.from)
    walker.currentNode = opts.from;
  return walker;
}
var $9bf71ea28793e738$var$Tree = class {
  get size() {
    return this.fastMap.size;
  }
  getTreeNode(data) {
    return this.fastMap.get(data);
  }
  addTreeNode(scopeRef, parent, nodeToRestore) {
    let parentNode = this.fastMap.get(parent !== null && parent !== void 0 ? parent : null);
    let node = new $9bf71ea28793e738$var$TreeNode({
      scopeRef
    });
    parentNode.addChild(node);
    node.parent = parentNode;
    this.fastMap.set(scopeRef, node);
    if (nodeToRestore)
      node.nodeToRestore = nodeToRestore;
  }
  removeTreeNode(scopeRef) {
    if (scopeRef === null)
      return;
    let node = this.fastMap.get(scopeRef);
    let parentNode = node.parent;
    for (let current of this.traverse())
      if (current !== node && node.nodeToRestore && current.nodeToRestore && node.scopeRef.current && $9bf71ea28793e738$var$isElementInScope(current.nodeToRestore, node.scopeRef.current))
        current.nodeToRestore = node.nodeToRestore;
    let children = node.children;
    parentNode.removeChild(node);
    if (children.length > 0)
      children.forEach(
        (child) => parentNode.addChild(child)
      );
    this.fastMap.delete(node.scopeRef);
  }
  *traverse(node = this.root) {
    if (node.scopeRef != null)
      yield node;
    if (node.children.length > 0)
      for (let child of node.children)
        yield* this.traverse(child);
  }
  clone() {
    let newTree = new $9bf71ea28793e738$var$Tree();
    for (let node of this.traverse())
      newTree.addTreeNode(node.scopeRef, node.parent.scopeRef, node.nodeToRestore);
    return newTree;
  }
  constructor() {
    this.fastMap = /* @__PURE__ */ new Map();
    this.root = new $9bf71ea28793e738$var$TreeNode({
      scopeRef: null
    });
    this.fastMap.set(null, this.root);
  }
};
var $9bf71ea28793e738$var$TreeNode = class {
  addChild(node) {
    this.children.push(node);
    node.parent = this;
  }
  removeChild(node) {
    this.children.splice(this.children.indexOf(node), 1);
    node.parent = void 0;
  }
  constructor(props) {
    this.children = [];
    this.contain = false;
    this.scopeRef = props.scopeRef;
  }
};
var $9bf71ea28793e738$export$d06fae2ee68b101e = new $9bf71ea28793e738$var$Tree();
function $f7dceffc5ad7768b$export$4e328f61c538687f(props = {}) {
  let { autoFocus = false, isTextInput, within } = props;
  let state = (0, preact_exports.useRef)({
    isFocused: false,
    isFocusVisible: autoFocus || (0, import_interactions.isFocusVisible)()
  });
  let [isFocused1, setFocused] = (0, preact_exports.useState)(false);
  let [isFocusVisibleState, setFocusVisible] = (0, preact_exports.useState)(
    () => state.current.isFocused && state.current.isFocusVisible
  );
  let updateState = (0, preact_exports.useCallback)(
    () => setFocusVisible(state.current.isFocused && state.current.isFocusVisible),
    []
  );
  let onFocusChange = (0, preact_exports.useCallback)((isFocused) => {
    state.current.isFocused = isFocused;
    setFocused(isFocused);
    updateState();
  }, [
    updateState
  ]);
  (0, import_interactions.useFocusVisibleListener)((isFocusVisible) => {
    state.current.isFocusVisible = isFocusVisible;
    updateState();
  }, [], {
    isTextInput
  });
  let { focusProps } = (0, import_interactions.useFocus)({
    isDisabled: within,
    onFocusChange
  });
  let { focusWithinProps } = (0, import_interactions.useFocusWithin)({
    isDisabled: !within,
    onFocusWithinChange: onFocusChange
  });
  return {
    isFocused: isFocused1,
    isFocusVisible: state.current.isFocused && isFocusVisibleState,
    focusProps: within ? focusWithinProps : focusProps
  };
}
function $907718708eab68af$export$1a38b4ad7f578e1d(props) {
  let { children, focusClass, focusRingClass } = props;
  let { isFocused, isFocusVisible, focusProps } = $f7dceffc5ad7768b$export$4e328f61c538687f(props);
  let child = preact_default.Children.only(children);
  return /* @__PURE__ */ preact_default.cloneElement(child, (0, import_utils.mergeProps)(child.props, __spreadProps(__spreadValues({}, focusProps), {
    className: (0, import_clsx.default)({
      [focusClass || ""]: isFocused,
      [focusRingClass || ""]: isFocusVisible
    })
  })));
}
var $e6afbd83fe6ebbd2$var$FocusableContext = /* @__PURE__ */ preact_default.createContext(null);
function $e6afbd83fe6ebbd2$var$useFocusableContext(ref) {
  let context = (0, preact_exports.useContext)($e6afbd83fe6ebbd2$var$FocusableContext) || {};
  (0, import_utils.useSyncRef)(context, ref);
  let _a3 = context, { ref: _14 } = _a3, otherProps = __objRest(_a3, ["ref"]);
  return otherProps;
}
function $e6afbd83fe6ebbd2$export$4c014de7c8940b4c(props, domRef) {
  let { focusProps } = (0, import_interactions.useFocus)(props);
  let { keyboardProps } = (0, import_interactions.useKeyboard)(props);
  let interactions = (0, import_utils.mergeProps)(focusProps, keyboardProps);
  let domProps = $e6afbd83fe6ebbd2$var$useFocusableContext(domRef);
  let interactionProps = props.isDisabled ? {} : domProps;
  let autoFocusRef = (0, preact_exports.useRef)(props.autoFocus);
  (0, preact_exports.useEffect)(() => {
    if (autoFocusRef.current && domRef.current)
      $6a99195332edec8b$export$80f3e147d781571c(domRef.current);
    autoFocusRef.current = false;
  }, [
    domRef
  ]);
  return {
    focusableProps: (0, import_utils.mergeProps)(__spreadProps(__spreadValues({}, interactions), {
      tabIndex: props.excludeFromTabOrder && !props.isDisabled ? -1 : void 0
    }), interactionProps)
  };
}

// ../../node_modules/@react-spectrum/button/dist/module.js
var import_utils6 = __toESM(require_main3());
init_preact();

// ../../node_modules/@react-spectrum/text/dist/module.js
var import_utils2 = __toESM(require_main3());
init_preact();
var import_utils3 = __toESM(require_main9());
function $cd449e8defa988f0$var$Text(props, ref) {
  props = (0, import_utils3.useSlotProps)(props, "text");
  let _a3 = props, { children } = _a3, otherProps = __objRest(_a3, ["children"]);
  let { styleProps } = (0, import_utils3.useStyleProps)(otherProps);
  let domRef = (0, import_utils3.useDOMRef)(ref);
  return /* @__PURE__ */ preact_default.createElement("span", __spreadProps(__spreadValues(__spreadValues({}, (0, import_utils2.filterDOMProps)(otherProps)), styleProps), {
    ref: domRef
  }), children);
}
var $cd449e8defa988f0$export$5f1af8db9871e1d6 = /* @__PURE__ */ (0, preact_exports.forwardRef)($cd449e8defa988f0$var$Text);

// ../../node_modules/@react-aria/button/dist/module.js
var import_utils4 = __toESM(require_main3());
var import_interactions2 = __toESM(require_main10());
function $701a24aa0da5b062$export$ea18c227d4417cc3(props, ref) {
  let {
    elementType = "button",
    isDisabled,
    onPress,
    onPressStart,
    onPressEnd,
    onPressChange,
    preventFocusOnPress,
    allowFocusWhenDisabled,
    onClick: deprecatedOnClick,
    href,
    target,
    rel,
    type = "button"
  } = props;
  let additionalProps;
  if (elementType === "button")
    additionalProps = {
      type,
      disabled: isDisabled
    };
  else
    additionalProps = {
      role: "button",
      tabIndex: isDisabled ? void 0 : 0,
      href: elementType === "a" && isDisabled ? void 0 : href,
      target: elementType === "a" ? target : void 0,
      type: elementType === "input" ? type : void 0,
      disabled: elementType === "input" ? isDisabled : void 0,
      "aria-disabled": !isDisabled || elementType === "input" ? void 0 : isDisabled,
      rel: elementType === "a" ? rel : void 0
    };
  let { pressProps, isPressed } = (0, import_interactions2.usePress)({
    onPressStart,
    onPressEnd,
    onPressChange,
    onPress,
    isDisabled,
    preventFocusOnPress,
    ref
  });
  let { focusableProps } = $e6afbd83fe6ebbd2$export$4c014de7c8940b4c(props, ref);
  if (allowFocusWhenDisabled)
    focusableProps.tabIndex = isDisabled ? -1 : focusableProps.tabIndex;
  let buttonProps = (0, import_utils4.mergeProps)(focusableProps, pressProps, (0, import_utils4.filterDOMProps)(props, {
    labelable: true
  }));
  return {
    isPressed,
    buttonProps: (0, import_utils4.mergeProps)(additionalProps, buttonProps, {
      "aria-haspopup": props["aria-haspopup"],
      "aria-expanded": props["aria-expanded"],
      "aria-controls": props["aria-controls"],
      "aria-pressed": props["aria-pressed"],
      onClick: (e) => {
        if (deprecatedOnClick) {
          deprecatedOnClick(e);
          console.warn("onClick is deprecated, please use onPress");
        }
      }
    })
  };
}

// ../../node_modules/@react-spectrum/button/dist/module.js
var import_interactions3 = __toESM(require_main10());
var import_provider = __toESM(require_main13());
var import_CornerTriangle = __toESM(require_CornerTriangle2());
var import_CrossSmall = __toESM(require_CrossSmall2());
function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $086e93d2352a4536$exports = {};
$parcel$export($086e93d2352a4536$exports, "spectrum-Button", () => $086e93d2352a4536$export$1db4cca5b4ade39a, (v) => $086e93d2352a4536$export$1db4cca5b4ade39a = v);
$parcel$export($086e93d2352a4536$exports, "spectrum-ActionButton", () => $086e93d2352a4536$export$53da69f51b770d3, (v) => $086e93d2352a4536$export$53da69f51b770d3 = v);
$parcel$export($086e93d2352a4536$exports, "spectrum-LogicButton", () => $086e93d2352a4536$export$36ae67a131730482, (v) => $086e93d2352a4536$export$36ae67a131730482 = v);
$parcel$export($086e93d2352a4536$exports, "spectrum-FieldButton", () => $086e93d2352a4536$export$a024c99ecf6b5741, (v) => $086e93d2352a4536$export$a024c99ecf6b5741 = v);
$parcel$export($086e93d2352a4536$exports, "spectrum-ClearButton", () => $086e93d2352a4536$export$b752ce409e5660c, (v) => $086e93d2352a4536$export$b752ce409e5660c = v);
$parcel$export($086e93d2352a4536$exports, "focus-ring", () => $086e93d2352a4536$export$f39a09f249340e2a, (v) => $086e93d2352a4536$export$f39a09f249340e2a = v);
$parcel$export($086e93d2352a4536$exports, "spectrum-Icon", () => $086e93d2352a4536$export$d374b04f30360026, (v) => $086e93d2352a4536$export$d374b04f30360026 = v);
$parcel$export($086e93d2352a4536$exports, "spectrum-ActionButton--emphasized", () => $086e93d2352a4536$export$5aabb61a966e266f, (v) => $086e93d2352a4536$export$5aabb61a966e266f = v);
$parcel$export($086e93d2352a4536$exports, "spectrum-ActionButton--staticColor", () => $086e93d2352a4536$export$29b7b5d6a5a497c5, (v) => $086e93d2352a4536$export$29b7b5d6a5a497c5 = v);
$parcel$export($086e93d2352a4536$exports, "is-hovered", () => $086e93d2352a4536$export$b8813cd5d7824ce7, (v) => $086e93d2352a4536$export$b8813cd5d7824ce7 = v);
$parcel$export($086e93d2352a4536$exports, "spectrum-Button-label", () => $086e93d2352a4536$export$c081ba562e204942, (v) => $086e93d2352a4536$export$c081ba562e204942 = v);
$parcel$export($086e93d2352a4536$exports, "spectrum-ActionButton-label", () => $086e93d2352a4536$export$ebb4635c66bacdb9, (v) => $086e93d2352a4536$export$ebb4635c66bacdb9 = v);
$parcel$export($086e93d2352a4536$exports, "spectrum-ActionButton-hold", () => $086e93d2352a4536$export$4a4f01c443eff992, (v) => $086e93d2352a4536$export$4a4f01c443eff992 = v);
$parcel$export($086e93d2352a4536$exports, "spectrum-ActionButton--quiet", () => $086e93d2352a4536$export$40e1f009544bacf3, (v) => $086e93d2352a4536$export$40e1f009544bacf3 = v);
$parcel$export($086e93d2352a4536$exports, "is-disabled", () => $086e93d2352a4536$export$d35bc1e505d1ebbf, (v) => $086e93d2352a4536$export$d35bc1e505d1ebbf = v);
$parcel$export($086e93d2352a4536$exports, "is-open", () => $086e93d2352a4536$export$a9781837241c946d, (v) => $086e93d2352a4536$export$a9781837241c946d = v);
$parcel$export($086e93d2352a4536$exports, "spectrum-FieldButton--quiet", () => $086e93d2352a4536$export$5ca7b274e4fff9fc, (v) => $086e93d2352a4536$export$5ca7b274e4fff9fc = v);
$parcel$export($086e93d2352a4536$exports, "spectrum-ClearButton--overBackground", () => $086e93d2352a4536$export$116f2fccf941d34d, (v) => $086e93d2352a4536$export$116f2fccf941d34d = v);
$parcel$export($086e93d2352a4536$exports, "spectrum-ClearButton--small", () => $086e93d2352a4536$export$49280ffa5236ba8b, (v) => $086e93d2352a4536$export$49280ffa5236ba8b = v);
$parcel$export($086e93d2352a4536$exports, "is-focused", () => $086e93d2352a4536$export$e7dc768d35940237, (v) => $086e93d2352a4536$export$e7dc768d35940237 = v);
$parcel$export($086e93d2352a4536$exports, "is-active", () => $086e93d2352a4536$export$20fd0f7cd4e6112f, (v) => $086e93d2352a4536$export$20fd0f7cd4e6112f = v);
$parcel$export($086e93d2352a4536$exports, "spectrum-Button--cta", () => $086e93d2352a4536$export$b818fdf0052a2cab, (v) => $086e93d2352a4536$export$b818fdf0052a2cab = v);
$parcel$export($086e93d2352a4536$exports, "spectrum-Button--primary", () => $086e93d2352a4536$export$c1c3511f5e96e926, (v) => $086e93d2352a4536$export$c1c3511f5e96e926 = v);
$parcel$export($086e93d2352a4536$exports, "spectrum-Button--secondary", () => $086e93d2352a4536$export$4f1b75526afd8ff3, (v) => $086e93d2352a4536$export$4f1b75526afd8ff3 = v);
$parcel$export($086e93d2352a4536$exports, "spectrum-Button--warning", () => $086e93d2352a4536$export$6f97cef817ff1cac, (v) => $086e93d2352a4536$export$6f97cef817ff1cac = v);
$parcel$export($086e93d2352a4536$exports, "spectrum-Button--overBackground", () => $086e93d2352a4536$export$5cda1128f9112d2e, (v) => $086e93d2352a4536$export$5cda1128f9112d2e = v);
$parcel$export($086e93d2352a4536$exports, "spectrum-Button--quiet", () => $086e93d2352a4536$export$25f049c049371040, (v) => $086e93d2352a4536$export$25f049c049371040 = v);
$parcel$export($086e93d2352a4536$exports, "is-selected", () => $086e93d2352a4536$export$1e0fb04f31d3c22a, (v) => $086e93d2352a4536$export$1e0fb04f31d3c22a = v);
$parcel$export($086e93d2352a4536$exports, "spectrum-ActionButton--staticWhite", () => $086e93d2352a4536$export$ccc536e1adbdc059, (v) => $086e93d2352a4536$export$ccc536e1adbdc059 = v);
$parcel$export($086e93d2352a4536$exports, "spectrum-ActionButton--staticBlack", () => $086e93d2352a4536$export$8f7c9db66978d20f, (v) => $086e93d2352a4536$export$8f7c9db66978d20f = v);
$parcel$export($086e93d2352a4536$exports, "spectrum-LogicButton--and", () => $086e93d2352a4536$export$e52daab43a62c528, (v) => $086e93d2352a4536$export$e52daab43a62c528 = v);
$parcel$export($086e93d2352a4536$exports, "spectrum-LogicButton--or", () => $086e93d2352a4536$export$da76be6126aaa633, (v) => $086e93d2352a4536$export$da76be6126aaa633 = v);
$parcel$export($086e93d2352a4536$exports, "is-placeholder", () => $086e93d2352a4536$export$e5b2f5233e4e5194, (v) => $086e93d2352a4536$export$e5b2f5233e4e5194 = v);
$parcel$export($086e93d2352a4536$exports, "spectrum-FieldButton--invalid", () => $086e93d2352a4536$export$c9f503f672e8a3c1, (v) => $086e93d2352a4536$export$c9f503f672e8a3c1 = v);
var $086e93d2352a4536$export$1db4cca5b4ade39a;
var $086e93d2352a4536$export$53da69f51b770d3;
var $086e93d2352a4536$export$36ae67a131730482;
var $086e93d2352a4536$export$a024c99ecf6b5741;
var $086e93d2352a4536$export$b752ce409e5660c;
var $086e93d2352a4536$export$f39a09f249340e2a;
var $086e93d2352a4536$export$d374b04f30360026;
var $086e93d2352a4536$export$5aabb61a966e266f;
var $086e93d2352a4536$export$29b7b5d6a5a497c5;
var $086e93d2352a4536$export$b8813cd5d7824ce7;
var $086e93d2352a4536$export$c081ba562e204942;
var $086e93d2352a4536$export$ebb4635c66bacdb9;
var $086e93d2352a4536$export$4a4f01c443eff992;
var $086e93d2352a4536$export$40e1f009544bacf3;
var $086e93d2352a4536$export$d35bc1e505d1ebbf;
var $086e93d2352a4536$export$a9781837241c946d;
var $086e93d2352a4536$export$5ca7b274e4fff9fc;
var $086e93d2352a4536$export$116f2fccf941d34d;
var $086e93d2352a4536$export$49280ffa5236ba8b;
var $086e93d2352a4536$export$e7dc768d35940237;
var $086e93d2352a4536$export$20fd0f7cd4e6112f;
var $086e93d2352a4536$export$b818fdf0052a2cab;
var $086e93d2352a4536$export$c1c3511f5e96e926;
var $086e93d2352a4536$export$4f1b75526afd8ff3;
var $086e93d2352a4536$export$6f97cef817ff1cac;
var $086e93d2352a4536$export$5cda1128f9112d2e;
var $086e93d2352a4536$export$25f049c049371040;
var $086e93d2352a4536$export$1e0fb04f31d3c22a;
var $086e93d2352a4536$export$ccc536e1adbdc059;
var $086e93d2352a4536$export$8f7c9db66978d20f;
var $086e93d2352a4536$export$e52daab43a62c528;
var $086e93d2352a4536$export$da76be6126aaa633;
var $086e93d2352a4536$export$e5b2f5233e4e5194;
var $086e93d2352a4536$export$c9f503f672e8a3c1;
$086e93d2352a4536$export$1db4cca5b4ade39a = "spectrum-Button_e2d99e";
$086e93d2352a4536$export$53da69f51b770d3 = "spectrum-ActionButton_e2d99e";
$086e93d2352a4536$export$36ae67a131730482 = "spectrum-LogicButton_e2d99e";
$086e93d2352a4536$export$a024c99ecf6b5741 = "spectrum-FieldButton_e2d99e";
$086e93d2352a4536$export$b752ce409e5660c = "spectrum-ClearButton_e2d99e";
$086e93d2352a4536$export$f39a09f249340e2a = "focus-ring_e2d99e";
$086e93d2352a4536$export$d374b04f30360026 = "spectrum-Icon_e2d99e";
$086e93d2352a4536$export$5aabb61a966e266f = "spectrum-ActionButton--emphasized_e2d99e";
$086e93d2352a4536$export$29b7b5d6a5a497c5 = "spectrum-ActionButton--staticColor_e2d99e";
$086e93d2352a4536$export$b8813cd5d7824ce7 = "is-hovered_e2d99e";
$086e93d2352a4536$export$c081ba562e204942 = "spectrum-Button-label_e2d99e";
$086e93d2352a4536$export$ebb4635c66bacdb9 = "spectrum-ActionButton-label_e2d99e";
$086e93d2352a4536$export$4a4f01c443eff992 = "spectrum-ActionButton-hold_e2d99e";
$086e93d2352a4536$export$40e1f009544bacf3 = "spectrum-ActionButton--quiet_e2d99e";
$086e93d2352a4536$export$d35bc1e505d1ebbf = "is-disabled_e2d99e";
$086e93d2352a4536$export$a9781837241c946d = "is-open_e2d99e";
$086e93d2352a4536$export$5ca7b274e4fff9fc = "spectrum-FieldButton--quiet_e2d99e";
$086e93d2352a4536$export$116f2fccf941d34d = "spectrum-ClearButton--overBackground_e2d99e";
$086e93d2352a4536$export$49280ffa5236ba8b = "spectrum-ClearButton--small_e2d99e";
$086e93d2352a4536$export$e7dc768d35940237 = "is-focused_e2d99e";
$086e93d2352a4536$export$20fd0f7cd4e6112f = "is-active_e2d99e";
$086e93d2352a4536$export$b818fdf0052a2cab = "spectrum-Button--cta_e2d99e";
$086e93d2352a4536$export$c1c3511f5e96e926 = "spectrum-Button--primary_e2d99e";
$086e93d2352a4536$export$4f1b75526afd8ff3 = "spectrum-Button--secondary_e2d99e";
$086e93d2352a4536$export$6f97cef817ff1cac = "spectrum-Button--warning_e2d99e";
$086e93d2352a4536$export$5cda1128f9112d2e = "spectrum-Button--overBackground_e2d99e";
$086e93d2352a4536$export$25f049c049371040 = "spectrum-Button--quiet_e2d99e";
$086e93d2352a4536$export$1e0fb04f31d3c22a = "is-selected_e2d99e";
$086e93d2352a4536$export$ccc536e1adbdc059 = "spectrum-ActionButton--staticWhite_e2d99e";
$086e93d2352a4536$export$8f7c9db66978d20f = "spectrum-ActionButton--staticBlack_e2d99e";
$086e93d2352a4536$export$e52daab43a62c528 = "spectrum-LogicButton--and_e2d99e";
$086e93d2352a4536$export$da76be6126aaa633 = "spectrum-LogicButton--or_e2d99e";
$086e93d2352a4536$export$e5b2f5233e4e5194 = "is-placeholder_e2d99e";
$086e93d2352a4536$export$c9f503f672e8a3c1 = "spectrum-FieldButton--invalid_e2d99e";
function $042ad0b3a4a55b33$var$ActionButton(props, ref) {
  props = (0, import_provider.useProviderProps)(props);
  props = (0, import_utils5.useSlotProps)(props, "actionButton");
  let _a3 = props, { isQuiet, isDisabled, staticColor, children, autoFocus, holdAffordance } = _a3, otherProps = __objRest(_a3, ["isQuiet", "isDisabled", "staticColor", "children", "autoFocus", "holdAffordance"]);
  let domRef = (0, import_utils5.useFocusableRef)(ref);
  let { buttonProps, isPressed } = $701a24aa0da5b062$export$ea18c227d4417cc3(props, domRef);
  let { hoverProps, isHovered } = (0, import_interactions3.useHover)({
    isDisabled
  });
  let { styleProps } = (0, import_utils5.useStyleProps)(otherProps);
  let isTextOnly = preact_default.Children.toArray(props.children).every(
    (c) => !/* @__PURE__ */ preact_default.isValidElement(c)
  );
  return /* @__PURE__ */ preact_default.createElement($907718708eab68af$export$1a38b4ad7f578e1d, {
    focusRingClass: (0, import_utils5.classNames)(/* @__PURE__ */ $parcel$interopDefault($086e93d2352a4536$exports), "focus-ring"),
    autoFocus
  }, /* @__PURE__ */ preact_default.createElement("button", __spreadProps(__spreadValues(__spreadValues({}, styleProps), (0, import_utils6.mergeProps)(buttonProps, hoverProps)), {
    ref: domRef,
    className: (0, import_utils5.classNames)(/* @__PURE__ */ $parcel$interopDefault($086e93d2352a4536$exports), "spectrum-ActionButton", {
      "spectrum-ActionButton--quiet": isQuiet,
      "spectrum-ActionButton--staticColor": !!staticColor,
      "spectrum-ActionButton--staticWhite": staticColor === "white",
      "spectrum-ActionButton--staticBlack": staticColor === "black",
      "is-active": isPressed,
      "is-disabled": isDisabled,
      "is-hovered": isHovered
    }, styleProps.className)
  }), holdAffordance && /* @__PURE__ */ preact_default.createElement(import_CornerTriangle.default, {
    UNSAFE_className: (0, import_utils5.classNames)(/* @__PURE__ */ $parcel$interopDefault($086e93d2352a4536$exports), "spectrum-ActionButton-hold")
  }), /* @__PURE__ */ preact_default.createElement(import_utils5.SlotProvider, {
    slots: {
      icon: {
        size: "S",
        UNSAFE_className: (0, import_utils5.classNames)(/* @__PURE__ */ $parcel$interopDefault($086e93d2352a4536$exports), "spectrum-Icon")
      },
      text: {
        UNSAFE_className: (0, import_utils5.classNames)(/* @__PURE__ */ $parcel$interopDefault($086e93d2352a4536$exports), "spectrum-ActionButton-label")
      }
    }
  }, typeof children === "string" || isTextOnly ? /* @__PURE__ */ preact_default.createElement($cd449e8defa988f0$export$5f1af8db9871e1d6, null, children) : children)));
}
var $042ad0b3a4a55b33$export$cfc7921d29ef7b80 = /* @__PURE__ */ preact_default.forwardRef($042ad0b3a4a55b33$var$ActionButton);
function $b43bd559b476d0c4$var$FieldButton(props, ref) {
  props = (0, import_utils5.useSlotProps)(props, "button");
  let _a3 = props, { isQuiet, isDisabled, validationState, children, autoFocus, isActive, focusRingClass } = _a3, otherProps = __objRest(_a3, ["isQuiet", "isDisabled", "validationState", "children", "autoFocus", "isActive", "focusRingClass"]);
  let domRef = (0, import_utils5.useFocusableRef)(ref);
  let { buttonProps, isPressed } = $701a24aa0da5b062$export$ea18c227d4417cc3(props, domRef);
  let { hoverProps, isHovered } = (0, import_interactions3.useHover)({
    isDisabled
  });
  let { styleProps } = (0, import_utils5.useStyleProps)(otherProps);
  return /* @__PURE__ */ preact_default.createElement($907718708eab68af$export$1a38b4ad7f578e1d, {
    focusRingClass: (0, import_utils5.classNames)(/* @__PURE__ */ $parcel$interopDefault($086e93d2352a4536$exports), "focus-ring", focusRingClass),
    autoFocus
  }, /* @__PURE__ */ preact_default.createElement("button", __spreadProps(__spreadValues({}, (0, import_utils6.mergeProps)(buttonProps, hoverProps)), {
    ref: domRef,
    className: (0, import_utils5.classNames)(/* @__PURE__ */ $parcel$interopDefault($086e93d2352a4536$exports), "spectrum-FieldButton", {
      "spectrum-FieldButton--quiet": isQuiet,
      "is-active": isActive || isPressed,
      "is-disabled": isDisabled,
      "spectrum-FieldButton--invalid": validationState === "invalid",
      "is-hovered": isHovered
    }, styleProps.className)
  }), /* @__PURE__ */ preact_default.createElement(import_utils5.SlotProvider, {
    slots: {
      icon: {
        size: "S",
        UNSAFE_className: (0, import_utils5.classNames)(/* @__PURE__ */ $parcel$interopDefault($086e93d2352a4536$exports), "spectrum-Icon")
      }
    }
  }, children)));
}
var $b43bd559b476d0c4$export$47dc48f595b075da = /* @__PURE__ */ preact_default.forwardRef($b43bd559b476d0c4$var$FieldButton);

// ../../node_modules/@react-spectrum/overlays/dist/module.js
var import_provider2 = __toESM(require_main13());
init_preact();
init_preact();
var import_Transition = __toESM(require_Transition());
var import_utils7 = __toESM(require_main9());
var import_utils8 = __toESM(require_main3());
var import_overlays = __toESM(require_main12());
function $parcel$interopDefault2(a) {
  return a && a.__esModule ? a.default : a;
}
function $parcel$export2(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $bc765a7a041310da$var$OPEN_STATES = {
  entering: false,
  entered: true
};
function $bc765a7a041310da$export$b847a40ee92eff38(props) {
  var child1;
  return /* @__PURE__ */ preact_default.createElement(
    import_Transition.default,
    __spreadValues({
      timeout: {
        enter: 0,
        exit: 350
      }
    }, props),
    (state) => preact_default.Children.map(
      props.children,
      (child) => child && /* @__PURE__ */ preact_default.cloneElement(child, {
        isOpen: !!$bc765a7a041310da$var$OPEN_STATES[state]
      })
    )
  );
}
function $70305dc5fb729c3b$var$Overlay(props, ref) {
  let { children, isOpen, container, onEnter, onEntering, onEntered, onExit, onExiting, onExited } = props;
  let [exited, setExited] = (0, preact_exports.useState)(!isOpen);
  let handleEntered = (0, preact_exports.useCallback)(() => {
    setExited(false);
    if (onEntered)
      onEntered();
  }, [
    onEntered
  ]);
  let handleExited = (0, preact_exports.useCallback)(() => {
    setExited(true);
    if (onExited)
      onExited();
  }, [
    onExited
  ]);
  let mountOverlay = isOpen || !exited;
  if (!mountOverlay)
    return null;
  let contents = /* @__PURE__ */ preact_default.createElement(import_provider2.Provider, {
    ref,
    UNSAFE_style: {
      background: "transparent",
      isolation: "isolate"
    }
  }, /* @__PURE__ */ preact_default.createElement($bc765a7a041310da$export$b847a40ee92eff38, {
    in: isOpen,
    appear: true,
    onExit,
    onExiting,
    onExited: handleExited,
    onEnter,
    onEntering,
    onEntered: handleEntered
  }, children));
  return /* @__PURE__ */ preact_default.createPortal(contents, container || document.body);
}
var $70305dc5fb729c3b$export$c6fdb837b070b4ff = /* @__PURE__ */ preact_default.forwardRef($70305dc5fb729c3b$var$Overlay);
var $853e19557ad8790f$exports = {};
$parcel$export2($853e19557ad8790f$exports, "spectrum-Popover", () => $853e19557ad8790f$export$a62dc1b6ab23a7bb, (v) => $853e19557ad8790f$export$a62dc1b6ab23a7bb = v);
$parcel$export2($853e19557ad8790f$exports, "react-spectrum-Popover", () => $853e19557ad8790f$export$884f6b5065bdc41a, (v) => $853e19557ad8790f$export$884f6b5065bdc41a = v);
$parcel$export2($853e19557ad8790f$exports, "spectrum-Dialog-content", () => $853e19557ad8790f$export$cb8eccd0f3639238, (v) => $853e19557ad8790f$export$cb8eccd0f3639238 = v);
$parcel$export2($853e19557ad8790f$exports, "spectrum-Modal-wrapper", () => $853e19557ad8790f$export$35bea187ff802494, (v) => $853e19557ad8790f$export$35bea187ff802494 = v);
$parcel$export2($853e19557ad8790f$exports, "react-spectrum-Modal-wrapper", () => $853e19557ad8790f$export$e088717c213c31d7, (v) => $853e19557ad8790f$export$e088717c213c31d7 = v);
$parcel$export2($853e19557ad8790f$exports, "spectrum-Modal", () => $853e19557ad8790f$export$4c0b1e44c3834c85, (v) => $853e19557ad8790f$export$4c0b1e44c3834c85 = v);
$parcel$export2($853e19557ad8790f$exports, "react-spectrum-Modal", () => $853e19557ad8790f$export$f8edeb62d7fed8c1, (v) => $853e19557ad8790f$export$f8edeb62d7fed8c1 = v);
$parcel$export2($853e19557ad8790f$exports, "spectrum-Tray", () => $853e19557ad8790f$export$ce0704cd084c4f0d, (v) => $853e19557ad8790f$export$ce0704cd084c4f0d = v);
$parcel$export2($853e19557ad8790f$exports, "react-spectrum-Tray", () => $853e19557ad8790f$export$69dafa24343974dd, (v) => $853e19557ad8790f$export$69dafa24343974dd = v);
var $853e19557ad8790f$export$a62dc1b6ab23a7bb;
var $853e19557ad8790f$export$884f6b5065bdc41a;
var $853e19557ad8790f$export$cb8eccd0f3639238;
var $853e19557ad8790f$export$35bea187ff802494;
var $853e19557ad8790f$export$e088717c213c31d7;
var $853e19557ad8790f$export$4c0b1e44c3834c85;
var $853e19557ad8790f$export$f8edeb62d7fed8c1;
var $853e19557ad8790f$export$ce0704cd084c4f0d;
var $853e19557ad8790f$export$69dafa24343974dd;
$853e19557ad8790f$export$a62dc1b6ab23a7bb = "spectrum-Popover_38efea";
$853e19557ad8790f$export$884f6b5065bdc41a = "react-spectrum-Popover_38efea";
$853e19557ad8790f$export$cb8eccd0f3639238 = "spectrum-Dialog-content_38efea";
$853e19557ad8790f$export$35bea187ff802494 = "spectrum-Modal-wrapper_38efea";
$853e19557ad8790f$export$e088717c213c31d7 = "react-spectrum-Modal-wrapper_38efea";
$853e19557ad8790f$export$4c0b1e44c3834c85 = "spectrum-Modal_38efea";
$853e19557ad8790f$export$f8edeb62d7fed8c1 = "react-spectrum-Modal_38efea";
$853e19557ad8790f$export$ce0704cd084c4f0d = "spectrum-Tray_38efea";
$853e19557ad8790f$export$69dafa24343974dd = "react-spectrum-Tray_38efea";
var $645594d913f34a2a$exports = {};
$parcel$export2($645594d913f34a2a$exports, "spectrum-Popover", () => $645594d913f34a2a$export$a62dc1b6ab23a7bb, (v) => $645594d913f34a2a$export$a62dc1b6ab23a7bb = v);
$parcel$export2($645594d913f34a2a$exports, "is-open", () => $645594d913f34a2a$export$a9781837241c946d, (v) => $645594d913f34a2a$export$a9781837241c946d = v);
$parcel$export2($645594d913f34a2a$exports, "spectrum-Popover--bottom", () => $645594d913f34a2a$export$6a19b19b14780d4a, (v) => $645594d913f34a2a$export$6a19b19b14780d4a = v);
$parcel$export2($645594d913f34a2a$exports, "spectrum-Popover--top", () => $645594d913f34a2a$export$f30becfb1df0cae4, (v) => $645594d913f34a2a$export$f30becfb1df0cae4 = v);
$parcel$export2($645594d913f34a2a$exports, "spectrum-Popover--right", () => $645594d913f34a2a$export$5fc8b429396c9f58, (v) => $645594d913f34a2a$export$5fc8b429396c9f58 = v);
$parcel$export2($645594d913f34a2a$exports, "spectrum-Popover--left", () => $645594d913f34a2a$export$79cc55906ac5b00, (v) => $645594d913f34a2a$export$79cc55906ac5b00 = v);
$parcel$export2($645594d913f34a2a$exports, "spectrum-Popover-tip", () => $645594d913f34a2a$export$3100ec4dc1668df1, (v) => $645594d913f34a2a$export$3100ec4dc1668df1 = v);
$parcel$export2($645594d913f34a2a$exports, "spectrum-Popover-tip-triangle", () => $645594d913f34a2a$export$ed733fa6cf19ab80, (v) => $645594d913f34a2a$export$ed733fa6cf19ab80 = v);
$parcel$export2($645594d913f34a2a$exports, "spectrum-Popover--dialog", () => $645594d913f34a2a$export$cf634262e726cd19, (v) => $645594d913f34a2a$export$cf634262e726cd19 = v);
$parcel$export2($645594d913f34a2a$exports, "spectrum-Popover--withTip", () => $645594d913f34a2a$export$d8b16c5377728262, (v) => $645594d913f34a2a$export$d8b16c5377728262 = v);
var $645594d913f34a2a$export$a62dc1b6ab23a7bb;
var $645594d913f34a2a$export$a9781837241c946d;
var $645594d913f34a2a$export$6a19b19b14780d4a;
var $645594d913f34a2a$export$f30becfb1df0cae4;
var $645594d913f34a2a$export$5fc8b429396c9f58;
var $645594d913f34a2a$export$79cc55906ac5b00;
var $645594d913f34a2a$export$3100ec4dc1668df1;
var $645594d913f34a2a$export$ed733fa6cf19ab80;
var $645594d913f34a2a$export$cf634262e726cd19;
var $645594d913f34a2a$export$d8b16c5377728262;
$645594d913f34a2a$export$a62dc1b6ab23a7bb = "spectrum-Popover_6115b8";
$645594d913f34a2a$export$a9781837241c946d = "is-open_6115b8";
$645594d913f34a2a$export$6a19b19b14780d4a = "spectrum-Popover--bottom_6115b8";
$645594d913f34a2a$export$f30becfb1df0cae4 = "spectrum-Popover--top_6115b8";
$645594d913f34a2a$export$5fc8b429396c9f58 = "spectrum-Popover--right_6115b8";
$645594d913f34a2a$export$79cc55906ac5b00 = "spectrum-Popover--left_6115b8";
$645594d913f34a2a$export$3100ec4dc1668df1 = "spectrum-Popover-tip_6115b8";
$645594d913f34a2a$export$ed733fa6cf19ab80 = "spectrum-Popover-tip-triangle_6115b8";
$645594d913f34a2a$export$cf634262e726cd19 = "spectrum-Popover--dialog_6115b8";
$645594d913f34a2a$export$d8b16c5377728262 = "spectrum-Popover--withTip_6115b8";
var $17b503f7de08fecc$var$arrowPlacement = {
  left: "right",
  right: "right",
  top: "bottom",
  bottom: "bottom"
};
function $17b503f7de08fecc$var$Popover(props, ref) {
  let _a3 = props, { children, placement, arrowProps, onClose, shouldCloseOnBlur, hideArrow, isKeyboardDismissDisabled, isNonModal, isDismissable = true } = _a3, otherProps = __objRest(_a3, ["children", "placement", "arrowProps", "onClose", "shouldCloseOnBlur", "hideArrow", "isKeyboardDismissDisabled", "isNonModal", "isDismissable"]);
  let domRef = (0, import_utils7.useDOMRef)(ref);
  let { styleProps } = (0, import_utils7.useStyleProps)(props);
  return /* @__PURE__ */ preact_default.createElement($70305dc5fb729c3b$export$c6fdb837b070b4ff, otherProps, /* @__PURE__ */ preact_default.createElement($17b503f7de08fecc$var$PopoverWrapper, __spreadProps(__spreadValues({}, styleProps), {
    ref: domRef,
    placement,
    arrowProps,
    onClose,
    shouldCloseOnBlur,
    isKeyboardDismissDisabled,
    hideArrow,
    isNonModal,
    isDismissable
  }), children));
}
var $17b503f7de08fecc$var$PopoverWrapper = /* @__PURE__ */ (0, preact_exports.forwardRef)((props, ref) => {
  let _a3 = props, { children, placement = "bottom", arrowProps, isOpen, hideArrow, shouldCloseOnBlur, isKeyboardDismissDisabled, isNonModal, isDismissable } = _a3, otherProps = __objRest(_a3, ["children", "placement", "arrowProps", "isOpen", "hideArrow", "shouldCloseOnBlur", "isKeyboardDismissDisabled", "isNonModal", "isDismissable"]);
  let { overlayProps } = (0, import_overlays.useOverlay)(__spreadProps(__spreadValues({}, props), {
    isDismissable: isDismissable && isOpen
  }), ref);
  let { modalProps } = (0, import_overlays.useModal)({
    isDisabled: isNonModal
  });
  return /* @__PURE__ */ preact_default.createElement("div", __spreadProps(__spreadValues({}, (0, import_utils8.mergeProps)(otherProps, overlayProps, modalProps)), {
    ref,
    className: (0, import_utils7.classNames)(/* @__PURE__ */ $parcel$interopDefault2($645594d913f34a2a$exports), "spectrum-Popover", `spectrum-Popover--${placement}`, {
      "spectrum-Popover--withTip": !hideArrow,
      "is-open": isOpen
    }, (0, import_utils7.classNames)(/* @__PURE__ */ $parcel$interopDefault2($853e19557ad8790f$exports), "spectrum-Popover", "react-spectrum-Popover"), otherProps.className),
    role: "presentation",
    "data-testid": "popover"
  }), children, hideArrow ? null : /* @__PURE__ */ preact_default.createElement($17b503f7de08fecc$var$Arrow, {
    arrowProps,
    direction: $17b503f7de08fecc$var$arrowPlacement[placement]
  }));
});
var $17b503f7de08fecc$var$ROOT_2 = Math.sqrt(2);
function $17b503f7de08fecc$var$Arrow(props) {
  let [size, setSize] = (0, preact_exports.useState)(20);
  let [borderWidth, setBorderWidth] = (0, preact_exports.useState)(1);
  let ref = (0, preact_exports.useRef)();
  (0, import_utils8.useLayoutEffect)(() => {
    if (ref.current) {
      let spectrumTipWidth = window.getComputedStyle(ref.current).getPropertyValue("--spectrum-popover-tip-size");
      if (spectrumTipWidth !== "")
        setSize(parseInt(spectrumTipWidth, 10) / 2);
      let spectrumBorderWidth = window.getComputedStyle(ref.current).getPropertyValue("--spectrum-popover-tip-borderWidth");
      if (spectrumBorderWidth !== "")
        setBorderWidth(parseInt(spectrumBorderWidth, 10));
    }
  }, [
    ref
  ]);
  let landscape = props.direction === "top" || props.direction === "bottom";
  let mirror = props.direction === "left" || props.direction === "top";
  let borderDiagonal = borderWidth * $17b503f7de08fecc$var$ROOT_2;
  let halfBorderDiagonal = borderDiagonal / 2;
  let secondary = 2 * size + 2 * borderDiagonal;
  let primary = size + borderDiagonal;
  let primaryStart = mirror ? primary : 0;
  let primaryEnd = mirror ? halfBorderDiagonal : primary - halfBorderDiagonal;
  let secondaryStart = halfBorderDiagonal;
  let secondaryMiddle = secondary / 2;
  let secondaryEnd = secondary - halfBorderDiagonal;
  let pathData = landscape ? [
    "M",
    secondaryStart,
    primaryStart,
    "L",
    secondaryMiddle,
    primaryEnd,
    "L",
    secondaryEnd,
    primaryStart
  ] : [
    "M",
    primaryStart,
    secondaryStart,
    "L",
    primaryEnd,
    secondaryMiddle,
    "L",
    primaryStart,
    secondaryEnd
  ];
  let arrowProps = props.arrowProps;
  return /* @__PURE__ */ preact_default.createElement("svg", __spreadValues({
    xmlns: "http://www.w3.org/svg/2000",
    width: Math.ceil(landscape ? secondary : primary),
    height: Math.ceil(landscape ? primary : secondary),
    style: props.style,
    className: (0, import_utils7.classNames)(/* @__PURE__ */ $parcel$interopDefault2($645594d913f34a2a$exports), "spectrum-Popover-tip"),
    ref
  }, arrowProps), /* @__PURE__ */ preact_default.createElement("path", {
    className: (0, import_utils7.classNames)(/* @__PURE__ */ $parcel$interopDefault2($645594d913f34a2a$exports), "spectrum-Popover-tip-triangle"),
    d: pathData.join(" ")
  }));
}
var $17b503f7de08fecc$export$5b6b19405a83ff9d = /* @__PURE__ */ (0, preact_exports.forwardRef)($17b503f7de08fecc$var$Popover);
var $f7ed9f5201273840$exports = {};
$parcel$export2($f7ed9f5201273840$exports, "spectrum-Modal", () => $f7ed9f5201273840$export$4c0b1e44c3834c85, (v) => $f7ed9f5201273840$export$4c0b1e44c3834c85 = v);
$parcel$export2($f7ed9f5201273840$exports, "is-open", () => $f7ed9f5201273840$export$a9781837241c946d, (v) => $f7ed9f5201273840$export$a9781837241c946d = v);
$parcel$export2($f7ed9f5201273840$exports, "spectrum-Modal-wrapper", () => $f7ed9f5201273840$export$35bea187ff802494, (v) => $f7ed9f5201273840$export$35bea187ff802494 = v);
$parcel$export2($f7ed9f5201273840$exports, "spectrum-Modal--responsive", () => $f7ed9f5201273840$export$fd1e42aa8ea02a1, (v) => $f7ed9f5201273840$export$fd1e42aa8ea02a1 = v);
$parcel$export2($f7ed9f5201273840$exports, "spectrum-Modal--fullscreen", () => $f7ed9f5201273840$export$a4423fa77727431a, (v) => $f7ed9f5201273840$export$a4423fa77727431a = v);
$parcel$export2($f7ed9f5201273840$exports, "spectrum-Modal--fullscreenTakeover", () => $f7ed9f5201273840$export$175dd699720b5fb7, (v) => $f7ed9f5201273840$export$175dd699720b5fb7 = v);
var $f7ed9f5201273840$export$4c0b1e44c3834c85;
var $f7ed9f5201273840$export$a9781837241c946d;
var $f7ed9f5201273840$export$35bea187ff802494;
var $f7ed9f5201273840$export$fd1e42aa8ea02a1;
var $f7ed9f5201273840$export$a4423fa77727431a;
var $f7ed9f5201273840$export$175dd699720b5fb7;
$f7ed9f5201273840$export$4c0b1e44c3834c85 = "spectrum-Modal_f81956";
$f7ed9f5201273840$export$a9781837241c946d = "is-open_f81956";
$f7ed9f5201273840$export$35bea187ff802494 = "spectrum-Modal-wrapper_f81956";
$f7ed9f5201273840$export$fd1e42aa8ea02a1 = "spectrum-Modal--responsive_f81956";
$f7ed9f5201273840$export$a4423fa77727431a = "spectrum-Modal--fullscreen_f81956";
$f7ed9f5201273840$export$175dd699720b5fb7 = "spectrum-Modal--fullscreenTakeover_f81956";
var $c77d7b73b2bbd0fb$exports = {};
$parcel$export2($c77d7b73b2bbd0fb$exports, "spectrum-Underlay", () => $c77d7b73b2bbd0fb$export$74470528f463af97, (v) => $c77d7b73b2bbd0fb$export$74470528f463af97 = v);
$parcel$export2($c77d7b73b2bbd0fb$exports, "is-open", () => $c77d7b73b2bbd0fb$export$a9781837241c946d, (v) => $c77d7b73b2bbd0fb$export$a9781837241c946d = v);
var $c77d7b73b2bbd0fb$export$74470528f463af97;
var $c77d7b73b2bbd0fb$export$a9781837241c946d;
$c77d7b73b2bbd0fb$export$74470528f463af97 = "spectrum-Underlay_eb7615";
$c77d7b73b2bbd0fb$export$a9781837241c946d = "is-open_eb7615";
function $76a452f4e3df11be$export$f360afc887607b02({ isOpen }) {
  return /* @__PURE__ */ preact_default.createElement("div", {
    className: (0, import_utils7.classNames)(/* @__PURE__ */ $parcel$interopDefault2($c77d7b73b2bbd0fb$exports), "spectrum-Underlay", {
      "is-open": isOpen
    })
  });
}
var $930b2f4095bb11d1$exports = {};
$parcel$export2($930b2f4095bb11d1$exports, "spectrum-Tray", () => $930b2f4095bb11d1$export$ce0704cd084c4f0d, (v) => $930b2f4095bb11d1$export$ce0704cd084c4f0d = v);
$parcel$export2($930b2f4095bb11d1$exports, "is-open", () => $930b2f4095bb11d1$export$a9781837241c946d, (v) => $930b2f4095bb11d1$export$a9781837241c946d = v);
$parcel$export2($930b2f4095bb11d1$exports, "spectrum-Tray-wrapper", () => $930b2f4095bb11d1$export$641b9b70c23dce66, (v) => $930b2f4095bb11d1$export$641b9b70c23dce66 = v);
$parcel$export2($930b2f4095bb11d1$exports, "spectrum-Tray--fixedHeight", () => $930b2f4095bb11d1$export$79bfb05e59a300b, (v) => $930b2f4095bb11d1$export$79bfb05e59a300b = v);
var $930b2f4095bb11d1$export$ce0704cd084c4f0d;
var $930b2f4095bb11d1$export$a9781837241c946d;
var $930b2f4095bb11d1$export$641b9b70c23dce66;
var $930b2f4095bb11d1$export$79bfb05e59a300b;
$930b2f4095bb11d1$export$ce0704cd084c4f0d = "spectrum-Tray_23bf66";
$930b2f4095bb11d1$export$a9781837241c946d = "is-open_23bf66";
$930b2f4095bb11d1$export$641b9b70c23dce66 = "spectrum-Tray-wrapper_23bf66";
$930b2f4095bb11d1$export$79bfb05e59a300b = "spectrum-Tray--fixedHeight_23bf66";
function $1afc87f3d16a5a1c$var$Tray(props, ref) {
  let _a3 = props, { children, onClose, isFixedHeight, isNonModal } = _a3, otherProps = __objRest(_a3, ["children", "onClose", "isFixedHeight", "isNonModal"]);
  let domRef = (0, import_utils7.useDOMRef)(ref);
  let { styleProps } = (0, import_utils7.useStyleProps)(props);
  let { overlayProps, underlayProps } = (0, import_overlays.useOverlay)(__spreadProps(__spreadValues({}, props), {
    isDismissable: true
  }), domRef);
  return /* @__PURE__ */ preact_default.createElement($70305dc5fb729c3b$export$c6fdb837b070b4ff, otherProps, /* @__PURE__ */ preact_default.createElement($76a452f4e3df11be$export$f360afc887607b02, underlayProps), /* @__PURE__ */ preact_default.createElement($1afc87f3d16a5a1c$var$TrayWrapper, __spreadProps(__spreadValues({}, styleProps), {
    onClose,
    ref: domRef,
    overlayProps,
    isFixedHeight,
    isNonModal
  }), children));
}
var $1afc87f3d16a5a1c$var$TrayWrapper = /* @__PURE__ */ (0, preact_exports.forwardRef)(function(props, ref) {
  let _a3 = props, { children, isOpen, isFixedHeight, isNonModal, overlayProps } = _a3, otherProps = __objRest(_a3, ["children", "isOpen", "isFixedHeight", "isNonModal", "overlayProps"]);
  (0, import_overlays.usePreventScroll)();
  let { modalProps } = (0, import_overlays.useModal)({
    isDisabled: isNonModal
  });
  let viewport = (0, import_utils8.useViewportSize)();
  let wrapperStyle = {
    "--spectrum-visual-viewport-height": viewport.height + "px"
  };
  let wrapperClassName = (0, import_utils7.classNames)(/* @__PURE__ */ $parcel$interopDefault2($930b2f4095bb11d1$exports), "spectrum-Tray-wrapper");
  let className = (0, import_utils7.classNames)(/* @__PURE__ */ $parcel$interopDefault2($930b2f4095bb11d1$exports), "spectrum-Tray", {
    "is-open": isOpen,
    "spectrum-Tray--fixedHeight": isFixedHeight
  }, (0, import_utils7.classNames)(/* @__PURE__ */ $parcel$interopDefault2($853e19557ad8790f$exports), "spectrum-Tray", "react-spectrum-Tray"), otherProps.className);
  let domProps = (0, import_utils8.mergeProps)(otherProps, overlayProps);
  return /* @__PURE__ */ preact_default.createElement("div", {
    className: wrapperClassName,
    style: wrapperStyle
  }, /* @__PURE__ */ preact_default.createElement("div", __spreadProps(__spreadValues(__spreadValues({}, domProps), modalProps), {
    className,
    ref,
    "data-testid": "tray"
  }), children));
});
var $1afc87f3d16a5a1c$export$4589ed81930b555c = /* @__PURE__ */ (0, preact_exports.forwardRef)($1afc87f3d16a5a1c$var$Tray);

// ../../node_modules/@react-aria/menu/dist/module.js
var import_utils10 = __toESM(require_main3());
var import_i18n2 = __toESM(require_main8());
var import_interactions5 = __toESM(require_main10());
var import_overlays2 = __toESM(require_main12());

// ../../node_modules/@react-aria/selection/dist/module.js
init_preact();
var import_utils9 = __toESM(require_main3());
var import_i18n = __toESM(require_main8());
var import_interactions4 = __toESM(require_main10());
function $feb5ffebff200149$export$d3e3bd3e26688c04(e) {
  return (0, import_utils9.isAppleDevice)() ? e.altKey : e.ctrlKey;
}
function $feb5ffebff200149$export$16792effe837dba3(e) {
  if ((0, import_utils9.isMac)())
    return e.metaKey;
  return e.ctrlKey;
}
function $fb3050f43d946246$export$e32c88dfddc6e1d8(options) {
  let { keyboardDelegate, selectionManager, onTypeSelect } = options;
  let state = (0, preact_exports.useRef)({
    search: "",
    timeout: null
  }).current;
  let onKeyDown = (e) => {
    let character = $fb3050f43d946246$var$getStringForKey(e.key);
    if (!character || e.ctrlKey || e.metaKey)
      return;
    if (character === " " && state.search.trim().length > 0) {
      e.preventDefault();
      if (!("continuePropagation" in e))
        e.stopPropagation();
    }
    state.search += character;
    let key = keyboardDelegate.getKeyForSearch(state.search, selectionManager.focusedKey);
    if (key == null)
      key = keyboardDelegate.getKeyForSearch(state.search);
    if (key != null) {
      selectionManager.setFocusedKey(key);
      if (onTypeSelect)
        onTypeSelect(key);
    }
    clearTimeout(state.timeout);
    state.timeout = setTimeout(() => {
      state.search = "";
    }, 500);
  };
  return {
    typeSelectProps: {
      onKeyDownCapture: keyboardDelegate.getKeyForSearch ? onKeyDown : null
    }
  };
}
function $fb3050f43d946246$var$getStringForKey(key) {
  if (key.length === 1 || !/^[A-Z]/i.test(key))
    return key;
  return "";
}
function $ae20dd8cbca75726$export$d6daf82dcd84e87c(options) {
  let { selectionManager: manager, keyboardDelegate: delegate, ref, autoFocus = false, shouldFocusWrap = false, disallowEmptySelection = false, disallowSelectAll = false, selectOnFocus = manager.selectionBehavior === "replace", disallowTypeAhead = false, shouldUseVirtualFocus, allowsTabNavigation = false, isVirtualized, scrollRef = ref } = options;
  let { direction } = (0, import_i18n.useLocale)();
  let onKeyDown = (e) => {
    if (e.altKey && e.key === "Tab")
      e.preventDefault();
    if (!ref.current.contains(e.target))
      return;
    const navigateToKey = (key, childFocus) => {
      if (key != null) {
        manager.setFocusedKey(key, childFocus);
        if (e.shiftKey && manager.selectionMode === "multiple")
          manager.extendSelection(key);
        else if (selectOnFocus && !$feb5ffebff200149$export$d3e3bd3e26688c04(e))
          manager.replaceSelection(key);
      }
    };
    switch (e.key) {
      case "ArrowDown":
        if (delegate.getKeyBelow) {
          var ref4, ref1;
          e.preventDefault();
          let nextKey = manager.focusedKey != null ? delegate.getKeyBelow(manager.focusedKey) : (ref4 = delegate.getFirstKey) === null || ref4 === void 0 ? void 0 : ref4.call(delegate);
          if (nextKey == null && shouldFocusWrap)
            nextKey = (ref1 = delegate.getFirstKey) === null || ref1 === void 0 ? void 0 : ref1.call(delegate, manager.focusedKey);
          navigateToKey(nextKey);
        }
        break;
      case "ArrowUp":
        if (delegate.getKeyAbove) {
          var ref2, ref3;
          e.preventDefault();
          let nextKey = manager.focusedKey != null ? delegate.getKeyAbove(manager.focusedKey) : (ref2 = delegate.getLastKey) === null || ref2 === void 0 ? void 0 : ref2.call(delegate);
          if (nextKey == null && shouldFocusWrap)
            nextKey = (ref3 = delegate.getLastKey) === null || ref3 === void 0 ? void 0 : ref3.call(delegate, manager.focusedKey);
          navigateToKey(nextKey);
        }
        break;
      case "ArrowLeft":
        if (delegate.getKeyLeftOf) {
          e.preventDefault();
          let nextKey = delegate.getKeyLeftOf(manager.focusedKey);
          navigateToKey(nextKey, direction === "rtl" ? "first" : "last");
        }
        break;
      case "ArrowRight":
        if (delegate.getKeyRightOf) {
          e.preventDefault();
          let nextKey = delegate.getKeyRightOf(manager.focusedKey);
          navigateToKey(nextKey, direction === "rtl" ? "last" : "first");
        }
        break;
      case "Home":
        if (delegate.getFirstKey) {
          e.preventDefault();
          let firstKey = delegate.getFirstKey(manager.focusedKey, $feb5ffebff200149$export$16792effe837dba3(e));
          manager.setFocusedKey(firstKey);
          if ($feb5ffebff200149$export$16792effe837dba3(e) && e.shiftKey && manager.selectionMode === "multiple")
            manager.extendSelection(firstKey);
          else if (selectOnFocus)
            manager.replaceSelection(firstKey);
        }
        break;
      case "End":
        if (delegate.getLastKey) {
          e.preventDefault();
          let lastKey = delegate.getLastKey(manager.focusedKey, $feb5ffebff200149$export$16792effe837dba3(e));
          manager.setFocusedKey(lastKey);
          if ($feb5ffebff200149$export$16792effe837dba3(e) && e.shiftKey && manager.selectionMode === "multiple")
            manager.extendSelection(lastKey);
          else if (selectOnFocus)
            manager.replaceSelection(lastKey);
        }
        break;
      case "PageDown":
        if (delegate.getKeyPageBelow) {
          e.preventDefault();
          let nextKey = delegate.getKeyPageBelow(manager.focusedKey);
          navigateToKey(nextKey);
        }
        break;
      case "PageUp":
        if (delegate.getKeyPageAbove) {
          e.preventDefault();
          let nextKey = delegate.getKeyPageAbove(manager.focusedKey);
          navigateToKey(nextKey);
        }
        break;
      case "a":
        if ($feb5ffebff200149$export$16792effe837dba3(e) && manager.selectionMode === "multiple" && disallowSelectAll !== true) {
          e.preventDefault();
          manager.selectAll();
        }
        break;
      case "Escape":
        e.preventDefault();
        if (!disallowEmptySelection)
          manager.clearSelection();
        break;
      case "Tab":
        if (!allowsTabNavigation) {
          if (e.shiftKey)
            ref.current.focus();
          else {
            let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(ref.current, {
              tabbable: true
            });
            let next;
            let last;
            do {
              last = walker.lastChild();
              if (last)
                next = last;
            } while (last);
            if (next && !next.contains(document.activeElement))
              (0, import_utils9.focusWithoutScrolling)(next);
          }
          break;
        }
    }
  };
  let scrollPos = (0, preact_exports.useRef)({
    top: 0,
    left: 0
  });
  (0, import_utils9.useEvent)(scrollRef, "scroll", isVirtualized ? null : () => {
    scrollPos.current = {
      top: scrollRef.current.scrollTop,
      left: scrollRef.current.scrollLeft
    };
  });
  let onFocus = (e) => {
    if (manager.isFocused) {
      if (!e.currentTarget.contains(e.target))
        manager.setFocused(false);
      return;
    }
    if (!e.currentTarget.contains(e.target))
      return;
    manager.setFocused(true);
    if (manager.focusedKey == null) {
      let navigateToFirstKey = (key) => {
        if (key != null) {
          manager.setFocusedKey(key);
          if (selectOnFocus)
            manager.replaceSelection(key);
        }
      };
      let relatedTarget = e.relatedTarget;
      var _lastSelectedKey, _firstSelectedKey;
      if (relatedTarget && e.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING)
        navigateToFirstKey((_lastSelectedKey = manager.lastSelectedKey) !== null && _lastSelectedKey !== void 0 ? _lastSelectedKey : delegate.getLastKey());
      else
        navigateToFirstKey((_firstSelectedKey = manager.firstSelectedKey) !== null && _firstSelectedKey !== void 0 ? _firstSelectedKey : delegate.getFirstKey());
    } else if (!isVirtualized) {
      scrollRef.current.scrollTop = scrollPos.current.top;
      scrollRef.current.scrollLeft = scrollPos.current.left;
      let element = scrollRef.current.querySelector(`[data-key="${manager.focusedKey}"]`);
      if (element) {
        (0, import_utils9.focusWithoutScrolling)(element);
        (0, import_utils9.scrollIntoView)(scrollRef.current, element);
      }
    }
  };
  let onBlur = (e) => {
    if (!e.currentTarget.contains(e.relatedTarget))
      manager.setFocused(false);
  };
  const autoFocusRef = (0, preact_exports.useRef)(autoFocus);
  (0, preact_exports.useEffect)(() => {
    if (autoFocusRef.current) {
      let focusedKey = null;
      if (autoFocus === "first")
        focusedKey = delegate.getFirstKey();
      if (autoFocus === "last")
        focusedKey = delegate.getLastKey();
      let selectedKeys = manager.selectedKeys;
      if (selectedKeys.size)
        focusedKey = selectedKeys.values().next().value;
      manager.setFocused(true);
      manager.setFocusedKey(focusedKey);
      if (focusedKey == null && !shouldUseVirtualFocus)
        $6a99195332edec8b$export$80f3e147d781571c(ref.current);
    }
    autoFocusRef.current = false;
  }, []);
  (0, preact_exports.useEffect)(() => {
    if (!isVirtualized && manager.focusedKey && (scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current)) {
      let element = scrollRef.current.querySelector(`[data-key="${manager.focusedKey}"]`);
      if (element)
        (0, import_utils9.scrollIntoView)(scrollRef.current, element);
    }
  }, [
    isVirtualized,
    scrollRef,
    manager.focusedKey
  ]);
  let handlers = {
    onKeyDown,
    onFocus,
    onBlur,
    onMouseDown(e) {
      if (e.currentTarget.contains(e.target))
        e.preventDefault();
    }
  };
  let { typeSelectProps } = $fb3050f43d946246$export$e32c88dfddc6e1d8({
    keyboardDelegate: delegate,
    selectionManager: manager
  });
  if (!disallowTypeAhead)
    handlers = (0, import_utils9.mergeProps)(typeSelectProps, handlers);
  let tabIndex;
  if (!shouldUseVirtualFocus)
    tabIndex = manager.focusedKey == null ? 0 : -1;
  return {
    collectionProps: __spreadProps(__spreadValues({}, handlers), {
      tabIndex
    })
  };
}
function $880e95eb8b93ba9a$export$ecf600387e221c37(options) {
  let { selectionManager: manager, key, ref, shouldSelectOnPressUp, isVirtualized, shouldUseVirtualFocus, focus, isDisabled, onAction, allowsDifferentPressOrigin } = options;
  let onSelect = (e) => {
    if (e.pointerType === "keyboard" && $feb5ffebff200149$export$d3e3bd3e26688c04(e))
      manager.toggleSelection(key);
    else {
      if (manager.selectionMode === "none")
        return;
      if (manager.selectionMode === "single") {
        if (manager.isSelected(key) && !manager.disallowEmptySelection)
          manager.toggleSelection(key);
        else
          manager.replaceSelection(key);
      } else if (e && e.shiftKey)
        manager.extendSelection(key);
      else if (manager.selectionBehavior === "toggle" || e && ($feb5ffebff200149$export$16792effe837dba3(e) || e.pointerType === "touch" || e.pointerType === "virtual"))
        manager.toggleSelection(key);
      else
        manager.replaceSelection(key);
    }
  };
  (0, preact_exports.useEffect)(() => {
    let isFocused = key === manager.focusedKey;
    if (isFocused && manager.isFocused && !shouldUseVirtualFocus && document.activeElement !== ref.current) {
      if (focus)
        focus();
      else
        $6a99195332edec8b$export$80f3e147d781571c(ref.current);
    }
  }, [
    ref,
    key,
    manager.focusedKey,
    manager.childFocusStrategy,
    manager.isFocused,
    shouldUseVirtualFocus
  ]);
  let itemProps = {};
  if (!shouldUseVirtualFocus)
    itemProps = {
      tabIndex: key === manager.focusedKey ? 0 : -1,
      onFocus(e) {
        if (e.target === ref.current)
          manager.setFocusedKey(key);
      }
    };
  isDisabled = isDisabled || manager.isDisabled(key);
  let allowsSelection = !isDisabled && manager.canSelectItem(key);
  let allowsActions = onAction && !isDisabled;
  let hasPrimaryAction = allowsActions && (manager.selectionBehavior === "replace" ? !allowsSelection : manager.isEmpty);
  let hasSecondaryAction = allowsActions && allowsSelection && manager.selectionBehavior === "replace";
  let hasAction = hasPrimaryAction || hasSecondaryAction;
  let modality = (0, preact_exports.useRef)(null);
  let longPressEnabled = hasAction && allowsSelection;
  let longPressEnabledOnPressStart = (0, preact_exports.useRef)(false);
  let hadPrimaryActionOnPressStart = (0, preact_exports.useRef)(false);
  let itemPressProps = {};
  if (shouldSelectOnPressUp) {
    itemPressProps.onPressStart = (e) => {
      modality.current = e.pointerType;
      longPressEnabledOnPressStart.current = longPressEnabled;
      if (e.pointerType === "keyboard" && (!hasAction || $880e95eb8b93ba9a$var$isSelectionKey()))
        onSelect(e);
    };
    if (!allowsDifferentPressOrigin)
      itemPressProps.onPress = (e) => {
        if (hasPrimaryAction || hasSecondaryAction && e.pointerType !== "mouse") {
          if (e.pointerType === "keyboard" && !$880e95eb8b93ba9a$var$isActionKey())
            return;
          onAction();
        } else if (e.pointerType !== "keyboard")
          onSelect(e);
      };
    else {
      itemPressProps.onPressUp = (e) => {
        if (e.pointerType !== "keyboard")
          onSelect(e);
      };
      itemPressProps.onPress = hasPrimaryAction ? () => onAction() : null;
    }
  } else {
    itemPressProps.onPressStart = (e) => {
      modality.current = e.pointerType;
      longPressEnabledOnPressStart.current = longPressEnabled;
      hadPrimaryActionOnPressStart.current = hasPrimaryAction;
      if (e.pointerType === "mouse" && !hasPrimaryAction || e.pointerType === "keyboard" && (!onAction || $880e95eb8b93ba9a$var$isSelectionKey()))
        onSelect(e);
    };
    itemPressProps.onPress = (e) => {
      if (e.pointerType === "touch" || e.pointerType === "pen" || e.pointerType === "virtual" || e.pointerType === "keyboard" && hasAction && $880e95eb8b93ba9a$var$isActionKey() || e.pointerType === "mouse" && hadPrimaryActionOnPressStart.current) {
        if (hasAction)
          onAction();
        else
          onSelect(e);
      }
    };
  }
  if (!isVirtualized)
    itemProps["data-key"] = key;
  itemPressProps.preventFocusOnPress = shouldUseVirtualFocus;
  let { pressProps, isPressed } = (0, import_interactions4.usePress)(itemPressProps);
  let onDoubleClick = hasSecondaryAction ? (e) => {
    if (modality.current === "mouse") {
      e.stopPropagation();
      e.preventDefault();
      onAction();
    }
  } : void 0;
  let { longPressProps } = (0, import_interactions4.useLongPress)({
    isDisabled: !longPressEnabled,
    onLongPress(e) {
      if (e.pointerType === "touch") {
        onSelect(e);
        manager.setSelectionBehavior("toggle");
      }
    }
  });
  let onDragStart = (e) => {
    if (modality.current === "touch" && longPressEnabledOnPressStart.current)
      e.preventDefault();
  };
  return {
    itemProps: (0, import_utils9.mergeProps)(itemProps, allowsSelection || hasPrimaryAction ? pressProps : {}, longPressEnabled ? longPressProps : {}, {
      onDoubleClick,
      onDragStart
    }),
    isPressed,
    isSelected: manager.isSelected(key),
    isDisabled,
    allowsSelection,
    hasAction
  };
}
function $880e95eb8b93ba9a$var$isActionKey() {
  let event = window.event;
  return (event === null || event === void 0 ? void 0 : event.key) === "Enter";
}
function $880e95eb8b93ba9a$var$isSelectionKey() {
  let event = window.event;
  return (event === null || event === void 0 ? void 0 : event.key) === " " || (event === null || event === void 0 ? void 0 : event.code) === "Space";
}
var $2a25aae57d74318e$export$a05409b8bb224a5a = class {
  getKeyBelow(key) {
    key = this.collection.getKeyAfter(key);
    while (key != null) {
      let item = this.collection.getItem(key);
      if (item.type === "item" && !this.disabledKeys.has(key))
        return key;
      key = this.collection.getKeyAfter(key);
    }
  }
  getKeyAbove(key) {
    key = this.collection.getKeyBefore(key);
    while (key != null) {
      let item = this.collection.getItem(key);
      if (item.type === "item" && !this.disabledKeys.has(key))
        return key;
      key = this.collection.getKeyBefore(key);
    }
  }
  getFirstKey() {
    let key = this.collection.getFirstKey();
    while (key != null) {
      let item = this.collection.getItem(key);
      if (item.type === "item" && !this.disabledKeys.has(key))
        return key;
      key = this.collection.getKeyAfter(key);
    }
  }
  getLastKey() {
    let key = this.collection.getLastKey();
    while (key != null) {
      let item = this.collection.getItem(key);
      if (item.type === "item" && !this.disabledKeys.has(key))
        return key;
      key = this.collection.getKeyBefore(key);
    }
  }
  getItem(key) {
    return this.ref.current.querySelector(`[data-key="${key}"]`);
  }
  getKeyPageAbove(key) {
    let menu = this.ref.current;
    let item = this.getItem(key);
    if (!item)
      return null;
    let pageY = Math.max(0, item.offsetTop + item.offsetHeight - menu.offsetHeight);
    while (item && item.offsetTop > pageY) {
      key = this.getKeyAbove(key);
      item = this.getItem(key);
    }
    return key;
  }
  getKeyPageBelow(key) {
    let menu = this.ref.current;
    let item = this.getItem(key);
    if (!item)
      return null;
    let pageY = Math.min(menu.scrollHeight, item.offsetTop - item.offsetHeight + menu.offsetHeight);
    while (item && item.offsetTop < pageY) {
      key = this.getKeyBelow(key);
      item = this.getItem(key);
    }
    return key;
  }
  getKeyForSearch(search, fromKey) {
    if (!this.collator)
      return null;
    let collection = this.collection;
    let key = fromKey || this.getFirstKey();
    while (key != null) {
      let item = collection.getItem(key);
      let substring = item.textValue.slice(0, search.length);
      if (item.textValue && this.collator.compare(substring, search) === 0)
        return key;
      key = this.getKeyBelow(key);
    }
    return null;
  }
  constructor(collection, disabledKeys, ref, collator) {
    this.collection = collection;
    this.disabledKeys = disabledKeys;
    this.ref = ref;
    this.collator = collator;
  }
};
function $982254629710d113$export$b95089534ab7c1fd(props) {
  let { selectionManager, collection, disabledKeys, ref, keyboardDelegate, autoFocus, shouldFocusWrap, isVirtualized, disallowEmptySelection, selectOnFocus = selectionManager.selectionBehavior === "replace", disallowTypeAhead, shouldUseVirtualFocus, allowsTabNavigation } = props;
  let collator = (0, import_i18n.useCollator)({
    usage: "search",
    sensitivity: "base"
  });
  let disabledBehavior = selectionManager.disabledBehavior;
  let delegate = (0, preact_exports.useMemo)(
    () => keyboardDelegate || new $2a25aae57d74318e$export$a05409b8bb224a5a(collection, disabledBehavior === "selection" ? /* @__PURE__ */ new Set() : disabledKeys, ref, collator),
    [
      keyboardDelegate,
      collection,
      disabledKeys,
      ref,
      collator,
      disabledBehavior
    ]
  );
  let { collectionProps } = $ae20dd8cbca75726$export$d6daf82dcd84e87c({
    ref,
    selectionManager,
    keyboardDelegate: delegate,
    autoFocus,
    shouldFocusWrap,
    disallowEmptySelection,
    selectOnFocus,
    disallowTypeAhead,
    shouldUseVirtualFocus,
    allowsTabNavigation,
    isVirtualized,
    scrollRef: ref
  });
  return {
    listProps: collectionProps
  };
}

// ../../node_modules/@react-aria/menu/dist/module.js
function $parcel$interopDefault3(a) {
  return a && a.__esModule ? a.default : a;
}
var $9bdd31893c9700c3$exports = {};
var $c0398ad35c3639b7$exports = {};
$c0398ad35c3639b7$exports = {
  "longPressMessage": `\u0627\u0636\u063A\u0637 \u0645\u0637\u0648\u0644\u0627\u064B \u0623\u0648 \u0627\u0636\u063A\u0637 \u0639\u0644\u0649 Alt + \u0627\u0644\u0633\u0647\u0645 \u0644\u0623\u0633\u0641\u0644 \u0644\u0641\u062A\u062D \u0627\u0644\u0642\u0627\u0626\u0645\u0629`
};
var $7af657c4165927c3$exports = {};
$7af657c4165927c3$exports = {
  "longPressMessage": `\u041D\u0430\u0442\u0438\u0441\u043D\u0435\u0442\u0435 \u043F\u0440\u043E\u0434\u044A\u043B\u0436\u0438\u0442\u0435\u043B\u043D\u043E \u0438\u043B\u0438 \u043D\u0430\u0442\u0438\u0441\u043D\u0435\u0442\u0435 Alt+ \u0441\u0442\u0440\u0435\u043B\u043A\u0430 \u043D\u0430\u0434\u043E\u043B\u0443, \u0437\u0430 \u0434\u0430 \u043E\u0442\u0432\u043E\u0440\u0438\u0442\u0435 \u043C\u0435\u043D\u044E\u0442\u043E`
};
var $d95d4da6d531ab81$exports = {};
$d95d4da6d531ab81$exports = {
  "longPressMessage": `Dlouh\xFDm stiskem nebo stisknut\xEDm kl\xE1ves Alt + \u0161ipka dol\u016F otev\u0159ete nab\xEDdku`
};
var $24ebda9c775dca17$exports = {};
$24ebda9c775dca17$exports = {
  "longPressMessage": `Langt tryk eller tryk p\xE5 Alt + pil ned for at \xE5bne menuen`
};
var $743e0dfca6cab1e9$exports = {};
$743e0dfca6cab1e9$exports = {
  "longPressMessage": `Dr\xFCcken Sie lange oder dr\xFCcken Sie Alt + Nach-unten, um das Men\xFC zu \xF6ffnen`
};
var $a2f41026e05f1c84$exports = {};
$a2f41026e05f1c84$exports = {
  "longPressMessage": `\u03A0\u03B9\u03AD\u03C3\u03C4\u03B5 \u03C0\u03B1\u03C1\u03B1\u03C4\u03B5\u03C4\u03B1\u03BC\u03AD\u03BD\u03B1 \u03AE \u03C0\u03B1\u03C4\u03AE\u03C3\u03C4\u03B5 Alt + \u03BA\u03AC\u03C4\u03C9 \u03B2\u03AD\u03BB\u03BF\u03C2 \u03B3\u03B9\u03B1 \u03BD\u03B1 \u03B1\u03BD\u03BF\u03AF\u03BE\u03B5\u03C4\u03B5 \u03C4\u03BF \u03BC\u03B5\u03BD\u03BF\u03CD`
};
var $43b800e97c901737$exports = {};
$43b800e97c901737$exports = {
  "longPressMessage": `Long press or press Alt + ArrowDown to open menu`
};
var $442f5f6ac211e29f$exports = {};
$442f5f6ac211e29f$exports = {
  "longPressMessage": `Mantenga pulsado o pulse Alt + flecha abajo para abrir el men\xFA`
};
var $dff280acfeb2d8ac$exports = {};
$dff280acfeb2d8ac$exports = {
  "longPressMessage": `Men\xFC\xFC avamiseks vajutage pikalt v\xF5i vajutage klahve Alt + allanool`
};
var $51608325613944d7$exports = {};
$51608325613944d7$exports = {
  "longPressMessage": `Avaa valikko painamalla pohjassa tai n\xE4pp\xE4inyhdistelm\xE4ll\xE4 Alt + Alanuoli`
};
var $c4a1b1eabeaa87be$exports = {};
$c4a1b1eabeaa87be$exports = {
  "longPressMessage": `Appuyez de mani\xE8re prolong\xE9e ou appuyez sur Alt\xA0+\xA0Fl\xE8che vers le bas pour ouvrir le menu.`
};
var $8c74815cdee18d1b$exports = {};
$8c74815cdee18d1b$exports = {
  "longPressMessage": `\u05DC\u05D7\u05E5 \u05DC\u05D7\u05D9\u05E6\u05D4 \u05D0\u05E8\u05D5\u05DB\u05D4 \u05D0\u05D5 \u05D4\u05E7\u05E9 Alt + ArrowDown \u05DB\u05D3\u05D9 \u05DC\u05E4\u05EA\u05D5\u05D7 \u05D0\u05EA \u05D4\u05EA\u05E4\u05E8\u05D9\u05D8`
};
var $fd0e9ef6a7fe0ec9$exports = {};
$fd0e9ef6a7fe0ec9$exports = {
  "longPressMessage": `Dugo pritisnite ili pritisnite Alt + strelicu prema dolje za otvaranje izbornika`
};
var $a89a74a39eba465a$exports = {};
$a89a74a39eba465a$exports = {
  "longPressMessage": `Nyomja meg hosszan, vagy nyomja meg az Alt + lefele ny\xEDl gombot a men\xFC megnyit\xE1s\xE1hoz`
};
var $edc7c66594a0ae8a$exports = {};
$edc7c66594a0ae8a$exports = {
  "longPressMessage": `Premere a lungo o premere Alt + Freccia gi\xF9 per aprire il menu`
};
var $f1ab51510712db52$exports = {};
$f1ab51510712db52$exports = {
  "longPressMessage": `\u9577\u62BC\u3057\u307E\u305F\u306F Alt+\u4E0B\u77E2\u5370\u30AD\u30FC\u3067\u30E1\u30CB\u30E5\u30FC\u3092\u958B\u304F`
};
var $f9b672d9b82fa3d6$exports = {};
$f9b672d9b82fa3d6$exports = {
  "longPressMessage": `\uAE38\uAC8C \uB204\uB974\uAC70\uB098 Alt + \uC544\uB798\uCABD \uD654\uC0B4\uD45C\uB97C \uB20C\uB7EC \uBA54\uB274 \uC5F4\uAE30`
};
var $a385f3910feda499$exports = {};
$a385f3910feda499$exports = {
  "longPressMessage": `Nor\u0117dami atidaryti meniu, nuspaud\u0119 palaikykite arba paspauskite \u201EAlt + ArrowDown\u201C.`
};
var $4f1bde932c441789$exports = {};
$4f1bde932c441789$exports = {
  "longPressMessage": `Lai atv\u0113rtu izv\u0113lni, turiet nospiestu vai nospiediet tausti\u0146u kombin\u0101ciju Alt + lejupv\u0113rst\u0101 bulti\u0146a`
};
var $914a51a8a594d5be$exports = {};
$914a51a8a594d5be$exports = {
  "longPressMessage": `Langt trykk eller trykk Alt + PilNed for \xE5 \xE5pne menyen`
};
var $89aaf803103bb500$exports = {};
$89aaf803103bb500$exports = {
  "longPressMessage": `Druk lang op Alt + pijl-omlaag of druk op Alt om het menu te openen`
};
var $c685891476dbaaca$exports = {};
$c685891476dbaaca$exports = {
  "longPressMessage": `Naci\u015Bnij i przytrzymaj lub naci\u015Bnij klawisze Alt + Strza\u0142ka w d\xF3\u0142, aby otworzy\u0107 menu`
};
var $885879b9b10c2959$exports = {};
$885879b9b10c2959$exports = {
  "longPressMessage": `Pressione e segure ou pressione Alt + Seta para baixo para abrir o menu`
};
var $6b39616688a51692$exports = {};
$6b39616688a51692$exports = {
  "longPressMessage": `Prima continuamente ou prima Alt + Seta Para Baixo para abrir o menu`
};
var $f26362aed63f47e2$exports = {};
$f26362aed63f47e2$exports = {
  "longPressMessage": `Ap\u0103sa\u021Bi lung sau ap\u0103sa\u021Bi pe Alt + s\u0103geat\u0103 \xEEn jos pentru a deschide meniul`
};
var $06cbade644558bf0$exports = {};
$06cbade644558bf0$exports = {
  "longPressMessage": `\u041D\u0430\u0436\u043C\u0438\u0442\u0435 \u0438 \u0443\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0439\u0442\u0435 \u0438\u043B\u0438 \u043D\u0430\u0436\u043C\u0438\u0442\u0435 Alt + \u0421\u0442\u0440\u0435\u043B\u043A\u0430 \u0432\u043D\u0438\u0437, \u0447\u0442\u043E\u0431\u044B \u043E\u0442\u043A\u0440\u044B\u0442\u044C \u043C\u0435\u043D\u044E`
};
var $0a391ff68f9d59b1$exports = {};
$0a391ff68f9d59b1$exports = {
  "longPressMessage": `Ponuku otvor\xEDte dlh\xFDm stla\u010Den\xEDm alebo stla\u010Den\xEDm kl\xE1vesu Alt + kl\xE1vesu so \u0161\xEDpkou nadol`
};
var $8193cf0e649c7928$exports = {};
$8193cf0e649c7928$exports = {
  "longPressMessage": `Za odprtje menija pritisnite in dr\u017Eite gumb ali pritisnite Alt+pu\u0161\u010Dica navzdol`
};
var $f398debcce5a5c55$exports = {};
$f398debcce5a5c55$exports = {
  "longPressMessage": `Dugo pritisnite ili pritisnite Alt + strelicu prema dole da otvorite meni`
};
var $9e9fef000aa4c013$exports = {};
$9e9fef000aa4c013$exports = {
  "longPressMessage": `H\xE5ll nedtryckt eller tryck p\xE5 Alt + pil ned\xE5t f\xF6r att \xF6ppna menyn`
};
var $c016c8183bbe3d68$exports = {};
$c016c8183bbe3d68$exports = {
  "longPressMessage": `Men\xFCy\xFC a\xE7mak i\xE7in uzun bas\u0131n veya Alt + A\u015Fa\u011F\u0131 Ok tu\u015Funa bas\u0131n`
};
var $ca4f6c8462244e62$exports = {};
$ca4f6c8462244e62$exports = {
  "longPressMessage": `\u0414\u043E\u0432\u0433\u043E \u0430\u0431\u043E \u0437\u0432\u0438\u0447\u0430\u0439\u043D\u043E \u043D\u0430\u0442\u0438\u0441\u043D\u0456\u0442\u044C \u043A\u043E\u043C\u0431\u0456\u043D\u0430\u0446\u0456\u044E \u043A\u043B\u0430\u0432\u0456\u0448 Alt \u0456 \u0441\u0442\u0440\u0456\u043B\u043A\u0430 \u0432\u043D\u0438\u0437, \u0449\u043E\u0431 \u0432\u0456\u0434\u043A\u0440\u0438\u0442\u0438 \u043C\u0435\u043D\u044E`
};
var $2d9960c02ccac927$exports = {};
$2d9960c02ccac927$exports = {
  "longPressMessage": `\u957F\u6309\u6216\u6309 Alt + \u5411\u4E0B\u65B9\u5411\u952E\u4EE5\u6253\u5F00\u83DC\u5355`
};
var $f1b682a4c8c5631c$exports = {};
$f1b682a4c8c5631c$exports = {
  "longPressMessage": `\u9577\u6309\u6216\u6309 Alt+\u5411\u4E0B\u9375\u4EE5\u958B\u555F\u529F\u80FD\u8868`
};
$9bdd31893c9700c3$exports = {
  "ar-AE": $c0398ad35c3639b7$exports,
  "bg-BG": $7af657c4165927c3$exports,
  "cs-CZ": $d95d4da6d531ab81$exports,
  "da-DK": $24ebda9c775dca17$exports,
  "de-DE": $743e0dfca6cab1e9$exports,
  "el-GR": $a2f41026e05f1c84$exports,
  "en-US": $43b800e97c901737$exports,
  "es-ES": $442f5f6ac211e29f$exports,
  "et-EE": $dff280acfeb2d8ac$exports,
  "fi-FI": $51608325613944d7$exports,
  "fr-FR": $c4a1b1eabeaa87be$exports,
  "he-IL": $8c74815cdee18d1b$exports,
  "hr-HR": $fd0e9ef6a7fe0ec9$exports,
  "hu-HU": $a89a74a39eba465a$exports,
  "it-IT": $edc7c66594a0ae8a$exports,
  "ja-JP": $f1ab51510712db52$exports,
  "ko-KR": $f9b672d9b82fa3d6$exports,
  "lt-LT": $a385f3910feda499$exports,
  "lv-LV": $4f1bde932c441789$exports,
  "nb-NO": $914a51a8a594d5be$exports,
  "nl-NL": $89aaf803103bb500$exports,
  "pl-PL": $c685891476dbaaca$exports,
  "pt-BR": $885879b9b10c2959$exports,
  "pt-PT": $6b39616688a51692$exports,
  "ro-RO": $f26362aed63f47e2$exports,
  "ru-RU": $06cbade644558bf0$exports,
  "sk-SK": $0a391ff68f9d59b1$exports,
  "sl-SI": $8193cf0e649c7928$exports,
  "sr-SP": $f398debcce5a5c55$exports,
  "sv-SE": $9e9fef000aa4c013$exports,
  "tr-TR": $c016c8183bbe3d68$exports,
  "uk-UA": $ca4f6c8462244e62$exports,
  "zh-CN": $2d9960c02ccac927$exports,
  "zh-TW": $f1b682a4c8c5631c$exports
};
function $168583247155ddda$export$dc9c12ed27dd1b49(props, state, ref) {
  let { type = "menu", isDisabled, trigger = "press" } = props;
  let menuTriggerId = (0, import_utils10.useId)();
  let { triggerProps, overlayProps } = (0, import_overlays2.useOverlayTrigger)({
    type
  }, state, ref);
  let onKeyDown = (e) => {
    if (isDisabled)
      return;
    if (trigger === "longPress" && !e.altKey)
      return;
    if (ref && ref.current)
      switch (e.key) {
        case "Enter":
        case " ":
          if (trigger === "longPress")
            return;
        case "ArrowDown":
          if (!("continuePropagation" in e))
            e.stopPropagation();
          e.preventDefault();
          state.toggle("first");
          break;
        case "ArrowUp":
          if (!("continuePropagation" in e))
            e.stopPropagation();
          e.preventDefault();
          state.toggle("last");
          break;
      }
  };
  let stringFormatter = (0, import_i18n2.useLocalizedStringFormatter)(/* @__PURE__ */ $parcel$interopDefault3($9bdd31893c9700c3$exports));
  let { longPressProps } = (0, import_interactions5.useLongPress)({
    isDisabled: isDisabled || trigger !== "longPress",
    accessibilityDescription: stringFormatter.format("longPressMessage"),
    onLongPressStart() {
      state.close();
    },
    onLongPress() {
      state.open("first");
    }
  });
  let pressProps = {
    onPressStart(e) {
      if (e.pointerType !== "touch" && e.pointerType !== "keyboard" && !isDisabled)
        state.toggle(e.pointerType === "virtual" ? "first" : null);
    },
    onPress(e) {
      if (e.pointerType === "touch" && !isDisabled)
        state.toggle();
    }
  };
  delete triggerProps.onPress;
  return {
    menuTriggerProps: __spreadProps(__spreadValues(__spreadValues({}, triggerProps), trigger === "press" ? pressProps : longPressProps), {
      id: menuTriggerId,
      onKeyDown
    }),
    menuProps: __spreadProps(__spreadValues({}, overlayProps), {
      "aria-labelledby": menuTriggerId,
      autoFocus: state.focusStrategy,
      onClose: state.close
    })
  };
}

// ../../node_modules/@react-stately/overlays/dist/module.js
var import_utils11 = __toESM(require_main());
function $fc909762b330b746$export$61c6a8c84e605fb6(props) {
  let [isOpen, setOpen] = (0, import_utils11.useControlledState)(props.isOpen, props.defaultOpen || false, props.onOpenChange);
  return {
    isOpen,
    setOpen,
    open() {
      setOpen(true);
    },
    close() {
      setOpen(false);
    },
    toggle() {
      setOpen(!isOpen);
    }
  };
}

// ../../node_modules/@react-stately/menu/dist/module.js
init_preact();
function $a28c903ee9ad8dc5$export$79fefeb1c2091ac3(props) {
  let overlayTriggerState = $fc909762b330b746$export$61c6a8c84e605fb6(props);
  let [focusStrategy1, setFocusStrategy] = (0, preact_exports.useState)(null);
  return __spreadProps(__spreadValues({
    focusStrategy: focusStrategy1
  }, overlayTriggerState), {
    open(focusStrategy = null) {
      setFocusStrategy(focusStrategy);
      overlayTriggerState.open();
    },
    toggle(focusStrategy = null) {
      setFocusStrategy(focusStrategy);
      overlayTriggerState.toggle();
    }
  });
}

// ../../node_modules/@react-stately/selection/dist/module.js
init_preact();
var import_utils12 = __toESM(require_main());
var $e40ea825a81a3709$export$52baac22726c72bf = class extends Set {
  constructor(keys, anchorKey, currentKey) {
    super(keys);
    if (keys instanceof $e40ea825a81a3709$export$52baac22726c72bf) {
      this.anchorKey = anchorKey || keys.anchorKey;
      this.currentKey = currentKey || keys.currentKey;
    } else {
      this.anchorKey = anchorKey;
      this.currentKey = currentKey;
    }
  }
};
function $7af3f5b51489e0b5$var$equalSets(setA, setB) {
  if (setA.size !== setB.size)
    return false;
  for (let item of setA) {
    if (!setB.has(item))
      return false;
  }
  return true;
}
function $7af3f5b51489e0b5$export$253fe78d46329472(props) {
  let { selectionMode = "none", disallowEmptySelection, allowDuplicateSelectionEvents, selectionBehavior: selectionBehaviorProp = "toggle", disabledBehavior = "all" } = props;
  let isFocusedRef = (0, preact_exports.useRef)(false);
  let [, setFocused] = (0, preact_exports.useState)(false);
  let focusedKeyRef = (0, preact_exports.useRef)(null);
  let childFocusStrategyRef = (0, preact_exports.useRef)(null);
  let [, setFocusedKey] = (0, preact_exports.useState)(null);
  let selectedKeysProp = (0, preact_exports.useMemo)(
    () => $7af3f5b51489e0b5$var$convertSelection(props.selectedKeys),
    [
      props.selectedKeys
    ]
  );
  let defaultSelectedKeys = (0, preact_exports.useMemo)(
    () => $7af3f5b51489e0b5$var$convertSelection(props.defaultSelectedKeys, new $e40ea825a81a3709$export$52baac22726c72bf()),
    [
      props.defaultSelectedKeys
    ]
  );
  let [selectedKeys, setSelectedKeys] = (0, import_utils12.useControlledState)(selectedKeysProp, defaultSelectedKeys, props.onSelectionChange);
  let disabledKeysProp = (0, preact_exports.useMemo)(
    () => props.disabledKeys ? new Set(props.disabledKeys) : /* @__PURE__ */ new Set(),
    [
      props.disabledKeys
    ]
  );
  let [selectionBehavior, setSelectionBehavior] = (0, preact_exports.useState)(selectionBehaviorProp);
  if (selectionBehaviorProp === "replace" && selectionBehavior === "toggle" && typeof selectedKeys === "object" && selectedKeys.size === 0)
    setSelectionBehavior("replace");
  let lastSelectionBehavior = (0, preact_exports.useRef)(selectionBehaviorProp);
  (0, preact_exports.useEffect)(() => {
    if (selectionBehaviorProp !== lastSelectionBehavior.current) {
      setSelectionBehavior(selectionBehaviorProp);
      lastSelectionBehavior.current = selectionBehaviorProp;
    }
  }, [
    selectionBehaviorProp
  ]);
  return {
    selectionMode,
    disallowEmptySelection,
    selectionBehavior,
    setSelectionBehavior,
    get isFocused() {
      return isFocusedRef.current;
    },
    setFocused(f) {
      isFocusedRef.current = f;
      setFocused(f);
    },
    get focusedKey() {
      return focusedKeyRef.current;
    },
    get childFocusStrategy() {
      return childFocusStrategyRef.current;
    },
    setFocusedKey(k, childFocusStrategy = "first") {
      focusedKeyRef.current = k;
      childFocusStrategyRef.current = childFocusStrategy;
      setFocusedKey(k);
    },
    selectedKeys,
    setSelectedKeys(keys) {
      if (allowDuplicateSelectionEvents || !$7af3f5b51489e0b5$var$equalSets(keys, selectedKeys))
        setSelectedKeys(keys);
    },
    disabledKeys: disabledKeysProp,
    disabledBehavior
  };
}
function $7af3f5b51489e0b5$var$convertSelection(selection, defaultValue) {
  if (!selection)
    return defaultValue;
  return selection === "all" ? "all" : new $e40ea825a81a3709$export$52baac22726c72bf(selection);
}
var $d496c0a20b6e58ec$export$6c8a5aaad13c9852 = class {
  get selectionMode() {
    return this.state.selectionMode;
  }
  get disallowEmptySelection() {
    return this.state.disallowEmptySelection;
  }
  get selectionBehavior() {
    return this.state.selectionBehavior;
  }
  setSelectionBehavior(selectionBehavior) {
    this.state.setSelectionBehavior(selectionBehavior);
  }
  get isFocused() {
    return this.state.isFocused;
  }
  setFocused(isFocused) {
    this.state.setFocused(isFocused);
  }
  get focusedKey() {
    return this.state.focusedKey;
  }
  get childFocusStrategy() {
    return this.state.childFocusStrategy;
  }
  setFocusedKey(key, childFocusStrategy) {
    this.state.setFocusedKey(key, childFocusStrategy);
  }
  get selectedKeys() {
    return this.state.selectedKeys === "all" ? new Set(this.getSelectAllKeys()) : this.state.selectedKeys;
  }
  get rawSelection() {
    return this.state.selectedKeys;
  }
  isSelected(key) {
    if (this.state.selectionMode === "none")
      return false;
    key = this.getKey(key);
    return this.state.selectedKeys === "all" ? this.canSelectItem(key) : this.state.selectedKeys.has(key);
  }
  get isEmpty() {
    return this.state.selectedKeys !== "all" && this.state.selectedKeys.size === 0;
  }
  get isSelectAll() {
    if (this.isEmpty)
      return false;
    if (this.state.selectedKeys === "all")
      return true;
    if (this._isSelectAll != null)
      return this._isSelectAll;
    let allKeys = this.getSelectAllKeys();
    let selectedKeys = this.state.selectedKeys;
    this._isSelectAll = allKeys.every(
      (k) => selectedKeys.has(k)
    );
    return this._isSelectAll;
  }
  get firstSelectedKey() {
    let first = null;
    for (let key of this.state.selectedKeys) {
      let item = this.collection.getItem(key);
      if (!first || (item === null || item === void 0 ? void 0 : item.index) < first.index)
        first = item;
    }
    return first === null || first === void 0 ? void 0 : first.key;
  }
  get lastSelectedKey() {
    let last = null;
    for (let key of this.state.selectedKeys) {
      let item = this.collection.getItem(key);
      if (!last || (item === null || item === void 0 ? void 0 : item.index) > last.index)
        last = item;
    }
    return last === null || last === void 0 ? void 0 : last.key;
  }
  get disabledKeys() {
    return this.state.disabledKeys;
  }
  get disabledBehavior() {
    return this.state.disabledBehavior;
  }
  extendSelection(toKey) {
    if (this.selectionMode === "none")
      return;
    if (this.selectionMode === "single") {
      this.replaceSelection(toKey);
      return;
    }
    toKey = this.getKey(toKey);
    let selection;
    if (this.state.selectedKeys === "all")
      selection = new $e40ea825a81a3709$export$52baac22726c72bf([
        toKey
      ], toKey, toKey);
    else {
      let selectedKeys = this.state.selectedKeys;
      let anchorKey = selectedKeys.anchorKey || toKey;
      selection = new $e40ea825a81a3709$export$52baac22726c72bf(selectedKeys, anchorKey, toKey);
      for (let key of this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey))
        selection.delete(key);
      for (let key1 of this.getKeyRange(toKey, anchorKey))
        if (this.canSelectItem(key1))
          selection.add(key1);
    }
    this.state.setSelectedKeys(selection);
  }
  getKeyRange(from, to) {
    let fromItem = this.collection.getItem(from);
    let toItem = this.collection.getItem(to);
    if (fromItem && toItem) {
      if (fromItem.index <= toItem.index)
        return this.getKeyRangeInternal(from, to);
      return this.getKeyRangeInternal(to, from);
    }
    return [];
  }
  getKeyRangeInternal(from, to) {
    let keys = [];
    let key = from;
    while (key) {
      let item = this.collection.getItem(key);
      if (item && item.type === "item" || item.type === "cell" && this.allowsCellSelection)
        keys.push(key);
      if (key === to)
        return keys;
      key = this.collection.getKeyAfter(key);
    }
    return [];
  }
  getKey(key) {
    let item = this.collection.getItem(key);
    if (!item)
      return key;
    if (item.type === "cell" && this.allowsCellSelection)
      return key;
    while (item.type !== "item" && item.parentKey != null)
      item = this.collection.getItem(item.parentKey);
    if (!item || item.type !== "item")
      return null;
    return item.key;
  }
  toggleSelection(key) {
    if (this.selectionMode === "none")
      return;
    if (this.selectionMode === "single" && !this.isSelected(key)) {
      this.replaceSelection(key);
      return;
    }
    key = this.getKey(key);
    if (key == null)
      return;
    let keys = new $e40ea825a81a3709$export$52baac22726c72bf(this.state.selectedKeys === "all" ? this.getSelectAllKeys() : this.state.selectedKeys);
    if (keys.has(key))
      keys.delete(key);
    else if (this.canSelectItem(key)) {
      keys.add(key);
      keys.anchorKey = key;
      keys.currentKey = key;
    }
    if (this.disallowEmptySelection && keys.size === 0)
      return;
    this.state.setSelectedKeys(keys);
  }
  replaceSelection(key) {
    if (this.selectionMode === "none")
      return;
    key = this.getKey(key);
    if (key == null)
      return;
    let selection = this.canSelectItem(key) ? new $e40ea825a81a3709$export$52baac22726c72bf([
      key
    ], key, key) : new $e40ea825a81a3709$export$52baac22726c72bf();
    this.state.setSelectedKeys(selection);
  }
  setSelectedKeys(keys) {
    if (this.selectionMode === "none")
      return;
    let selection = new $e40ea825a81a3709$export$52baac22726c72bf();
    for (let key of keys) {
      key = this.getKey(key);
      if (key != null) {
        selection.add(key);
        if (this.selectionMode === "single")
          break;
      }
    }
    this.state.setSelectedKeys(selection);
  }
  getSelectAllKeys() {
    let keys = [];
    let addKeys = (key) => {
      while (key) {
        if (this.canSelectItem(key)) {
          let item = this.collection.getItem(key);
          if (item.type === "item")
            keys.push(key);
          if (item.hasChildNodes && (this.allowsCellSelection || item.type !== "item"))
            addKeys([
              ...item.childNodes
            ][0].key);
        }
        key = this.collection.getKeyAfter(key);
      }
    };
    addKeys(this.collection.getFirstKey());
    return keys;
  }
  selectAll() {
    if (this.selectionMode === "multiple")
      this.state.setSelectedKeys("all");
  }
  clearSelection() {
    if (!this.disallowEmptySelection && (this.state.selectedKeys === "all" || this.state.selectedKeys.size > 0))
      this.state.setSelectedKeys(new $e40ea825a81a3709$export$52baac22726c72bf());
  }
  toggleSelectAll() {
    if (this.isSelectAll)
      this.clearSelection();
    else
      this.selectAll();
  }
  select(key, e) {
    if (this.selectionMode === "none")
      return;
    if (this.selectionMode === "single") {
      if (this.isSelected(key) && !this.disallowEmptySelection)
        this.toggleSelection(key);
      else
        this.replaceSelection(key);
    } else if (this.selectionBehavior === "toggle" || e && (e.pointerType === "touch" || e.pointerType === "virtual"))
      this.toggleSelection(key);
    else
      this.replaceSelection(key);
  }
  isSelectionEqual(selection) {
    if (selection === this.state.selectedKeys)
      return true;
    let selectedKeys = this.selectedKeys;
    if (selection.size !== selectedKeys.size)
      return false;
    for (let key of selection) {
      if (!selectedKeys.has(key))
        return false;
    }
    for (let key2 of selectedKeys) {
      if (!selection.has(key2))
        return false;
    }
    return true;
  }
  canSelectItem(key) {
    if (this.state.selectionMode === "none" || this.state.disabledKeys.has(key))
      return false;
    let item = this.collection.getItem(key);
    if (!item || item.type === "cell" && !this.allowsCellSelection)
      return false;
    return true;
  }
  isDisabled(key) {
    return this.state.disabledKeys.has(key) && this.state.disabledBehavior === "all";
  }
  constructor(collection, state, options) {
    this.collection = collection;
    this.state = state;
    var ref;
    this.allowsCellSelection = (ref = options === null || options === void 0 ? void 0 : options.allowsCellSelection) !== null && ref !== void 0 ? ref : false;
    this._isSelectAll = null;
  }
};

// ../../node_modules/@react-spectrum/layout/dist/module.js
var import_utils13 = __toESM(require_main9());
var import_utils14 = __toESM(require_main3());
init_preact();
var import_ssr = __toESM(require_main2());
function $parcel$interopDefault4(a) {
  return a && a.__esModule ? a.default : a;
}
function $parcel$export3(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $994c48bfb00b620b$var$gridStyleProps = __spreadProps(__spreadValues({}, import_utils13.baseStyleProps), {
  autoFlow: [
    "gridAutoFlow",
    import_utils13.passthroughStyle
  ],
  autoColumns: [
    "gridAutoColumns",
    $994c48bfb00b620b$var$gridDimensionValue
  ],
  autoRows: [
    "gridAutoRows",
    $994c48bfb00b620b$var$gridDimensionValue
  ],
  areas: [
    "gridTemplateAreas",
    $994c48bfb00b620b$var$gridTemplateAreasValue
  ],
  columns: [
    "gridTemplateColumns",
    $994c48bfb00b620b$var$gridTemplateValue
  ],
  rows: [
    "gridTemplateRows",
    $994c48bfb00b620b$var$gridTemplateValue
  ],
  gap: [
    "gap",
    import_utils13.dimensionValue
  ],
  rowGap: [
    "rowGap",
    import_utils13.dimensionValue
  ],
  columnGap: [
    "columnGap",
    import_utils13.dimensionValue
  ],
  justifyItems: [
    "justifyItems",
    import_utils13.passthroughStyle
  ],
  justifyContent: [
    "justifyContent",
    import_utils13.passthroughStyle
  ],
  alignItems: [
    "alignItems",
    import_utils13.passthroughStyle
  ],
  alignContent: [
    "alignContent",
    import_utils13.passthroughStyle
  ]
});
function $994c48bfb00b620b$var$Grid(props, ref) {
  let _a3 = props, { children } = _a3, otherProps = __objRest(_a3, ["children"]);
  let { styleProps } = (0, import_utils13.useStyleProps)(otherProps, $994c48bfb00b620b$var$gridStyleProps);
  styleProps.style.display = "grid";
  let domRef = (0, import_utils13.useDOMRef)(ref);
  return /* @__PURE__ */ preact_default.createElement("div", __spreadProps(__spreadValues(__spreadValues({}, (0, import_utils14.filterDOMProps)(otherProps)), styleProps), {
    ref: domRef
  }), children);
}
function $994c48bfb00b620b$var$gridTemplateAreasValue(value) {
  return value.map(
    (v) => `"${v}"`
  ).join("\n");
}
function $994c48bfb00b620b$var$gridDimensionValue(value) {
  if (/^max-content|min-content|minmax|auto|fit-content|repeat|subgrid/.test(value))
    return value;
  return (0, import_utils13.dimensionValue)(value);
}
function $994c48bfb00b620b$var$gridTemplateValue(value) {
  if (Array.isArray(value))
    return value.map($994c48bfb00b620b$var$gridDimensionValue).join(" ");
  return $994c48bfb00b620b$var$gridDimensionValue(value);
}
var $994c48bfb00b620b$export$ef2184bd89960b14 = /* @__PURE__ */ (0, preact_exports.forwardRef)($994c48bfb00b620b$var$Grid);
var $01dd1839b5376a46$exports = {};
$parcel$export3($01dd1839b5376a46$exports, "flex-container", () => $01dd1839b5376a46$export$69d7a39fa31a000b, (v) => $01dd1839b5376a46$export$69d7a39fa31a000b = v);
$parcel$export3($01dd1839b5376a46$exports, "flex", () => $01dd1839b5376a46$export$97691fbb80847c19, (v) => $01dd1839b5376a46$export$97691fbb80847c19 = v);
$parcel$export3($01dd1839b5376a46$exports, "flex-gap", () => $01dd1839b5376a46$export$31a9da8b58047a44, (v) => $01dd1839b5376a46$export$31a9da8b58047a44 = v);
var $01dd1839b5376a46$export$69d7a39fa31a000b;
var $01dd1839b5376a46$export$97691fbb80847c19;
var $01dd1839b5376a46$export$31a9da8b58047a44;
$01dd1839b5376a46$export$69d7a39fa31a000b = "flex-container_e15493";
$01dd1839b5376a46$export$97691fbb80847c19 = "flex_e15493";
$01dd1839b5376a46$export$31a9da8b58047a44 = "flex-gap_e15493";
var $884c64d19340d345$var$flexStyleProps = {
  direction: [
    "flexDirection",
    import_utils13.passthroughStyle
  ],
  wrap: [
    "flexWrap",
    $884c64d19340d345$var$flexWrapValue
  ],
  justifyContent: [
    "justifyContent",
    $884c64d19340d345$var$flexAlignValue
  ],
  alignItems: [
    "alignItems",
    $884c64d19340d345$var$flexAlignValue
  ],
  alignContent: [
    "alignContent",
    $884c64d19340d345$var$flexAlignValue
  ]
};
function $884c64d19340d345$var$Flex(props, ref) {
  let _a3 = props, { children } = _a3, otherProps = __objRest(_a3, ["children"]);
  let breakpointProvider = (0, import_utils13.useBreakpoint)();
  let matchedBreakpoints = (breakpointProvider === null || breakpointProvider === void 0 ? void 0 : breakpointProvider.matchedBreakpoints) || [
    "base"
  ];
  let { styleProps } = (0, import_utils13.useStyleProps)(otherProps);
  let { styleProps: flexStyle } = (0, import_utils13.useStyleProps)(otherProps, $884c64d19340d345$var$flexStyleProps);
  let domRef = (0, import_utils13.useDOMRef)(ref);
  let isSSR = (0, import_ssr.useIsSSR)();
  if ((props.gap || props.rowGap || props.columnGap) && (isSSR || !$884c64d19340d345$var$isFlexGapSupported())) {
    let style2 = __spreadProps(__spreadValues({}, flexStyle.style), {
      "--column-gap": props.columnGap != null ? (0, import_utils13.responsiveDimensionValue)(props.columnGap, matchedBreakpoints) : void 0,
      "--row-gap": props.rowGap != null ? (0, import_utils13.responsiveDimensionValue)(props.rowGap, matchedBreakpoints) : void 0,
      "--gap": props.gap != null ? (0, import_utils13.responsiveDimensionValue)(props.gap, matchedBreakpoints) : void 0
    });
    return /* @__PURE__ */ preact_default.createElement("div", __spreadProps(__spreadValues(__spreadValues({}, (0, import_utils14.filterDOMProps)(otherProps)), styleProps), {
      className: (0, import_utils13.classNames)(/* @__PURE__ */ $parcel$interopDefault4($01dd1839b5376a46$exports), "flex-container", styleProps.className),
      ref: domRef
    }), /* @__PURE__ */ preact_default.createElement("div", {
      className: (0, import_utils13.classNames)(/* @__PURE__ */ $parcel$interopDefault4($01dd1839b5376a46$exports), "flex", "flex-gap"),
      style: style2
    }, children));
  }
  let style = __spreadValues(__spreadValues({}, styleProps.style), flexStyle.style);
  if (props.gap != null)
    style.gap = (0, import_utils13.responsiveDimensionValue)(props.gap, matchedBreakpoints);
  if (props.columnGap != null)
    style.columnGap = (0, import_utils13.responsiveDimensionValue)(props.columnGap, matchedBreakpoints);
  if (props.rowGap != null)
    style.rowGap = (0, import_utils13.responsiveDimensionValue)(props.rowGap, matchedBreakpoints);
  return /* @__PURE__ */ preact_default.createElement("div", __spreadProps(__spreadValues({}, (0, import_utils14.filterDOMProps)(otherProps)), {
    className: (0, import_utils13.classNames)(/* @__PURE__ */ $parcel$interopDefault4($01dd1839b5376a46$exports), "flex", styleProps.className),
    style,
    ref: domRef
  }), children);
}
function $884c64d19340d345$var$flexAlignValue(value) {
  if (value === "start")
    return "flex-start";
  if (value === "end")
    return "flex-end";
  return value;
}
function $884c64d19340d345$var$flexWrapValue(value) {
  if (typeof value === "boolean")
    return value ? "wrap" : "nowrap";
  return value;
}
var $884c64d19340d345$var$_isFlexGapSupported = null;
function $884c64d19340d345$var$isFlexGapSupported() {
  if ($884c64d19340d345$var$_isFlexGapSupported != null)
    return $884c64d19340d345$var$_isFlexGapSupported;
  if (typeof document === "undefined")
    return false;
  var flex = document.createElement("div");
  flex.style.display = "flex";
  flex.style.flexDirection = "column";
  flex.style.rowGap = "1px";
  flex.appendChild(document.createElement("div"));
  flex.appendChild(document.createElement("div"));
  document.body.appendChild(flex);
  $884c64d19340d345$var$_isFlexGapSupported = flex.scrollHeight === 1;
  flex.parentNode.removeChild(flex);
  return $884c64d19340d345$var$_isFlexGapSupported;
}
var $884c64d19340d345$export$f51f4c4ede09e011 = /* @__PURE__ */ (0, preact_exports.forwardRef)($884c64d19340d345$var$Flex);

// ../../node_modules/@react-aria/separator/dist/module.js
var import_utils15 = __toESM(require_main3());
function $f4b273590fab9f93$export$52210f68a14655d0(props) {
  let domProps = (0, import_utils15.filterDOMProps)(props, {
    labelable: true
  });
  let ariaOrientation;
  if (props.orientation === "vertical")
    ariaOrientation = "vertical";
  if (props.elementType !== "hr")
    return {
      separatorProps: __spreadProps(__spreadValues({}, domProps), {
        role: "separator",
        "aria-orientation": ariaOrientation
      })
    };
  return {
    separatorProps: domProps
  };
}

// ../../node_modules/@react-stately/list/dist/module.js
init_preact();
var import_utils16 = __toESM(require_main());
var tmp = Symbol.iterator;
var $a02d57049d202695$export$d085fb9e920b5ca7 = class {
  *[tmp]() {
    yield* this.iterable;
  }
  get size() {
    return this.keyMap.size;
  }
  getKeys() {
    return this.keyMap.keys();
  }
  getKeyBefore(key) {
    let node = this.keyMap.get(key);
    return node ? node.prevKey : null;
  }
  getKeyAfter(key) {
    let node = this.keyMap.get(key);
    return node ? node.nextKey : null;
  }
  getFirstKey() {
    return this.firstKey;
  }
  getLastKey() {
    return this.lastKey;
  }
  getItem(key) {
    return this.keyMap.get(key);
  }
  at(idx) {
    const keys = [
      ...this.getKeys()
    ];
    return this.getItem(keys[idx]);
  }
  constructor(nodes) {
    this.keyMap = /* @__PURE__ */ new Map();
    this.iterable = nodes;
    let visit = (node) => {
      this.keyMap.set(node.key, node);
      if (node.childNodes && node.type === "section")
        for (let child of node.childNodes)
          visit(child);
    };
    for (let node2 of nodes)
      visit(node2);
    let last;
    let index = 0;
    for (let [key, node1] of this.keyMap) {
      if (last) {
        last.nextKey = key;
        node1.prevKey = last.key;
      } else {
        this.firstKey = key;
        node1.prevKey = void 0;
      }
      if (node1.type === "item")
        node1.index = index++;
      last = node1;
      last.nextKey = void 0;
    }
    this.lastKey = last === null || last === void 0 ? void 0 : last.key;
  }
};
function $e72dd72e1c76a225$export$2f645645f7bca764(props) {
  let { filter } = props;
  let selectionState = $7af3f5b51489e0b5$export$253fe78d46329472(props);
  let disabledKeys = (0, preact_exports.useMemo)(
    () => props.disabledKeys ? new Set(props.disabledKeys) : /* @__PURE__ */ new Set(),
    [
      props.disabledKeys
    ]
  );
  let factory = (nodes) => filter ? new $a02d57049d202695$export$d085fb9e920b5ca7(filter(nodes)) : new $a02d57049d202695$export$d085fb9e920b5ca7(nodes);
  let context = (0, preact_exports.useMemo)(
    () => ({
      suppressTextValueWarning: props.suppressTextValueWarning
    }),
    [
      props.suppressTextValueWarning
    ]
  );
  let collection = $7613b1592d41b092$export$6cd28814d92fa9c9(props, factory, context, [
    filter
  ]);
  (0, preact_exports.useEffect)(() => {
    if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey))
      selectionState.setFocusedKey(null);
  }, [
    collection,
    selectionState.focusedKey
  ]);
  return {
    collection,
    disabledKeys,
    selectionManager: new $d496c0a20b6e58ec$export$6c8a5aaad13c9852(collection, selectionState)
  };
}
function $a0d645289fe9b86b$export$e7f05e985daf4b5f(props) {
  var _defaultSelectedKey;
  let [selectedKey, setSelectedKey] = (0, import_utils16.useControlledState)(props.selectedKey, (_defaultSelectedKey = props.defaultSelectedKey) !== null && _defaultSelectedKey !== void 0 ? _defaultSelectedKey : null, props.onSelectionChange);
  let selectedKeys = (0, preact_exports.useMemo)(
    () => selectedKey != null ? [
      selectedKey
    ] : [],
    [
      selectedKey
    ]
  );
  let { collection, disabledKeys, selectionManager } = $e72dd72e1c76a225$export$2f645645f7bca764(__spreadProps(__spreadValues({}, props), {
    selectionMode: "single",
    disallowEmptySelection: true,
    allowDuplicateSelectionEvents: true,
    selectedKeys,
    onSelectionChange: (keys) => {
      let key = keys.values().next().value;
      if (key === selectedKey && props.onSelectionChange)
        props.onSelectionChange(key);
      setSelectedKey(key);
    }
  }));
  let selectedItem = selectedKey != null ? collection.getItem(selectedKey) : null;
  return {
    collection,
    disabledKeys,
    selectionManager,
    selectedKey,
    setSelectedKey,
    selectedItem
  };
}

// ../../node_modules/@react-spectrum/buttongroup/dist/module.js
var import_utils17 = __toESM(require_main9());
var import_utils18 = __toESM(require_main3());
var import_provider3 = __toESM(require_main13());
init_preact();
function $parcel$interopDefault5(a) {
  return a && a.__esModule ? a.default : a;
}
function $parcel$export4(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $fddc5368d2db28a6$exports = {};
$parcel$export4($fddc5368d2db28a6$exports, "spectrum-ButtonGroup", () => $fddc5368d2db28a6$export$a92faf51352ac608, (v) => $fddc5368d2db28a6$export$a92faf51352ac608 = v);
$parcel$export4($fddc5368d2db28a6$exports, "spectrum-ButtonGroup-Button", () => $fddc5368d2db28a6$export$7184de2337c1927f, (v) => $fddc5368d2db28a6$export$7184de2337c1927f = v);
$parcel$export4($fddc5368d2db28a6$exports, "spectrum-ButtonGroup--alignEnd", () => $fddc5368d2db28a6$export$30e96c53d7beca11, (v) => $fddc5368d2db28a6$export$30e96c53d7beca11 = v);
$parcel$export4($fddc5368d2db28a6$exports, "spectrum-ButtonGroup--alignCenter", () => $fddc5368d2db28a6$export$252bc7c4ae05757, (v) => $fddc5368d2db28a6$export$252bc7c4ae05757 = v);
$parcel$export4($fddc5368d2db28a6$exports, "spectrum-ButtonGroup--vertical", () => $fddc5368d2db28a6$export$84d9c0e1917a4eaf, (v) => $fddc5368d2db28a6$export$84d9c0e1917a4eaf = v);
var $fddc5368d2db28a6$export$a92faf51352ac608;
var $fddc5368d2db28a6$export$7184de2337c1927f;
var $fddc5368d2db28a6$export$30e96c53d7beca11;
var $fddc5368d2db28a6$export$252bc7c4ae05757;
var $fddc5368d2db28a6$export$84d9c0e1917a4eaf;
$fddc5368d2db28a6$export$a92faf51352ac608 = "spectrum-ButtonGroup_b10c2f";
$fddc5368d2db28a6$export$7184de2337c1927f = "spectrum-ButtonGroup-Button_b10c2f";
$fddc5368d2db28a6$export$30e96c53d7beca11 = "spectrum-ButtonGroup--alignEnd_b10c2f";
$fddc5368d2db28a6$export$252bc7c4ae05757 = "spectrum-ButtonGroup--alignCenter_b10c2f";
$fddc5368d2db28a6$export$84d9c0e1917a4eaf = "spectrum-ButtonGroup--vertical_b10c2f";
function $bd4bfa55854eb3bf$var$ButtonGroup(props, ref) {
  let { scale } = (0, import_provider3.useProvider)();
  props = (0, import_provider3.useProviderProps)(props);
  props = (0, import_utils17.useSlotProps)(props, "buttonGroup");
  let _a3 = props, { children, orientation = "horizontal", isDisabled, align = "start" } = _a3, otherProps = __objRest(_a3, ["children", "orientation", "isDisabled", "align"]);
  let { styleProps } = (0, import_utils17.useStyleProps)(otherProps);
  let domRef = (0, import_utils17.useDOMRef)(ref);
  let [hasOverflow, setHasOverflow] = (0, import_utils18.useValueEffect)(false);
  let checkForOverflow = (0, preact_exports.useCallback)(() => {
    let computeHasOverflow = () => {
      if (domRef.current && orientation === "horizontal") {
        let buttonGroupChildren = Array.from(domRef.current.children);
        let maxX = domRef.current.offsetWidth + 1;
        if (buttonGroupChildren.some(
          (child) => child.offsetLeft < 0 || child.offsetLeft + child.offsetWidth > maxX
        ))
          return true;
        return false;
      }
    };
    if (orientation === "horizontal")
      setHasOverflow(function* () {
        yield false;
        yield computeHasOverflow();
      });
  }, [
    domRef,
    orientation,
    scale,
    setHasOverflow,
    children
  ]);
  (0, import_utils18.useLayoutEffect)(() => {
    checkForOverflow();
  }, [
    checkForOverflow
  ]);
  let parent = (0, preact_exports.useRef)();
  (0, import_utils18.useLayoutEffect)(() => {
    if (domRef.current)
      parent.current = domRef.current.parentElement;
  }, [
    domRef.current
  ]);
  (0, import_utils17.useResizeObserver)({
    ref: parent,
    onResize: checkForOverflow
  });
  return /* @__PURE__ */ preact_default.createElement("div", __spreadProps(__spreadValues(__spreadValues({}, (0, import_utils18.filterDOMProps)(otherProps)), styleProps), {
    ref: domRef,
    className: (0, import_utils17.classNames)(/* @__PURE__ */ $parcel$interopDefault5($fddc5368d2db28a6$exports), "spectrum-ButtonGroup", {
      "spectrum-ButtonGroup--vertical": orientation === "vertical" || hasOverflow,
      "spectrum-ButtonGroup--alignEnd": align === "end",
      "spectrum-ButtonGroup--alignCenter": align === "center"
    }, styleProps.className)
  }), /* @__PURE__ */ preact_default.createElement(import_utils17.SlotProvider, {
    slots: {
      button: {
        UNSAFE_className: (0, import_utils17.classNames)(/* @__PURE__ */ $parcel$interopDefault5($fddc5368d2db28a6$exports), "spectrum-ButtonGroup-Button")
      }
    }
  }, /* @__PURE__ */ preact_default.createElement(import_provider3.Provider, {
    isDisabled
  }, children)));
}
var $bd4bfa55854eb3bf$export$69b1032f2ecdf404 = /* @__PURE__ */ preact_default.forwardRef($bd4bfa55854eb3bf$var$ButtonGroup);

// ../../node_modules/@react-spectrum/label/dist/module.js
var import_utils19 = __toESM(require_main9());
var import_utils20 = __toESM(require_main3());
init_preact();

// ../../node_modules/@react-spectrum/form/dist/module.js
init_preact();
function $parcel$export5(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $cd231e464c886c86$exports = {};
$parcel$export5($cd231e464c886c86$exports, "spectrum-FieldLabel", () => $cd231e464c886c86$export$493d18e796ae054, (v) => $cd231e464c886c86$export$493d18e796ae054 = v);
$parcel$export5($cd231e464c886c86$exports, "spectrum-FieldLabel--positionSide", () => $cd231e464c886c86$export$9e6f19dc21f22f2e, (v) => $cd231e464c886c86$export$9e6f19dc21f22f2e = v);
$parcel$export5($cd231e464c886c86$exports, "spectrum-FieldLabel-requiredIcon", () => $cd231e464c886c86$export$7c47642c7d46f3c9, (v) => $cd231e464c886c86$export$7c47642c7d46f3c9 = v);
$parcel$export5($cd231e464c886c86$exports, "spectrum-FieldLabel--alignEnd", () => $cd231e464c886c86$export$885efcc08143a987, (v) => $cd231e464c886c86$export$885efcc08143a987 = v);
$parcel$export5($cd231e464c886c86$exports, "spectrum-Field", () => $cd231e464c886c86$export$f6d480ae1e56eba0, (v) => $cd231e464c886c86$export$f6d480ae1e56eba0 = v);
$parcel$export5($cd231e464c886c86$exports, "spectrum-Field--positionTop", () => $cd231e464c886c86$export$a4ea780a9064d7f9, (v) => $cd231e464c886c86$export$a4ea780a9064d7f9 = v);
$parcel$export5($cd231e464c886c86$exports, "spectrum-Field-field", () => $cd231e464c886c86$export$3ab8a3dc7f0563d, (v) => $cd231e464c886c86$export$3ab8a3dc7f0563d = v);
$parcel$export5($cd231e464c886c86$exports, "spectrum-Field--positionSide", () => $cd231e464c886c86$export$2963225c91179589, (v) => $cd231e464c886c86$export$2963225c91179589 = v);
$parcel$export5($cd231e464c886c86$exports, "spectrum-Field-wrapper", () => $cd231e464c886c86$export$127df0b7290eb8ef, (v) => $cd231e464c886c86$export$127df0b7290eb8ef = v);
$parcel$export5($cd231e464c886c86$exports, "spectrum-Form", () => $cd231e464c886c86$export$94d2bcc94afabd89, (v) => $cd231e464c886c86$export$94d2bcc94afabd89 = v);
$parcel$export5($cd231e464c886c86$exports, "spectrum-Form--positionSide", () => $cd231e464c886c86$export$7f44db659563c8f4, (v) => $cd231e464c886c86$export$7f44db659563c8f4 = v);
$parcel$export5($cd231e464c886c86$exports, "spectrum-Form--positionTop", () => $cd231e464c886c86$export$11b8bc81fe551057, (v) => $cd231e464c886c86$export$11b8bc81fe551057 = v);
$parcel$export5($cd231e464c886c86$exports, "spectrum-StaticField", () => $cd231e464c886c86$export$a8558488b380a41e, (v) => $cd231e464c886c86$export$a8558488b380a41e = v);
$parcel$export5($cd231e464c886c86$exports, "spectrum-Form-itemLabel", () => $cd231e464c886c86$export$51ec27881a1e3928, (v) => $cd231e464c886c86$export$51ec27881a1e3928 = v);
$parcel$export5($cd231e464c886c86$exports, "is-disabled", () => $cd231e464c886c86$export$d35bc1e505d1ebbf, (v) => $cd231e464c886c86$export$d35bc1e505d1ebbf = v);
var $cd231e464c886c86$export$493d18e796ae054;
var $cd231e464c886c86$export$9e6f19dc21f22f2e;
var $cd231e464c886c86$export$7c47642c7d46f3c9;
var $cd231e464c886c86$export$885efcc08143a987;
var $cd231e464c886c86$export$f6d480ae1e56eba0;
var $cd231e464c886c86$export$a4ea780a9064d7f9;
var $cd231e464c886c86$export$3ab8a3dc7f0563d;
var $cd231e464c886c86$export$2963225c91179589;
var $cd231e464c886c86$export$127df0b7290eb8ef;
var $cd231e464c886c86$export$94d2bcc94afabd89;
var $cd231e464c886c86$export$7f44db659563c8f4;
var $cd231e464c886c86$export$11b8bc81fe551057;
var $cd231e464c886c86$export$a8558488b380a41e;
var $cd231e464c886c86$export$51ec27881a1e3928;
var $cd231e464c886c86$export$d35bc1e505d1ebbf;
$cd231e464c886c86$export$493d18e796ae054 = "spectrum-FieldLabel_d2db1f";
$cd231e464c886c86$export$9e6f19dc21f22f2e = "spectrum-FieldLabel--positionSide_d2db1f";
$cd231e464c886c86$export$7c47642c7d46f3c9 = "spectrum-FieldLabel-requiredIcon_d2db1f";
$cd231e464c886c86$export$885efcc08143a987 = "spectrum-FieldLabel--alignEnd_d2db1f";
$cd231e464c886c86$export$f6d480ae1e56eba0 = "spectrum-Field_d2db1f";
$cd231e464c886c86$export$a4ea780a9064d7f9 = "spectrum-Field--positionTop_d2db1f";
$cd231e464c886c86$export$3ab8a3dc7f0563d = "spectrum-Field-field_d2db1f";
$cd231e464c886c86$export$2963225c91179589 = "spectrum-Field--positionSide_d2db1f";
$cd231e464c886c86$export$127df0b7290eb8ef = "spectrum-Field-wrapper_d2db1f";
$cd231e464c886c86$export$94d2bcc94afabd89 = "spectrum-Form_d2db1f";
$cd231e464c886c86$export$7f44db659563c8f4 = "spectrum-Form--positionSide_d2db1f";
$cd231e464c886c86$export$11b8bc81fe551057 = "spectrum-Form--positionTop_d2db1f";
$cd231e464c886c86$export$a8558488b380a41e = "spectrum-StaticField_d2db1f";
$cd231e464c886c86$export$51ec27881a1e3928 = "spectrum-Form-itemLabel_d2db1f";
$cd231e464c886c86$export$d35bc1e505d1ebbf = "is-disabled_d2db1f";
var $ac118ceca79b8650$var$FormContext = /* @__PURE__ */ preact_default.createContext({});
function $ac118ceca79b8650$export$a6b5be5c6b451665(props) {
  let ctx = (0, preact_exports.useContext)($ac118ceca79b8650$var$FormContext);
  return __spreadValues(__spreadValues({}, ctx), props);
}

// ../../node_modules/@react-spectrum/label/dist/module.js
var import_AlertMedium = __toESM(require_AlertMedium2());
var import_Asterisk = __toESM(require_Asterisk2());
var import_i18n3 = __toESM(require_main8());
var import_provider4 = __toESM(require_main13());
function $parcel$interopDefault6(a) {
  return a && a.__esModule ? a.default : a;
}
function $parcel$export6(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $beda4304297005df$exports = {};
$parcel$export6($beda4304297005df$exports, "spectrum-HelpText", () => $beda4304297005df$export$c0875e83c57c7736, (v) => $beda4304297005df$export$c0875e83c57c7736 = v);
$parcel$export6($beda4304297005df$exports, "spectrum-HelpText-validationIcon", () => $beda4304297005df$export$527776642b333691, (v) => $beda4304297005df$export$527776642b333691 = v);
$parcel$export6($beda4304297005df$exports, "spectrum-HelpText-text", () => $beda4304297005df$export$a512452beb4231bf, (v) => $beda4304297005df$export$a512452beb4231bf = v);
$parcel$export6($beda4304297005df$exports, "spectrum-HelpText--neutral", () => $beda4304297005df$export$6e9351b1ad13c, (v) => $beda4304297005df$export$6e9351b1ad13c = v);
$parcel$export6($beda4304297005df$exports, "is-disabled", () => $beda4304297005df$export$d35bc1e505d1ebbf, (v) => $beda4304297005df$export$d35bc1e505d1ebbf = v);
$parcel$export6($beda4304297005df$exports, "spectrum-HelpText--negative", () => $beda4304297005df$export$d31dd875d69daee0, (v) => $beda4304297005df$export$d31dd875d69daee0 = v);
var $beda4304297005df$export$c0875e83c57c7736;
var $beda4304297005df$export$527776642b333691;
var $beda4304297005df$export$a512452beb4231bf;
var $beda4304297005df$export$6e9351b1ad13c;
var $beda4304297005df$export$d35bc1e505d1ebbf;
var $beda4304297005df$export$d31dd875d69daee0;
$beda4304297005df$export$c0875e83c57c7736 = "spectrum-HelpText_f395de";
$beda4304297005df$export$527776642b333691 = "spectrum-HelpText-validationIcon_f395de";
$beda4304297005df$export$a512452beb4231bf = "spectrum-HelpText-text_f395de";
$beda4304297005df$export$6e9351b1ad13c = "spectrum-HelpText--neutral_f395de";
$beda4304297005df$export$d35bc1e505d1ebbf = "is-disabled_f395de";
$beda4304297005df$export$d31dd875d69daee0 = "spectrum-HelpText--negative_f395de";
function $8e50676506611310$var$HelpText(props, ref) {
  let { description, errorMessage, validationState, isDisabled, showErrorIcon, descriptionProps, errorMessageProps } = props;
  let domRef = (0, import_utils19.useDOMRef)(ref);
  let isErrorMessage = errorMessage && validationState === "invalid";
  let { styleProps } = (0, import_utils19.useStyleProps)(props);
  return /* @__PURE__ */ preact_default.createElement("div", __spreadProps(__spreadValues({}, styleProps), {
    className: (0, import_utils19.classNames)(/* @__PURE__ */ $parcel$interopDefault6($beda4304297005df$exports), "spectrum-HelpText", `spectrum-HelpText--${isErrorMessage ? "negative" : "neutral"}`, {
      "is-disabled": isDisabled
    }, styleProps.className),
    ref: domRef
  }), isErrorMessage ? /* @__PURE__ */ preact_default.createElement(preact_default.Fragment, null, showErrorIcon && /* @__PURE__ */ preact_default.createElement(import_AlertMedium.default, {
    UNSAFE_className: (0, import_utils19.classNames)(/* @__PURE__ */ $parcel$interopDefault6($beda4304297005df$exports), "spectrum-HelpText-validationIcon")
  }), /* @__PURE__ */ preact_default.createElement("div", __spreadProps(__spreadValues({}, errorMessageProps), {
    className: (0, import_utils19.classNames)(/* @__PURE__ */ $parcel$interopDefault6($beda4304297005df$exports), "spectrum-HelpText-text")
  }), errorMessage)) : /* @__PURE__ */ preact_default.createElement("div", __spreadProps(__spreadValues({}, descriptionProps), {
    className: (0, import_utils19.classNames)(/* @__PURE__ */ $parcel$interopDefault6($beda4304297005df$exports), "spectrum-HelpText-text")
  }), description));
}
var $8e50676506611310$export$a67c0bc59081311a = /* @__PURE__ */ preact_default.forwardRef($8e50676506611310$var$HelpText);
var $79b4ff1b6ea94ffc$exports = {};
var $dfe96401c0c81db3$exports = {};
$dfe96401c0c81db3$exports = {
  "(optional)": `(\u0627\u062E\u062A\u064A\u0627\u0631\u064A)`,
  "(required)": `(\u0645\u0637\u0644\u0648\u0628)`
};
var $f504605657ece833$exports = {};
$f504605657ece833$exports = {
  "(optional)": `(\u043D\u0435\u0437\u0430\u0434\u044A\u043B\u0436\u0438\u0442\u0435\u043B\u043D\u043E)`,
  "(required)": `(\u0437\u0430\u0434\u044A\u043B\u0436\u0438\u0442\u0435\u043B\u043D\u043E)`
};
var $ed0ab9e7c53f9351$exports = {};
$ed0ab9e7c53f9351$exports = {
  "(optional)": `(voliteln\u011B)`,
  "(required)": `(po\u017Eadov\xE1no)`
};
var $59d9df99e04ee555$exports = {};
$59d9df99e04ee555$exports = {
  "(optional)": `(valgfrit)`,
  "(required)": `(obligatorisk)`
};
var $c5df0169c370d169$exports = {};
$c5df0169c370d169$exports = {
  "(optional)": `(optional)`,
  "(required)": `(erforderlich)`
};
var $3c9af509a01a8d08$exports = {};
$3c9af509a01a8d08$exports = {
  "(optional)": `(\u03C0\u03C1\u03BF\u03B1\u03B9\u03C1\u03B5\u03C4\u03B9\u03BA\u03CC)`,
  "(required)": `(\u03B1\u03C0\u03B1\u03B9\u03C4\u03B5\u03AF\u03C4\u03B1\u03B9)`
};
var $aa36476f91664a08$exports = {};
$aa36476f91664a08$exports = {
  "(required)": `(required)`,
  "(optional)": `(optional)`
};
var $d96f2251ced25e45$exports = {};
$d96f2251ced25e45$exports = {
  "(optional)": `(opcional)`,
  "(required)": `(necesario)`
};
var $16ec4ffbd4b2ca4b$exports = {};
$16ec4ffbd4b2ca4b$exports = {
  "(optional)": `(valikuline)`,
  "(required)": `(n\xF5utav)`
};
var $60f372f660e937e4$exports = {};
$60f372f660e937e4$exports = {
  "(optional)": `(valinnainen)`,
  "(required)": `(pakollinen)`
};
var $d87c5f1e899f6af1$exports = {};
$d87c5f1e899f6af1$exports = {
  "(optional)": `(facultatif)`,
  "(required)": `(requis)`
};
var $6899669fa63c7816$exports = {};
$6899669fa63c7816$exports = {
  "(optional)": `(\u05D0\u05D5\u05E4\u05E6\u05D9\u05D5\u05E0\u05DC\u05D9)`,
  "(required)": `(\u05E0\u05D3\u05E8\u05E9)`
};
var $3597d722a30a8081$exports = {};
$3597d722a30a8081$exports = {
  "(optional)": `(opcionalno)`,
  "(required)": `(obvezno)`
};
var $3ef905a2ce0921cb$exports = {};
$3ef905a2ce0921cb$exports = {
  "(optional)": `(opcion\xE1lis)`,
  "(required)": `(k\xF6telez\u0151)`
};
var $e59d2e4af9ff1c28$exports = {};
$e59d2e4af9ff1c28$exports = {
  "(optional)": `(facoltativo)`,
  "(required)": `(obbligatorio)`
};
var $422a7013ab2cb36d$exports = {};
$422a7013ab2cb36d$exports = {
  "(optional)": `\uFF08\u30AA\u30D7\u30B7\u30E7\u30F3\uFF09`,
  "(required)": `\uFF08\u5FC5\u9808\uFF09`
};
var $a58a7ab9570c5a18$exports = {};
$a58a7ab9570c5a18$exports = {
  "(optional)": `(\uC120\uD0DD \uC0AC\uD56D)`,
  "(required)": `(\uD544\uC218 \uC0AC\uD56D)`
};
var $24e660c5a5be82af$exports = {};
$24e660c5a5be82af$exports = {
  "(optional)": `(pasirenkama)`,
  "(required)": `(privaloma)`
};
var $a222e05de6d8dce8$exports = {};
$a222e05de6d8dce8$exports = {
  "(optional)": `(neoblig\u0101ti)`,
  "(required)": `(oblig\u0101ti)`
};
var $524caea23ab94ad7$exports = {};
$524caea23ab94ad7$exports = {
  "(optional)": `(valgfritt)`,
  "(required)": `(obligatorisk)`
};
var $572079ed86210ca9$exports = {};
$572079ed86210ca9$exports = {
  "(optional)": `(optioneel)`,
  "(required)": `(vereist)`
};
var $6a0777ee77a74b18$exports = {};
$6a0777ee77a74b18$exports = {
  "(optional)": `(opcjonalne)`,
  "(required)": `(wymagane)`
};
var $ea0401974d81b469$exports = {};
$ea0401974d81b469$exports = {
  "(optional)": `(opcional)`,
  "(required)": `(obrigat\xF3rio)`
};
var $701d0854e4f18979$exports = {};
$701d0854e4f18979$exports = {
  "(optional)": `(opcional)`,
  "(required)": `(obrigat\xF3rio)`
};
var $dd9fccd10d0a4be3$exports = {};
$dd9fccd10d0a4be3$exports = {
  "(optional)": `(op\u0163ional)`,
  "(required)": `(obligatoriu)`
};
var $3cd1eab3b0ecc980$exports = {};
$3cd1eab3b0ecc980$exports = {
  "(optional)": `(\u0434\u043E\u043F\u043E\u043B\u043D\u0438\u0442\u0435\u043B\u044C\u043D\u043E)`,
  "(required)": `(\u043E\u0431\u044F\u0437\u0430\u0442\u0435\u043B\u044C\u043D\u043E)`
};
var $d109f3d68ba24ffc$exports = {};
$d109f3d68ba24ffc$exports = {
  "(optional)": `(nepovinn\xE9)`,
  "(required)": `(povinn\xE9)`
};
var $6382c2117e9fd1b6$exports = {};
$6382c2117e9fd1b6$exports = {
  "(optional)": `(opcijsko)`,
  "(required)": `(obvezno)`
};
var $ba796dd79114e2d4$exports = {};
$ba796dd79114e2d4$exports = {
  "(optional)": `(opciono)`,
  "(required)": `(obavezno)`
};
var $916521e9800ac46c$exports = {};
$916521e9800ac46c$exports = {
  "(optional)": `(valfritt)`,
  "(required)": `(kr\xE4vs)`
};
var $acd72b88f580fe64$exports = {};
$acd72b88f580fe64$exports = {
  "(optional)": `(iste\u011Fe ba\u011Fl\u0131)`,
  "(required)": `(gerekli)`
};
var $bd065904f1420f31$exports = {};
$bd065904f1420f31$exports = {
  "(optional)": `(\u043D\u0435\u043E\u0431\u043E\u0432\u2019\u044F\u0437\u043A\u043E\u0432\u043E)`,
  "(required)": `(\u043E\u0431\u043E\u0432\u2019\u044F\u0437\u043A\u043E\u0432\u043E)`
};
var $0128cc194bc107bb$exports = {};
$0128cc194bc107bb$exports = {
  "(optional)": `\uFF08\u53EF\u9009\uFF09`,
  "(required)": `\uFF08\u5FC5\u586B\uFF09`
};
var $c57738f6094a3d25$exports = {};
$c57738f6094a3d25$exports = {
  "(optional)": `(\u9078\u586B)`,
  "(required)": `(\u5FC5\u586B)`
};
$79b4ff1b6ea94ffc$exports = {
  "ar-AE": $dfe96401c0c81db3$exports,
  "bg-BG": $f504605657ece833$exports,
  "cs-CZ": $ed0ab9e7c53f9351$exports,
  "da-DK": $59d9df99e04ee555$exports,
  "de-DE": $c5df0169c370d169$exports,
  "el-GR": $3c9af509a01a8d08$exports,
  "en-US": $aa36476f91664a08$exports,
  "es-ES": $d96f2251ced25e45$exports,
  "et-EE": $16ec4ffbd4b2ca4b$exports,
  "fi-FI": $60f372f660e937e4$exports,
  "fr-FR": $d87c5f1e899f6af1$exports,
  "he-IL": $6899669fa63c7816$exports,
  "hr-HR": $3597d722a30a8081$exports,
  "hu-HU": $3ef905a2ce0921cb$exports,
  "it-IT": $e59d2e4af9ff1c28$exports,
  "ja-JP": $422a7013ab2cb36d$exports,
  "ko-KR": $a58a7ab9570c5a18$exports,
  "lt-LT": $24e660c5a5be82af$exports,
  "lv-LV": $a222e05de6d8dce8$exports,
  "nb-NO": $524caea23ab94ad7$exports,
  "nl-NL": $572079ed86210ca9$exports,
  "pl-PL": $6a0777ee77a74b18$exports,
  "pt-BR": $ea0401974d81b469$exports,
  "pt-PT": $701d0854e4f18979$exports,
  "ro-RO": $dd9fccd10d0a4be3$exports,
  "ru-RU": $3cd1eab3b0ecc980$exports,
  "sk-SK": $d109f3d68ba24ffc$exports,
  "sl-SI": $6382c2117e9fd1b6$exports,
  "sr-SP": $ba796dd79114e2d4$exports,
  "sv-SE": $916521e9800ac46c$exports,
  "tr-TR": $acd72b88f580fe64$exports,
  "uk-UA": $bd065904f1420f31$exports,
  "zh-CN": $0128cc194bc107bb$exports,
  "zh-TW": $c57738f6094a3d25$exports
};
var $cd231e464c886c86$exports2 = {};
$parcel$export6($cd231e464c886c86$exports2, "spectrum-FieldLabel", () => $cd231e464c886c86$export$493d18e796ae0542, (v) => $cd231e464c886c86$export$493d18e796ae0542 = v);
$parcel$export6($cd231e464c886c86$exports2, "spectrum-FieldLabel--positionSide", () => $cd231e464c886c86$export$9e6f19dc21f22f2e2, (v) => $cd231e464c886c86$export$9e6f19dc21f22f2e2 = v);
$parcel$export6($cd231e464c886c86$exports2, "spectrum-FieldLabel-requiredIcon", () => $cd231e464c886c86$export$7c47642c7d46f3c92, (v) => $cd231e464c886c86$export$7c47642c7d46f3c92 = v);
$parcel$export6($cd231e464c886c86$exports2, "spectrum-FieldLabel--alignEnd", () => $cd231e464c886c86$export$885efcc08143a9872, (v) => $cd231e464c886c86$export$885efcc08143a9872 = v);
$parcel$export6($cd231e464c886c86$exports2, "spectrum-Field", () => $cd231e464c886c86$export$f6d480ae1e56eba02, (v) => $cd231e464c886c86$export$f6d480ae1e56eba02 = v);
$parcel$export6($cd231e464c886c86$exports2, "spectrum-Field--positionTop", () => $cd231e464c886c86$export$a4ea780a9064d7f92, (v) => $cd231e464c886c86$export$a4ea780a9064d7f92 = v);
$parcel$export6($cd231e464c886c86$exports2, "spectrum-Field-field", () => $cd231e464c886c86$export$3ab8a3dc7f0563d2, (v) => $cd231e464c886c86$export$3ab8a3dc7f0563d2 = v);
$parcel$export6($cd231e464c886c86$exports2, "spectrum-Field--positionSide", () => $cd231e464c886c86$export$2963225c911795892, (v) => $cd231e464c886c86$export$2963225c911795892 = v);
$parcel$export6($cd231e464c886c86$exports2, "spectrum-Field-wrapper", () => $cd231e464c886c86$export$127df0b7290eb8ef2, (v) => $cd231e464c886c86$export$127df0b7290eb8ef2 = v);
$parcel$export6($cd231e464c886c86$exports2, "spectrum-Form", () => $cd231e464c886c86$export$94d2bcc94afabd892, (v) => $cd231e464c886c86$export$94d2bcc94afabd892 = v);
$parcel$export6($cd231e464c886c86$exports2, "spectrum-Form--positionSide", () => $cd231e464c886c86$export$7f44db659563c8f42, (v) => $cd231e464c886c86$export$7f44db659563c8f42 = v);
$parcel$export6($cd231e464c886c86$exports2, "spectrum-Form--positionTop", () => $cd231e464c886c86$export$11b8bc81fe5510572, (v) => $cd231e464c886c86$export$11b8bc81fe5510572 = v);
$parcel$export6($cd231e464c886c86$exports2, "spectrum-StaticField", () => $cd231e464c886c86$export$a8558488b380a41e2, (v) => $cd231e464c886c86$export$a8558488b380a41e2 = v);
$parcel$export6($cd231e464c886c86$exports2, "spectrum-Form-itemLabel", () => $cd231e464c886c86$export$51ec27881a1e39282, (v) => $cd231e464c886c86$export$51ec27881a1e39282 = v);
$parcel$export6($cd231e464c886c86$exports2, "is-disabled", () => $cd231e464c886c86$export$d35bc1e505d1ebbf2, (v) => $cd231e464c886c86$export$d35bc1e505d1ebbf2 = v);
var $cd231e464c886c86$export$493d18e796ae0542;
var $cd231e464c886c86$export$9e6f19dc21f22f2e2;
var $cd231e464c886c86$export$7c47642c7d46f3c92;
var $cd231e464c886c86$export$885efcc08143a9872;
var $cd231e464c886c86$export$f6d480ae1e56eba02;
var $cd231e464c886c86$export$a4ea780a9064d7f92;
var $cd231e464c886c86$export$3ab8a3dc7f0563d2;
var $cd231e464c886c86$export$2963225c911795892;
var $cd231e464c886c86$export$127df0b7290eb8ef2;
var $cd231e464c886c86$export$94d2bcc94afabd892;
var $cd231e464c886c86$export$7f44db659563c8f42;
var $cd231e464c886c86$export$11b8bc81fe5510572;
var $cd231e464c886c86$export$a8558488b380a41e2;
var $cd231e464c886c86$export$51ec27881a1e39282;
var $cd231e464c886c86$export$d35bc1e505d1ebbf2;
$cd231e464c886c86$export$493d18e796ae0542 = "spectrum-FieldLabel_d2db1f";
$cd231e464c886c86$export$9e6f19dc21f22f2e2 = "spectrum-FieldLabel--positionSide_d2db1f";
$cd231e464c886c86$export$7c47642c7d46f3c92 = "spectrum-FieldLabel-requiredIcon_d2db1f";
$cd231e464c886c86$export$885efcc08143a9872 = "spectrum-FieldLabel--alignEnd_d2db1f";
$cd231e464c886c86$export$f6d480ae1e56eba02 = "spectrum-Field_d2db1f";
$cd231e464c886c86$export$a4ea780a9064d7f92 = "spectrum-Field--positionTop_d2db1f";
$cd231e464c886c86$export$3ab8a3dc7f0563d2 = "spectrum-Field-field_d2db1f";
$cd231e464c886c86$export$2963225c911795892 = "spectrum-Field--positionSide_d2db1f";
$cd231e464c886c86$export$127df0b7290eb8ef2 = "spectrum-Field-wrapper_d2db1f";
$cd231e464c886c86$export$94d2bcc94afabd892 = "spectrum-Form_d2db1f";
$cd231e464c886c86$export$7f44db659563c8f42 = "spectrum-Form--positionSide_d2db1f";
$cd231e464c886c86$export$11b8bc81fe5510572 = "spectrum-Form--positionTop_d2db1f";
$cd231e464c886c86$export$a8558488b380a41e2 = "spectrum-StaticField_d2db1f";
$cd231e464c886c86$export$51ec27881a1e39282 = "spectrum-Form-itemLabel_d2db1f";
$cd231e464c886c86$export$d35bc1e505d1ebbf2 = "is-disabled_d2db1f";
function $00af9ba397a66f43$var$Label(props, ref) {
  props = (0, import_provider4.useProviderProps)(props);
  let _a3 = props, { children, labelPosition = "top", labelAlign = labelPosition === "side" ? "start" : null, isRequired, necessityIndicator = isRequired != null ? "icon" : null, includeNecessityIndicatorInAccessibilityName = false, htmlFor, for: labelFor, elementType: ElementType = "label", onClick } = _a3, otherProps = __objRest(_a3, ["children", "labelPosition", "labelAlign", "isRequired", "necessityIndicator", "includeNecessityIndicatorInAccessibilityName", "htmlFor", "for", "elementType", "onClick"]);
  let domRef = (0, import_utils19.useDOMRef)(ref);
  let { styleProps } = (0, import_utils19.useStyleProps)(otherProps);
  let stringFormatter = (0, import_i18n3.useLocalizedStringFormatter)(/* @__PURE__ */ $parcel$interopDefault6($79b4ff1b6ea94ffc$exports));
  let necessityLabel = isRequired ? stringFormatter.format("(required)") : stringFormatter.format("(optional)");
  let icon = /* @__PURE__ */ preact_default.createElement(import_Asterisk.default, {
    UNSAFE_className: (0, import_utils19.classNames)(/* @__PURE__ */ $parcel$interopDefault6($cd231e464c886c86$exports2), "spectrum-FieldLabel-requiredIcon"),
    "aria-label": includeNecessityIndicatorInAccessibilityName ? stringFormatter.format("(required)") : void 0
  });
  let labelClassNames = (0, import_utils19.classNames)(/* @__PURE__ */ $parcel$interopDefault6($cd231e464c886c86$exports2), "spectrum-FieldLabel", {
    "spectrum-FieldLabel--positionSide": labelPosition === "side",
    "spectrum-FieldLabel--alignEnd": labelAlign === "end"
  }, styleProps.className);
  return /* @__PURE__ */ preact_default.createElement(ElementType, __spreadProps(__spreadValues(__spreadValues({}, (0, import_utils20.filterDOMProps)(otherProps)), styleProps), {
    onClick,
    ref: domRef,
    className: labelClassNames,
    htmlFor: ElementType === "label" ? labelFor || htmlFor : void 0
  }), children, (necessityIndicator === "label" || necessityIndicator === "icon" && isRequired) && " \u200B", necessityIndicator === "label" && /* @__PURE__ */ preact_default.createElement("span", {
    "aria-hidden": !includeNecessityIndicatorInAccessibilityName ? isRequired : void 0
  }, necessityLabel), necessityIndicator === "icon" && isRequired && icon);
}
var $00af9ba397a66f43$export$b04be29aa201d4f5 = /* @__PURE__ */ preact_default.forwardRef($00af9ba397a66f43$var$Label);
function $b7ca5b4454a2009d$var$Field(props, ref) {
  props = $ac118ceca79b8650$export$a6b5be5c6b451665(props);
  let _a3 = props, { label, labelPosition = "top", labelAlign, isRequired, necessityIndicator, includeNecessityIndicatorInAccessibilityName, validationState, description, errorMessage, isDisabled, showErrorIcon, children, labelProps, descriptionProps = {}, errorMessageProps = {}, elementType, wrapperClassName } = _a3, otherProps = __objRest(_a3, ["label", "labelPosition", "labelAlign", "isRequired", "necessityIndicator", "includeNecessityIndicatorInAccessibilityName", "validationState", "description", "errorMessage", "isDisabled", "showErrorIcon", "children", "labelProps", "descriptionProps", "errorMessageProps", "elementType", "wrapperClassName"]);
  let { styleProps } = (0, import_utils19.useStyleProps)(otherProps);
  let hasHelpText = !!description || errorMessage && validationState === "invalid";
  let mergedRefs = $b7ca5b4454a2009d$var$useMergeRefs(children.ref, ref);
  if (label || hasHelpText) {
    let labelWrapperClass = (0, import_utils19.classNames)(/* @__PURE__ */ $parcel$interopDefault6($cd231e464c886c86$exports2), "spectrum-Field", {
      "spectrum-Field--positionTop": labelPosition === "top",
      "spectrum-Field--positionSide": labelPosition === "side"
    }, styleProps.className, wrapperClassName);
    children = /* @__PURE__ */ preact_default.cloneElement(children, (0, import_utils20.mergeProps)(children.props, {
      className: (0, import_utils19.classNames)(/* @__PURE__ */ $parcel$interopDefault6($cd231e464c886c86$exports2), "spectrum-Field-field")
    }));
    let renderHelpText = () => /* @__PURE__ */ preact_default.createElement($8e50676506611310$export$a67c0bc59081311a, {
      descriptionProps,
      errorMessageProps,
      description,
      errorMessage,
      validationState,
      isDisabled,
      showErrorIcon
    });
    let renderChildren = () => {
      if (labelPosition === "side")
        return /* @__PURE__ */ preact_default.createElement($884c64d19340d345$export$f51f4c4ede09e011, {
          direction: "column",
          UNSAFE_className: (0, import_utils19.classNames)(/* @__PURE__ */ $parcel$interopDefault6($cd231e464c886c86$exports2), "spectrum-Field-wrapper")
        }, children, hasHelpText && renderHelpText());
      return /* @__PURE__ */ preact_default.createElement(preact_default.Fragment, null, children, hasHelpText && renderHelpText());
    };
    return /* @__PURE__ */ preact_default.createElement("div", __spreadProps(__spreadValues({}, styleProps), {
      ref,
      className: labelWrapperClass
    }), label && /* @__PURE__ */ preact_default.createElement($00af9ba397a66f43$export$b04be29aa201d4f5, __spreadProps(__spreadValues({}, labelProps), {
      labelPosition,
      labelAlign,
      isRequired,
      necessityIndicator,
      includeNecessityIndicatorInAccessibilityName,
      elementType
    }), label), renderChildren());
  }
  return /* @__PURE__ */ preact_default.cloneElement(children, (0, import_utils20.mergeProps)(children.props, __spreadProps(__spreadValues({}, styleProps), {
    ref: mergedRefs
  })));
}
function $b7ca5b4454a2009d$var$useMergeRefs(...refs) {
  return (0, preact_exports.useCallback)((0, import_utils20.mergeRefs)(...refs), [
    ...refs
  ]);
}
var $b7ca5b4454a2009d$export$a455218a85c89869 = /* @__PURE__ */ preact_default.forwardRef($b7ca5b4454a2009d$var$Field);

// ../../node_modules/@react-aria/label/dist/module.js
var import_utils21 = __toESM(require_main3());
function $d191a55c9702f145$export$8467354a121f1b9f(props) {
  let { id, label, "aria-labelledby": ariaLabelledby, "aria-label": ariaLabel, labelElementType = "label" } = props;
  id = (0, import_utils21.useId)(id);
  let labelId = (0, import_utils21.useId)();
  let labelProps = {};
  if (label) {
    ariaLabelledby = ariaLabelledby ? `${ariaLabelledby} ${labelId}` : labelId;
    labelProps = {
      id: labelId,
      htmlFor: labelElementType === "label" ? id : void 0
    };
  } else if (!ariaLabelledby && !ariaLabel)
    console.warn("If you do not provide a visible label, you must specify an aria-label or aria-labelledby attribute for accessibility");
  let fieldProps = (0, import_utils21.useLabels)({
    id,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby
  });
  return {
    labelProps,
    fieldProps
  };
}
function $2baaea4c71418dea$export$294aa081a6c6f55d(props) {
  let { description, errorMessage, validationState } = props;
  let { labelProps, fieldProps } = $d191a55c9702f145$export$8467354a121f1b9f(props);
  let descriptionId = (0, import_utils21.useSlotId)([
    Boolean(description),
    Boolean(errorMessage),
    validationState
  ]);
  let errorMessageId = (0, import_utils21.useSlotId)([
    Boolean(description),
    Boolean(errorMessage),
    validationState
  ]);
  fieldProps = (0, import_utils21.mergeProps)(fieldProps, {
    "aria-describedby": [
      descriptionId,
      errorMessageId,
      props["aria-describedby"]
    ].filter(Boolean).join(" ") || void 0
  });
  return {
    labelProps,
    fieldProps,
    descriptionProps: {
      id: descriptionId
    },
    errorMessageProps: {
      id: errorMessageId
    }
  };
}

// ../../node_modules/@react-spectrum/listbox/dist/module.js
init_preact();
var import_utils28 = __toESM(require_main9());

// ../../node_modules/@react-aria/listbox/dist/module.js
var import_utils22 = __toESM(require_main3());
var import_interactions6 = __toESM(require_main10());
var $b1f0cad8af73213b$export$3585ede4d035bf14 = /* @__PURE__ */ new WeakMap();
function $b1f0cad8af73213b$var$normalizeKey(key) {
  if (typeof key === "string")
    return key.replace(/\s*/g, "");
  return "" + key;
}
function $b1f0cad8af73213b$export$9145995848b05025(state, itemKey) {
  let data = $b1f0cad8af73213b$export$3585ede4d035bf14.get(state);
  if (!data)
    throw new Error("Unknown list");
  return `${data.id}-option-${$b1f0cad8af73213b$var$normalizeKey(itemKey)}`;
}
function $c132121280ec012d$export$50eacbbf140a3141(props, state, ref) {
  let domProps = (0, import_utils22.filterDOMProps)(props, {
    labelable: true
  });
  let { listProps } = $982254629710d113$export$b95089534ab7c1fd(__spreadProps(__spreadValues({}, props), {
    ref,
    selectionManager: state.selectionManager,
    collection: state.collection,
    disabledKeys: state.disabledKeys
  }));
  let { focusWithinProps } = (0, import_interactions6.useFocusWithin)({
    onFocusWithin: props.onFocus,
    onBlurWithin: props.onBlur,
    onFocusWithinChange: props.onFocusChange
  });
  let id = (0, import_utils22.useId)(props.id);
  $b1f0cad8af73213b$export$3585ede4d035bf14.set(state, {
    id,
    shouldUseVirtualFocus: props.shouldUseVirtualFocus,
    shouldSelectOnPressUp: props.shouldSelectOnPressUp,
    shouldFocusOnHover: props.shouldFocusOnHover,
    isVirtualized: props.isVirtualized
  });
  let { labelProps, fieldProps } = $d191a55c9702f145$export$8467354a121f1b9f(__spreadProps(__spreadValues({}, props), {
    id,
    labelElementType: "span"
  }));
  return {
    labelProps,
    listBoxProps: (0, import_utils22.mergeProps)(domProps, focusWithinProps, state.selectionManager.selectionMode === "multiple" ? {
      "aria-multiselectable": "true"
    } : {}, __spreadValues({
      role: "listbox"
    }, (0, import_utils22.mergeProps)(fieldProps, listProps)))
  };
}
function $293f70390ea03370$export$497855f14858aa34(props, state, ref) {
  let { key } = props;
  let data = $b1f0cad8af73213b$export$3585ede4d035bf14.get(state);
  var _isDisabled;
  let isDisabled = (_isDisabled = props.isDisabled) !== null && _isDisabled !== void 0 ? _isDisabled : state.disabledKeys.has(key);
  var _isSelected;
  let isSelected = (_isSelected = props.isSelected) !== null && _isSelected !== void 0 ? _isSelected : state.selectionManager.isSelected(key);
  let isFocused = state.selectionManager.focusedKey === key;
  var _shouldSelectOnPressUp;
  let shouldSelectOnPressUp = (_shouldSelectOnPressUp = props.shouldSelectOnPressUp) !== null && _shouldSelectOnPressUp !== void 0 ? _shouldSelectOnPressUp : data.shouldSelectOnPressUp;
  var _shouldFocusOnHover;
  let shouldFocusOnHover = (_shouldFocusOnHover = props.shouldFocusOnHover) !== null && _shouldFocusOnHover !== void 0 ? _shouldFocusOnHover : data.shouldFocusOnHover;
  var _shouldUseVirtualFocus;
  let shouldUseVirtualFocus = (_shouldUseVirtualFocus = props.shouldUseVirtualFocus) !== null && _shouldUseVirtualFocus !== void 0 ? _shouldUseVirtualFocus : data.shouldUseVirtualFocus;
  var _isVirtualized;
  let isVirtualized = (_isVirtualized = props.isVirtualized) !== null && _isVirtualized !== void 0 ? _isVirtualized : data.isVirtualized;
  let labelId = (0, import_utils22.useSlotId)();
  let descriptionId = (0, import_utils22.useSlotId)();
  let optionProps = {
    role: "option",
    "aria-disabled": isDisabled,
    "aria-selected": state.selectionManager.selectionMode !== "none" ? isSelected : void 0
  };
  if (!((0, import_utils22.isMac)() && (0, import_utils22.isWebKit)())) {
    optionProps["aria-label"] = props["aria-label"];
    optionProps["aria-labelledby"] = labelId;
    optionProps["aria-describedby"] = descriptionId;
  }
  if (isVirtualized) {
    optionProps["aria-posinset"] = state.collection.getItem(key).index + 1;
    optionProps["aria-setsize"] = $453cc9f0df89c0a5$export$77d5aafae4e095b2(state.collection);
  }
  let { itemProps, isPressed } = $880e95eb8b93ba9a$export$ecf600387e221c37({
    selectionManager: state.selectionManager,
    key,
    ref,
    shouldSelectOnPressUp,
    allowsDifferentPressOrigin: shouldSelectOnPressUp,
    isVirtualized,
    shouldUseVirtualFocus,
    isDisabled
  });
  let { hoverProps } = (0, import_interactions6.useHover)({
    isDisabled: isDisabled || !shouldFocusOnHover,
    onHoverStart() {
      if (!(0, import_interactions6.isFocusVisible)()) {
        state.selectionManager.setFocused(true);
        state.selectionManager.setFocusedKey(key);
      }
    }
  });
  return {
    optionProps: __spreadProps(__spreadValues(__spreadValues({}, optionProps), (0, import_utils22.mergeProps)(itemProps, hoverProps)), {
      id: $b1f0cad8af73213b$export$9145995848b05025(state, key)
    }),
    labelProps: {
      id: labelId
    },
    descriptionProps: {
      id: descriptionId
    },
    isFocused,
    isSelected,
    isDisabled,
    isPressed
  };
}
function $af383d3bef1cfdc9$export$c3f9f39876e4bc7(props) {
  let { heading, "aria-label": ariaLabel } = props;
  let headingId = (0, import_utils22.useId)();
  return {
    itemProps: {
      role: "presentation"
    },
    headingProps: heading ? {
      id: headingId,
      "aria-hidden": true
    } : {},
    groupProps: {
      role: "group",
      "aria-label": ariaLabel,
      "aria-labelledby": heading ? headingId : void 0
    }
  };
}

// ../../node_modules/@react-stately/virtualizer/dist/module.js
init_preact();
var import_utils23 = __toESM(require_main3());
var $c74cda7d31af1253$export$c84671f46d6a1ca = class {
  shouldInvalidate(newRect, oldRect) {
    return newRect.width !== oldRect.width || newRect.height !== oldRect.height;
  }
  validate(invalidationContext) {
  }
  getInitialLayoutInfo(layoutInfo) {
    return layoutInfo;
  }
  getFinalLayoutInfo(layoutInfo) {
    return layoutInfo;
  }
};
var $d7fd61009c21d0bb$export$7e0eeb9da702a085 = class {
  copy() {
    let res = new $d7fd61009c21d0bb$export$7e0eeb9da702a085(this.type, this.key, this.rect.copy());
    res.estimatedSize = this.estimatedSize;
    res.opacity = this.opacity;
    res.transform = this.transform;
    res.parentKey = this.parentKey;
    res.isSticky = this.isSticky;
    res.zIndex = this.zIndex;
    res.allowOverflow = this.allowOverflow;
    return res;
  }
  constructor(type, key, rect) {
    this.type = type;
    this.key = key;
    this.parentKey = null;
    this.rect = rect;
    this.estimatedSize = false;
    this.isSticky = false;
    this.opacity = 1;
    this.transform = null;
    this.zIndex = 0;
    this.allowOverflow = false;
  }
};
var $3041db3296945e6e$export$baf26146a414f24a = class {
  copy() {
    return new $3041db3296945e6e$export$baf26146a414f24a(this.x, this.y);
  }
  equals(point) {
    return this.x === point.x && this.y === point.y;
  }
  isOrigin() {
    return this.x === 0 && this.y === 0;
  }
  constructor(x = 0, y = 0) {
    this.x = x;
    this.y = y;
  }
};
var $60423f92c7f9ad87$export$c79fc6492f3af13d = class {
  get maxX() {
    return this.x + this.width;
  }
  get maxY() {
    return this.y + this.height;
  }
  get area() {
    return this.width * this.height;
  }
  get topLeft() {
    return new $3041db3296945e6e$export$baf26146a414f24a(this.x, this.y);
  }
  get topRight() {
    return new $3041db3296945e6e$export$baf26146a414f24a(this.maxX, this.y);
  }
  get bottomLeft() {
    return new $3041db3296945e6e$export$baf26146a414f24a(this.x, this.maxY);
  }
  get bottomRight() {
    return new $3041db3296945e6e$export$baf26146a414f24a(this.maxX, this.maxY);
  }
  intersects(rect) {
    return this.x <= rect.x + rect.width && rect.x <= this.x + this.width && this.y <= rect.y + rect.height && rect.y <= this.y + this.height;
  }
  containsRect(rect) {
    return this.x <= rect.x && this.y <= rect.y && this.maxX >= rect.maxX && this.maxY >= rect.maxY;
  }
  containsPoint(point) {
    return this.x <= point.x && this.y <= point.y && this.maxX >= point.x && this.maxY >= point.y;
  }
  getCornerInRect(rect) {
    for (let key of [
      "topLeft",
      "topRight",
      "bottomLeft",
      "bottomRight"
    ]) {
      if (rect.containsPoint(this[key]))
        return key;
    }
    return null;
  }
  equals(rect) {
    return rect.x === this.x && rect.y === this.y && rect.width === this.width && rect.height === this.height;
  }
  pointEquals(point) {
    return this.x === point.x && this.y === point.y;
  }
  sizeEquals(size) {
    return this.width === size.width && this.height === size.height;
  }
  copy() {
    return new $60423f92c7f9ad87$export$c79fc6492f3af13d(this.x, this.y, this.width, this.height);
  }
  constructor(x = 0, y = 0, width = 0, height = 0) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
  }
};
var $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec = class {
  copy() {
    return new $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec(this.width, this.height);
  }
  equals(other) {
    return this.width === other.width && this.height === other.height;
  }
  constructor(width = 0, height = 0) {
    this.width = width;
    this.height = height;
  }
};
var $ad1d98aa8f0c31b4$var$KEY = 0;
var $ad1d98aa8f0c31b4$export$1a5223887c560441 = class {
  prepareForReuse() {
    this.content = null;
    this.rendered = null;
    this.layoutInfo = null;
  }
  constructor(virtualizer) {
    this.virtualizer = virtualizer;
    this.key = ++$ad1d98aa8f0c31b4$var$KEY;
  }
};
var $3eb131dcf37ad5f8$var$perf = typeof window !== "undefined" ? window.performance : null;
var $3eb131dcf37ad5f8$var$perfNow = $3eb131dcf37ad5f8$var$perf && ($3eb131dcf37ad5f8$var$perf.now || $3eb131dcf37ad5f8$var$perf.webkitNow || $3eb131dcf37ad5f8$var$perf.msNow || $3eb131dcf37ad5f8$var$perf.mozNow);
var $3eb131dcf37ad5f8$var$getTime = $3eb131dcf37ad5f8$var$perfNow ? $3eb131dcf37ad5f8$var$perfNow.bind($3eb131dcf37ad5f8$var$perf) : function() {
  return Date.now ? Date.now() : new Date().getTime();
};
var $3eb131dcf37ad5f8$var$fixTs;
function $3eb131dcf37ad5f8$export$dc0b63720788090c(begin, end, duration, ease, fn) {
  let canceled = false;
  let raf_id;
  let promise = new Promise((resolve) => {
    let start = $3eb131dcf37ad5f8$var$getTime();
    let diffX = end.x - begin.x;
    let diffY = end.y - begin.y;
    raf_id = requestAnimationFrame(function run3(t) {
      if ($3eb131dcf37ad5f8$var$fixTs == null)
        $3eb131dcf37ad5f8$var$fixTs = t > 1e12 !== $3eb131dcf37ad5f8$var$getTime() > 1e12;
      if ($3eb131dcf37ad5f8$var$fixTs)
        t = $3eb131dcf37ad5f8$var$getTime();
      let delta = t - start;
      if (delta > duration) {
        fn(end);
        resolve();
      } else {
        let proceed = fn(new $3041db3296945e6e$export$baf26146a414f24a(begin.x + diffX * ease(delta / duration), begin.y + diffY * ease(delta / duration)));
        if (proceed !== false && !canceled)
          raf_id = requestAnimationFrame(run3);
      }
    });
  });
  promise.cancel = function() {
    canceled = true;
    cancelAnimationFrame(raf_id);
  };
  return promise;
}
function $3eb131dcf37ad5f8$export$57636bb43b1ccbb0(t) {
  return Math.sin(t * Math.PI / 2);
}
function $fc36f9a046a9ce79$export$37a26b283fd7740e(a, b) {
  let res = /* @__PURE__ */ new Set();
  for (let key of a.keys())
    if (!b.has(key))
      res.add(key);
  return res;
}
function $fc36f9a046a9ce79$export$acaf96a27438246b(a, b) {
  let toRemove = $fc36f9a046a9ce79$export$37a26b283fd7740e(a, b);
  let toAdd = $fc36f9a046a9ce79$export$37a26b283fd7740e(b, a);
  let toUpdate = /* @__PURE__ */ new Set();
  for (let key of a.keys())
    if (b.has(key))
      toUpdate.add(key);
  return {
    toRemove,
    toAdd,
    toUpdate
  };
}
function* $fc36f9a046a9ce79$export$cfc14088dfefce5f(...iterators) {
  for (let iterator of iterators)
    yield* iterator;
}
function $fc36f9a046a9ce79$export$a8d0d0c8d1c5df64(a, b) {
  if (a === b)
    return true;
  if (a.size !== b.size)
    return false;
  for (let key of a) {
    if (!b.has(key))
      return false;
  }
  return true;
}
var $364191b3decf3697$var$RollingAverage = class {
  addSample(sample) {
    this.count++;
    this.value += (sample - this.value) / this.count;
  }
  constructor() {
    this.count = 0;
    this.value = 0;
  }
};
var $364191b3decf3697$export$4455ee6afb38dcbb = class {
  setVisibleRect(rect) {
    let time = performance.now() - this.startTime;
    if (time < 500) {
      this.averageTime.addSample(time);
      if (rect.x !== this.visibleRect.x && time > 0)
        this.velocity.x = (rect.x - this.visibleRect.x) / time;
      if (rect.y !== this.visibleRect.y && time > 0)
        this.velocity.y = (rect.y - this.visibleRect.y) / time;
    }
    this.startTime = performance.now();
    this.visibleRect = rect;
  }
  collectMetrics() {
    let time = performance.now() - this.startTime;
    if (time < 500)
      this.averagePerf.addSample(time);
    if (this.visibleRect.height > 0) {
      let o = Math.abs(this.velocity.y * (this.averageTime.value + this.averagePerf.value));
      this.overscanY.addSample(o);
    }
    if (this.visibleRect.width > 0) {
      let o = Math.abs(this.velocity.x * (this.averageTime.value + this.averagePerf.value));
      this.overscanX.addSample(o);
    }
  }
  getOverscannedRect() {
    let overscanned = this.visibleRect.copy();
    let overscanY = Math.round(Math.min(this.visibleRect.height * 2, this.overscanY.value) / 100) * 100;
    if (this.velocity.y > 0) {
      overscanned.y -= overscanY * 0.2;
      overscanned.height += overscanY + overscanY * 0.2;
    } else {
      overscanned.y -= overscanY;
      overscanned.height += overscanY + overscanY * 0.2;
    }
    let overscanX = Math.round(Math.min(this.visibleRect.width * 2, this.overscanX.value) / 100) * 100;
    if (this.velocity.x > 0) {
      overscanned.x -= overscanX * 0.2;
      overscanned.width += overscanX + overscanX * 0.2;
    } else {
      overscanned.x -= overscanX;
      overscanned.width += overscanX + overscanX * 0.2;
    }
    return overscanned;
  }
  constructor() {
    this.startTime = 0;
    this.averagePerf = new $364191b3decf3697$var$RollingAverage();
    this.averageTime = new $364191b3decf3697$var$RollingAverage();
    this.velocity = new $3041db3296945e6e$export$baf26146a414f24a(5, 5);
    this.overscanX = new $364191b3decf3697$var$RollingAverage();
    this.overscanY = new $364191b3decf3697$var$RollingAverage();
    this.visibleRect = new $60423f92c7f9ad87$export$c79fc6492f3af13d();
  }
};
var $8e135e531d8dcb66$export$febc5573c75cefb0 = class {
  constructor() {
    this.level = 0;
    this.actions = [];
    this.animated = true;
    this.initialMap = /* @__PURE__ */ new Map();
    this.finalMap = /* @__PURE__ */ new Map();
    this.initialLayoutInfo = /* @__PURE__ */ new Map();
    this.finalLayoutInfo = /* @__PURE__ */ new Map();
    this.removed = /* @__PURE__ */ new Map();
    this.toRemove = /* @__PURE__ */ new Map();
  }
};
var $38b9490c1cca8fc4$export$89be5a243e59c4b2 = class {
  _setContentSize(size) {
    this._contentSize = size;
    this.delegate.setContentSize(size);
  }
  _setContentOffset(offset) {
    let rect = new $60423f92c7f9ad87$export$c79fc6492f3af13d(offset.x, offset.y, this._visibleRect.width, this._visibleRect.height);
    this.delegate.setVisibleRect(rect);
  }
  get contentSize() {
    return this._contentSize;
  }
  get visibleRect() {
    return this._visibleRect;
  }
  set visibleRect(rect) {
    this._setVisibleRect(rect);
  }
  _setVisibleRect(rect, forceUpdate = false) {
    let current = this._visibleRect;
    if (rect.equals(current))
      return;
    if (this.shouldOverscan)
      this._overscanManager.setVisibleRect(rect);
    let shouldInvalidate = this.layout && this.layout.shouldInvalidate(rect, this._visibleRect);
    this._resetAnimatedContentOffset();
    this._visibleRect = rect;
    if (shouldInvalidate)
      this.relayout({
        offsetChanged: !rect.pointEquals(current),
        sizeChanged: !rect.sizeEquals(current)
      });
    else
      this.updateSubviews(forceUpdate);
  }
  get collection() {
    return this._collection;
  }
  set collection(data) {
    this._setData(data);
  }
  _setData(data) {
    if (data === this._collection)
      return;
    if (this._collection)
      this._runTransaction(() => {
        this._collection = data;
      }, this.transitionDuration > 0);
    else {
      this._collection = data;
      this.reloadData();
    }
  }
  reloadData() {
    this.relayout({
      contentChanged: true
    });
  }
  getItem(key) {
    return this._collection ? this._collection.getItem(key) : null;
  }
  get persistedKeys() {
    return this._persistedKeys;
  }
  set persistedKeys(persistedKeys) {
    if (!$fc36f9a046a9ce79$export$a8d0d0c8d1c5df64(persistedKeys, this._persistedKeys)) {
      this._persistedKeys = persistedKeys;
      this.updateSubviews();
    }
  }
  isPersistedKey(key) {
    if (this._persistedKeys.has(key))
      return true;
    for (let k of this._persistedKeys)
      while (k != null) {
        let layoutInfo = this.layout.getLayoutInfo(k);
        if (!layoutInfo)
          break;
        k = layoutInfo.parentKey;
        if (k === key)
          return true;
      }
    return false;
  }
  get layout() {
    return this._layout;
  }
  set layout(layout) {
    this.setLayout(layout);
  }
  setLayout(layout, animated = false) {
    if (layout === this._layout)
      return;
    let applyLayout = () => {
      if (this._layout)
        this._layout.virtualizer = null;
      layout.virtualizer = this;
      this._layout = layout;
    };
    if (animated)
      this._runTransaction(applyLayout);
    else {
      applyLayout();
      this.relayout();
    }
  }
  _getReuseType(layoutInfo, content) {
    if (layoutInfo.type === "item" && content) {
      let type = this.delegate.getType ? this.delegate.getType(content) : "item";
      let reuseType = type === "item" ? "item" : layoutInfo.type + "_" + type;
      return {
        type,
        reuseType
      };
    }
    return {
      type: layoutInfo.type,
      reuseType: layoutInfo.type
    };
  }
  getReusableView(layoutInfo) {
    let content = this.getItem(layoutInfo.key);
    let { reuseType } = this._getReuseType(layoutInfo, content);
    if (!this._reusableViews[reuseType])
      this._reusableViews[reuseType] = [];
    let reusable = this._reusableViews[reuseType];
    let view = reusable.length > 0 ? reusable.pop() : new $ad1d98aa8f0c31b4$export$1a5223887c560441(this);
    view.viewType = reuseType;
    if (!this._animatedContentOffset.isOrigin()) {
      layoutInfo = layoutInfo.copy();
      layoutInfo.rect.x += this._animatedContentOffset.x;
      layoutInfo.rect.y += this._animatedContentOffset.y;
    }
    view.layoutInfo = layoutInfo;
    this._renderView(view);
    return view;
  }
  _renderView(reusableView) {
    let { type, key } = reusableView.layoutInfo;
    reusableView.content = this.getItem(key);
    reusableView.rendered = this._renderContent(type, reusableView.content);
  }
  _renderContent(type, content) {
    let cached = this._renderedContent.get(content);
    if (cached != null)
      return cached;
    let rendered = this.delegate.renderView(type, content);
    if (content)
      this._renderedContent.set(content, rendered);
    return rendered;
  }
  get visibleViews() {
    return Array.from(this._visibleViews.values());
  }
  getView(key) {
    return this._visibleViews.get(key) || null;
  }
  getViewsOfType(type) {
    return this.visibleViews.filter(
      (v) => v.layoutInfo && v.layoutInfo.type === type
    );
  }
  keyForView(view) {
    if (view && view.layoutInfo)
      return view.layoutInfo.key;
    return null;
  }
  keyAtPoint(point) {
    let rect = new $60423f92c7f9ad87$export$c79fc6492f3af13d(point.x, point.y, 1, 1);
    let layoutInfos = this.layout.getVisibleLayoutInfos(rect);
    for (let layoutInfo of layoutInfos) {
      if (layoutInfo.rect.intersects(rect))
        return layoutInfo.key;
    }
    return null;
  }
  willUnmount() {
    cancelAnimationFrame(this._relayoutRaf);
  }
  relayout(context = {}) {
    if (this._scrollAnimation || typeof requestAnimationFrame === "undefined")
      return;
    if (this._invalidationContext) {
      Object.assign(this._invalidationContext, context);
      return;
    }
    this._invalidationContext = context;
    this._relayoutRaf = requestAnimationFrame(() => {
      this._relayoutRaf = null;
      this.relayoutNow();
    });
  }
  relayoutNow(context = this._invalidationContext || {}) {
    if (this._relayoutRaf) {
      cancelAnimationFrame(this._relayoutRaf);
      this._relayoutRaf = null;
      context = __spreadValues(__spreadValues({}, this._invalidationContext), context);
    }
    this._invalidationContext = null;
    if (!this.layout || !this._collection || this._scrollAnimation)
      return;
    let scrollAnchor = this._getScrollAnchor();
    if (typeof context.beforeLayout === "function")
      context.beforeLayout();
    this.layout.validate(context);
    this._setContentSize(this.layout.getContentSize());
    if (typeof context.afterLayout === "function")
      context.afterLayout();
    let visibleRect = this.getVisibleRect();
    let restoredScrollAnchor = this._restoreScrollAnchor(scrollAnchor, context);
    let contentOffsetX = context.contentChanged ? 0 : restoredScrollAnchor.x;
    let contentOffsetY = context.contentChanged ? 0 : restoredScrollAnchor.y;
    contentOffsetX = Math.max(0, Math.min(this.contentSize.width - visibleRect.width, contentOffsetX));
    contentOffsetY = Math.max(0, Math.min(this.contentSize.height - visibleRect.height, contentOffsetY));
    let hasLayoutUpdates = false;
    if (contentOffsetX !== visibleRect.x || contentOffsetY !== visibleRect.y) {
      if (context.animated || !this._animatedContentOffset.isOrigin()) {
        this._animatedContentOffset.x += visibleRect.x - contentOffsetX;
        this._animatedContentOffset.y += visibleRect.y - contentOffsetY;
        hasLayoutUpdates = this.updateSubviews(context.contentChanged);
      } else
        this._setContentOffset(new $3041db3296945e6e$export$baf26146a414f24a(contentOffsetX, contentOffsetY));
    } else
      hasLayoutUpdates = this.updateSubviews(context.contentChanged);
    if (!(context.transaction && context.animated))
      this._applyLayoutInfos();
    if (context.animated && hasLayoutUpdates) {
      this._enableTransitions();
      let done = () => {
        this._disableTransitions();
        if (!this._animatedContentOffset.isOrigin()) {
          let { x, y } = this.getVisibleRect();
          this._resetAnimatedContentOffset();
          this._setContentOffset(new $3041db3296945e6e$export$baf26146a414f24a(x, y));
        }
        if (typeof context.afterAnimation === "function")
          context.afterAnimation();
      };
      setTimeout(done, this.transitionDuration + 100);
      return;
    } else if (typeof context.afterAnimation === "function")
      context.afterAnimation();
  }
  _correctItemOrder() {
    if (this._isScrolling || this._transaction)
      return;
    for (let key of this._visibleLayoutInfos.keys()) {
      let view = this._visibleViews.get(key);
      this._children.delete(view);
      this._children.add(view);
    }
  }
  _enableTransitions() {
    this.delegate.beginAnimations();
  }
  _disableTransitions() {
    this.delegate.endAnimations();
  }
  _getScrollAnchor() {
    if (!this.anchorScrollPosition)
      return null;
    let visibleRect = this.getVisibleRect();
    if (this.delegate.getScrollAnchor) {
      let key = this.delegate.getScrollAnchor(visibleRect);
      if (key != null) {
        let layoutInfo = this.layout.getLayoutInfo(key);
        let corner = layoutInfo.rect.getCornerInRect(visibleRect);
        if (corner) {
          let key2 = layoutInfo.key;
          let offset = layoutInfo.rect[corner].y - visibleRect.y;
          return {
            key: key2,
            layoutInfo,
            corner,
            offset
          };
        }
      }
    }
    if (visibleRect.y === 0 && !this.anchorScrollPositionAtTop)
      return null;
    let cornerAnchor = null;
    for (let [key, view] of this._visibleViews) {
      let layoutInfo = view.layoutInfo;
      if (layoutInfo && layoutInfo.rect.area > 0) {
        let corner = layoutInfo.rect.getCornerInRect(visibleRect);
        if (corner) {
          let offset = layoutInfo.rect[corner].y - visibleRect.y;
          if (!cornerAnchor || offset < cornerAnchor.offset)
            cornerAnchor = {
              key,
              layoutInfo,
              corner,
              offset
            };
        }
      }
    }
    return cornerAnchor;
  }
  _restoreScrollAnchor(scrollAnchor, context) {
    let contentOffset = this.getVisibleRect();
    if (scrollAnchor) {
      var ref;
      let finalAnchor = ((ref = context.transaction) === null || ref === void 0 ? void 0 : ref.animated) ? context.transaction.finalMap.get(scrollAnchor.key) : this.layout.getLayoutInfo(scrollAnchor.layoutInfo.key);
      if (finalAnchor) {
        let adjustment = finalAnchor.rect[scrollAnchor.corner].y - contentOffset.y - scrollAnchor.offset;
        contentOffset.y += adjustment;
      }
    }
    return contentOffset;
  }
  getVisibleRect() {
    let v = this.visibleRect;
    let x = v.x - this._animatedContentOffset.x;
    let y = v.y - this._animatedContentOffset.y;
    return new $60423f92c7f9ad87$export$c79fc6492f3af13d(x, y, v.width, v.height);
  }
  getVisibleLayoutInfos() {
    let rect = this.shouldOverscan ? this._overscanManager.getOverscannedRect() : this.getVisibleRect();
    this._visibleLayoutInfos = this._getLayoutInfoMap(rect);
    return this._visibleLayoutInfos;
  }
  _getLayoutInfoMap(rect, copy = false) {
    let layoutInfos = this.layout.getVisibleLayoutInfos(rect);
    let map2 = /* @__PURE__ */ new Map();
    for (let layoutInfo of layoutInfos) {
      if (copy)
        layoutInfo = layoutInfo.copy();
      map2.set(layoutInfo.key, layoutInfo);
    }
    return map2;
  }
  updateSubviews(forceUpdate = false) {
    if (!this._collection)
      return;
    let visibleLayoutInfos = this.getVisibleLayoutInfos();
    let currentlyVisible = this._visibleViews;
    let toAdd, toRemove, toUpdate;
    if (forceUpdate) {
      toAdd = visibleLayoutInfos;
      toRemove = currentlyVisible;
      toUpdate = /* @__PURE__ */ new Set();
    } else {
      ({ toAdd, toRemove, toUpdate } = $fc36f9a046a9ce79$export$acaf96a27438246b(currentlyVisible, visibleLayoutInfos));
      for (let key of toUpdate) {
        let view = currentlyVisible.get(key);
        if (!view || !view.layoutInfo)
          continue;
        let item = this.getItem(visibleLayoutInfos.get(key).key);
        if (view.content === item)
          toUpdate.delete(key);
        else {
          let { reuseType } = this._getReuseType(view.layoutInfo, item);
          if (view.viewType !== reuseType) {
            toUpdate.delete(key);
            toAdd.add(key);
            toRemove.add(key);
          }
        }
      }
      if (toAdd.size === 0 && toRemove.size === 0 && toUpdate.size === 0) {
        if (this._transaction)
          this._applyLayoutInfos();
        return;
      }
    }
    let removed = /* @__PURE__ */ new Set();
    for (let key of toRemove.keys()) {
      let view = this._visibleViews.get(key);
      if (view) {
        removed.add(view);
        this._visibleViews.delete(key);
        if (this._transaction)
          this._transaction.toRemove.set(key, view);
        else
          this.reuseView(view);
      }
    }
    for (let key1 of toAdd.keys()) {
      let layoutInfo = visibleLayoutInfos.get(key1);
      let view;
      if (this._transaction) {
        if (this._transaction.initialLayoutInfo.has(key1))
          layoutInfo = this._transaction.initialLayoutInfo.get(key1);
        view = this._transaction.toRemove.get(key1);
        if (view) {
          this._transaction.toRemove.delete(key1);
          this._applyLayoutInfo(view, layoutInfo);
        }
      }
      if (!view) {
        view = this.getReusableView(layoutInfo);
        if (!removed.has(view))
          this._children.add(view);
      }
      this._visibleViews.set(key1, view);
      removed.delete(view);
    }
    for (let key2 of toUpdate) {
      let view = currentlyVisible.get(key2);
      this._renderedContent.delete(key2);
      this._renderView(view);
    }
    if (!this._transaction)
      this.removeViews(removed);
    this._correctItemOrder();
    this._flushVisibleViews();
    let hasLayoutUpdates = this._transaction && (toAdd.size > 0 || toRemove.size > 0 || this._hasLayoutUpdates());
    if (hasLayoutUpdates)
      requestAnimationFrame(() => {
        if (this._transaction)
          requestAnimationFrame(
            () => this._applyLayoutInfos()
          );
      });
    return hasLayoutUpdates;
  }
  afterRender() {
    if (this.shouldOverscan)
      this._overscanManager.collectMetrics();
  }
  _flushVisibleViews() {
    let viewsByParentKey = /* @__PURE__ */ new Map([
      [
        null,
        []
      ]
    ]);
    for (let view1 of this._children) {
      if (!viewsByParentKey.has(view1.layoutInfo.parentKey))
        viewsByParentKey.set(view1.layoutInfo.parentKey, []);
      viewsByParentKey.get(view1.layoutInfo.parentKey).push(view1);
      if (!viewsByParentKey.has(view1.layoutInfo.key))
        viewsByParentKey.set(view1.layoutInfo.key, []);
    }
    let buildTree = (parent, views) => views.map((view) => {
      let children = viewsByParentKey.get(view.layoutInfo.key);
      return this.delegate.renderWrapper(
        parent,
        view,
        children,
        (childViews) => buildTree(view, childViews)
      );
    });
    let children1 = buildTree(null, viewsByParentKey.get(null));
    this.delegate.setVisibleViews(children1);
  }
  _applyLayoutInfo(view, layoutInfo) {
    if (view.layoutInfo === layoutInfo)
      return false;
    view.layoutInfo = layoutInfo;
    return true;
  }
  _applyLayoutInfos() {
    let updated = false;
    for (let view of this._visibleViews.values()) {
      let cur = view.layoutInfo;
      if (cur) {
        let layoutInfo = this.layout.getLayoutInfo(cur.key);
        if (this._applyLayoutInfo(view, layoutInfo))
          updated = true;
      }
    }
    if (this._transaction) {
      for (let view of this._transaction.toRemove.values()) {
        let cur = view.layoutInfo;
        let layoutInfo = this.layout.getLayoutInfo(cur.key);
        if (this._applyLayoutInfo(view, layoutInfo))
          updated = true;
      }
      for (let view2 of this._transaction.removed.values()) {
        let cur = view2.layoutInfo;
        let layoutInfo = this._transaction.finalLayoutInfo.get(cur.key) || cur;
        layoutInfo = this.layout.getFinalLayoutInfo(layoutInfo.copy());
        if (this._applyLayoutInfo(view2, layoutInfo))
          updated = true;
      }
    }
    if (updated)
      this._flushVisibleViews();
  }
  _hasLayoutUpdates() {
    if (!this._transaction)
      return false;
    for (let view of this._visibleViews.values()) {
      let cur = view.layoutInfo;
      if (!cur)
        return true;
      let layoutInfo = this.layout.getLayoutInfo(cur.key);
      if (!cur.rect.equals(layoutInfo.rect) || cur.opacity !== layoutInfo.opacity || cur.transform !== layoutInfo.transform)
        return true;
    }
    return false;
  }
  reuseView(view) {
    view.prepareForReuse();
    this._reusableViews[view.viewType].push(view);
  }
  removeViews(toRemove) {
    for (let view of toRemove)
      this._children.delete(view);
  }
  updateItemSize(key, size) {
    if (!this.layout.updateItemSize)
      return;
    if (this._scrollAnimation) {
      this._sizeUpdateQueue.set(key, size);
      return;
    }
    let changed = this.layout.updateItemSize(key, size);
    if (changed)
      this.relayout();
  }
  startScrolling() {
    this._isScrolling = true;
  }
  endScrolling() {
    this._isScrolling = false;
    this._correctItemOrder();
    this._flushVisibleViews();
  }
  _resetAnimatedContentOffset() {
    if (!this._animatedContentOffset.isOrigin()) {
      this._animatedContentOffset = new $3041db3296945e6e$export$baf26146a414f24a(0, 0);
      this._applyLayoutInfos();
    }
  }
  scrollToItem(key, options) {
    if (key == null)
      return;
    let layoutInfo = this.layout.getLayoutInfo(key);
    if (!layoutInfo)
      return;
    let { duration = 300, shouldScrollX = true, shouldScrollY = true, offsetX = 0, offsetY = 0 } = options;
    let x = this.visibleRect.x;
    let y = this.visibleRect.y;
    let minX = layoutInfo.rect.x - offsetX;
    let minY = layoutInfo.rect.y - offsetY;
    let maxX = x + this.visibleRect.width;
    let maxY = y + this.visibleRect.height;
    if (shouldScrollX) {
      if (minX <= x || maxX === 0)
        x = minX;
      else if (layoutInfo.rect.maxX > maxX)
        x += layoutInfo.rect.maxX - maxX;
    }
    if (shouldScrollY) {
      if (minY <= y || maxY === 0)
        y = minY;
      else if (layoutInfo.rect.maxY > maxY)
        y += layoutInfo.rect.maxY - maxY;
    }
    return this.scrollTo(new $3041db3296945e6e$export$baf26146a414f24a(x, y), duration);
  }
  scrollTo(offset1, duration = 300) {
    if (this._scrollAnimation) {
      this._scrollAnimation.cancel();
      this._scrollAnimation = null;
    }
    if (duration <= 0 || this.visibleRect.pointEquals(offset1)) {
      this._setContentOffset(offset1);
      return Promise.resolve();
    }
    this.startScrolling();
    this._scrollAnimation = $3eb131dcf37ad5f8$export$dc0b63720788090c(this.visibleRect, offset1, duration, $3eb131dcf37ad5f8$export$57636bb43b1ccbb0, (offset) => {
      this._setContentOffset(offset);
    });
    this._scrollAnimation.then(() => {
      this._scrollAnimation = null;
      for (let [key, size] of this._sizeUpdateQueue)
        this.updateItemSize(key, size);
      this._sizeUpdateQueue.clear();
      this.relayout();
      this._processTransactionQueue();
      this.endScrolling();
    });
    return this._scrollAnimation;
  }
  _runTransaction(action2, animated) {
    this._startTransaction();
    if (this._nextTransaction)
      this._nextTransaction.actions.push(action2);
    this._endTransaction(animated);
  }
  _startTransaction() {
    if (!this._nextTransaction)
      this._nextTransaction = new $8e135e531d8dcb66$export$febc5573c75cefb0();
    this._nextTransaction.level++;
  }
  _endTransaction(animated) {
    if (!this._nextTransaction)
      return false;
    if (animated != null)
      this._nextTransaction.animated = animated;
    if (--this._nextTransaction.level > 0)
      return false;
    if (this._nextTransaction.actions.length === 0) {
      this._nextTransaction = null;
      return false;
    }
    if (this._nextTransaction.animated == null)
      this._nextTransaction.animated = true;
    this._transactionQueue.push(this._nextTransaction);
    this._nextTransaction = null;
    this._processTransactionQueue();
    return true;
  }
  _processTransactionQueue() {
    if (this._transaction || this._scrollAnimation)
      return;
    let next = this._transactionQueue.shift();
    if (next)
      this._performTransaction(next);
  }
  _getContentRect() {
    return new $60423f92c7f9ad87$export$c79fc6492f3af13d(0, 0, this.contentSize.width, this.contentSize.height);
  }
  _performTransaction(transaction2) {
    this._transaction = transaction2;
    this.relayoutNow({
      transaction: transaction2,
      animated: transaction2.animated,
      beforeLayout: () => {
        if (transaction2.animated)
          transaction2.initialMap = this._getLayoutInfoMap(this._getContentRect(), true);
        for (let action2 of transaction2.actions)
          action2();
      },
      afterLayout: () => {
        if (transaction2.animated) {
          transaction2.finalMap = this._getLayoutInfoMap(this._getContentRect());
          this._setupTransactionAnimations(transaction2);
        } else
          this._transaction = null;
      },
      afterAnimation: () => {
        if (transaction2.toRemove.size > 0 || transaction2.removed.size > 0)
          for (let view of $fc36f9a046a9ce79$export$cfc14088dfefce5f(transaction2.toRemove.values(), transaction2.removed.values())) {
            this._children.delete(view);
            this.reuseView(view);
          }
        this._transaction = null;
        this._correctItemOrder();
        this._flushVisibleViews();
        this._processTransactionQueue();
      }
    });
  }
  _setupTransactionAnimations(transaction2) {
    let { initialMap, finalMap } = transaction2;
    for (let [key, layoutInfo] of initialMap)
      if (finalMap.has(key))
        transaction2.initialLayoutInfo.set(key, layoutInfo);
      else
        transaction2.finalLayoutInfo.set(layoutInfo.key, layoutInfo);
    for (let [key3, layoutInfo1] of finalMap)
      if (!initialMap.has(key3)) {
        let initialLayoutInfo = this.layout.getInitialLayoutInfo(layoutInfo1.copy());
        transaction2.initialLayoutInfo.set(key3, initialLayoutInfo);
      }
    for (let [key4, view] of this._visibleViews)
      if (!finalMap.has(key4) && view.layoutInfo.rect.width > 0) {
        transaction2.removed.set(key4, view);
        this._visibleViews.delete(key4);
        if (view.layoutInfo) {
          if (!transaction2.finalLayoutInfo.has(view.layoutInfo.key))
            transaction2.finalLayoutInfo.set(view.layoutInfo.key, view.layoutInfo);
        }
      }
  }
  constructor(options = {}) {
    this._contentSize = new $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec();
    this._visibleRect = new $60423f92c7f9ad87$export$c79fc6492f3af13d();
    this._reusableViews = {};
    this._visibleLayoutInfos = /* @__PURE__ */ new Map();
    this._visibleViews = /* @__PURE__ */ new Map();
    this._renderedContent = /* @__PURE__ */ new WeakMap();
    this._children = /* @__PURE__ */ new Set();
    this._invalidationContext = null;
    this._overscanManager = new $364191b3decf3697$export$4455ee6afb38dcbb();
    this._persistedKeys = /* @__PURE__ */ new Set();
    this._scrollAnimation = null;
    this._isScrolling = false;
    this._sizeUpdateQueue = /* @__PURE__ */ new Map();
    this._animatedContentOffset = new $3041db3296945e6e$export$baf26146a414f24a(0, 0);
    this._transaction = null;
    this._nextTransaction = null;
    this._transactionQueue = [];
    var _transitionDuration;
    this.transitionDuration = (_transitionDuration = options.transitionDuration) !== null && _transitionDuration !== void 0 ? _transitionDuration : 500;
    this.anchorScrollPosition = options.anchorScrollPosition || false;
    this.anchorScrollPositionAtTop = options.anchorScrollPositionAtTop || false;
    this.shouldOverscan = options.shouldOverscan !== false;
    for (let key of [
      "delegate",
      "size",
      "layout",
      "collection"
    ])
      if (options[key])
        this[key] = options[key];
  }
};
function $fc0b13b484ac1194$export$1505db82fe357e65(opts) {
  let [visibleViews, setVisibleViews] = (0, preact_exports.useState)([]);
  let [contentSize, setContentSize] = (0, preact_exports.useState)(new $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec());
  let [isAnimating, setAnimating] = (0, preact_exports.useState)(false);
  let [isScrolling, setScrolling] = (0, preact_exports.useState)(false);
  let virtualizer = (0, preact_exports.useMemo)(
    () => new $38b9490c1cca8fc4$export$89be5a243e59c4b2(),
    []
  );
  virtualizer.delegate = {
    setVisibleViews,
    setVisibleRect(rect) {
      virtualizer.visibleRect = rect;
      opts.onVisibleRectChange(rect);
    },
    setContentSize,
    renderView: opts.renderView,
    renderWrapper: opts.renderWrapper,
    beginAnimations: () => setAnimating(true),
    endAnimations: () => setAnimating(false),
    getScrollAnchor: opts.getScrollAnchor
  };
  virtualizer.layout = opts.layout;
  virtualizer.collection = opts.collection;
  virtualizer.transitionDuration = opts.transitionDuration;
  (0, import_utils23.useLayoutEffect)(() => {
    virtualizer.afterRender();
  });
  (0, preact_exports.useEffect)(() => {
    return () => virtualizer.willUnmount();
  }, []);
  return {
    virtualizer,
    visibleViews,
    setVisibleRect: (0, preact_exports.useCallback)((rect) => {
      virtualizer.visibleRect = rect;
    }, [
      virtualizer
    ]),
    contentSize,
    isAnimating,
    isScrolling,
    startScrolling: (0, preact_exports.useCallback)(() => {
      virtualizer.startScrolling();
      setScrolling(true);
    }, [
      virtualizer
    ]),
    endScrolling: (0, preact_exports.useCallback)(() => {
      virtualizer.endScrolling();
      setScrolling(false);
    }, [
      virtualizer
    ])
  };
}

// ../../node_modules/@react-stately/layout/dist/module.js
var $61ef60fc9b1041f4$var$DEFAULT_HEIGHT = 48;
var $61ef60fc9b1041f4$export$cacbb3924155d68e = class extends $c74cda7d31af1253$export$c84671f46d6a1ca {
  getLayoutInfo(key) {
    return this.layoutInfos.get(key);
  }
  getVisibleLayoutInfos(rect) {
    let res = [];
    let addNodes = (nodes) => {
      for (let node of nodes)
        if (this.isVisible(node, rect)) {
          res.push(node.layoutInfo);
          if (node.header)
            res.push(node.header);
          if (node.children)
            addNodes(node.children);
        }
    };
    addNodes(this.rootNodes);
    return res;
  }
  isVisible(node, rect) {
    return node.layoutInfo.rect.intersects(rect) || node.layoutInfo.isSticky || this.virtualizer.isPersistedKey(node.layoutInfo.key);
  }
  validate(invalidationContext) {
    this.invalidateEverything = invalidationContext.sizeChanged;
    this.collection = this.virtualizer.collection;
    this.rootNodes = this.buildCollection();
    if (this.lastCollection) {
      for (let key of this.lastCollection.getKeys())
        if (!this.collection.getItem(key)) {
          let layoutNode = this.layoutNodes.get(key);
          if (layoutNode) {
            var ref;
            this.layoutInfos.delete(layoutNode.layoutInfo.key);
            this.layoutInfos.delete((ref = layoutNode.header) === null || ref === void 0 ? void 0 : ref.key);
            this.layoutNodes.delete(key);
          }
        }
    }
    this.lastWidth = this.virtualizer.visibleRect.width;
    this.lastCollection = this.collection;
  }
  buildCollection() {
    let y = this.padding;
    let nodes = [];
    for (let node of this.collection) {
      let layoutNode = this.buildChild(node, 0, y);
      y = layoutNode.layoutInfo.rect.maxY;
      nodes.push(layoutNode);
    }
    if (this.isLoading) {
      var _loaderHeight;
      let rect = new $60423f92c7f9ad87$export$c79fc6492f3af13d(0, y, this.virtualizer.visibleRect.width, (_loaderHeight = this.loaderHeight) !== null && _loaderHeight !== void 0 ? _loaderHeight : this.virtualizer.visibleRect.height);
      let loader = new $d7fd61009c21d0bb$export$7e0eeb9da702a085("loader", "loader", rect);
      this.layoutInfos.set("loader", loader);
      nodes.push({
        layoutInfo: loader
      });
      y = loader.rect.maxY;
    }
    if (nodes.length === 0) {
      var _placeholderHeight;
      let rect = new $60423f92c7f9ad87$export$c79fc6492f3af13d(0, y, this.virtualizer.visibleRect.width, (_placeholderHeight = this.placeholderHeight) !== null && _placeholderHeight !== void 0 ? _placeholderHeight : this.virtualizer.visibleRect.height);
      let placeholder = new $d7fd61009c21d0bb$export$7e0eeb9da702a085("placeholder", "placeholder", rect);
      this.layoutInfos.set("placeholder", placeholder);
      nodes.push({
        layoutInfo: placeholder
      });
      y = placeholder.rect.maxY;
    }
    this.contentSize = new $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec(this.virtualizer.visibleRect.width, y + this.padding);
    return nodes;
  }
  buildChild(node, x, y) {
    let cached = this.layoutNodes.get(node.key);
    if (!this.invalidateEverything && cached && cached.node === node && y === (cached.header || cached.layoutInfo).rect.y)
      return cached;
    let layoutNode = this.buildNode(node, x, y);
    layoutNode.node = node;
    var _parentKey;
    layoutNode.layoutInfo.parentKey = (_parentKey = node.parentKey) !== null && _parentKey !== void 0 ? _parentKey : null;
    this.layoutInfos.set(layoutNode.layoutInfo.key, layoutNode.layoutInfo);
    if (layoutNode.header)
      this.layoutInfos.set(layoutNode.header.key, layoutNode.header);
    this.layoutNodes.set(node.key, layoutNode);
    return layoutNode;
  }
  buildNode(node, x, y) {
    switch (node.type) {
      case "section":
        return this.buildSection(node, x, y);
      case "item":
        return this.buildItem(node, x, y);
    }
  }
  buildSection(node, x, y) {
    let width = this.virtualizer.visibleRect.width;
    let rectHeight = this.headingHeight;
    let isEstimated = false;
    if (rectHeight == null) {
      let previousLayoutNode = this.layoutNodes.get(node.key);
      if (previousLayoutNode && previousLayoutNode.header) {
        let curNode = this.collection.getItem(node.key);
        let lastNode = this.lastCollection ? this.lastCollection.getItem(node.key) : null;
        rectHeight = previousLayoutNode.header.rect.height;
        isEstimated = width !== this.lastWidth || curNode !== lastNode || previousLayoutNode.header.estimatedSize;
      } else {
        rectHeight = node.rendered ? this.estimatedHeadingHeight : 0;
        isEstimated = true;
      }
    }
    if (rectHeight == null)
      rectHeight = $61ef60fc9b1041f4$var$DEFAULT_HEIGHT;
    let headerRect = new $60423f92c7f9ad87$export$c79fc6492f3af13d(0, y, width, rectHeight);
    let header = new $d7fd61009c21d0bb$export$7e0eeb9da702a085("header", node.key + ":header", headerRect);
    header.estimatedSize = isEstimated;
    header.parentKey = node.key;
    y += header.rect.height;
    let rect = new $60423f92c7f9ad87$export$c79fc6492f3af13d(0, y, width, 0);
    let layoutInfo = new $d7fd61009c21d0bb$export$7e0eeb9da702a085(node.type, node.key, rect);
    let startY = y;
    let children = [];
    for (let child of node.childNodes) {
      let layoutNode = this.buildChild(child, x, y);
      y = layoutNode.layoutInfo.rect.maxY;
      children.push(layoutNode);
    }
    rect.height = y - startY;
    return {
      header,
      layoutInfo,
      children
    };
  }
  buildItem(node, x, y) {
    let width = this.virtualizer.visibleRect.width;
    let rectHeight = this.rowHeight;
    let isEstimated = false;
    if (rectHeight == null) {
      let previousLayoutNode = this.layoutNodes.get(node.key);
      if (previousLayoutNode) {
        let curNode = this.collection.getItem(node.key);
        let lastNode = this.lastCollection ? this.lastCollection.getItem(node.key) : null;
        rectHeight = previousLayoutNode.layoutInfo.rect.height;
        isEstimated = width !== this.lastWidth || curNode !== lastNode || previousLayoutNode.layoutInfo.estimatedSize;
      } else {
        rectHeight = this.estimatedRowHeight;
        isEstimated = true;
      }
    }
    if (rectHeight == null)
      rectHeight = $61ef60fc9b1041f4$var$DEFAULT_HEIGHT;
    if (typeof this.indentationForItem === "function")
      x += this.indentationForItem(this.collection, node.key) || 0;
    let rect = new $60423f92c7f9ad87$export$c79fc6492f3af13d(x, y, width - x, rectHeight);
    let layoutInfo = new $d7fd61009c21d0bb$export$7e0eeb9da702a085(node.type, node.key, rect);
    layoutInfo.allowOverflow = true;
    layoutInfo.estimatedSize = isEstimated;
    return {
      layoutInfo
    };
  }
  updateItemSize(key, size) {
    let layoutInfo = this.layoutInfos.get(key);
    if (!layoutInfo)
      return false;
    layoutInfo.estimatedSize = false;
    if (layoutInfo.rect.height !== size.height) {
      let newLayoutInfo = layoutInfo.copy();
      newLayoutInfo.rect.height = size.height;
      this.layoutInfos.set(key, newLayoutInfo);
      this.updateLayoutNode(key, layoutInfo, newLayoutInfo);
      let node = this.collection.getItem(layoutInfo.parentKey);
      while (node) {
        this.updateLayoutNode(node.key, layoutInfo, newLayoutInfo);
        node = this.collection.getItem(node.parentKey);
      }
      return true;
    }
    return false;
  }
  updateLayoutNode(key, oldLayoutInfo, newLayoutInfo) {
    let n = this.layoutNodes.get(key);
    if (n) {
      n.node = null;
      if (n.header === oldLayoutInfo)
        n.header = newLayoutInfo;
      else if (n.layoutInfo === oldLayoutInfo)
        n.layoutInfo = newLayoutInfo;
    }
  }
  getContentSize() {
    return this.contentSize;
  }
  getKeyAbove(key) {
    let collection = this.collection;
    key = collection.getKeyBefore(key);
    while (key != null) {
      let item = collection.getItem(key);
      if (item.type === "item" && (this.allowDisabledKeyFocus || !this.disabledKeys.has(item.key)))
        return key;
      key = collection.getKeyBefore(key);
    }
  }
  getKeyBelow(key) {
    let collection = this.collection;
    key = collection.getKeyAfter(key);
    while (key != null) {
      let item = collection.getItem(key);
      if (item.type === "item" && (this.allowDisabledKeyFocus || !this.disabledKeys.has(item.key)))
        return key;
      key = collection.getKeyAfter(key);
    }
  }
  getKeyPageAbove(key) {
    let layoutInfo = this.getLayoutInfo(key);
    if (layoutInfo) {
      let pageY = Math.max(0, layoutInfo.rect.y + layoutInfo.rect.height - this.virtualizer.visibleRect.height);
      while (layoutInfo && layoutInfo.rect.y > pageY) {
        let keyAbove = this.getKeyAbove(layoutInfo.key);
        layoutInfo = this.getLayoutInfo(keyAbove);
      }
      if (layoutInfo)
        return layoutInfo.key;
    }
    return this.getFirstKey();
  }
  getKeyPageBelow(key) {
    let layoutInfo = this.getLayoutInfo(key != null ? key : this.getFirstKey());
    if (layoutInfo) {
      let pageY = Math.min(this.virtualizer.contentSize.height, layoutInfo.rect.y - layoutInfo.rect.height + this.virtualizer.visibleRect.height);
      while (layoutInfo && layoutInfo.rect.y < pageY) {
        let keyBelow = this.getKeyBelow(layoutInfo.key);
        layoutInfo = this.getLayoutInfo(keyBelow);
      }
      if (layoutInfo)
        return layoutInfo.key;
    }
    return this.getLastKey();
  }
  getFirstKey() {
    let collection = this.collection;
    let key = collection.getFirstKey();
    while (key != null) {
      let item = collection.getItem(key);
      if (item.type === "item" && (this.allowDisabledKeyFocus || !this.disabledKeys.has(item.key)))
        return key;
      key = collection.getKeyAfter(key);
    }
  }
  getLastKey() {
    let collection = this.collection;
    let key = collection.getLastKey();
    while (key != null) {
      let item = collection.getItem(key);
      if (item.type === "item" && (this.allowDisabledKeyFocus || !this.disabledKeys.has(item.key)))
        return key;
      key = collection.getKeyBefore(key);
    }
  }
  getKeyForSearch(search, fromKey) {
    if (!this.collator)
      return null;
    let collection = this.collection;
    let key = fromKey || this.getFirstKey();
    while (key != null) {
      let item = collection.getItem(key);
      let substring = item.textValue.slice(0, search.length);
      if (item.textValue && this.collator.compare(substring, search) === 0)
        return key;
      key = this.getKeyBelow(key);
    }
    return null;
  }
  getInitialLayoutInfo(layoutInfo) {
    layoutInfo.opacity = 0;
    layoutInfo.transform = "scale3d(0.8, 0.8, 0.8)";
    return layoutInfo;
  }
  getFinalLayoutInfo(layoutInfo) {
    layoutInfo.opacity = 0;
    layoutInfo.transform = "scale3d(0.8, 0.8, 0.8)";
    return layoutInfo;
  }
  getDropTargetFromPoint(x, y, isValidDropTarget) {
    x += this.virtualizer.visibleRect.x;
    y += this.virtualizer.visibleRect.y;
    let key = this.virtualizer.keyAtPoint(new $3041db3296945e6e$export$baf26146a414f24a(x, y));
    if (key == null)
      return;
    let layoutInfo = this.getLayoutInfo(key);
    let rect = layoutInfo.rect;
    let target = {
      type: "item",
      key: layoutInfo.key,
      dropPosition: "on"
    };
    if (!isValidDropTarget(target)) {
      if (y <= rect.y + rect.height / 2 && isValidDropTarget(__spreadProps(__spreadValues({}, target), {
        dropPosition: "before"
      })))
        target.dropPosition = "before";
      else if (isValidDropTarget(__spreadProps(__spreadValues({}, target), {
        dropPosition: "after"
      })))
        target.dropPosition = "after";
    } else if (y <= rect.y + 10 && isValidDropTarget(__spreadProps(__spreadValues({}, target), {
      dropPosition: "before"
    })))
      target.dropPosition = "before";
    else if (y >= rect.maxY - 10 && isValidDropTarget(__spreadProps(__spreadValues({}, target), {
      dropPosition: "after"
    })))
      target.dropPosition = "after";
    return target;
  }
  constructor(options = {}) {
    super();
    this.disabledKeys = /* @__PURE__ */ new Set();
    this.allowDisabledKeyFocus = false;
    this.rowHeight = options.rowHeight;
    this.estimatedRowHeight = options.estimatedRowHeight;
    this.headingHeight = options.headingHeight;
    this.estimatedHeadingHeight = options.estimatedHeadingHeight;
    this.padding = options.padding || 0;
    this.indentationForItem = options.indentationForItem;
    this.collator = options.collator;
    this.loaderHeight = options.loaderHeight;
    this.placeholderHeight = options.placeholderHeight;
    this.layoutInfos = /* @__PURE__ */ new Map();
    this.layoutNodes = /* @__PURE__ */ new Map();
    this.rootNodes = [];
    this.lastWidth = 0;
    this.lastCollection = null;
    this.allowDisabledKeyFocus = options.allowDisabledKeyFocus;
  }
};

// ../../node_modules/@react-spectrum/listbox/dist/module.js
var import_utils29 = __toESM(require_main3());

// ../../node_modules/@react-spectrum/progress/dist/module.js
var import_utils25 = __toESM(require_main9());
init_preact();

// ../../node_modules/@react-aria/progress/dist/module.js
var import_utils24 = __toESM(require_main3());
var import_i18n4 = __toESM(require_main8());
function $204d9ebcedfb8806$export$ed5abd763a836edc(props) {
  let { value = 0, minValue = 0, maxValue = 100, valueLabel, isIndeterminate, formatOptions = {
    style: "percent"
  } } = props;
  let domProps = (0, import_utils24.filterDOMProps)(props, {
    labelable: true
  });
  let { labelProps, fieldProps } = $d191a55c9702f145$export$8467354a121f1b9f(__spreadProps(__spreadValues({}, props), {
    labelElementType: "span"
  }));
  value = (0, import_utils24.clamp)(value, minValue, maxValue);
  let percentage = (value - minValue) / (maxValue - minValue);
  let formatter = (0, import_i18n4.useNumberFormatter)(formatOptions);
  if (!isIndeterminate && !valueLabel) {
    let valueToFormat = formatOptions.style === "percent" ? percentage : value;
    valueLabel = formatter.format(valueToFormat);
  }
  return {
    progressBarProps: (0, import_utils24.mergeProps)(domProps, __spreadProps(__spreadValues({}, fieldProps), {
      "aria-valuenow": isIndeterminate ? void 0 : value,
      "aria-valuemin": minValue,
      "aria-valuemax": maxValue,
      "aria-valuetext": isIndeterminate ? void 0 : valueLabel,
      role: "progressbar"
    })),
    labelProps
  };
}

// ../../node_modules/@react-spectrum/progress/dist/module.js
var import_utils26 = __toESM(require_main3());
function $parcel$interopDefault7(a) {
  return a && a.__esModule ? a.default : a;
}
function $parcel$export7(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $a43f840f49ffbe32$exports = {};
$parcel$export7($a43f840f49ffbe32$exports, "spectrum-BarLoader", () => $a43f840f49ffbe32$export$162ba336fb0c239f, (v) => $a43f840f49ffbe32$export$162ba336fb0c239f = v);
$parcel$export7($a43f840f49ffbe32$exports, "spectrum-BarLoader--indeterminate", () => $a43f840f49ffbe32$export$1249dfbb98223794, (v) => $a43f840f49ffbe32$export$1249dfbb98223794 = v);
$parcel$export7($a43f840f49ffbe32$exports, "spectrum-BarLoader--sideLabel", () => $a43f840f49ffbe32$export$99af8802cc2a10dc, (v) => $a43f840f49ffbe32$export$99af8802cc2a10dc = v);
$parcel$export7($a43f840f49ffbe32$exports, "spectrum-BarLoader-track", () => $a43f840f49ffbe32$export$3e2e13fb57b5c74b, (v) => $a43f840f49ffbe32$export$3e2e13fb57b5c74b = v);
$parcel$export7($a43f840f49ffbe32$exports, "spectrum-BarLoader-fill", () => $a43f840f49ffbe32$export$84c9ee7bc724b71b, (v) => $a43f840f49ffbe32$export$84c9ee7bc724b71b = v);
$parcel$export7($a43f840f49ffbe32$exports, "spectrum-BarLoader-label", () => $a43f840f49ffbe32$export$5379ba198163be86, (v) => $a43f840f49ffbe32$export$5379ba198163be86 = v);
$parcel$export7($a43f840f49ffbe32$exports, "spectrum-BarLoader-percentage", () => $a43f840f49ffbe32$export$ecc9c825de9d1a18, (v) => $a43f840f49ffbe32$export$ecc9c825de9d1a18 = v);
$parcel$export7($a43f840f49ffbe32$exports, "spectrum-BarLoader--small", () => $a43f840f49ffbe32$export$b945305960ad74a7, (v) => $a43f840f49ffbe32$export$b945305960ad74a7 = v);
$parcel$export7($a43f840f49ffbe32$exports, "indeterminate-loop-ltr", () => $a43f840f49ffbe32$export$a889038a25113dd4, (v) => $a43f840f49ffbe32$export$a889038a25113dd4 = v);
$parcel$export7($a43f840f49ffbe32$exports, "indeterminate-loop-rtl", () => $a43f840f49ffbe32$export$aeff243cf3356f00, (v) => $a43f840f49ffbe32$export$aeff243cf3356f00 = v);
$parcel$export7($a43f840f49ffbe32$exports, "spectrum-BarLoader--overBackground", () => $a43f840f49ffbe32$export$55612d0bd9b5d41, (v) => $a43f840f49ffbe32$export$55612d0bd9b5d41 = v);
$parcel$export7($a43f840f49ffbe32$exports, "is-positive", () => $a43f840f49ffbe32$export$aea9fd919467f03a, (v) => $a43f840f49ffbe32$export$aea9fd919467f03a = v);
$parcel$export7($a43f840f49ffbe32$exports, "is-warning", () => $a43f840f49ffbe32$export$d4ebda6218901908, (v) => $a43f840f49ffbe32$export$d4ebda6218901908 = v);
$parcel$export7($a43f840f49ffbe32$exports, "is-critical", () => $a43f840f49ffbe32$export$a1f608a9810da50f, (v) => $a43f840f49ffbe32$export$a1f608a9810da50f = v);
var $a43f840f49ffbe32$export$162ba336fb0c239f;
var $a43f840f49ffbe32$export$1249dfbb98223794;
var $a43f840f49ffbe32$export$99af8802cc2a10dc;
var $a43f840f49ffbe32$export$3e2e13fb57b5c74b;
var $a43f840f49ffbe32$export$84c9ee7bc724b71b;
var $a43f840f49ffbe32$export$5379ba198163be86;
var $a43f840f49ffbe32$export$ecc9c825de9d1a18;
var $a43f840f49ffbe32$export$b945305960ad74a7;
var $a43f840f49ffbe32$export$a889038a25113dd4;
var $a43f840f49ffbe32$export$aeff243cf3356f00;
var $a43f840f49ffbe32$export$55612d0bd9b5d41;
var $a43f840f49ffbe32$export$aea9fd919467f03a;
var $a43f840f49ffbe32$export$d4ebda6218901908;
var $a43f840f49ffbe32$export$a1f608a9810da50f;
$a43f840f49ffbe32$export$162ba336fb0c239f = "spectrum-BarLoader_48541f";
$a43f840f49ffbe32$export$1249dfbb98223794 = "spectrum-BarLoader--indeterminate_48541f";
$a43f840f49ffbe32$export$99af8802cc2a10dc = "spectrum-BarLoader--sideLabel_48541f";
$a43f840f49ffbe32$export$3e2e13fb57b5c74b = "spectrum-BarLoader-track_48541f";
$a43f840f49ffbe32$export$84c9ee7bc724b71b = "spectrum-BarLoader-fill_48541f";
$a43f840f49ffbe32$export$5379ba198163be86 = "spectrum-BarLoader-label_48541f";
$a43f840f49ffbe32$export$ecc9c825de9d1a18 = "spectrum-BarLoader-percentage_48541f";
$a43f840f49ffbe32$export$b945305960ad74a7 = "spectrum-BarLoader--small_48541f";
$a43f840f49ffbe32$export$a889038a25113dd4 = "indeterminate-loop-ltr_48541f";
$a43f840f49ffbe32$export$aeff243cf3356f00 = "indeterminate-loop-rtl_48541f";
$a43f840f49ffbe32$export$55612d0bd9b5d41 = "spectrum-BarLoader--overBackground_48541f";
$a43f840f49ffbe32$export$aea9fd919467f03a = "is-positive_48541f";
$a43f840f49ffbe32$export$d4ebda6218901908 = "is-warning_48541f";
$a43f840f49ffbe32$export$a1f608a9810da50f = "is-critical_48541f";
function $ddf9337e928b5fe6$var$ProgressBarBase(props, ref) {
  let _a3 = props, { value = 0, minValue = 0, maxValue = 100, size = "L", label, barClassName, showValueLabel = !!label, labelPosition = "top", isIndeterminate = false, barProps, labelProps, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby } = _a3, otherProps = __objRest(_a3, ["value", "minValue", "maxValue", "size", "label", "barClassName", "showValueLabel", "labelPosition", "isIndeterminate", "barProps", "labelProps", "aria-label", "aria-labelledby"]);
  let domRef = (0, import_utils25.useDOMRef)(ref);
  let { styleProps } = (0, import_utils25.useStyleProps)(otherProps);
  value = (0, import_utils26.clamp)(value, minValue, maxValue);
  let barStyle = {};
  if (!isIndeterminate) {
    let percentage = (value - minValue) / (maxValue - minValue);
    barStyle.width = `${Math.round(percentage * 100)}%`;
  }
  if (!label && !ariaLabel && !ariaLabelledby)
    console.warn("If you do not provide a visible label via children, you must specify an aria-label or aria-labelledby attribute for accessibility");
  return /* @__PURE__ */ preact_default.createElement("div", __spreadProps(__spreadValues({}, barProps), {
    ref: domRef,
    className: (0, import_utils25.classNames)(/* @__PURE__ */ $parcel$interopDefault7($a43f840f49ffbe32$exports), "spectrum-BarLoader", {
      "spectrum-BarLoader--small": size === "S",
      "spectrum-BarLoader--large": size === "L",
      "spectrum-BarLoader--indeterminate": isIndeterminate,
      "spectrum-BarLoader--sideLabel": labelPosition === "side"
    }, barClassName, styleProps.className),
    style: __spreadValues({
      minWidth: "-moz-fit-content"
    }, styleProps.style)
  }), label && /* @__PURE__ */ preact_default.createElement("span", __spreadProps(__spreadValues({}, labelProps), {
    className: (0, import_utils25.classNames)(/* @__PURE__ */ $parcel$interopDefault7($a43f840f49ffbe32$exports), "spectrum-BarLoader-label")
  }), label), showValueLabel && /* @__PURE__ */ preact_default.createElement("div", {
    className: (0, import_utils25.classNames)(/* @__PURE__ */ $parcel$interopDefault7($a43f840f49ffbe32$exports), "spectrum-BarLoader-percentage")
  }, barProps["aria-valuetext"]), /* @__PURE__ */ preact_default.createElement("div", {
    className: (0, import_utils25.classNames)(/* @__PURE__ */ $parcel$interopDefault7($a43f840f49ffbe32$exports), "spectrum-BarLoader-track")
  }, /* @__PURE__ */ preact_default.createElement("div", {
    className: (0, import_utils25.classNames)(/* @__PURE__ */ $parcel$interopDefault7($a43f840f49ffbe32$exports), "spectrum-BarLoader-fill"),
    style: barStyle
  })));
}
var $ddf9337e928b5fe6$export$7c6ed87244065f3a = /* @__PURE__ */ preact_default.forwardRef($ddf9337e928b5fe6$var$ProgressBarBase);
function $551ca31cb687f352$var$ProgressBar(props, ref) {
  let _a3 = props, { variant } = _a3, otherProps = __objRest(_a3, ["variant"]);
  const { progressBarProps, labelProps } = $204d9ebcedfb8806$export$ed5abd763a836edc(props);
  return /* @__PURE__ */ preact_default.createElement($ddf9337e928b5fe6$export$7c6ed87244065f3a, __spreadProps(__spreadValues({}, otherProps), {
    ref,
    barProps: progressBarProps,
    labelProps,
    barClassName: (0, import_utils25.classNames)(/* @__PURE__ */ $parcel$interopDefault7($a43f840f49ffbe32$exports), {
      "spectrum-BarLoader--overBackground": variant === "overBackground"
    })
  }));
}
var $551ca31cb687f352$export$c17561cb55d4db30 = /* @__PURE__ */ preact_default.forwardRef($551ca31cb687f352$var$ProgressBar);
var $91c958cb2e66ca21$exports = {};
$parcel$export7($91c958cb2e66ca21$exports, "spectrum-CircleLoader--indeterminate-fill-submask-2", () => $91c958cb2e66ca21$export$f7083dbeadcbb2bd, (v) => $91c958cb2e66ca21$export$f7083dbeadcbb2bd = v);
$parcel$export7($91c958cb2e66ca21$exports, "spectrum-fill-mask-2", () => $91c958cb2e66ca21$export$7219832bea80eb54, (v) => $91c958cb2e66ca21$export$7219832bea80eb54 = v);
$parcel$export7($91c958cb2e66ca21$exports, "spectrum-CircleLoader", () => $91c958cb2e66ca21$export$9633d311d6d6830b, (v) => $91c958cb2e66ca21$export$9633d311d6d6830b = v);
$parcel$export7($91c958cb2e66ca21$exports, "spectrum-CircleLoader-track", () => $91c958cb2e66ca21$export$278efdb85ed802da, (v) => $91c958cb2e66ca21$export$278efdb85ed802da = v);
$parcel$export7($91c958cb2e66ca21$exports, "spectrum-CircleLoader-fills", () => $91c958cb2e66ca21$export$3038f4c0c86f539b, (v) => $91c958cb2e66ca21$export$3038f4c0c86f539b = v);
$parcel$export7($91c958cb2e66ca21$exports, "spectrum-CircleLoader-fill", () => $91c958cb2e66ca21$export$58fb9ac68cf8e784, (v) => $91c958cb2e66ca21$export$58fb9ac68cf8e784 = v);
$parcel$export7($91c958cb2e66ca21$exports, "spectrum-CircleLoader-fillMask1", () => $91c958cb2e66ca21$export$b676cd958401a736, (v) => $91c958cb2e66ca21$export$b676cd958401a736 = v);
$parcel$export7($91c958cb2e66ca21$exports, "spectrum-CircleLoader-fillMask2", () => $91c958cb2e66ca21$export$8c428f4f13e424b, (v) => $91c958cb2e66ca21$export$8c428f4f13e424b = v);
$parcel$export7($91c958cb2e66ca21$exports, "spectrum-CircleLoader-fillSubMask1", () => $91c958cb2e66ca21$export$98ba5ef650aeb8ca, (v) => $91c958cb2e66ca21$export$98ba5ef650aeb8ca = v);
$parcel$export7($91c958cb2e66ca21$exports, "spectrum-CircleLoader-fillSubMask2", () => $91c958cb2e66ca21$export$dc70b48c897b0f1a, (v) => $91c958cb2e66ca21$export$dc70b48c897b0f1a = v);
$parcel$export7($91c958cb2e66ca21$exports, "spectrum-CircleLoader--small", () => $91c958cb2e66ca21$export$79819ab9844dbe9b, (v) => $91c958cb2e66ca21$export$79819ab9844dbe9b = v);
$parcel$export7($91c958cb2e66ca21$exports, "spectrum-CircleLoader--large", () => $91c958cb2e66ca21$export$c8c34e5e37bf511c, (v) => $91c958cb2e66ca21$export$c8c34e5e37bf511c = v);
$parcel$export7($91c958cb2e66ca21$exports, "spectrum-CircleLoader--indeterminate", () => $91c958cb2e66ca21$export$79b7e5abeef5134f, (v) => $91c958cb2e66ca21$export$79b7e5abeef5134f = v);
$parcel$export7($91c958cb2e66ca21$exports, "spectrum-fills-rotate", () => $91c958cb2e66ca21$export$3663cbdb240663ec, (v) => $91c958cb2e66ca21$export$3663cbdb240663ec = v);
$parcel$export7($91c958cb2e66ca21$exports, "spectrum-fill-mask-1", () => $91c958cb2e66ca21$export$524c81e63e1d64f5, (v) => $91c958cb2e66ca21$export$524c81e63e1d64f5 = v);
$parcel$export7($91c958cb2e66ca21$exports, "spectrum-CircleLoader--overBackground", () => $91c958cb2e66ca21$export$6668708cb539f403, (v) => $91c958cb2e66ca21$export$6668708cb539f403 = v);
var $91c958cb2e66ca21$export$f7083dbeadcbb2bd;
var $91c958cb2e66ca21$export$7219832bea80eb54;
var $91c958cb2e66ca21$export$9633d311d6d6830b;
var $91c958cb2e66ca21$export$278efdb85ed802da;
var $91c958cb2e66ca21$export$3038f4c0c86f539b;
var $91c958cb2e66ca21$export$58fb9ac68cf8e784;
var $91c958cb2e66ca21$export$b676cd958401a736;
var $91c958cb2e66ca21$export$8c428f4f13e424b;
var $91c958cb2e66ca21$export$98ba5ef650aeb8ca;
var $91c958cb2e66ca21$export$dc70b48c897b0f1a;
var $91c958cb2e66ca21$export$79819ab9844dbe9b;
var $91c958cb2e66ca21$export$c8c34e5e37bf511c;
var $91c958cb2e66ca21$export$79b7e5abeef5134f;
var $91c958cb2e66ca21$export$3663cbdb240663ec;
var $91c958cb2e66ca21$export$524c81e63e1d64f5;
var $91c958cb2e66ca21$export$6668708cb539f403;
$91c958cb2e66ca21$export$f7083dbeadcbb2bd = "spectrum-CircleLoader--indeterminate-fill-submask-2_7c1153";
$91c958cb2e66ca21$export$7219832bea80eb54 = "spectrum-fill-mask-2_7c1153";
$91c958cb2e66ca21$export$9633d311d6d6830b = "spectrum-CircleLoader_7c1153";
$91c958cb2e66ca21$export$278efdb85ed802da = "spectrum-CircleLoader-track_7c1153";
$91c958cb2e66ca21$export$3038f4c0c86f539b = "spectrum-CircleLoader-fills_7c1153";
$91c958cb2e66ca21$export$58fb9ac68cf8e784 = "spectrum-CircleLoader-fill_7c1153";
$91c958cb2e66ca21$export$b676cd958401a736 = "spectrum-CircleLoader-fillMask1_7c1153";
$91c958cb2e66ca21$export$8c428f4f13e424b = "spectrum-CircleLoader-fillMask2_7c1153";
$91c958cb2e66ca21$export$98ba5ef650aeb8ca = "spectrum-CircleLoader-fillSubMask1_7c1153";
$91c958cb2e66ca21$export$dc70b48c897b0f1a = "spectrum-CircleLoader-fillSubMask2_7c1153";
$91c958cb2e66ca21$export$79819ab9844dbe9b = "spectrum-CircleLoader--small_7c1153";
$91c958cb2e66ca21$export$c8c34e5e37bf511c = "spectrum-CircleLoader--large_7c1153";
$91c958cb2e66ca21$export$79b7e5abeef5134f = "spectrum-CircleLoader--indeterminate_7c1153";
$91c958cb2e66ca21$export$3663cbdb240663ec = "spectrum-fills-rotate_7c1153";
$91c958cb2e66ca21$export$524c81e63e1d64f5 = "spectrum-fill-mask-1_7c1153";
$91c958cb2e66ca21$export$6668708cb539f403 = "spectrum-CircleLoader--overBackground_7c1153";
function $79c16f64960b6385$var$ProgressCircle(props, ref) {
  let _a3 = props, { value = 0, minValue = 0, maxValue = 100, size = "M", variant, isIndeterminate = false, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby } = _a3, otherProps = __objRest(_a3, ["value", "minValue", "maxValue", "size", "variant", "isIndeterminate", "aria-label", "aria-labelledby"]);
  let domRef = (0, import_utils25.useDOMRef)(ref);
  let { styleProps } = (0, import_utils25.useStyleProps)(otherProps);
  value = (0, import_utils26.clamp)(value, minValue, maxValue);
  let { progressBarProps } = $204d9ebcedfb8806$export$ed5abd763a836edc(__spreadProps(__spreadValues({}, props), {
    value
  }));
  let subMask1Style = {};
  let subMask2Style = {};
  if (!isIndeterminate) {
    let percentage = (value - minValue) / (maxValue - minValue) * 100;
    let angle;
    if (percentage > 0 && percentage <= 50) {
      angle = -180 + percentage / 50 * 180;
      subMask1Style.transform = `rotate(${angle}deg)`;
      subMask2Style.transform = "rotate(-180deg)";
    } else if (percentage > 50) {
      angle = -180 + (percentage - 50) / 50 * 180;
      subMask1Style.transform = "rotate(0deg)";
      subMask2Style.transform = `rotate(${angle}deg)`;
    }
  }
  if (!ariaLabel && !ariaLabelledby)
    console.warn("ProgressCircle requires an aria-label or aria-labelledby attribute for accessibility");
  return /* @__PURE__ */ preact_default.createElement("div", __spreadProps(__spreadValues(__spreadValues({}, styleProps), progressBarProps), {
    ref: domRef,
    className: (0, import_utils25.classNames)(/* @__PURE__ */ $parcel$interopDefault7($91c958cb2e66ca21$exports), "spectrum-CircleLoader", {
      "spectrum-CircleLoader--indeterminate": isIndeterminate,
      "spectrum-CircleLoader--small": size === "S",
      "spectrum-CircleLoader--large": size === "L",
      "spectrum-CircleLoader--overBackground": variant === "overBackground"
    }, styleProps.className)
  }), /* @__PURE__ */ preact_default.createElement("div", {
    className: (0, import_utils25.classNames)(/* @__PURE__ */ $parcel$interopDefault7($91c958cb2e66ca21$exports), "spectrum-CircleLoader-track")
  }), /* @__PURE__ */ preact_default.createElement("div", {
    className: (0, import_utils25.classNames)(/* @__PURE__ */ $parcel$interopDefault7($91c958cb2e66ca21$exports), "spectrum-CircleLoader-fills")
  }, /* @__PURE__ */ preact_default.createElement("div", {
    className: (0, import_utils25.classNames)(/* @__PURE__ */ $parcel$interopDefault7($91c958cb2e66ca21$exports), "spectrum-CircleLoader-fillMask1")
  }, /* @__PURE__ */ preact_default.createElement("div", {
    className: (0, import_utils25.classNames)(/* @__PURE__ */ $parcel$interopDefault7($91c958cb2e66ca21$exports), "spectrum-CircleLoader-fillSubMask1"),
    "data-testid": "fillSubMask1",
    style: subMask1Style
  }, /* @__PURE__ */ preact_default.createElement("div", {
    className: (0, import_utils25.classNames)(/* @__PURE__ */ $parcel$interopDefault7($91c958cb2e66ca21$exports), "spectrum-CircleLoader-fill")
  }))), /* @__PURE__ */ preact_default.createElement("div", {
    className: (0, import_utils25.classNames)(/* @__PURE__ */ $parcel$interopDefault7($91c958cb2e66ca21$exports), "spectrum-CircleLoader-fillMask2")
  }, /* @__PURE__ */ preact_default.createElement("div", {
    className: (0, import_utils25.classNames)(/* @__PURE__ */ $parcel$interopDefault7($91c958cb2e66ca21$exports), "spectrum-CircleLoader-fillSubMask2"),
    "data-testid": "fillSubMask2",
    style: subMask2Style
  }, /* @__PURE__ */ preact_default.createElement("div", {
    className: (0, import_utils25.classNames)(/* @__PURE__ */ $parcel$interopDefault7($91c958cb2e66ca21$exports), "spectrum-CircleLoader-fill")
  })))));
}
var $79c16f64960b6385$export$c79b9d6b4cc92af7 = /* @__PURE__ */ preact_default.forwardRef($79c16f64960b6385$var$ProgressCircle);

// ../../node_modules/@react-spectrum/listbox/dist/module.js
var import_i18n6 = __toESM(require_main8());
var import_provider5 = __toESM(require_main13());

// ../../node_modules/@react-aria/virtualizer/dist/module.js
var import_utils27 = __toESM(require_main3());
var import_interactions7 = __toESM(require_main10());
init_preact();
init_preact();
var import_i18n5 = __toESM(require_main8());
var $ce415dc67314b753$var$cachedRTLResult = null;
function $ce415dc67314b753$export$faf7630257ad4304(recalculate = false) {
  if ($ce415dc67314b753$var$cachedRTLResult === null || recalculate) {
    const outerDiv = document.createElement("div");
    const outerStyle = outerDiv.style;
    outerStyle.width = "50px";
    outerStyle.height = "50px";
    outerStyle.overflow = "scroll";
    outerStyle.direction = "rtl";
    const innerDiv = document.createElement("div");
    const innerStyle = innerDiv.style;
    innerStyle.width = "100px";
    innerStyle.height = "100px";
    outerDiv.appendChild(innerDiv);
    document.body.appendChild(outerDiv);
    if (outerDiv.scrollLeft > 0)
      $ce415dc67314b753$var$cachedRTLResult = "positive-descending";
    else {
      outerDiv.scrollLeft = 1;
      if (outerDiv.scrollLeft === 0)
        $ce415dc67314b753$var$cachedRTLResult = "negative";
      else
        $ce415dc67314b753$var$cachedRTLResult = "positive-ascending";
    }
    document.body.removeChild(outerDiv);
    return $ce415dc67314b753$var$cachedRTLResult;
  }
  return $ce415dc67314b753$var$cachedRTLResult;
}
function $ce415dc67314b753$export$1389d168952b34b5(node, direction) {
  let { scrollLeft } = node;
  if (direction === "rtl") {
    let { scrollWidth, clientWidth } = node;
    switch ($ce415dc67314b753$export$faf7630257ad4304()) {
      case "negative":
        scrollLeft = -scrollLeft;
        break;
      case "positive-descending":
        scrollLeft = scrollWidth - clientWidth - scrollLeft;
        break;
    }
  }
  return scrollLeft;
}
function $44a6ee657928b002$var$ScrollView(props, ref) {
  let _a3 = props, { contentSize, onVisibleRectChange, children, innerStyle, sizeToFit, onScrollStart, onScrollEnd, scrollDirection = "both" } = _a3, otherProps = __objRest(_a3, ["contentSize", "onVisibleRectChange", "children", "innerStyle", "sizeToFit", "onScrollStart", "onScrollEnd", "scrollDirection"]);
  let defaultRef = (0, preact_exports.useRef)();
  ref = ref || defaultRef;
  let state = (0, preact_exports.useRef)({
    scrollTop: 0,
    scrollLeft: 0,
    scrollEndTime: 0,
    scrollTimeout: null,
    width: 0,
    height: 0,
    isScrolling: false
  }).current;
  let { direction } = (0, import_i18n5.useLocale)();
  let [isScrolling, setScrolling] = (0, preact_exports.useState)(false);
  let onScroll = (0, preact_exports.useCallback)((e) => {
    if (e.target !== e.currentTarget)
      return;
    if (props.onScroll)
      props.onScroll(e);
    (0, preact_exports.flushSync)(() => {
      let scrollTop = e.currentTarget.scrollTop;
      let scrollLeft = $ce415dc67314b753$export$1389d168952b34b5(e.currentTarget, direction);
      state.scrollTop = Math.max(0, Math.min(scrollTop, contentSize.height - state.height));
      state.scrollLeft = Math.max(0, Math.min(scrollLeft, contentSize.width - state.width));
      onVisibleRectChange(new $60423f92c7f9ad87$export$c79fc6492f3af13d(state.scrollLeft, state.scrollTop, state.width, state.height));
      if (!state.isScrolling) {
        state.isScrolling = true;
        setScrolling(true);
        if (onScrollStart)
          onScrollStart();
      }
      let now = Date.now();
      if (state.scrollEndTime <= now + 50) {
        state.scrollEndTime = now + 300;
        clearTimeout(state.scrollTimeout);
        state.scrollTimeout = setTimeout(() => {
          state.isScrolling = false;
          setScrolling(false);
          state.scrollTimeout = null;
          if (onScrollEnd)
            onScrollEnd();
        }, 300);
      }
    });
  }, [
    props,
    direction,
    state,
    contentSize,
    onVisibleRectChange,
    onScrollStart,
    onScrollEnd
  ]);
  (0, preact_exports.useEffect)(() => {
    return () => {
      clearTimeout(state.scrollTimeout);
    };
  }, []);
  let updateSize = (0, preact_exports.useCallback)(() => {
    let dom = ref.current;
    if (!dom)
      return;
    let w = dom.clientWidth;
    let h2 = dom.clientHeight;
    if (sizeToFit && contentSize.width > 0 && contentSize.height > 0) {
      if (sizeToFit === "width")
        w = Math.min(w, contentSize.width);
      else if (sizeToFit === "height")
        h2 = Math.min(h2, contentSize.height);
    }
    if (state.width !== w || state.height !== h2) {
      state.width = w;
      state.height = h2;
      onVisibleRectChange(new $60423f92c7f9ad87$export$c79fc6492f3af13d(state.scrollLeft, state.scrollTop, w, h2));
    }
  }, [
    onVisibleRectChange,
    ref,
    state,
    sizeToFit,
    contentSize
  ]);
  (0, import_utils27.useLayoutEffect)(() => {
    updateSize();
  }, [
    updateSize
  ]);
  (0, import_utils27.useResizeObserver)({
    ref,
    onResize: updateSize
  });
  let style = __spreadValues({
    padding: 0
  }, otherProps.style);
  if (scrollDirection === "horizontal") {
    style.overflowX = "auto";
    style.overflowY = "hidden";
  } else if (scrollDirection === "vertical") {
    style.overflowY = "auto";
    style.overflowX = "hidden";
  } else
    style.overflow = "auto";
  return /* @__PURE__ */ preact_default.createElement("div", __spreadProps(__spreadValues({}, otherProps), {
    style,
    ref,
    onScroll
  }), /* @__PURE__ */ preact_default.createElement("div", {
    role: "presentation",
    style: __spreadValues({
      width: contentSize.width,
      height: contentSize.height,
      pointerEvents: isScrolling ? "none" : "auto",
      position: "relative"
    }, innerStyle)
  }, children));
}
var $44a6ee657928b002$export$5665e3d6be6adea = /* @__PURE__ */ preact_default.forwardRef($44a6ee657928b002$var$ScrollView);
function $47736c1e63ba1c6d$export$1da781778207e0a2(options) {
  let { reusableView: { layoutInfo, virtualizer }, ref } = options;
  let updateSize = (0, preact_exports.useCallback)(() => {
    let size = $47736c1e63ba1c6d$var$getSize(ref.current);
    virtualizer.updateItemSize(layoutInfo.key, size);
  }, [
    virtualizer,
    layoutInfo.key,
    ref
  ]);
  (0, import_utils27.useLayoutEffect)(() => {
    if (layoutInfo.estimatedSize)
      updateSize();
  });
  return {
    updateSize
  };
}
function $47736c1e63ba1c6d$var$getSize(node) {
  let height = node.style.height;
  node.style.height = "";
  let size = new $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec(node.scrollWidth, node.scrollHeight);
  node.style.height = height;
  return size;
}
function $ccf8a0a04e4175ae$export$6796df8ba7398521(props) {
  let { className, reusableView, parent } = props;
  let { direction } = (0, import_i18n5.useLocale)();
  let ref = (0, preact_exports.useRef)();
  $47736c1e63ba1c6d$export$1da781778207e0a2({
    reusableView,
    ref
  });
  return /* @__PURE__ */ preact_default.createElement("div", {
    role: "presentation",
    ref,
    className,
    style: $ccf8a0a04e4175ae$export$1481e64fbe01b8b3(reusableView.layoutInfo, direction, parent && parent.layoutInfo)
  }, reusableView.rendered);
}
var $ccf8a0a04e4175ae$var$cache = /* @__PURE__ */ new WeakMap();
function $ccf8a0a04e4175ae$export$1481e64fbe01b8b3(layoutInfo, dir, parent) {
  let xProperty = dir === "rtl" ? "right" : "left";
  let cached = $ccf8a0a04e4175ae$var$cache.get(layoutInfo);
  if (cached && cached[xProperty] != null) {
    if (!parent)
      return cached;
    let top = layoutInfo.rect.y - parent.rect.y;
    let x = layoutInfo.rect.x - parent.rect.x;
    if (cached.top === top && cached[xProperty] === x)
      return cached;
  }
  let style = {
    position: layoutInfo.isSticky ? "sticky" : "absolute",
    overflow: layoutInfo.allowOverflow ? "visible" : "hidden",
    top: layoutInfo.rect.y - (parent ? parent.rect.y : 0),
    [xProperty]: layoutInfo.rect.x - (parent ? parent.rect.x : 0),
    transition: "all",
    WebkitTransition: "all",
    WebkitTransitionDuration: "inherit",
    transitionDuration: "inherit",
    width: layoutInfo.rect.width,
    height: layoutInfo.rect.height,
    opacity: layoutInfo.opacity,
    zIndex: layoutInfo.zIndex,
    transform: layoutInfo.transform,
    contain: "size layout style"
  };
  $ccf8a0a04e4175ae$var$cache.set(layoutInfo, style);
  return style;
}
function $6d0a5c394373ae64$var$Virtualizer(props, ref) {
  let _a3 = props, { children: renderView, renderWrapper, layout, collection, sizeToFit, scrollDirection, transitionDuration, isLoading, onLoadMore, focusedKey, shouldUseVirtualFocus, scrollToItem } = _a3, otherProps = __objRest(_a3, ["children", "renderWrapper", "layout", "collection", "sizeToFit", "scrollDirection", "transitionDuration", "isLoading", "onLoadMore", "focusedKey", "shouldUseVirtualFocus", "scrollToItem"]);
  let fallbackRef = (0, preact_exports.useRef)();
  ref = ref || fallbackRef;
  let state = $fc0b13b484ac1194$export$1505db82fe357e65({
    transitionDuration,
    layout,
    collection,
    renderView,
    renderWrapper: renderWrapper || $6d0a5c394373ae64$var$defaultRenderWrapper,
    onVisibleRectChange(rect) {
      ref.current.scrollLeft = rect.x;
      ref.current.scrollTop = rect.y;
    }
  });
  let { virtualizerProps } = $6d0a5c394373ae64$export$dd6d526d88b5a137(props, state, ref);
  let onVisibleRectChange = (0, preact_exports.useCallback)((rect) => {
    state.setVisibleRect(rect);
    if (!isLoading && onLoadMore) {
      let scrollOffset = state.virtualizer.contentSize.height - rect.height * 2;
      if (rect.y > scrollOffset)
        onLoadMore();
    }
  }, [
    isLoading,
    onLoadMore,
    state
  ]);
  (0, import_utils27.useLayoutEffect)(() => {
    if (!isLoading && onLoadMore && !state.isAnimating) {
      if (state.contentSize.height > 0 && state.contentSize.height <= state.virtualizer.visibleRect.height)
        onLoadMore();
    }
  }, [
    state.contentSize,
    state.isAnimating,
    state.virtualizer,
    onLoadMore,
    isLoading
  ]);
  return /* @__PURE__ */ preact_default.createElement($44a6ee657928b002$export$5665e3d6be6adea, __spreadProps(__spreadValues({}, (0, import_utils27.mergeProps)(otherProps, virtualizerProps)), {
    ref,
    innerStyle: state.isAnimating ? {
      transition: `none ${state.virtualizer.transitionDuration}ms`
    } : void 0,
    contentSize: state.contentSize,
    onVisibleRectChange,
    onScrollStart: state.startScrolling,
    onScrollEnd: state.endScrolling,
    sizeToFit,
    scrollDirection
  }), state.visibleViews);
}
function $6d0a5c394373ae64$export$dd6d526d88b5a137(props, state, ref) {
  let { focusedKey, scrollToItem, shouldUseVirtualFocus } = props;
  let { virtualizer } = state;
  let lastFocusedKey = (0, preact_exports.useRef)(null);
  let isFocusWithin = (0, preact_exports.useRef)(false);
  (0, preact_exports.useEffect)(() => {
    if (virtualizer.visibleRect.height === 0)
      return;
    let modality = (0, import_interactions7.getInteractionModality)();
    if (focusedKey !== lastFocusedKey.current && (modality !== "pointer" || !isFocusWithin.current)) {
      if (scrollToItem)
        scrollToItem(focusedKey);
      else
        virtualizer.scrollToItem(focusedKey, {
          duration: 0
        });
    }
    lastFocusedKey.current = focusedKey;
  }, [
    focusedKey,
    virtualizer.visibleRect.height,
    virtualizer,
    lastFocusedKey,
    scrollToItem
  ]);
  virtualizer.persistedKeys = (0, preact_exports.useMemo)(
    () => focusedKey ? /* @__PURE__ */ new Set([
      focusedKey
    ]) : /* @__PURE__ */ new Set(),
    [
      focusedKey
    ]
  );
  let onFocus = (0, preact_exports.useCallback)((e) => {
    let modality = (0, import_interactions7.getInteractionModality)();
    if (!isFocusWithin.current && ref.current.contains(e.target) && modality !== "pointer") {
      if (scrollToItem)
        scrollToItem(focusedKey);
      else
        virtualizer.scrollToItem(focusedKey, {
          duration: 0
        });
    }
    isFocusWithin.current = e.target !== ref.current;
  }, [
    ref,
    virtualizer,
    focusedKey,
    scrollToItem
  ]);
  let onBlur = (0, preact_exports.useCallback)((e) => {
    isFocusWithin.current = ref.current.contains(e.relatedTarget);
  }, [
    ref
  ]);
  let focusedView = virtualizer.getView(focusedKey);
  (0, preact_exports.useEffect)(() => {
    if (focusedKey && !focusedView && isFocusWithin.current && document.activeElement !== ref.current)
      (0, import_utils27.focusWithoutScrolling)(ref.current);
  });
  let tabIndex;
  if (!shouldUseVirtualFocus)
    tabIndex = focusedView ? -1 : 0;
  return {
    virtualizerProps: {
      tabIndex,
      onFocus,
      onBlur
    }
  };
}
var $6d0a5c394373ae64$export$89be5a243e59c4b2 = /* @__PURE__ */ preact_default.forwardRef($6d0a5c394373ae64$var$Virtualizer);
function $6d0a5c394373ae64$var$defaultRenderWrapper(parent, reusableView) {
  return /* @__PURE__ */ preact_default.createElement($ccf8a0a04e4175ae$export$6796df8ba7398521, {
    key: reusableView.key,
    reusableView,
    parent
  });
}

// ../../node_modules/@react-spectrum/listbox/dist/module.js
var import_CheckmarkMedium = __toESM(require_CheckmarkMedium2());
var import_interactions8 = __toESM(require_main10());
function $parcel$interopDefault8(a) {
  return a && a.__esModule ? a.default : a;
}
function $parcel$export8(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $07d5971c39cb246a$exports = {};
var $067dbd0c037ad155$exports = {};
$067dbd0c037ad155$exports = {
  "loading": `\u062C\u0627\u0631\u064D \u0627\u0644\u062A\u062D\u0645\u064A\u0644...`,
  "loadingMore": `\u062C\u0627\u0631\u064D \u062A\u062D\u0645\u064A\u0644 \u0627\u0644\u0645\u0632\u064A\u062F...`
};
var $6ee4da2747de1e02$exports = {};
$6ee4da2747de1e02$exports = {
  "loading": `\u0417\u0430\u0440\u0435\u0436\u0434\u0430\u043D\u0435...`,
  "loadingMore": `\u0417\u0430\u0440\u0435\u0436\u0434\u0430\u043D\u0435 \u043D\u0430 \u043E\u0449\u0435...`
};
var $b58a7d965b7aa1b3$exports = {};
$b58a7d965b7aa1b3$exports = {
  "loading": `Na\u010D\xEDt\xE1n\xED...`,
  "loadingMore": `Na\u010D\xEDt\xE1n\xED dal\u0161\xEDch...`
};
var $ecaca51f024191b0$exports = {};
$ecaca51f024191b0$exports = {
  "loading": `Indl\xE6ser ...`,
  "loadingMore": `Indl\xE6ser flere ...`
};
var $6e434aa373f128b4$exports = {};
$6e434aa373f128b4$exports = {
  "loading": `Laden...`,
  "loadingMore": `Mehr laden ...`
};
var $ddbe45fb199df913$exports = {};
$ddbe45fb199df913$exports = {
  "loading": `\u03A6\u03CC\u03C1\u03C4\u03C9\u03C3\u03B7...`,
  "loadingMore": `\u03A6\u03CC\u03C1\u03C4\u03C9\u03C3\u03B7 \u03C0\u03B5\u03C1\u03B9\u03C3\u03C3\u03CC\u03C4\u03B5\u03C1\u03C9\u03BD...`
};
var $2083b83b84266bb4$exports = {};
$2083b83b84266bb4$exports = {
  "loading": `Loading\u2026`,
  "loadingMore": `Loading more\u2026`
};
var $a41434a97f5222d7$exports = {};
$a41434a97f5222d7$exports = {
  "loading": `Cargando\u2026`,
  "loadingMore": `Cargando m\xE1s\u2026`
};
var $0a1b42c97638052f$exports = {};
$0a1b42c97638052f$exports = {
  "loading": `Laadimine...`,
  "loadingMore": `Laadi rohkem...`
};
var $177331a39d162ddc$exports = {};
$177331a39d162ddc$exports = {
  "loading": `Ladataan\u2026`,
  "loadingMore": `Ladataan lis\xE4\xE4\u2026`
};
var $273b1d5ecf07fe52$exports = {};
$273b1d5ecf07fe52$exports = {
  "loading": `Chargement...`,
  "loadingMore": `Chargement suppl\xE9mentaire...`
};
var $459441d19cfa90a8$exports = {};
$459441d19cfa90a8$exports = {
  "loading": `\u05D8\u05D5\u05E2\u05DF...`,
  "loadingMore": `\u05D8\u05D5\u05E2\u05DF \u05E2\u05D5\u05D3...`
};
var $c30474fbd65b2878$exports = {};
$c30474fbd65b2878$exports = {
  "loading": `U\u010Ditavam...`,
  "loadingMore": `U\u010Ditavam jo\u0161...`
};
var $fd19cc1d41a750e5$exports = {};
$fd19cc1d41a750e5$exports = {
  "loading": `Bet\xF6lt\xE9s folyamatban\u2026`,
  "loadingMore": `Tov\xE1bbiak bet\xF6lt\xE9se folyamatban\u2026`
};
var $158d0aece262406d$exports = {};
$158d0aece262406d$exports = {
  "loading": `Caricamento...`,
  "loadingMore": `Caricamento altri...`
};
var $bc830316669a23f8$exports = {};
$bc830316669a23f8$exports = {
  "loading": `\u8AAD\u307F\u8FBC\u307F\u4E2D...`,
  "loadingMore": `\u3055\u3089\u306B\u8AAD\u307F\u8FBC\u307F\u4E2D...`
};
var $7fa23663d4de476d$exports = {};
$7fa23663d4de476d$exports = {
  "loading": `\uB85C\uB4DC \uC911`,
  "loadingMore": `\uCD94\uAC00 \uB85C\uB4DC \uC911`
};
var $827e42814bc8f58e$exports = {};
$827e42814bc8f58e$exports = {
  "loading": `\u012Ekeliama...`,
  "loadingMore": `\u012Ekeliama daugiau...`
};
var $6ca653959481d2db$exports = {};
$6ca653959481d2db$exports = {
  "loading": `Notiek iel\u0101de...`,
  "loadingMore": `Tiek iel\u0101d\u0113ts v\u0113l...`
};
var $9efb74877777657a$exports = {};
$9efb74877777657a$exports = {
  "loading": `Laster inn ...`,
  "loadingMore": `Laster inn flere ...`
};
var $d085d780952864a7$exports = {};
$d085d780952864a7$exports = {
  "loading": `Laden...`,
  "loadingMore": `Meer laden...`
};
var $c207a8811c9791e9$exports = {};
$c207a8811c9791e9$exports = {
  "loading": `\u0141adowanie...`,
  "loadingMore": `Wczytywanie wi\u0119kszej liczby...`
};
var $eda3511d3b2e0e51$exports = {};
$eda3511d3b2e0e51$exports = {
  "loading": `Carregando...`,
  "loadingMore": `Carregando mais...`
};
var $a9c1da319e5254cb$exports = {};
$a9c1da319e5254cb$exports = {
  "loading": `A carregar...`,
  "loadingMore": `A carregar mais...`
};
var $bc5c688ddc9e69fb$exports = {};
$bc5c688ddc9e69fb$exports = {
  "loading": `Se \xEEncarc\u0103...`,
  "loadingMore": `Se \xEEncarc\u0103 mai multe...`
};
var $84ec40785c299370$exports = {};
$84ec40785c299370$exports = {
  "loading": `\u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430...`,
  "loadingMore": `\u0414\u043E\u043F\u043E\u043B\u043D\u0438\u0442\u0435\u043B\u044C\u043D\u0430\u044F \u0437\u0430\u0433\u0440\u0443\u0437\u043A\u0430...`
};
var $510ebbcbf8f3c784$exports = {};
$510ebbcbf8f3c784$exports = {
  "loading": `Na\u010D\xEDtava sa...`,
  "loadingMore": `Na\u010D\xEDtava sa viac...`
};
var $49f018934e6f92c2$exports = {};
$49f018934e6f92c2$exports = {
  "loading": `Nalaganje...`,
  "loadingMore": `Nalaganje ve\u010D vsebine...`
};
var $7513a1b075b503d5$exports = {};
$7513a1b075b503d5$exports = {
  "loading": `U\u010Ditavam...`,
  "loadingMore": `U\u010Ditavam jo\u0161...`
};
var $02c92e5e0c81f9a9$exports = {};
$02c92e5e0c81f9a9$exports = {
  "loading": `L\xE4ser in...`,
  "loadingMore": `L\xE4ser in mer...`
};
var $8165adf786eb9d46$exports = {};
$8165adf786eb9d46$exports = {
  "loading": `Y\xFCkleniyor...`,
  "loadingMore": `Daha fazla y\xFCkleniyor...`
};
var $228238165c1367ae$exports = {};
$228238165c1367ae$exports = {
  "loading": `\u0417\u0430\u0432\u0430\u043D\u0442\u0430\u0436\u0435\u043D\u043D\u044F\u2026`,
  "loadingMore": `\u0417\u0430\u0432\u0430\u043D\u0442\u0430\u0436\u0435\u043D\u043D\u044F \u0456\u043D\u0448\u0438\u0445 \u043E\u0431\u2019\u0454\u043A\u0442\u0456\u0432...`
};
var $cc82b5cf91ddc409$exports = {};
$cc82b5cf91ddc409$exports = {
  "loading": `\u6B63\u5728\u52A0\u8F7D...`,
  "loadingMore": `\u6B63\u5728\u52A0\u8F7D\u66F4\u591A...`
};
var $c1545fe26f1d3e20$exports = {};
$c1545fe26f1d3e20$exports = {
  "loading": `\u6B63\u5728\u8F09\u5165`,
  "loadingMore": `\u6B63\u5728\u8F09\u5165\u66F4\u591A\u2026`
};
$07d5971c39cb246a$exports = {
  "ar-AE": $067dbd0c037ad155$exports,
  "bg-BG": $6ee4da2747de1e02$exports,
  "cs-CZ": $b58a7d965b7aa1b3$exports,
  "da-DK": $ecaca51f024191b0$exports,
  "de-DE": $6e434aa373f128b4$exports,
  "el-GR": $ddbe45fb199df913$exports,
  "en-US": $2083b83b84266bb4$exports,
  "es-ES": $a41434a97f5222d7$exports,
  "et-EE": $0a1b42c97638052f$exports,
  "fi-FI": $177331a39d162ddc$exports,
  "fr-FR": $273b1d5ecf07fe52$exports,
  "he-IL": $459441d19cfa90a8$exports,
  "hr-HR": $c30474fbd65b2878$exports,
  "hu-HU": $fd19cc1d41a750e5$exports,
  "it-IT": $158d0aece262406d$exports,
  "ja-JP": $bc830316669a23f8$exports,
  "ko-KR": $7fa23663d4de476d$exports,
  "lt-LT": $827e42814bc8f58e$exports,
  "lv-LV": $6ca653959481d2db$exports,
  "nb-NO": $9efb74877777657a$exports,
  "nl-NL": $d085d780952864a7$exports,
  "pl-PL": $c207a8811c9791e9$exports,
  "pt-BR": $eda3511d3b2e0e51$exports,
  "pt-PT": $a9c1da319e5254cb$exports,
  "ro-RO": $bc5c688ddc9e69fb$exports,
  "ru-RU": $84ec40785c299370$exports,
  "sk-SK": $510ebbcbf8f3c784$exports,
  "sl-SI": $49f018934e6f92c2$exports,
  "sr-SP": $7513a1b075b503d5$exports,
  "sv-SE": $02c92e5e0c81f9a9$exports,
  "tr-TR": $8165adf786eb9d46$exports,
  "uk-UA": $228238165c1367ae$exports,
  "zh-CN": $cc82b5cf91ddc409$exports,
  "zh-TW": $c1545fe26f1d3e20$exports
};
var $0c6f792811e33483$export$7ff8f37d2d81a48d = preact_default.createContext(null);
var $286d1cb34bb7dc84$exports = {};
$parcel$export8($286d1cb34bb7dc84$exports, "spectrum-Menu-popover", () => $286d1cb34bb7dc84$export$d959f30786125b, (v) => $286d1cb34bb7dc84$export$d959f30786125b = v);
$parcel$export8($286d1cb34bb7dc84$exports, "spectrum-Menu", () => $286d1cb34bb7dc84$export$fae6af6decd50ac5, (v) => $286d1cb34bb7dc84$export$fae6af6decd50ac5 = v);
$parcel$export8($286d1cb34bb7dc84$exports, "spectrum-Menu-sectionHeading", () => $286d1cb34bb7dc84$export$c20ea4b35020fbdd, (v) => $286d1cb34bb7dc84$export$c20ea4b35020fbdd = v);
$parcel$export8($286d1cb34bb7dc84$exports, "spectrum-Menu-checkmark", () => $286d1cb34bb7dc84$export$8e15a726e4f7e62d, (v) => $286d1cb34bb7dc84$export$8e15a726e4f7e62d = v);
$parcel$export8($286d1cb34bb7dc84$exports, "spectrum-Menu-item", () => $286d1cb34bb7dc84$export$45faad328e6c532b, (v) => $286d1cb34bb7dc84$export$45faad328e6c532b = v);
$parcel$export8($286d1cb34bb7dc84$exports, "is-selected", () => $286d1cb34bb7dc84$export$1e0fb04f31d3c22a, (v) => $286d1cb34bb7dc84$export$1e0fb04f31d3c22a = v);
$parcel$export8($286d1cb34bb7dc84$exports, "spectrum-Icon", () => $286d1cb34bb7dc84$export$d374b04f30360026, (v) => $286d1cb34bb7dc84$export$d374b04f30360026 = v);
$parcel$export8($286d1cb34bb7dc84$exports, "spectrum-Menu-itemLabel", () => $286d1cb34bb7dc84$export$1aa6419c5c650567, (v) => $286d1cb34bb7dc84$export$1aa6419c5c650567 = v);
$parcel$export8($286d1cb34bb7dc84$exports, "spectrum-Menu-itemIcon", () => $286d1cb34bb7dc84$export$f431001e1bb54633, (v) => $286d1cb34bb7dc84$export$f431001e1bb54633 = v);
$parcel$export8($286d1cb34bb7dc84$exports, "spectrum-Menu-itemLabel--wrapping", () => $286d1cb34bb7dc84$export$465092164a8e1d98, (v) => $286d1cb34bb7dc84$export$465092164a8e1d98 = v);
$parcel$export8($286d1cb34bb7dc84$exports, "spectrum-Menu-divider", () => $286d1cb34bb7dc84$export$e892026f534efed8, (v) => $286d1cb34bb7dc84$export$e892026f534efed8 = v);
$parcel$export8($286d1cb34bb7dc84$exports, "spectrum-Menu-itemGrid", () => $286d1cb34bb7dc84$export$ee5f52784f57f9c8, (v) => $286d1cb34bb7dc84$export$ee5f52784f57f9c8 = v);
$parcel$export8($286d1cb34bb7dc84$exports, "is-selectable", () => $286d1cb34bb7dc84$export$fbd22ba224473193, (v) => $286d1cb34bb7dc84$export$fbd22ba224473193 = v);
$parcel$export8($286d1cb34bb7dc84$exports, "spectrum-Menu-end", () => $286d1cb34bb7dc84$export$926a1bb74ed65667, (v) => $286d1cb34bb7dc84$export$926a1bb74ed65667 = v);
$parcel$export8($286d1cb34bb7dc84$exports, "spectrum-Menu-icon", () => $286d1cb34bb7dc84$export$cbbae63ef9e44c7a, (v) => $286d1cb34bb7dc84$export$cbbae63ef9e44c7a = v);
$parcel$export8($286d1cb34bb7dc84$exports, "spectrum-Menu-description", () => $286d1cb34bb7dc84$export$36f1275051e39ead, (v) => $286d1cb34bb7dc84$export$36f1275051e39ead = v);
$parcel$export8($286d1cb34bb7dc84$exports, "spectrum-Menu-keyboard", () => $286d1cb34bb7dc84$export$4f9817a7dff6ba0f, (v) => $286d1cb34bb7dc84$export$4f9817a7dff6ba0f = v);
$parcel$export8($286d1cb34bb7dc84$exports, "focus-ring", () => $286d1cb34bb7dc84$export$f39a09f249340e2a, (v) => $286d1cb34bb7dc84$export$f39a09f249340e2a = v);
$parcel$export8($286d1cb34bb7dc84$exports, "is-focused", () => $286d1cb34bb7dc84$export$e7dc768d35940237, (v) => $286d1cb34bb7dc84$export$e7dc768d35940237 = v);
$parcel$export8($286d1cb34bb7dc84$exports, "is-hovered", () => $286d1cb34bb7dc84$export$b8813cd5d7824ce7, (v) => $286d1cb34bb7dc84$export$b8813cd5d7824ce7 = v);
$parcel$export8($286d1cb34bb7dc84$exports, "is-highlighted", () => $286d1cb34bb7dc84$export$451c613d0772eb99, (v) => $286d1cb34bb7dc84$export$451c613d0772eb99 = v);
$parcel$export8($286d1cb34bb7dc84$exports, "is-open", () => $286d1cb34bb7dc84$export$a9781837241c946d, (v) => $286d1cb34bb7dc84$export$a9781837241c946d = v);
$parcel$export8($286d1cb34bb7dc84$exports, "is-active", () => $286d1cb34bb7dc84$export$20fd0f7cd4e6112f, (v) => $286d1cb34bb7dc84$export$20fd0f7cd4e6112f = v);
$parcel$export8($286d1cb34bb7dc84$exports, "is-disabled", () => $286d1cb34bb7dc84$export$d35bc1e505d1ebbf, (v) => $286d1cb34bb7dc84$export$d35bc1e505d1ebbf = v);
var $286d1cb34bb7dc84$export$d959f30786125b;
var $286d1cb34bb7dc84$export$fae6af6decd50ac5;
var $286d1cb34bb7dc84$export$c20ea4b35020fbdd;
var $286d1cb34bb7dc84$export$8e15a726e4f7e62d;
var $286d1cb34bb7dc84$export$45faad328e6c532b;
var $286d1cb34bb7dc84$export$1e0fb04f31d3c22a;
var $286d1cb34bb7dc84$export$d374b04f30360026;
var $286d1cb34bb7dc84$export$1aa6419c5c650567;
var $286d1cb34bb7dc84$export$f431001e1bb54633;
var $286d1cb34bb7dc84$export$465092164a8e1d98;
var $286d1cb34bb7dc84$export$e892026f534efed8;
var $286d1cb34bb7dc84$export$ee5f52784f57f9c8;
var $286d1cb34bb7dc84$export$fbd22ba224473193;
var $286d1cb34bb7dc84$export$926a1bb74ed65667;
var $286d1cb34bb7dc84$export$cbbae63ef9e44c7a;
var $286d1cb34bb7dc84$export$36f1275051e39ead;
var $286d1cb34bb7dc84$export$4f9817a7dff6ba0f;
var $286d1cb34bb7dc84$export$f39a09f249340e2a;
var $286d1cb34bb7dc84$export$e7dc768d35940237;
var $286d1cb34bb7dc84$export$b8813cd5d7824ce7;
var $286d1cb34bb7dc84$export$451c613d0772eb99;
var $286d1cb34bb7dc84$export$a9781837241c946d;
var $286d1cb34bb7dc84$export$20fd0f7cd4e6112f;
var $286d1cb34bb7dc84$export$d35bc1e505d1ebbf;
$286d1cb34bb7dc84$export$d959f30786125b = "spectrum-Menu-popover_7ea47c";
$286d1cb34bb7dc84$export$fae6af6decd50ac5 = "spectrum-Menu_7ea47c";
$286d1cb34bb7dc84$export$c20ea4b35020fbdd = "spectrum-Menu-sectionHeading_7ea47c";
$286d1cb34bb7dc84$export$8e15a726e4f7e62d = "spectrum-Menu-checkmark_7ea47c";
$286d1cb34bb7dc84$export$45faad328e6c532b = "spectrum-Menu-item_7ea47c";
$286d1cb34bb7dc84$export$1e0fb04f31d3c22a = "is-selected_7ea47c";
$286d1cb34bb7dc84$export$d374b04f30360026 = "spectrum-Icon_7ea47c";
$286d1cb34bb7dc84$export$1aa6419c5c650567 = "spectrum-Menu-itemLabel_7ea47c";
$286d1cb34bb7dc84$export$f431001e1bb54633 = "spectrum-Menu-itemIcon_7ea47c";
$286d1cb34bb7dc84$export$465092164a8e1d98 = "spectrum-Menu-itemLabel--wrapping_7ea47c";
$286d1cb34bb7dc84$export$e892026f534efed8 = "spectrum-Menu-divider_7ea47c";
$286d1cb34bb7dc84$export$ee5f52784f57f9c8 = "spectrum-Menu-itemGrid_7ea47c";
$286d1cb34bb7dc84$export$fbd22ba224473193 = "is-selectable_7ea47c";
$286d1cb34bb7dc84$export$926a1bb74ed65667 = "spectrum-Menu-end_7ea47c";
$286d1cb34bb7dc84$export$cbbae63ef9e44c7a = "spectrum-Menu-icon_7ea47c";
$286d1cb34bb7dc84$export$36f1275051e39ead = "spectrum-Menu-description_7ea47c";
$286d1cb34bb7dc84$export$4f9817a7dff6ba0f = "spectrum-Menu-keyboard_7ea47c";
$286d1cb34bb7dc84$export$f39a09f249340e2a = "focus-ring_7ea47c";
$286d1cb34bb7dc84$export$e7dc768d35940237 = "is-focused_7ea47c";
$286d1cb34bb7dc84$export$b8813cd5d7824ce7 = "is-hovered_7ea47c";
$286d1cb34bb7dc84$export$451c613d0772eb99 = "is-highlighted_7ea47c";
$286d1cb34bb7dc84$export$a9781837241c946d = "is-open_7ea47c";
$286d1cb34bb7dc84$export$20fd0f7cd4e6112f = "is-active_7ea47c";
$286d1cb34bb7dc84$export$d35bc1e505d1ebbf = "is-disabled_7ea47c";
function $86983ea1fa3f7312$export$feb3b6b552c14a12(props) {
  let { item, shouldSelectOnPressUp, shouldFocusOnHover, shouldUseVirtualFocus } = props;
  let { rendered, key } = item;
  let state = (0, preact_exports.useContext)($0c6f792811e33483$export$7ff8f37d2d81a48d);
  let ref = (0, preact_exports.useRef)();
  let { optionProps, labelProps, descriptionProps, isSelected, isDisabled, isFocused } = $293f70390ea03370$export$497855f14858aa34({
    "aria-label": item["aria-label"],
    key,
    shouldSelectOnPressUp,
    shouldFocusOnHover,
    isVirtualized: true,
    shouldUseVirtualFocus
  }, state, ref);
  let { hoverProps, isHovered } = (0, import_interactions8.useHover)(__spreadProps(__spreadValues({}, props), {
    isDisabled
  }));
  let contents = typeof rendered === "string" ? /* @__PURE__ */ preact_default.createElement($cd449e8defa988f0$export$5f1af8db9871e1d6, null, rendered) : rendered;
  let isKeyboardModality = (0, import_interactions8.isFocusVisible)();
  return /* @__PURE__ */ preact_default.createElement($907718708eab68af$export$1a38b4ad7f578e1d, {
    focusRingClass: (0, import_utils28.classNames)(/* @__PURE__ */ $parcel$interopDefault8($286d1cb34bb7dc84$exports), "focus-ring")
  }, /* @__PURE__ */ preact_default.createElement("div", __spreadProps(__spreadValues({}, (0, import_utils29.mergeProps)(optionProps, shouldFocusOnHover ? {} : hoverProps)), {
    ref,
    className: (0, import_utils28.classNames)(/* @__PURE__ */ $parcel$interopDefault8($286d1cb34bb7dc84$exports), "spectrum-Menu-item", {
      "is-focused": shouldUseVirtualFocus && isFocused && isKeyboardModality,
      "is-disabled": isDisabled,
      "is-selected": isSelected,
      "is-selectable": state.selectionManager.selectionMode !== "none",
      "is-hovered": isHovered && !shouldFocusOnHover || isFocused && !isKeyboardModality
    })
  }), /* @__PURE__ */ preact_default.createElement($994c48bfb00b620b$export$ef2184bd89960b14, {
    UNSAFE_className: (0, import_utils28.classNames)(/* @__PURE__ */ $parcel$interopDefault8($286d1cb34bb7dc84$exports), "spectrum-Menu-itemGrid")
  }, /* @__PURE__ */ preact_default.createElement(import_utils28.ClearSlots, null, /* @__PURE__ */ preact_default.createElement(import_utils28.SlotProvider, {
    slots: {
      text: __spreadValues({
        UNSAFE_className: (/* @__PURE__ */ $parcel$interopDefault8($286d1cb34bb7dc84$exports))["spectrum-Menu-itemLabel"]
      }, labelProps),
      icon: {
        size: "S",
        UNSAFE_className: (/* @__PURE__ */ $parcel$interopDefault8($286d1cb34bb7dc84$exports))["spectrum-Menu-icon"]
      },
      description: __spreadValues({
        UNSAFE_className: (/* @__PURE__ */ $parcel$interopDefault8($286d1cb34bb7dc84$exports))["spectrum-Menu-description"]
      }, descriptionProps)
    }
  }, contents, isSelected && /* @__PURE__ */ preact_default.createElement(import_CheckmarkMedium.default, {
    slot: "checkmark",
    UNSAFE_className: (0, import_utils28.classNames)(/* @__PURE__ */ $parcel$interopDefault8($286d1cb34bb7dc84$exports), "spectrum-Menu-checkmark")
  }))))));
}
function $92d678ed88836094$export$dca12b0bb56e4fc(props) {
  let { children, reusableView, header } = props;
  let item = reusableView.content;
  let { headingProps, groupProps } = $af383d3bef1cfdc9$export$c3f9f39876e4bc7({
    heading: item.rendered,
    "aria-label": item["aria-label"]
  });
  let { separatorProps } = $f4b273590fab9f93$export$52210f68a14655d0({
    elementType: "li"
  });
  let headerRef = (0, preact_exports.useRef)();
  $47736c1e63ba1c6d$export$1da781778207e0a2({
    reusableView: header,
    ref: headerRef
  });
  let { direction } = (0, import_i18n6.useLocale)();
  let state = (0, preact_exports.useContext)($0c6f792811e33483$export$7ff8f37d2d81a48d);
  return /* @__PURE__ */ preact_default.createElement(Fragment, null, /* @__PURE__ */ preact_default.createElement("div", {
    role: "presentation",
    ref: headerRef,
    style: $ccf8a0a04e4175ae$export$1481e64fbe01b8b3(header.layoutInfo, direction)
  }, item.key !== state.collection.getFirstKey() && /* @__PURE__ */ preact_default.createElement("div", __spreadProps(__spreadValues({}, separatorProps), {
    className: (0, import_utils28.classNames)(/* @__PURE__ */ $parcel$interopDefault8($286d1cb34bb7dc84$exports), "spectrum-Menu-divider")
  })), item.rendered && /* @__PURE__ */ preact_default.createElement("div", __spreadProps(__spreadValues({}, headingProps), {
    className: (0, import_utils28.classNames)(/* @__PURE__ */ $parcel$interopDefault8($286d1cb34bb7dc84$exports), "spectrum-Menu-sectionHeading")
  }), item.rendered)), /* @__PURE__ */ preact_default.createElement("div", __spreadProps(__spreadValues({}, groupProps), {
    style: $ccf8a0a04e4175ae$export$1481e64fbe01b8b3(reusableView.layoutInfo, direction),
    className: (0, import_utils28.classNames)(/* @__PURE__ */ $parcel$interopDefault8($286d1cb34bb7dc84$exports), "spectrum-Menu")
  }), children));
}
function $3247d4a89e6094e9$export$25768ea656ae32a7(state) {
  let { scale } = (0, import_provider5.useProvider)();
  let collator = (0, import_i18n6.useCollator)({
    usage: "search",
    sensitivity: "base"
  });
  let layout = (0, preact_exports.useMemo)(
    () => new $61ef60fc9b1041f4$export$cacbb3924155d68e({
      estimatedRowHeight: scale === "large" ? 48 : 32,
      estimatedHeadingHeight: scale === "large" ? 33 : 26,
      padding: scale === "large" ? 5 : 4,
      loaderHeight: 40,
      placeholderHeight: scale === "large" ? 48 : 32,
      collator
    }),
    [
      collator,
      scale
    ]
  );
  layout.collection = state.collection;
  layout.disabledKeys = state.disabledKeys;
  return layout;
}
function $3247d4a89e6094e9$var$ListBoxBase(props, ref) {
  let { layout, state, shouldSelectOnPressUp, focusOnPointerEnter, shouldUseVirtualFocus, domProps = {}, transitionDuration = 0, onScroll } = props;
  let { listBoxProps } = $c132121280ec012d$export$50eacbbf140a3141(__spreadProps(__spreadValues({}, props), {
    keyboardDelegate: layout,
    isVirtualized: true
  }), state, ref);
  let { styleProps } = (0, import_utils28.useStyleProps)(props);
  let stringFormatter = (0, import_i18n6.useLocalizedStringFormatter)(/* @__PURE__ */ $parcel$interopDefault8($07d5971c39cb246a$exports));
  layout.isLoading = props.isLoading;
  let renderWrapper = (parent, reusableView, children, renderChildren) => {
    if (reusableView.viewType === "section")
      return /* @__PURE__ */ preact_default.createElement($92d678ed88836094$export$dca12b0bb56e4fc, {
        key: reusableView.key,
        reusableView,
        header: children.find(
          (c) => c.viewType === "header"
        )
      }, renderChildren(children.filter(
        (c) => c.viewType === "item"
      )));
    return /* @__PURE__ */ preact_default.createElement($ccf8a0a04e4175ae$export$6796df8ba7398521, {
      key: reusableView.key,
      reusableView,
      parent
    });
  };
  return /* @__PURE__ */ preact_default.createElement($0c6f792811e33483$export$7ff8f37d2d81a48d.Provider, {
    value: state
  }, /* @__PURE__ */ preact_default.createElement($6d0a5c394373ae64$export$89be5a243e59c4b2, __spreadProps(__spreadValues(__spreadValues({}, styleProps), (0, import_utils29.mergeProps)(listBoxProps, domProps)), {
    ref,
    focusedKey: state.selectionManager.focusedKey,
    sizeToFit: "height",
    scrollDirection: "vertical",
    className: (0, import_utils28.classNames)(/* @__PURE__ */ $parcel$interopDefault8($286d1cb34bb7dc84$exports), "spectrum-Menu", styleProps.className),
    layout,
    collection: state.collection,
    renderWrapper,
    transitionDuration,
    isLoading: props.isLoading,
    onLoadMore: props.onLoadMore,
    shouldUseVirtualFocus,
    onScroll
  }), (type, item) => {
    if (type === "item")
      return /* @__PURE__ */ preact_default.createElement($86983ea1fa3f7312$export$feb3b6b552c14a12, {
        item,
        shouldSelectOnPressUp,
        shouldFocusOnHover: focusOnPointerEnter,
        shouldUseVirtualFocus
      });
    else if (type === "loader")
      return /* @__PURE__ */ preact_default.createElement("div", {
        role: "option",
        style: {
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          height: "100%"
        }
      }, /* @__PURE__ */ preact_default.createElement($79c16f64960b6385$export$c79b9d6b4cc92af7, {
        isIndeterminate: true,
        size: "S",
        "aria-label": state.collection.size > 0 ? stringFormatter.format("loadingMore") : stringFormatter.format("loading"),
        UNSAFE_className: (0, import_utils28.classNames)(/* @__PURE__ */ $parcel$interopDefault8($286d1cb34bb7dc84$exports), "spectrum-Dropdown-progressCircle")
      }));
    else if (type === "placeholder") {
      let emptyState = props.renderEmptyState ? props.renderEmptyState() : null;
      if (emptyState == null)
        return null;
      return /* @__PURE__ */ preact_default.createElement("div", {
        role: "option"
      }, emptyState);
    }
  }));
}
var $3247d4a89e6094e9$export$1afdcf349979fb7e = /* @__PURE__ */ preact_default.forwardRef($3247d4a89e6094e9$var$ListBoxBase);

// ../../node_modules/@react-spectrum/view/dist/module.js
var import_utils30 = __toESM(require_main9());
var import_utils31 = __toESM(require_main3());
init_preact();
function $b9606c0c41d55371$var$View(props, ref) {
  props = (0, import_utils30.useSlotProps)(props);
  let _a3 = props, { elementType: ElementType = "div", children } = _a3, otherProps = __objRest(_a3, ["elementType", "children"]);
  let { styleProps } = (0, import_utils30.useStyleProps)(props, import_utils30.viewStyleProps);
  let domRef = (0, import_utils30.useDOMRef)(ref);
  return /* @__PURE__ */ preact_default.createElement(ElementType, __spreadProps(__spreadValues(__spreadValues({}, (0, import_utils31.filterDOMProps)(otherProps)), styleProps), {
    ref: domRef
  }), /* @__PURE__ */ preact_default.createElement(import_utils30.ClearSlots, null, children));
}
var $b9606c0c41d55371$export$27a5bd065ad55220 = /* @__PURE__ */ (0, preact_exports.forwardRef)($b9606c0c41d55371$var$View);

// ../../node_modules/@react-spectrum/picker/dist/module.js
var import_AlertMedium2 = __toESM(require_AlertMedium2());
var import_ChevronDownMedium = __toESM(require_ChevronDownMedium2());
var import_utils33 = __toESM(require_main9());
var import_overlays4 = __toESM(require_main12());

// ../../node_modules/@react-aria/select/dist/module.js
var import_utils32 = __toESM(require_main3());
init_preact();
var import_interactions9 = __toESM(require_main10());
var import_i18n7 = __toESM(require_main8());
var import_visually_hidden = __toESM(require_main11());
function $58aed456727eb0f3$export$e64b2f635402ca43(props, state, ref) {
  let { keyboardDelegate, isDisabled } = props;
  let collator = (0, import_i18n7.useCollator)({
    usage: "search",
    sensitivity: "base"
  });
  let delegate = (0, preact_exports.useMemo)(
    () => keyboardDelegate || new $2a25aae57d74318e$export$a05409b8bb224a5a(state.collection, state.disabledKeys, null, collator),
    [
      keyboardDelegate,
      state.collection,
      state.disabledKeys,
      collator
    ]
  );
  let { menuTriggerProps, menuProps } = $168583247155ddda$export$dc9c12ed27dd1b49({
    isDisabled,
    type: "listbox"
  }, state, ref);
  let onKeyDown = (e) => {
    switch (e.key) {
      case "ArrowLeft": {
        e.preventDefault();
        let key = state.selectedKey != null ? delegate.getKeyAbove(state.selectedKey) : delegate.getFirstKey();
        if (key)
          state.setSelectedKey(key);
        break;
      }
      case "ArrowRight": {
        e.preventDefault();
        let key = state.selectedKey != null ? delegate.getKeyBelow(state.selectedKey) : delegate.getFirstKey();
        if (key)
          state.setSelectedKey(key);
        break;
      }
    }
  };
  let { typeSelectProps } = $fb3050f43d946246$export$e32c88dfddc6e1d8({
    keyboardDelegate: delegate,
    selectionManager: state.selectionManager,
    onTypeSelect(key) {
      state.setSelectedKey(key);
    }
  });
  let { labelProps, fieldProps, descriptionProps, errorMessageProps } = $2baaea4c71418dea$export$294aa081a6c6f55d(__spreadProps(__spreadValues({}, props), {
    labelElementType: "span"
  }));
  typeSelectProps.onKeyDown = typeSelectProps.onKeyDownCapture;
  delete typeSelectProps.onKeyDownCapture;
  let domProps = (0, import_utils32.filterDOMProps)(props, {
    labelable: true
  });
  let triggerProps = (0, import_utils32.mergeProps)(typeSelectProps, menuTriggerProps, fieldProps);
  let valueId = (0, import_utils32.useId)();
  return {
    labelProps: __spreadProps(__spreadValues({}, labelProps), {
      onClick: () => {
        if (!props.isDisabled) {
          ref.current.focus();
          (0, import_interactions9.setInteractionModality)("keyboard");
        }
      }
    }),
    triggerProps: (0, import_utils32.mergeProps)(domProps, __spreadProps(__spreadValues({}, triggerProps), {
      isDisabled,
      onKeyDown: (0, import_utils32.chain)(triggerProps.onKeyDown, onKeyDown, props.onKeyDown),
      onKeyUp: props.onKeyUp,
      "aria-labelledby": [
        triggerProps["aria-labelledby"],
        triggerProps["aria-label"] && !triggerProps["aria-labelledby"] ? triggerProps.id : null,
        valueId
      ].filter(Boolean).join(" "),
      onFocus(e) {
        if (state.isFocused)
          return;
        if (props.onFocus)
          props.onFocus(e);
        if (props.onFocusChange)
          props.onFocusChange(true);
        state.setFocused(true);
      },
      onBlur(e) {
        if (state.isOpen)
          return;
        if (props.onBlur)
          props.onBlur(e);
        if (props.onFocusChange)
          props.onFocusChange(false);
        state.setFocused(false);
      }
    })),
    valueProps: {
      id: valueId
    },
    menuProps: __spreadProps(__spreadValues({}, menuProps), {
      autoFocus: state.focusStrategy || true,
      shouldSelectOnPressUp: true,
      shouldFocusOnHover: true,
      disallowEmptySelection: true,
      onBlur: (e) => {
        if (e.currentTarget.contains(e.relatedTarget))
          return;
        if (props.onBlur)
          props.onBlur(e);
        if (props.onFocusChange)
          props.onFocusChange(false);
        state.setFocused(false);
      },
      "aria-labelledby": [
        fieldProps["aria-labelledby"],
        triggerProps["aria-label"] && !fieldProps["aria-labelledby"] ? triggerProps.id : null
      ].filter(Boolean).join(" ")
    }),
    descriptionProps,
    errorMessageProps
  };
}
function $bdd25dc72710631f$export$f809e80f58e251d1(props, state, triggerRef) {
  let { autoComplete, name, isDisabled } = props;
  let modality = (0, import_interactions9.useInteractionModality)();
  let { visuallyHiddenProps } = (0, import_visually_hidden.useVisuallyHidden)();
  var _selectedKey;
  return {
    containerProps: __spreadProps(__spreadValues({}, visuallyHiddenProps), {
      "aria-hidden": true
    }),
    inputProps: {
      type: "text",
      tabIndex: modality == null || state.isFocused || state.isOpen ? -1 : 0,
      style: {
        fontSize: 16
      },
      onFocus: () => triggerRef.current.focus(),
      disabled: isDisabled
    },
    selectProps: {
      tabIndex: -1,
      autoComplete,
      disabled: isDisabled,
      name,
      size: state.collection.size,
      value: (_selectedKey = state.selectedKey) !== null && _selectedKey !== void 0 ? _selectedKey : "",
      onChange: (e) => state.setSelectedKey(e.target.value)
    }
  };
}
function $bdd25dc72710631f$export$cbd84cdb2e668835(props) {
  let { state, triggerRef, label, name, isDisabled } = props;
  let { containerProps, inputProps, selectProps } = $bdd25dc72710631f$export$f809e80f58e251d1(props, state, triggerRef);
  if (state.collection.size <= 300)
    return /* @__PURE__ */ preact_default.createElement("div", containerProps, /* @__PURE__ */ preact_default.createElement("input", inputProps), /* @__PURE__ */ preact_default.createElement("label", null, label, /* @__PURE__ */ preact_default.createElement("select", selectProps, /* @__PURE__ */ preact_default.createElement("option", null), [
      ...state.collection.getKeys()
    ].map((key) => {
      let item = state.collection.getItem(key);
      if (item.type === "item")
        return /* @__PURE__ */ preact_default.createElement("option", {
          key: item.key,
          value: item.key
        }, item.textValue);
    }))));
  else if (name)
    return /* @__PURE__ */ preact_default.createElement("input", {
      type: "hidden",
      autoComplete: selectProps.autoComplete,
      name,
      disabled: isDisabled,
      value: state.selectedKey
    });
  return null;
}

// ../../node_modules/@react-spectrum/picker/dist/module.js
var import_utils34 = __toESM(require_main3());
var import_interactions10 = __toESM(require_main10());
init_preact();
var import_i18n8 = __toESM(require_main8());
var import_provider6 = __toESM(require_main13());

// ../../node_modules/@react-stately/select/dist/module.js
init_preact();
function $2bc3a590c5373a4e$export$5159ec8b34d4ec12(props) {
  let triggerState = $a28c903ee9ad8dc5$export$79fefeb1c2091ac3(props);
  let listState = $a0d645289fe9b86b$export$e7f05e985daf4b5f(__spreadProps(__spreadValues({}, props), {
    onSelectionChange: (key) => {
      if (props.onSelectionChange != null)
        props.onSelectionChange(key);
      triggerState.close();
    }
  }));
  let [isFocused, setFocused] = (0, preact_exports.useState)(false);
  return __spreadProps(__spreadValues(__spreadValues({}, listState), triggerState), {
    open() {
      if (listState.collection.size !== 0)
        triggerState.open();
    },
    toggle(focusStrategy) {
      if (listState.collection.size !== 0)
        triggerState.toggle(focusStrategy);
    },
    isFocused,
    setFocused
  });
}

// ../../node_modules/@react-spectrum/picker/dist/module.js
function $parcel$interopDefault9(a) {
  return a && a.__esModule ? a.default : a;
}
function $parcel$export9(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $23df90b22503709f$exports = {};
var $d1a348ee160b1c35$exports = {};
$d1a348ee160b1c35$exports = {
  "loading": `\u062C\u0627\u0631\u064D \u0627\u0644\u062A\u062D\u0645\u064A\u0644...`,
  "placeholder": `\u062D\u062F\u062F \u062E\u064A\u0627\u0631\u064B\u0627...`
};
var $6f4b5567d8931b2c$exports = {};
$6f4b5567d8931b2c$exports = {
  "loading": `\u0417\u0430\u0440\u0435\u0436\u0434\u0430\u043D\u0435...`,
  "placeholder": `\u0418\u0437\u0431\u0435\u0440\u0435\u0442\u0435 \u043E\u043F\u0446\u0438\u044F`
};
var $413f5c9b05a53d70$exports = {};
$413f5c9b05a53d70$exports = {
  "loading": `Na\u010D\xEDt\xE1n\xED...`,
  "placeholder": `Vyberte vhodnou mo\u017Enost...`
};
var $23214587b45d0c7a$exports = {};
$23214587b45d0c7a$exports = {
  "loading": `Indl\xE6ser ...`,
  "placeholder": `V\xE6lg en mulighed ...`
};
var $291e2fb947064c57$exports = {};
$291e2fb947064c57$exports = {
  "loading": `Laden...`,
  "placeholder": `Option ausw\xE4hlen...`
};
var $c5247287ce725677$exports = {};
$c5247287ce725677$exports = {
  "loading": `\u03A6\u03CC\u03C1\u03C4\u03C9\u03C3\u03B7...`,
  "placeholder": `\u0395\u03C0\u03B9\u03BB\u03AD\u03BE\u03C4\u03B5\u2026`
};
var $3d85b21727aef233$exports = {};
$3d85b21727aef233$exports = {
  "placeholder": `Select an option\u2026`,
  "loading": `Loading\u2026`
};
var $573c338a19d2e44a$exports = {};
$573c338a19d2e44a$exports = {
  "loading": `Cargando\u2026`,
  "placeholder": `Seleccione una opci\xF3n\u2026`
};
var $52537a7562a0fcd4$exports = {};
$52537a7562a0fcd4$exports = {
  "loading": `Laadimine...`,
  "placeholder": `Valige valikuline...`
};
var $f128a549f8c2b170$exports = {};
$f128a549f8c2b170$exports = {
  "loading": `Ladataan\u2026`,
  "placeholder": `Valitse vaihtoehto...`
};
var $f69e7a23857afc72$exports = {};
$f69e7a23857afc72$exports = {
  "loading": `Chargement...`,
  "placeholder": `S\xE9lectionnez une option...`
};
var $cf880887f8515ea2$exports = {};
$cf880887f8515ea2$exports = {
  "loading": `\u05D8\u05D5\u05E2\u05DF...`,
  "placeholder": `\u05D1\u05D7\u05E8 \u05D0\u05E4\u05E9\u05E8\u05D5\u05EA...`
};
var $1f679bbb79879af2$exports = {};
$1f679bbb79879af2$exports = {
  "loading": `U\u010Ditavam...`,
  "placeholder": `Odaberite opciju`
};
var $fc9bc2ec180ca71d$exports = {};
$fc9bc2ec180ca71d$exports = {
  "loading": `Bet\xF6lt\xE9s folyamatban\u2026`,
  "placeholder": `V\xE1lasszon egy opci\xF3t\u2026`
};
var $9fbc1ff7e87407ac$exports = {};
$9fbc1ff7e87407ac$exports = {
  "loading": `Caricamento...`,
  "placeholder": `Seleziona un\u2019opzione...`
};
var $96673b78dbaf44b6$exports = {};
$96673b78dbaf44b6$exports = {
  "loading": `\u8AAD\u307F\u8FBC\u307F\u4E2D...`,
  "placeholder": `\u30AA\u30D7\u30B7\u30E7\u30F3\u3092\u9078\u629E...`
};
var $beddb5ded972a868$exports = {};
$beddb5ded972a868$exports = {
  "loading": `\uB85C\uB4DC \uC911`,
  "placeholder": `\uC120\uD0DD \uC0AC\uD56D \uC120\uD0DD`
};
var $2ac19a654f19cde2$exports = {};
$2ac19a654f19cde2$exports = {
  "loading": `\u012Ekeliama...`,
  "placeholder": `Pasirinkite parinkt\u012F...`
};
var $844be78af2d57459$exports = {};
$844be78af2d57459$exports = {
  "loading": `Notiek iel\u0101de...`,
  "placeholder": `Atlasiet opciju...`
};
var $42b05097f4e27f73$exports = {};
$42b05097f4e27f73$exports = {
  "loading": `Laster inn ...`,
  "placeholder": `Velg et alternativ...`
};
var $74dd3f417665b06f$exports = {};
$74dd3f417665b06f$exports = {
  "loading": `Laden...`,
  "placeholder": `Optie selecteren...`
};
var $6221651ca0306be3$exports = {};
$6221651ca0306be3$exports = {
  "loading": `\u0141adowanie...`,
  "placeholder": `Wybierz opcj\u0119...`
};
var $45bd58553e21ec53$exports = {};
$45bd58553e21ec53$exports = {
  "loading": `Carregando...`,
  "placeholder": `Selecione uma op\xE7\xE3o...`
};
var $7ae7985d84009e3a$exports = {};
$7ae7985d84009e3a$exports = {
  "loading": `A carregar...`,
  "placeholder": `Selecionar uma op\xE7\xE3o...`
};
var $c83f9725f6024f47$exports = {};
$c83f9725f6024f47$exports = {
  "loading": `Se \xEEncarc\u0103...`,
  "placeholder": `Selecta\u021Bi o op\u021Biune`
};
var $0fb522ae7b51fefd$exports = {};
$0fb522ae7b51fefd$exports = {
  "loading": `\u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430...`,
  "placeholder": `\u0412\u044B\u0431\u0440\u0430\u0442\u044C \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440...`
};
var $5ca94db2a021a726$exports = {};
$5ca94db2a021a726$exports = {
  "loading": `Na\u010D\xEDtava sa...`,
  "placeholder": `Vyberte mo\u017Enos\u0165...`
};
var $2c7a753ed24e9851$exports = {};
$2c7a753ed24e9851$exports = {
  "loading": `Nalaganje...`,
  "placeholder": `Izberite mo\u017Enost`
};
var $14a1d1750c9de591$exports = {};
$14a1d1750c9de591$exports = {
  "loading": `U\u010Ditavam...`,
  "placeholder": `Izaberite opciju`
};
var $bf3f89a84488b301$exports = {};
$bf3f89a84488b301$exports = {
  "loading": `L\xE4ser in...`,
  "placeholder": `V\xE4lj ett alternativ...`
};
var $1ff90abddf42fc72$exports = {};
$1ff90abddf42fc72$exports = {
  "loading": `Y\xFCkleniyor...`,
  "placeholder": `Bir se\xE7im yap\u0131n\u2026`
};
var $4f07d8c17926a679$exports = {};
$4f07d8c17926a679$exports = {
  "loading": `\u0417\u0430\u0432\u0430\u043D\u0442\u0430\u0436\u0435\u043D\u043D\u044F\u2026`,
  "placeholder": `\u0412\u0438\u0431\u0435\u0440\u0456\u0442\u044C \u043E\u043F\u0446\u0456\u044E...`
};
var $07a8d3b903fa886f$exports = {};
$07a8d3b903fa886f$exports = {
  "loading": `\u6B63\u5728\u52A0\u8F7D...`,
  "placeholder": `\u9009\u62E9\u4E00\u4E2A\u9009\u9879...`
};
var $e1416a5539091e36$exports = {};
$e1416a5539091e36$exports = {
  "loading": `\u6B63\u5728\u8F09\u5165`,
  "placeholder": `\u9078\u53D6\u4E00\u500B\u9078\u9805`
};
$23df90b22503709f$exports = {
  "ar-AE": $d1a348ee160b1c35$exports,
  "bg-BG": $6f4b5567d8931b2c$exports,
  "cs-CZ": $413f5c9b05a53d70$exports,
  "da-DK": $23214587b45d0c7a$exports,
  "de-DE": $291e2fb947064c57$exports,
  "el-GR": $c5247287ce725677$exports,
  "en-US": $3d85b21727aef233$exports,
  "es-ES": $573c338a19d2e44a$exports,
  "et-EE": $52537a7562a0fcd4$exports,
  "fi-FI": $f128a549f8c2b170$exports,
  "fr-FR": $f69e7a23857afc72$exports,
  "he-IL": $cf880887f8515ea2$exports,
  "hr-HR": $1f679bbb79879af2$exports,
  "hu-HU": $fc9bc2ec180ca71d$exports,
  "it-IT": $9fbc1ff7e87407ac$exports,
  "ja-JP": $96673b78dbaf44b6$exports,
  "ko-KR": $beddb5ded972a868$exports,
  "lt-LT": $2ac19a654f19cde2$exports,
  "lv-LV": $844be78af2d57459$exports,
  "nb-NO": $42b05097f4e27f73$exports,
  "nl-NL": $74dd3f417665b06f$exports,
  "pl-PL": $6221651ca0306be3$exports,
  "pt-BR": $45bd58553e21ec53$exports,
  "pt-PT": $7ae7985d84009e3a$exports,
  "ro-RO": $c83f9725f6024f47$exports,
  "ru-RU": $0fb522ae7b51fefd$exports,
  "sk-SK": $5ca94db2a021a726$exports,
  "sl-SI": $2c7a753ed24e9851$exports,
  "sr-SP": $14a1d1750c9de591$exports,
  "sv-SE": $bf3f89a84488b301$exports,
  "tr-TR": $1ff90abddf42fc72$exports,
  "uk-UA": $4f07d8c17926a679$exports,
  "zh-CN": $07a8d3b903fa886f$exports,
  "zh-TW": $e1416a5539091e36$exports
};
var $3c14925a8a65017e$exports = {};
$parcel$export9($3c14925a8a65017e$exports, "spectrum-Dropdown", () => $3c14925a8a65017e$export$f33c6833ddc773bd, (v) => $3c14925a8a65017e$export$f33c6833ddc773bd = v);
$parcel$export9($3c14925a8a65017e$exports, "spectrum-Dropdown-chevron", () => $3c14925a8a65017e$export$abbb0cf96dbbb8a0, (v) => $3c14925a8a65017e$export$abbb0cf96dbbb8a0 = v);
$parcel$export9($3c14925a8a65017e$exports, "spectrum-Dropdown-trigger", () => $3c14925a8a65017e$export$37a6d27a7cb47ce5, (v) => $3c14925a8a65017e$export$37a6d27a7cb47ce5 = v);
$parcel$export9($3c14925a8a65017e$exports, "spectrum-Dropdown-label", () => $3c14925a8a65017e$export$1235a00795b885e7, (v) => $3c14925a8a65017e$export$1235a00795b885e7 = v);
$parcel$export9($3c14925a8a65017e$exports, "is-placeholder", () => $3c14925a8a65017e$export$e5b2f5233e4e5194, (v) => $3c14925a8a65017e$export$e5b2f5233e4e5194 = v);
$parcel$export9($3c14925a8a65017e$exports, "spectrum-Icon", () => $3c14925a8a65017e$export$d374b04f30360026, (v) => $3c14925a8a65017e$export$d374b04f30360026 = v);
$parcel$export9($3c14925a8a65017e$exports, "spectrum-Dropdown-invalidIcon", () => $3c14925a8a65017e$export$a32fdb5a063ea755, (v) => $3c14925a8a65017e$export$a32fdb5a063ea755 = v);
$parcel$export9($3c14925a8a65017e$exports, "spectrum-Dropdown-progressCircle", () => $3c14925a8a65017e$export$18281c34cabbd13f, (v) => $3c14925a8a65017e$export$18281c34cabbd13f = v);
$parcel$export9($3c14925a8a65017e$exports, "spectrum-Dropdown--quiet", () => $3c14925a8a65017e$export$b2306417a70c7a62, (v) => $3c14925a8a65017e$export$b2306417a70c7a62 = v);
$parcel$export9($3c14925a8a65017e$exports, "spectrum-Dropdown-popover--quiet", () => $3c14925a8a65017e$export$cbeaf986973c0633, (v) => $3c14925a8a65017e$export$cbeaf986973c0633 = v);
$parcel$export9($3c14925a8a65017e$exports, "spectrum-Field", () => $3c14925a8a65017e$export$f6d480ae1e56eba0, (v) => $3c14925a8a65017e$export$f6d480ae1e56eba0 = v);
$parcel$export9($3c14925a8a65017e$exports, "spectrum-Dropdown-fieldWrapper--quiet", () => $3c14925a8a65017e$export$66ddc2410b0e9eba, (v) => $3c14925a8a65017e$export$66ddc2410b0e9eba = v);
$parcel$export9($3c14925a8a65017e$exports, "spectrum-Dropdown-fieldWrapper--positionSide", () => $3c14925a8a65017e$export$c0b4e9596538c7b1, (v) => $3c14925a8a65017e$export$c0b4e9596538c7b1 = v);
$parcel$export9($3c14925a8a65017e$exports, "is-hovered", () => $3c14925a8a65017e$export$b8813cd5d7824ce7, (v) => $3c14925a8a65017e$export$b8813cd5d7824ce7 = v);
$parcel$export9($3c14925a8a65017e$exports, "is-selected", () => $3c14925a8a65017e$export$1e0fb04f31d3c22a, (v) => $3c14925a8a65017e$export$1e0fb04f31d3c22a = v);
$parcel$export9($3c14925a8a65017e$exports, "is-invalid", () => $3c14925a8a65017e$export$14a30de2866685fa, (v) => $3c14925a8a65017e$export$14a30de2866685fa = v);
$parcel$export9($3c14925a8a65017e$exports, "is-disabled", () => $3c14925a8a65017e$export$d35bc1e505d1ebbf, (v) => $3c14925a8a65017e$export$d35bc1e505d1ebbf = v);
$parcel$export9($3c14925a8a65017e$exports, "focus-ring", () => $3c14925a8a65017e$export$f39a09f249340e2a, (v) => $3c14925a8a65017e$export$f39a09f249340e2a = v);
var $3c14925a8a65017e$export$f33c6833ddc773bd;
var $3c14925a8a65017e$export$abbb0cf96dbbb8a0;
var $3c14925a8a65017e$export$37a6d27a7cb47ce5;
var $3c14925a8a65017e$export$1235a00795b885e7;
var $3c14925a8a65017e$export$e5b2f5233e4e5194;
var $3c14925a8a65017e$export$d374b04f30360026;
var $3c14925a8a65017e$export$a32fdb5a063ea755;
var $3c14925a8a65017e$export$18281c34cabbd13f;
var $3c14925a8a65017e$export$b2306417a70c7a62;
var $3c14925a8a65017e$export$cbeaf986973c0633;
var $3c14925a8a65017e$export$f6d480ae1e56eba0;
var $3c14925a8a65017e$export$66ddc2410b0e9eba;
var $3c14925a8a65017e$export$c0b4e9596538c7b1;
var $3c14925a8a65017e$export$b8813cd5d7824ce7;
var $3c14925a8a65017e$export$1e0fb04f31d3c22a;
var $3c14925a8a65017e$export$14a30de2866685fa;
var $3c14925a8a65017e$export$d35bc1e505d1ebbf;
var $3c14925a8a65017e$export$f39a09f249340e2a;
$3c14925a8a65017e$export$f33c6833ddc773bd = "spectrum-Dropdown_6d8ec0";
$3c14925a8a65017e$export$abbb0cf96dbbb8a0 = "spectrum-Dropdown-chevron_6d8ec0";
$3c14925a8a65017e$export$37a6d27a7cb47ce5 = "spectrum-Dropdown-trigger_6d8ec0";
$3c14925a8a65017e$export$1235a00795b885e7 = "spectrum-Dropdown-label_6d8ec0";
$3c14925a8a65017e$export$e5b2f5233e4e5194 = "is-placeholder_6d8ec0";
$3c14925a8a65017e$export$d374b04f30360026 = "spectrum-Icon_6d8ec0";
$3c14925a8a65017e$export$a32fdb5a063ea755 = "spectrum-Dropdown-invalidIcon_6d8ec0";
$3c14925a8a65017e$export$18281c34cabbd13f = "spectrum-Dropdown-progressCircle_6d8ec0";
$3c14925a8a65017e$export$b2306417a70c7a62 = "spectrum-Dropdown--quiet_6d8ec0";
$3c14925a8a65017e$export$cbeaf986973c0633 = "spectrum-Dropdown-popover--quiet_6d8ec0";
$3c14925a8a65017e$export$f6d480ae1e56eba0 = "spectrum-Field_6d8ec0";
$3c14925a8a65017e$export$66ddc2410b0e9eba = "spectrum-Dropdown-fieldWrapper--quiet_6d8ec0";
$3c14925a8a65017e$export$c0b4e9596538c7b1 = "spectrum-Dropdown-fieldWrapper--positionSide_6d8ec0";
$3c14925a8a65017e$export$b8813cd5d7824ce7 = "is-hovered_6d8ec0";
$3c14925a8a65017e$export$1e0fb04f31d3c22a = "is-selected_6d8ec0";
$3c14925a8a65017e$export$14a30de2866685fa = "is-invalid_6d8ec0";
$3c14925a8a65017e$export$d35bc1e505d1ebbf = "is-disabled_6d8ec0";
$3c14925a8a65017e$export$f39a09f249340e2a = "focus-ring_6d8ec0";
function $51664a9007a3c6f9$var$Picker(props, ref) {
  props = (0, import_utils33.useSlotProps)(props, "picker");
  props = (0, import_provider6.useProviderProps)(props);
  let stringFormatter = (0, import_i18n8.useLocalizedStringFormatter)(/* @__PURE__ */ $parcel$interopDefault9($23df90b22503709f$exports));
  let { autoComplete, isDisabled, direction = "bottom", align = "start", shouldFlip = true, placeholder = stringFormatter.format("placeholder"), validationState, isQuiet, label, labelPosition = "top", menuWidth, name, autoFocus } = props;
  let state = $2bc3a590c5373a4e$export$5159ec8b34d4ec12(props);
  let domRef = (0, import_utils33.useDOMRef)(ref);
  let popoverRef = (0, preact_exports.useRef)();
  let unwrappedPopoverRef = (0, import_utils33.useUnwrapDOMRef)(popoverRef);
  let triggerRef = (0, preact_exports.useRef)();
  let unwrappedTriggerRef = (0, import_utils33.useUnwrapDOMRef)(triggerRef);
  let listboxRef = (0, preact_exports.useRef)();
  let layout = $3247d4a89e6094e9$export$25768ea656ae32a7(state);
  let { labelProps, triggerProps, valueProps, menuProps, descriptionProps, errorMessageProps } = $58aed456727eb0f3$export$e64b2f635402ca43(__spreadProps(__spreadValues({}, props), {
    keyboardDelegate: layout
  }), state, unwrappedTriggerRef);
  let isMobile = (0, import_utils33.useIsMobileDevice)();
  let { overlayProps, placement, updatePosition } = (0, import_overlays4.useOverlayPosition)({
    targetRef: unwrappedTriggerRef,
    overlayRef: unwrappedPopoverRef,
    scrollRef: listboxRef,
    placement: `${direction} ${align}`,
    shouldFlip,
    isOpen: state.isOpen && !isMobile,
    onClose: state.close
  });
  let { hoverProps, isHovered } = (0, import_interactions10.useHover)({
    isDisabled
  });
  (0, import_utils34.useLayoutEffect)(() => {
    if (state.isOpen)
      requestAnimationFrame(() => {
        updatePosition();
      });
  }, [
    state.isOpen,
    updatePosition
  ]);
  let isLoadingInitial = props.isLoading && state.collection.size === 0;
  let isLoadingMore = props.isLoading && state.collection.size > 0;
  let listbox = /* @__PURE__ */ preact_default.createElement($9bf71ea28793e738$export$20e40289641fbbb6, {
    restoreFocus: true,
    contain: isMobile
  }, /* @__PURE__ */ preact_default.createElement(import_overlays4.DismissButton, {
    onDismiss: () => state.close()
  }), /* @__PURE__ */ preact_default.createElement($3247d4a89e6094e9$export$1afdcf349979fb7e, __spreadProps(__spreadValues({}, menuProps), {
    ref: listboxRef,
    disallowEmptySelection: true,
    autoFocus: state.focusStrategy || true,
    shouldSelectOnPressUp: true,
    focusOnPointerEnter: true,
    layout,
    state,
    width: isMobile ? "100%" : void 0,
    UNSAFE_style: {
      maxHeight: "inherit"
    },
    isLoading: isLoadingMore,
    onLoadMore: props.onLoadMore
  })), /* @__PURE__ */ preact_default.createElement(import_overlays4.DismissButton, {
    onDismiss: () => state.close()
  }));
  let [buttonWidth, setButtonWidth] = (0, preact_exports.useState)(null);
  let { scale } = (0, import_provider6.useProvider)();
  let onResize = (0, preact_exports.useCallback)(() => {
    if (!isMobile && unwrappedTriggerRef.current) {
      let width = unwrappedTriggerRef.current.offsetWidth;
      setButtonWidth(width);
    }
  }, [
    unwrappedTriggerRef,
    setButtonWidth,
    isMobile
  ]);
  (0, import_utils34.useResizeObserver)({
    ref: unwrappedTriggerRef,
    onResize
  });
  (0, import_utils34.useLayoutEffect)(onResize, [
    scale,
    state.selectedKey,
    onResize
  ]);
  let overlay;
  if (isMobile)
    overlay = /* @__PURE__ */ preact_default.createElement($1afc87f3d16a5a1c$export$4589ed81930b555c, {
      isOpen: state.isOpen,
      onClose: state.close
    }, listbox);
  else {
    let width = isQuiet ? null : buttonWidth;
    let style = __spreadProps(__spreadValues({}, overlayProps.style), {
      width: menuWidth ? (0, import_utils33.dimensionValue)(menuWidth) : width,
      minWidth: isQuiet ? `calc(${buttonWidth}px + calc(2 * var(--spectrum-dropdown-quiet-offset)))` : buttonWidth
    });
    overlay = /* @__PURE__ */ preact_default.createElement($17b503f7de08fecc$export$5b6b19405a83ff9d, {
      isOpen: state.isOpen,
      UNSAFE_style: style,
      UNSAFE_className: (0, import_utils33.classNames)(/* @__PURE__ */ $parcel$interopDefault9($3c14925a8a65017e$exports), "spectrum-Dropdown-popover", {
        "spectrum-Dropdown-popover--quiet": isQuiet
      }),
      ref: popoverRef,
      placement,
      hideArrow: true,
      shouldCloseOnBlur: true,
      onClose: state.close
    }, listbox);
  }
  let contents = state.selectedItem ? state.selectedItem.rendered : placeholder;
  if (typeof contents === "string")
    contents = /* @__PURE__ */ preact_default.createElement($cd449e8defa988f0$export$5f1af8db9871e1d6, null, contents);
  let picker = /* @__PURE__ */ preact_default.createElement("div", {
    className: (0, import_utils33.classNames)(/* @__PURE__ */ $parcel$interopDefault9($3c14925a8a65017e$exports), "spectrum-Dropdown", {
      "is-invalid": validationState === "invalid",
      "is-disabled": isDisabled,
      "spectrum-Dropdown--quiet": isQuiet
    })
  }, /* @__PURE__ */ preact_default.createElement($bdd25dc72710631f$export$cbd84cdb2e668835, {
    autoComplete,
    isDisabled,
    state,
    triggerRef: unwrappedTriggerRef,
    label,
    name
  }), /* @__PURE__ */ preact_default.createElement(import_interactions10.PressResponder, (0, import_utils34.mergeProps)(hoverProps, triggerProps), /* @__PURE__ */ preact_default.createElement($b43bd559b476d0c4$export$47dc48f595b075da, {
    ref: triggerRef,
    isActive: state.isOpen,
    isQuiet,
    isDisabled,
    validationState,
    autoFocus,
    UNSAFE_className: (0, import_utils33.classNames)(/* @__PURE__ */ $parcel$interopDefault9($3c14925a8a65017e$exports), "spectrum-Dropdown-trigger", {
      "is-hovered": isHovered
    })
  }, /* @__PURE__ */ preact_default.createElement(import_utils33.SlotProvider, {
    slots: {
      icon: {
        UNSAFE_className: (0, import_utils33.classNames)(/* @__PURE__ */ $parcel$interopDefault9($3c14925a8a65017e$exports), "spectrum-Icon"),
        size: "S"
      },
      text: __spreadProps(__spreadValues({}, valueProps), {
        UNSAFE_className: (0, import_utils33.classNames)(/* @__PURE__ */ $parcel$interopDefault9($3c14925a8a65017e$exports), "spectrum-Dropdown-label", {
          "is-placeholder": !state.selectedItem
        })
      }),
      description: {
        isHidden: true
      }
    }
  }, contents), isLoadingInitial && /* @__PURE__ */ preact_default.createElement($79c16f64960b6385$export$c79b9d6b4cc92af7, {
    isIndeterminate: true,
    size: "S",
    "aria-label": stringFormatter.format("loading"),
    UNSAFE_className: (0, import_utils33.classNames)(/* @__PURE__ */ $parcel$interopDefault9($3c14925a8a65017e$exports), "spectrum-Dropdown-progressCircle")
  }), validationState === "invalid" && !isLoadingInitial && /* @__PURE__ */ preact_default.createElement(import_AlertMedium2.default, {
    UNSAFE_className: (0, import_utils33.classNames)(/* @__PURE__ */ $parcel$interopDefault9($3c14925a8a65017e$exports), "spectrum-Dropdown-invalidIcon")
  }), /* @__PURE__ */ preact_default.createElement(import_ChevronDownMedium.default, {
    UNSAFE_className: (0, import_utils33.classNames)(/* @__PURE__ */ $parcel$interopDefault9($3c14925a8a65017e$exports), "spectrum-Dropdown-chevron")
  }))), state.collection.size === 0 ? null : overlay);
  let wrapperClassName = label ? (0, import_utils33.classNames)(/* @__PURE__ */ $parcel$interopDefault9($3c14925a8a65017e$exports), "spectrum-Field", {
    "spectrum-Dropdown-fieldWrapper--quiet": isQuiet,
    "spectrum-Dropdown-fieldWrapper--positionSide": labelPosition === "side"
  }) : "";
  return /* @__PURE__ */ preact_default.createElement($b7ca5b4454a2009d$export$a455218a85c89869, __spreadProps(__spreadValues({}, props), {
    ref: domRef,
    wrapperClassName,
    labelProps,
    descriptionProps,
    errorMessageProps,
    showErrorIcon: false,
    includeNecessityIndicatorInAccessibilityName: true,
    elementType: "span"
  }), picker);
}
var $51664a9007a3c6f9$export$ba25329847403e11 = /* @__PURE__ */ preact_default.forwardRef($51664a9007a3c6f9$var$Picker);

// ../../node_modules/@adobe/react-spectrum/dist/module.js
var import_provider8 = __toESM(require_main13());

// ../../node_modules/@react-spectrum/tabs/dist/module.js
var import_utils36 = __toESM(require_main9());
var import_utils37 = __toESM(require_main3());
init_preact();

// ../../node_modules/@react-stately/tabs/dist/module.js
init_preact();
function $76f919a04c5a7d14$export$4ba071daf4e486(props) {
  let state = $a0d645289fe9b86b$export$e7f05e985daf4b5f(__spreadProps(__spreadValues({}, props), {
    suppressTextValueWarning: true
  }));
  let { selectionManager, collection, selectedKey: currentSelectedKey } = state;
  let lastSelectedKey = (0, preact_exports.useRef)(currentSelectedKey);
  let selectedKey = currentSelectedKey;
  if (selectionManager.isEmpty || !collection.getItem(selectedKey)) {
    selectedKey = collection.getFirstKey();
    while (state.disabledKeys.has(selectedKey) && selectedKey !== collection.getLastKey())
      selectedKey = collection.getKeyAfter(selectedKey);
    if (state.disabledKeys.has(selectedKey) && selectedKey === collection.getLastKey())
      selectedKey = collection.getFirstKey();
    selectionManager.setSelectedKeys([
      selectedKey
    ]);
  }
  if (selectionManager.focusedKey == null || !selectionManager.isFocused && selectedKey !== lastSelectedKey.current)
    selectionManager.setFocusedKey(selectedKey);
  lastSelectedKey.current = selectedKey;
  return __spreadProps(__spreadValues({}, state), {
    isDisabled: props.isDisabled || false
  });
}

// ../../node_modules/@react-spectrum/tabs/dist/module.js
var import_interactions11 = __toESM(require_main10());
var import_i18n10 = __toESM(require_main8());
var import_provider7 = __toESM(require_main13());

// ../../node_modules/@react-aria/tabs/dist/module.js
var import_utils35 = __toESM(require_main3());
init_preact();
var import_i18n9 = __toESM(require_main8());
var $99b62ae3ff97ec45$export$c5f62239608282b6 = /* @__PURE__ */ new WeakMap();
function $99b62ae3ff97ec45$export$567fc7097e064344(state, key, role) {
  if (typeof key === "string")
    key = key.replace(/\s+/g, "");
  let baseId = $99b62ae3ff97ec45$export$c5f62239608282b6.get(state);
  return `${baseId}-${role}-${key}`;
}
function $0175d55c2a017ebc$export$fdf4756d5b8ef90a(props, state, ref) {
  let { key, isDisabled: propsDisabled } = props;
  let { selectionManager: manager, selectedKey } = state;
  let isSelected = key === selectedKey;
  let isDisabled = propsDisabled || state.isDisabled || state.disabledKeys.has(key);
  let { itemProps } = $880e95eb8b93ba9a$export$ecf600387e221c37({
    selectionManager: manager,
    key,
    ref,
    isDisabled
  });
  let tabId = $99b62ae3ff97ec45$export$567fc7097e064344(state, key, "tab");
  let tabPanelId = $99b62ae3ff97ec45$export$567fc7097e064344(state, key, "tabpanel");
  let { tabIndex } = itemProps;
  return {
    tabProps: __spreadProps(__spreadValues({}, itemProps), {
      id: tabId,
      "aria-selected": isSelected,
      "aria-disabled": isDisabled || void 0,
      "aria-controls": isSelected ? tabPanelId : void 0,
      tabIndex: isDisabled ? void 0 : tabIndex,
      role: "tab"
    }),
    isSelected,
    isDisabled
  };
}
function $34bce698202e07cb$export$fae0121b5afe572d(props, state, ref) {
  let [tabIndex, setTabIndex] = (0, preact_exports.useState)(0);
  (0, import_utils35.useLayoutEffect)(() => {
    if (ref === null || ref === void 0 ? void 0 : ref.current) {
      let update = () => {
        let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(ref.current, {
          tabbable: true
        });
        setTabIndex(walker.nextNode() ? void 0 : 0);
      };
      update();
      let observer3 = new MutationObserver(update);
      observer3.observe(ref.current, {
        subtree: true,
        childList: true,
        attributes: true,
        attributeFilter: [
          "tabIndex",
          "disabled"
        ]
      });
      return () => {
        observer3.disconnect();
      };
    }
  }, [
    ref
  ]);
  const id = $99b62ae3ff97ec45$export$567fc7097e064344(state, state === null || state === void 0 ? void 0 : state.selectedKey, "tabpanel");
  const tabPanelProps = (0, import_utils35.useLabels)(__spreadProps(__spreadValues({}, props), {
    id,
    "aria-labelledby": $99b62ae3ff97ec45$export$567fc7097e064344(state, state === null || state === void 0 ? void 0 : state.selectedKey, "tab")
  }));
  return {
    tabPanelProps: (0, import_utils35.mergeProps)(tabPanelProps, {
      tabIndex,
      role: "tabpanel",
      "aria-describedby": props["aria-describedby"],
      "aria-details": props["aria-details"]
    })
  };
}
var $bfc6f2d60b8a4c40$export$15010ca3c1abe90b = class {
  getKeyLeftOf(key) {
    if (this.flipDirection)
      return this.getNextKey(key);
    else {
      if (this.orientation === "horizontal")
        return this.getPreviousKey(key);
      return null;
    }
  }
  getKeyRightOf(key) {
    if (this.flipDirection)
      return this.getPreviousKey(key);
    else {
      if (this.orientation === "horizontal")
        return this.getNextKey(key);
      return null;
    }
  }
  getKeyAbove(key) {
    if (this.orientation === "vertical")
      return this.getPreviousKey(key);
    return null;
  }
  getKeyBelow(key) {
    if (this.orientation === "vertical")
      return this.getNextKey(key);
    return null;
  }
  getFirstKey() {
    let key = this.collection.getFirstKey();
    if (this.disabledKeys.has(key))
      key = this.getNextKey(key);
    return key;
  }
  getLastKey() {
    let key = this.collection.getLastKey();
    if (this.disabledKeys.has(key))
      key = this.getPreviousKey(key);
    return key;
  }
  getNextKey(key) {
    do {
      key = this.collection.getKeyAfter(key);
      if (key == null)
        key = this.collection.getFirstKey();
    } while (this.disabledKeys.has(key));
    return key;
  }
  getPreviousKey(key) {
    do {
      key = this.collection.getKeyBefore(key);
      if (key == null)
        key = this.collection.getLastKey();
    } while (this.disabledKeys.has(key));
    return key;
  }
  constructor(collection, direction, orientation, disabledKeys = /* @__PURE__ */ new Set()) {
    this.collection = collection;
    this.flipDirection = direction === "rtl" && orientation === "horizontal";
    this.orientation = orientation;
    this.disabledKeys = disabledKeys;
  }
};
function $58d314389b21fa3f$export$773e389e644c5874(props, state, ref) {
  let { orientation = "horizontal", keyboardActivation = "automatic" } = props;
  let { collection, selectionManager: manager, disabledKeys } = state;
  let { direction } = (0, import_i18n9.useLocale)();
  let delegate = (0, preact_exports.useMemo)(
    () => new $bfc6f2d60b8a4c40$export$15010ca3c1abe90b(collection, direction, orientation, disabledKeys),
    [
      collection,
      disabledKeys,
      orientation,
      direction
    ]
  );
  let { collectionProps } = $ae20dd8cbca75726$export$d6daf82dcd84e87c({
    ref,
    selectionManager: manager,
    keyboardDelegate: delegate,
    selectOnFocus: keyboardActivation === "automatic",
    disallowEmptySelection: true,
    scrollRef: ref
  });
  let tabsId = (0, import_utils35.useId)();
  $99b62ae3ff97ec45$export$c5f62239608282b6.set(state, tabsId);
  let tabListLabelProps = (0, import_utils35.useLabels)(__spreadProps(__spreadValues({}, props), {
    id: tabsId
  }));
  return {
    tabListProps: __spreadProps(__spreadValues({}, (0, import_utils35.mergeProps)(collectionProps, tabListLabelProps)), {
      role: "tablist",
      "aria-orientation": orientation,
      tabIndex: void 0
    })
  };
}

// ../../node_modules/@react-spectrum/tabs/dist/module.js
function $parcel$interopDefault10(a) {
  return a && a.__esModule ? a.default : a;
}
function $parcel$export10(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $32d597b82a7aad64$exports = {};
$parcel$export10($32d597b82a7aad64$exports, "spectrum-TabsPanel", () => $32d597b82a7aad64$export$34f1a65c57bb7bb, (v) => $32d597b82a7aad64$export$34f1a65c57bb7bb = v);
$parcel$export10($32d597b82a7aad64$exports, "spectrum-TabsPanel--horizontal", () => $32d597b82a7aad64$export$778fb839eaa0528c, (v) => $32d597b82a7aad64$export$778fb839eaa0528c = v);
$parcel$export10($32d597b82a7aad64$exports, "spectrum-TabsPanel--vertical", () => $32d597b82a7aad64$export$9a6e2fb72c648072, (v) => $32d597b82a7aad64$export$9a6e2fb72c648072 = v);
$parcel$export10($32d597b82a7aad64$exports, "spectrum-Tabs", () => $32d597b82a7aad64$export$35c105c0d9c8e56f, (v) => $32d597b82a7aad64$export$35c105c0d9c8e56f = v);
$parcel$export10($32d597b82a7aad64$exports, "spectrum-Tabs-item", () => $32d597b82a7aad64$export$123e4c01a5440a3e, (v) => $32d597b82a7aad64$export$123e4c01a5440a3e = v);
$parcel$export10($32d597b82a7aad64$exports, "is-disabled", () => $32d597b82a7aad64$export$d35bc1e505d1ebbf, (v) => $32d597b82a7aad64$export$d35bc1e505d1ebbf = v);
$parcel$export10($32d597b82a7aad64$exports, "spectrum-Tabs-itemLabel", () => $32d597b82a7aad64$export$1f253edac4b98526, (v) => $32d597b82a7aad64$export$1f253edac4b98526 = v);
$parcel$export10($32d597b82a7aad64$exports, "spectrum-Icon", () => $32d597b82a7aad64$export$d374b04f30360026, (v) => $32d597b82a7aad64$export$d374b04f30360026 = v);
$parcel$export10($32d597b82a7aad64$exports, "spectrum-Tabs-selectionIndicator", () => $32d597b82a7aad64$export$a115f9117a19563e, (v) => $32d597b82a7aad64$export$a115f9117a19563e = v);
$parcel$export10($32d597b82a7aad64$exports, "spectrum-Tabs--horizontal", () => $32d597b82a7aad64$export$229f1ac4d3d38f0e, (v) => $32d597b82a7aad64$export$229f1ac4d3d38f0e = v);
$parcel$export10($32d597b82a7aad64$exports, "spectrum-Tabs--compact", () => $32d597b82a7aad64$export$e15c78184ee03abe, (v) => $32d597b82a7aad64$export$e15c78184ee03abe = v);
$parcel$export10($32d597b82a7aad64$exports, "spectrum-Tabs--isCollapsed", () => $32d597b82a7aad64$export$ea514cd060922d6b, (v) => $32d597b82a7aad64$export$ea514cd060922d6b = v);
$parcel$export10($32d597b82a7aad64$exports, "spectrum-Tabs--quiet", () => $32d597b82a7aad64$export$831e830d5828d42b, (v) => $32d597b82a7aad64$export$831e830d5828d42b = v);
$parcel$export10($32d597b82a7aad64$exports, "spectrum-Tabs--vertical", () => $32d597b82a7aad64$export$e415005be3957065, (v) => $32d597b82a7aad64$export$e415005be3957065 = v);
$parcel$export10($32d597b82a7aad64$exports, "spectrum-TabsPanel-collapseWrapper", () => $32d597b82a7aad64$export$e09869956b4c96f2, (v) => $32d597b82a7aad64$export$e09869956b4c96f2 = v);
$parcel$export10($32d597b82a7aad64$exports, "spectrum-TabsPanel-tabs", () => $32d597b82a7aad64$export$4a157a691c854e23, (v) => $32d597b82a7aad64$export$4a157a691c854e23 = v);
$parcel$export10($32d597b82a7aad64$exports, "spectrum-TabsPanel-tabpanel", () => $32d597b82a7aad64$export$acb5da0970288266, (v) => $32d597b82a7aad64$export$acb5da0970288266 = v);
$parcel$export10($32d597b82a7aad64$exports, "focus-ring", () => $32d597b82a7aad64$export$f39a09f249340e2a, (v) => $32d597b82a7aad64$export$f39a09f249340e2a = v);
$parcel$export10($32d597b82a7aad64$exports, "spectrum-Tabs--emphasized", () => $32d597b82a7aad64$export$87b15021e28e067a, (v) => $32d597b82a7aad64$export$87b15021e28e067a = v);
$parcel$export10($32d597b82a7aad64$exports, "is-hovered", () => $32d597b82a7aad64$export$b8813cd5d7824ce7, (v) => $32d597b82a7aad64$export$b8813cd5d7824ce7 = v);
$parcel$export10($32d597b82a7aad64$exports, "is-selected", () => $32d597b82a7aad64$export$1e0fb04f31d3c22a, (v) => $32d597b82a7aad64$export$1e0fb04f31d3c22a = v);
var $32d597b82a7aad64$export$34f1a65c57bb7bb;
var $32d597b82a7aad64$export$778fb839eaa0528c;
var $32d597b82a7aad64$export$9a6e2fb72c648072;
var $32d597b82a7aad64$export$35c105c0d9c8e56f;
var $32d597b82a7aad64$export$123e4c01a5440a3e;
var $32d597b82a7aad64$export$d35bc1e505d1ebbf;
var $32d597b82a7aad64$export$1f253edac4b98526;
var $32d597b82a7aad64$export$d374b04f30360026;
var $32d597b82a7aad64$export$a115f9117a19563e;
var $32d597b82a7aad64$export$229f1ac4d3d38f0e;
var $32d597b82a7aad64$export$e15c78184ee03abe;
var $32d597b82a7aad64$export$ea514cd060922d6b;
var $32d597b82a7aad64$export$831e830d5828d42b;
var $32d597b82a7aad64$export$e415005be3957065;
var $32d597b82a7aad64$export$e09869956b4c96f2;
var $32d597b82a7aad64$export$4a157a691c854e23;
var $32d597b82a7aad64$export$acb5da0970288266;
var $32d597b82a7aad64$export$f39a09f249340e2a;
var $32d597b82a7aad64$export$87b15021e28e067a;
var $32d597b82a7aad64$export$b8813cd5d7824ce7;
var $32d597b82a7aad64$export$1e0fb04f31d3c22a;
$32d597b82a7aad64$export$34f1a65c57bb7bb = "spectrum-TabsPanel_3e140b";
$32d597b82a7aad64$export$778fb839eaa0528c = "spectrum-TabsPanel--horizontal_3e140b";
$32d597b82a7aad64$export$9a6e2fb72c648072 = "spectrum-TabsPanel--vertical_3e140b";
$32d597b82a7aad64$export$35c105c0d9c8e56f = "spectrum-Tabs_3e140b";
$32d597b82a7aad64$export$123e4c01a5440a3e = "spectrum-Tabs-item_3e140b";
$32d597b82a7aad64$export$d35bc1e505d1ebbf = "is-disabled_3e140b";
$32d597b82a7aad64$export$1f253edac4b98526 = "spectrum-Tabs-itemLabel_3e140b";
$32d597b82a7aad64$export$d374b04f30360026 = "spectrum-Icon_3e140b";
$32d597b82a7aad64$export$a115f9117a19563e = "spectrum-Tabs-selectionIndicator_3e140b";
$32d597b82a7aad64$export$229f1ac4d3d38f0e = "spectrum-Tabs--horizontal_3e140b";
$32d597b82a7aad64$export$e15c78184ee03abe = "spectrum-Tabs--compact_3e140b";
$32d597b82a7aad64$export$ea514cd060922d6b = "spectrum-Tabs--isCollapsed_3e140b";
$32d597b82a7aad64$export$831e830d5828d42b = "spectrum-Tabs--quiet_3e140b";
$32d597b82a7aad64$export$e415005be3957065 = "spectrum-Tabs--vertical_3e140b";
$32d597b82a7aad64$export$e09869956b4c96f2 = "spectrum-TabsPanel-collapseWrapper_3e140b";
$32d597b82a7aad64$export$4a157a691c854e23 = "spectrum-TabsPanel-tabs_3e140b";
$32d597b82a7aad64$export$acb5da0970288266 = "spectrum-TabsPanel-tabpanel_3e140b";
$32d597b82a7aad64$export$f39a09f249340e2a = "focus-ring_3e140b";
$32d597b82a7aad64$export$87b15021e28e067a = "spectrum-Tabs--emphasized_3e140b";
$32d597b82a7aad64$export$b8813cd5d7824ce7 = "is-hovered_3e140b";
$32d597b82a7aad64$export$1e0fb04f31d3c22a = "is-selected_3e140b";
var $65ab70ddbed1564b$var$TabContext = /* @__PURE__ */ preact_default.createContext(null);
function $65ab70ddbed1564b$var$Tabs(props, ref) {
  props = (0, import_provider7.useProviderProps)(props);
  let _a3 = props, { orientation = "horizontal", density = "regular", children } = _a3, otherProps = __objRest(_a3, ["orientation", "density", "children"]);
  let domRef = (0, import_utils36.useDOMRef)(ref);
  let tablistRef = (0, preact_exports.useRef)();
  let wrapperRef = (0, preact_exports.useRef)();
  let { direction } = (0, import_i18n10.useLocale)();
  let { styleProps } = (0, import_utils36.useStyleProps)(otherProps);
  let [collapsed, setCollapsed] = (0, preact_exports.useState)(false);
  let [selectedTab1, setSelectedTab] = (0, preact_exports.useState)();
  const [tabListState, setTabListState] = (0, preact_exports.useState)(null);
  (0, preact_exports.useEffect)(() => {
    if (tablistRef.current) {
      let selectedTab = tablistRef.current.querySelector(`[data-key="${tabListState === null || tabListState === void 0 ? void 0 : tabListState.selectedKey}"]`);
      if (selectedTab != null)
        setSelectedTab(selectedTab);
    }
  }, [
    children,
    tabListState === null || tabListState === void 0 ? void 0 : tabListState.selectedKey,
    collapsed,
    tablistRef
  ]);
  let checkShouldCollapse = (0, preact_exports.useCallback)(() => {
    if (wrapperRef.current && orientation !== "vertical") {
      let tabsComponent = wrapperRef.current;
      let tabs = tablistRef.current.querySelectorAll('[role="tab"]');
      let lastTab = tabs[tabs.length - 1];
      let end = direction === "rtl" ? "left" : "right";
      let farEdgeTabList = tabsComponent.getBoundingClientRect()[end];
      let farEdgeLastTab = lastTab === null || lastTab === void 0 ? void 0 : lastTab.getBoundingClientRect()[end];
      let shouldCollapse = direction === "rtl" ? farEdgeLastTab < farEdgeTabList : farEdgeTabList < farEdgeLastTab;
      setCollapsed(shouldCollapse);
    }
  }, [
    tablistRef,
    wrapperRef,
    direction,
    orientation,
    setCollapsed
  ]);
  (0, preact_exports.useEffect)(() => {
    checkShouldCollapse();
  }, [
    children,
    checkShouldCollapse
  ]);
  (0, import_utils37.useResizeObserver)({
    ref: wrapperRef,
    onResize: checkShouldCollapse
  });
  let tabPanelProps = {
    "aria-labelledby": void 0
  };
  let collapsibleTabListId = (0, import_utils37.useId)();
  if (collapsed && orientation !== "vertical")
    tabPanelProps["aria-labelledby"] = collapsibleTabListId;
  return /* @__PURE__ */ preact_default.createElement($65ab70ddbed1564b$var$TabContext.Provider, {
    value: {
      tabProps: __spreadProps(__spreadValues({}, props), {
        orientation,
        density
      }),
      tabState: {
        tabListState,
        setTabListState,
        selectedTab: selectedTab1,
        collapsed
      },
      refs: {
        tablistRef,
        wrapperRef
      },
      tabPanelProps
    }
  }, /* @__PURE__ */ preact_default.createElement("div", __spreadProps(__spreadValues(__spreadValues({}, (0, import_utils37.filterDOMProps)(otherProps)), styleProps), {
    ref: domRef,
    className: (0, import_utils36.classNames)(/* @__PURE__ */ $parcel$interopDefault10($32d597b82a7aad64$exports), "spectrum-TabsPanel", `spectrum-TabsPanel--${orientation}`, styleProps.className)
  }), props.children));
}
function $65ab70ddbed1564b$var$Tab(props) {
  let { item, state } = props;
  let { key, rendered } = item;
  let ref = (0, preact_exports.useRef)();
  let { tabProps, isSelected, isDisabled } = $0175d55c2a017ebc$export$fdf4756d5b8ef90a({
    key
  }, state, ref);
  let { hoverProps, isHovered } = (0, import_interactions11.useHover)(__spreadValues({}, props));
  let domProps = (0, import_utils37.filterDOMProps)(item.props);
  delete domProps.id;
  return /* @__PURE__ */ preact_default.createElement($907718708eab68af$export$1a38b4ad7f578e1d, {
    focusRingClass: (0, import_utils36.classNames)(/* @__PURE__ */ $parcel$interopDefault10($32d597b82a7aad64$exports), "focus-ring")
  }, /* @__PURE__ */ preact_default.createElement("div", __spreadProps(__spreadValues({}, (0, import_utils37.mergeProps)(tabProps, hoverProps, domProps)), {
    ref,
    className: (0, import_utils36.classNames)(/* @__PURE__ */ $parcel$interopDefault10($32d597b82a7aad64$exports), "spectrum-Tabs-item", {
      "is-selected": isSelected,
      "is-disabled": isDisabled,
      "is-hovered": isHovered
    })
  }), /* @__PURE__ */ preact_default.createElement(import_utils36.SlotProvider, {
    slots: {
      icon: {
        size: "S",
        UNSAFE_className: (0, import_utils36.classNames)(/* @__PURE__ */ $parcel$interopDefault10($32d597b82a7aad64$exports), "spectrum-Icon")
      },
      text: {
        UNSAFE_className: (0, import_utils36.classNames)(/* @__PURE__ */ $parcel$interopDefault10($32d597b82a7aad64$exports), "spectrum-Tabs-itemLabel")
      }
    }
  }, typeof rendered === "string" ? /* @__PURE__ */ preact_default.createElement($cd449e8defa988f0$export$5f1af8db9871e1d6, null, rendered) : rendered)));
}
function $65ab70ddbed1564b$var$TabLine(props) {
  let { orientation, selectedTab, selectedKey } = props;
  let { direction } = (0, import_i18n10.useLocale)();
  let { scale } = (0, import_provider7.useProvider)();
  let [style, setStyle] = (0, preact_exports.useState)({
    width: void 0,
    height: void 0
  });
  (0, import_utils37.useLayoutEffect)(() => {
    if (selectedTab) {
      var ref;
      let styleObj = {
        transform: void 0,
        width: void 0,
        height: void 0
      };
      let offset = direction === "rtl" ? -1 * (((ref = selectedTab.offsetParent) === null || ref === void 0 ? void 0 : ref.offsetWidth) - selectedTab.offsetWidth - selectedTab.offsetLeft) : selectedTab.offsetLeft;
      styleObj.transform = orientation === "vertical" ? `translateY(${selectedTab.offsetTop}px)` : `translateX(${offset}px)`;
      if (orientation === "horizontal")
        styleObj.width = `${selectedTab.offsetWidth}px`;
      else
        styleObj.height = `${selectedTab.offsetHeight}px`;
      setStyle(styleObj);
    }
  }, [
    direction,
    setStyle,
    selectedTab,
    orientation,
    scale,
    selectedKey
  ]);
  return /* @__PURE__ */ preact_default.createElement("div", {
    className: (0, import_utils36.classNames)(/* @__PURE__ */ $parcel$interopDefault10($32d597b82a7aad64$exports), "spectrum-Tabs-selectionIndicator"),
    role: "presentation",
    style
  });
}
function $65ab70ddbed1564b$export$e51a686c67fdaa2d(props) {
  const tabContext = (0, preact_exports.useContext)($65ab70ddbed1564b$var$TabContext);
  const { refs, tabState, tabProps, tabPanelProps } = tabContext;
  const { isQuiet, density, isEmphasized, orientation } = tabProps;
  const { selectedTab, collapsed, setTabListState } = tabState;
  const { tablistRef, wrapperRef } = refs;
  const state = $76f919a04c5a7d14$export$4ba071daf4e486(__spreadProps(__spreadValues({}, tabProps), {
    children: props.children
  }));
  let { styleProps } = (0, import_utils36.useStyleProps)(props);
  const { tabListProps } = $58d314389b21fa3f$export$773e389e644c5874(__spreadValues(__spreadValues({}, tabProps), props), state, tablistRef);
  (0, preact_exports.useEffect)(() => {
    setTabListState(state);
  }, [
    state.disabledKeys,
    state.selectedItem,
    state.selectedKey,
    props.children
  ]);
  let collapseStyle = collapsed && orientation !== "vertical" ? {
    maxWidth: "calc(100% + 1px)",
    overflow: "hidden",
    visibility: "hidden",
    position: "absolute"
  } : {
    maxWidth: "calc(100% + 1px)"
  };
  let stylePropsFinal = orientation === "vertical" ? styleProps : {
    style: collapseStyle
  };
  if (collapsed && orientation !== "vertical")
    tabListProps["aria-hidden"] = true;
  let tabListclassName = (0, import_utils36.classNames)(/* @__PURE__ */ $parcel$interopDefault10($32d597b82a7aad64$exports), "spectrum-TabsPanel-tabs");
  const tabContent = /* @__PURE__ */ preact_default.createElement("div", __spreadProps(__spreadValues(__spreadValues({}, stylePropsFinal), tabListProps), {
    ref: tablistRef,
    className: (0, import_utils36.classNames)(/* @__PURE__ */ $parcel$interopDefault10($32d597b82a7aad64$exports), "spectrum-Tabs", `spectrum-Tabs--${orientation}`, tabListclassName, {
      "spectrum-Tabs--quiet": isQuiet,
      "spectrum-Tabs--emphasized": isEmphasized,
      ["spectrum-Tabs--compact"]: density === "compact"
    }, orientation === "vertical" && styleProps.className)
  }), [
    ...state.collection
  ].map(
    (item) => /* @__PURE__ */ preact_default.createElement($65ab70ddbed1564b$var$Tab, {
      key: item.key,
      item,
      state,
      orientation
    })
  ), /* @__PURE__ */ preact_default.createElement($65ab70ddbed1564b$var$TabLine, {
    orientation,
    selectedTab
  }));
  if (orientation === "vertical")
    return tabContent;
  else
    return /* @__PURE__ */ preact_default.createElement("div", __spreadProps(__spreadValues({}, styleProps), {
      ref: wrapperRef,
      className: (0, import_utils36.classNames)(/* @__PURE__ */ $parcel$interopDefault10($32d597b82a7aad64$exports), "spectrum-TabsPanel-collapseWrapper", styleProps.className)
    }), /* @__PURE__ */ preact_default.createElement($65ab70ddbed1564b$var$TabPicker, __spreadProps(__spreadValues(__spreadValues({}, props), tabProps), {
      visible: collapsed,
      id: tabPanelProps["aria-labelledby"],
      state,
      className: tabListclassName
    })), tabContent);
}
function $65ab70ddbed1564b$export$5dae8d435677f210(props) {
  const { tabState, tabProps } = (0, preact_exports.useContext)($65ab70ddbed1564b$var$TabContext);
  const { tabListState } = tabState;
  const factory = (nodes) => new $a02d57049d202695$export$d085fb9e920b5ca7(nodes);
  const collection = $7613b1592d41b092$export$6cd28814d92fa9c9(__spreadValues({
    items: tabProps.items
  }, props), factory, {
    suppressTextValueWarning: true
  });
  const selectedItem = tabListState ? collection.getItem(tabListState.selectedKey) : null;
  return /* @__PURE__ */ preact_default.createElement($65ab70ddbed1564b$var$TabPanel, __spreadProps(__spreadValues({}, props), {
    key: tabListState === null || tabListState === void 0 ? void 0 : tabListState.selectedKey
  }), selectedItem && selectedItem.props.children);
}
function $65ab70ddbed1564b$var$TabPanel(props) {
  const { tabState, tabPanelProps: ctxTabPanelProps } = (0, preact_exports.useContext)($65ab70ddbed1564b$var$TabContext);
  const { tabListState } = tabState;
  let ref = (0, preact_exports.useRef)();
  const { tabPanelProps } = $34bce698202e07cb$export$fae0121b5afe572d(props, tabListState, ref);
  let { styleProps } = (0, import_utils36.useStyleProps)(props);
  if (ctxTabPanelProps["aria-labelledby"])
    tabPanelProps["aria-labelledby"] = ctxTabPanelProps["aria-labelledby"];
  return /* @__PURE__ */ preact_default.createElement($907718708eab68af$export$1a38b4ad7f578e1d, {
    focusRingClass: (0, import_utils36.classNames)(/* @__PURE__ */ $parcel$interopDefault10($32d597b82a7aad64$exports), "focus-ring")
  }, /* @__PURE__ */ preact_default.createElement("div", __spreadProps(__spreadValues(__spreadValues({}, styleProps), tabPanelProps), {
    ref,
    className: (0, import_utils36.classNames)(/* @__PURE__ */ $parcel$interopDefault10($32d597b82a7aad64$exports), "spectrum-TabsPanel-tabpanel", styleProps.className)
  }), props.children));
}
function $65ab70ddbed1564b$var$TabPicker(props) {
  let { isDisabled, isEmphasized, isQuiet, state, "aria-labelledby": ariaLabeledBy, "aria-label": ariaLabel, density, className, id, visible } = props;
  let ref = (0, preact_exports.useRef)();
  let [pickerNode, setPickerNode] = (0, preact_exports.useState)(null);
  (0, preact_exports.useEffect)(() => {
    let node = (0, import_utils36.unwrapDOMRef)(ref);
    setPickerNode(node.current);
  }, [
    ref
  ]);
  let items = [
    ...state.collection
  ].map(
    (item) => ({
      rendered: item.rendered,
      textValue: item.textValue,
      id: item.key
    })
  );
  let pickerProps = {
    "aria-labelledby": ariaLabeledBy,
    "aria-label": ariaLabel
  };
  const style = visible ? {} : {
    visibility: "hidden",
    position: "absolute"
  };
  return /* @__PURE__ */ preact_default.createElement("div", {
    className: (0, import_utils36.classNames)(/* @__PURE__ */ $parcel$interopDefault10($32d597b82a7aad64$exports), "spectrum-Tabs", "spectrum-Tabs--horizontal", "spectrum-Tabs--isCollapsed", {
      "spectrum-Tabs--quiet": isQuiet,
      ["spectrum-Tabs--compact"]: density === "compact",
      "spectrum-Tabs--emphasized": isEmphasized
    }, className),
    style,
    "aria-hidden": visible ? void 0 : true
  }, /* @__PURE__ */ preact_default.createElement(import_utils36.SlotProvider, {
    slots: {
      icon: {
        size: "S",
        UNSAFE_className: (0, import_utils36.classNames)(/* @__PURE__ */ $parcel$interopDefault10($32d597b82a7aad64$exports), "spectrum-Icon")
      },
      button: {
        focusRingClass: (0, import_utils36.classNames)(/* @__PURE__ */ $parcel$interopDefault10($32d597b82a7aad64$exports), "focus-ring")
      }
    }
  }, /* @__PURE__ */ preact_default.createElement(
    $51664a9007a3c6f9$export$ba25329847403e11,
    __spreadProps(__spreadValues({}, pickerProps), {
      id,
      items,
      ref,
      isQuiet: true,
      isDisabled: !visible || isDisabled,
      selectedKey: state.selectedKey,
      disabledKeys: state.disabledKeys,
      onSelectionChange: state.setSelectedKey
    }),
    (item) => /* @__PURE__ */ preact_default.createElement($c1d7fb2ec91bae71$export$6d08773d2e66f8f2, {
      textValue: item.textValue
    }, item.rendered)
  ), pickerNode && /* @__PURE__ */ preact_default.createElement($65ab70ddbed1564b$var$TabLine, {
    orientation: "horizontal",
    selectedTab: pickerNode,
    selectedKey: state.selectedKey
  })));
}
var $65ab70ddbed1564b$export$b2539bed5023c21c = /* @__PURE__ */ preact_default.forwardRef($65ab70ddbed1564b$var$Tabs);

// ../../node_modules/@react-spectrum/theme-default/dist/module.js
function $parcel$interopDefault11(a) {
  return a && a.__esModule ? a.default : a;
}
function $parcel$export11(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $ea2e8e3460b67692$exports = {};
$parcel$export11($ea2e8e3460b67692$exports, "spectrum--darkest", () => $ea2e8e3460b67692$export$4ecdba604f5f1f44, (v) => $ea2e8e3460b67692$export$4ecdba604f5f1f44 = v);
var $ea2e8e3460b67692$export$4ecdba604f5f1f44;
$ea2e8e3460b67692$export$4ecdba604f5f1f44 = "spectrum--darkest_256eeb";
var $5b6ea5874ed9af7b$exports = {};
$parcel$export11($5b6ea5874ed9af7b$exports, "spectrum", () => $5b6ea5874ed9af7b$export$3311ab3a441bc141, (v) => $5b6ea5874ed9af7b$export$3311ab3a441bc141 = v);
$parcel$export11($5b6ea5874ed9af7b$exports, "spectrum--medium", () => $5b6ea5874ed9af7b$export$4c0c83b3f4303ef8, (v) => $5b6ea5874ed9af7b$export$4c0c83b3f4303ef8 = v);
$parcel$export11($5b6ea5874ed9af7b$exports, "spectrum--large", () => $5b6ea5874ed9af7b$export$a88a8dbe29386d31, (v) => $5b6ea5874ed9af7b$export$a88a8dbe29386d31 = v);
$parcel$export11($5b6ea5874ed9af7b$exports, "spectrum--darkest", () => $5b6ea5874ed9af7b$export$4ecdba604f5f1f44, (v) => $5b6ea5874ed9af7b$export$4ecdba604f5f1f44 = v);
$parcel$export11($5b6ea5874ed9af7b$exports, "spectrum--dark", () => $5b6ea5874ed9af7b$export$68dc111a79481afd, (v) => $5b6ea5874ed9af7b$export$68dc111a79481afd = v);
$parcel$export11($5b6ea5874ed9af7b$exports, "spectrum--light", () => $5b6ea5874ed9af7b$export$efb37c2f79da8163, (v) => $5b6ea5874ed9af7b$export$efb37c2f79da8163 = v);
$parcel$export11($5b6ea5874ed9af7b$exports, "spectrum--lightest", () => $5b6ea5874ed9af7b$export$baaa804dc80cce18, (v) => $5b6ea5874ed9af7b$export$baaa804dc80cce18 = v);
var $5b6ea5874ed9af7b$export$3311ab3a441bc141;
var $5b6ea5874ed9af7b$export$4c0c83b3f4303ef8;
var $5b6ea5874ed9af7b$export$a88a8dbe29386d31;
var $5b6ea5874ed9af7b$export$4ecdba604f5f1f44;
var $5b6ea5874ed9af7b$export$68dc111a79481afd;
var $5b6ea5874ed9af7b$export$efb37c2f79da8163;
var $5b6ea5874ed9af7b$export$baaa804dc80cce18;
$5b6ea5874ed9af7b$export$3311ab3a441bc141 = "spectrum_9e130c";
$5b6ea5874ed9af7b$export$4c0c83b3f4303ef8 = "spectrum--medium_9e130c";
$5b6ea5874ed9af7b$export$a88a8dbe29386d31 = "spectrum--large_9e130c";
$5b6ea5874ed9af7b$export$4ecdba604f5f1f44 = "spectrum--darkest_9e130c";
$5b6ea5874ed9af7b$export$68dc111a79481afd = "spectrum--dark_9e130c";
$5b6ea5874ed9af7b$export$efb37c2f79da8163 = "spectrum--light_9e130c";
$5b6ea5874ed9af7b$export$baaa804dc80cce18 = "spectrum--lightest_9e130c";
var $b2eefcc3e5fdb373$exports = {};
$parcel$export11($b2eefcc3e5fdb373$exports, "spectrum--large", () => $b2eefcc3e5fdb373$export$a88a8dbe29386d31, (v) => $b2eefcc3e5fdb373$export$a88a8dbe29386d31 = v);
var $b2eefcc3e5fdb373$export$a88a8dbe29386d31;
$b2eefcc3e5fdb373$export$a88a8dbe29386d31 = "spectrum--large_c40598";
var $729ae839c55d8d77$exports = {};
$parcel$export11($729ae839c55d8d77$exports, "spectrum--light", () => $729ae839c55d8d77$export$efb37c2f79da8163, (v) => $729ae839c55d8d77$export$efb37c2f79da8163 = v);
var $729ae839c55d8d77$export$efb37c2f79da8163;
$729ae839c55d8d77$export$efb37c2f79da8163 = "spectrum--light_a40724";
var $b4d117254fac085c$exports = {};
$parcel$export11($b4d117254fac085c$exports, "spectrum--medium", () => $b4d117254fac085c$export$4c0c83b3f4303ef8, (v) => $b4d117254fac085c$export$4c0c83b3f4303ef8 = v);
var $b4d117254fac085c$export$4c0c83b3f4303ef8;
$b4d117254fac085c$export$4c0c83b3f4303ef8 = "spectrum--medium_4b172c";
var $bf24a13e98395dd3$export$bca14c5b3b88a9c9 = {
  global: /* @__PURE__ */ $parcel$interopDefault11($5b6ea5874ed9af7b$exports),
  light: /* @__PURE__ */ $parcel$interopDefault11($729ae839c55d8d77$exports),
  dark: /* @__PURE__ */ $parcel$interopDefault11($ea2e8e3460b67692$exports),
  medium: /* @__PURE__ */ $parcel$interopDefault11($b4d117254fac085c$exports),
  large: /* @__PURE__ */ $parcel$interopDefault11($b2eefcc3e5fdb373$exports)
};

// ../mobx-preact-lite/dist/index.js
import { useState } from "/public/vendor/preact.min.js";
import { unstable_batchedUpdates } from "/public/vendor/preact.min.js";
import React from "/public/vendor/preact.min.js";
import { forwardRef, memo } from "/public/vendor/preact.min.js";
import { useState as useState2 } from "/public/vendor/preact.min.js";
import { useState as useState4 } from "/public/vendor/preact.min.js";
import { useState as useState3 } from "/public/vendor/preact.min.js";
if (!useState) {
  throw new Error("mobx-react-lite requires React with Hooks support");
}
if (!makeObservable) {
  throw new Error("mobx-react-lite@3 requires mobx at least version 6 to be available");
}
function defaultNoopBatch(callback) {
  callback();
}
function observerBatching(reactionScheduler3) {
  if (!reactionScheduler3) {
    reactionScheduler3 = defaultNoopBatch;
    if (true) {
      console.warn("[MobX] Failed to get unstable_batched updates from react-dom / react-native");
    }
  }
  configure({ reactionScheduler: reactionScheduler3 });
}
function printDebugValue(v) {
  return getDependencyTree(v);
}
var FinalizationRegistryLocal = typeof FinalizationRegistry === "undefined" ? void 0 : FinalizationRegistry;
function createTrackingData(reaction) {
  var trackingData = {
    reaction,
    mounted: false,
    changedBeforeMount: false,
    cleanAt: Date.now() + CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS
  };
  return trackingData;
}
var CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS = 1e4;
var CLEANUP_TIMER_LOOP_MILLIS = 1e4;
function createReactionCleanupTrackingUsingFinalizationRegister(FinalizationRegistry2) {
  var cleanupTokenToReactionTrackingMap = /* @__PURE__ */ new Map();
  var globalCleanupTokensCounter = 1;
  var registry = new FinalizationRegistry2(function cleanupFunction(token) {
    var trackedReaction = cleanupTokenToReactionTrackingMap.get(token);
    if (trackedReaction) {
      trackedReaction.reaction.dispose();
      cleanupTokenToReactionTrackingMap.delete(token);
    }
  });
  return {
    addReactionToTrack: function(reactionTrackingRef, reaction, objectRetainedByReact) {
      var token = globalCleanupTokensCounter++;
      registry.register(objectRetainedByReact, token, reactionTrackingRef);
      reactionTrackingRef.current = createTrackingData(reaction);
      reactionTrackingRef.current.finalizationRegistryCleanupToken = token;
      cleanupTokenToReactionTrackingMap.set(token, reactionTrackingRef.current);
      return reactionTrackingRef.current;
    },
    recordReactionAsCommitted: function(reactionRef) {
      registry.unregister(reactionRef);
      if (reactionRef.current && reactionRef.current.finalizationRegistryCleanupToken) {
        cleanupTokenToReactionTrackingMap.delete(reactionRef.current.finalizationRegistryCleanupToken);
      }
    },
    forceCleanupTimerToRunNowForTests: function() {
    },
    resetCleanupScheduleForTests: function() {
    }
  };
}
var __values = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
function createTimerBasedReactionCleanupTracking() {
  var uncommittedReactionRefs = /* @__PURE__ */ new Set();
  var reactionCleanupHandle;
  function forceCleanupTimerToRunNowForTests22() {
    if (reactionCleanupHandle) {
      clearTimeout(reactionCleanupHandle);
      cleanUncommittedReactions();
    }
  }
  function resetCleanupScheduleForTests22() {
    var e_1, _a22;
    if (uncommittedReactionRefs.size > 0) {
      try {
        for (var uncommittedReactionRefs_1 = __values(uncommittedReactionRefs), uncommittedReactionRefs_1_1 = uncommittedReactionRefs_1.next(); !uncommittedReactionRefs_1_1.done; uncommittedReactionRefs_1_1 = uncommittedReactionRefs_1.next()) {
          var ref = uncommittedReactionRefs_1_1.value;
          var tracking = ref.current;
          if (tracking) {
            tracking.reaction.dispose();
            ref.current = null;
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (uncommittedReactionRefs_1_1 && !uncommittedReactionRefs_1_1.done && (_a22 = uncommittedReactionRefs_1.return))
            _a22.call(uncommittedReactionRefs_1);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      uncommittedReactionRefs.clear();
    }
    if (reactionCleanupHandle) {
      clearTimeout(reactionCleanupHandle);
      reactionCleanupHandle = void 0;
    }
  }
  function ensureCleanupTimerRunning() {
    if (reactionCleanupHandle === void 0) {
      reactionCleanupHandle = setTimeout(cleanUncommittedReactions, CLEANUP_TIMER_LOOP_MILLIS);
    }
  }
  function scheduleCleanupOfReactionIfLeaked(ref) {
    uncommittedReactionRefs.add(ref);
    ensureCleanupTimerRunning();
  }
  function recordReactionAsCommitted22(reactionRef) {
    uncommittedReactionRefs.delete(reactionRef);
  }
  function cleanUncommittedReactions() {
    reactionCleanupHandle = void 0;
    var now = Date.now();
    uncommittedReactionRefs.forEach(function(ref) {
      var tracking = ref.current;
      if (tracking) {
        if (now >= tracking.cleanAt) {
          tracking.reaction.dispose();
          ref.current = null;
          uncommittedReactionRefs.delete(ref);
        }
      }
    });
    if (uncommittedReactionRefs.size > 0) {
      ensureCleanupTimerRunning();
    }
  }
  return {
    addReactionToTrack: function(reactionTrackingRef, reaction, objectRetainedByReact) {
      reactionTrackingRef.current = createTrackingData(reaction);
      scheduleCleanupOfReactionIfLeaked(reactionTrackingRef);
      return reactionTrackingRef.current;
    },
    recordReactionAsCommitted: recordReactionAsCommitted22,
    forceCleanupTimerToRunNowForTests: forceCleanupTimerToRunNowForTests22,
    resetCleanupScheduleForTests: resetCleanupScheduleForTests22
  };
}
var _a = FinalizationRegistryLocal ? createReactionCleanupTrackingUsingFinalizationRegister(FinalizationRegistryLocal) : createTimerBasedReactionCleanupTracking();
var addReactionToTrack = _a.addReactionToTrack;
var recordReactionAsCommitted = _a.recordReactionAsCommitted;
var resetCleanupScheduleForTests = _a.resetCleanupScheduleForTests;
var forceCleanupTimerToRunNowForTests = _a.forceCleanupTimerToRunNowForTests;
var globalIsUsingStaticRendering = false;
function isUsingStaticRendering() {
  return globalIsUsingStaticRendering;
}
var __read = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
function observerComponentNameFor(baseComponentName) {
  return "observer".concat(baseComponentName);
}
var ObjectToBeRetainedByReact = function() {
  function ObjectToBeRetainedByReact22() {
  }
  return ObjectToBeRetainedByReact22;
}();
function objectToBeRetainedByReactFactory() {
  return new ObjectToBeRetainedByReact();
}
function useObserver(fn, baseComponentName) {
  if (baseComponentName === void 0) {
    baseComponentName = "observed";
  }
  if (isUsingStaticRendering()) {
    return fn();
  }
  var _a22 = __read(React.useState(objectToBeRetainedByReactFactory), 1), objectRetainedByReact = _a22[0];
  var _b = __read(React.useState(), 2), setState = _b[1];
  var forceUpdate = function() {
    return setState([]);
  };
  var reactionTrackingRef = React.useRef(null);
  if (!reactionTrackingRef.current) {
    var newReaction = new Reaction(observerComponentNameFor(baseComponentName), function() {
      if (trackingData_1.mounted) {
        forceUpdate();
      } else {
        trackingData_1.changedBeforeMount = true;
      }
    });
    var trackingData_1 = addReactionToTrack(reactionTrackingRef, newReaction, objectRetainedByReact);
  }
  var reaction = reactionTrackingRef.current.reaction;
  React.useDebugValue(reaction, printDebugValue);
  React.useEffect(function() {
    recordReactionAsCommitted(reactionTrackingRef);
    if (reactionTrackingRef.current) {
      reactionTrackingRef.current.mounted = true;
      if (reactionTrackingRef.current.changedBeforeMount) {
        reactionTrackingRef.current.changedBeforeMount = false;
        forceUpdate();
      }
    } else {
      reactionTrackingRef.current = {
        reaction: new Reaction(observerComponentNameFor(baseComponentName), function() {
          forceUpdate();
        }),
        mounted: true,
        changedBeforeMount: false,
        cleanAt: Infinity
      };
      forceUpdate();
    }
    return function() {
      reactionTrackingRef.current.reaction.dispose();
      reactionTrackingRef.current = null;
    };
  }, []);
  var rendering;
  var exception;
  reaction.track(function() {
    try {
      rendering = fn();
    } catch (e) {
      exception = e;
    }
  });
  if (exception) {
    throw exception;
  }
  return rendering;
}
var warnObserverOptionsDeprecated = true;
var hasSymbol = typeof Symbol === "function" && Symbol.for;
var ReactForwardRefSymbol = hasSymbol ? Symbol.for("react.forward_ref") : typeof forwardRef === "function" && forwardRef(function(props) {
  return null;
})["$$typeof"];
var ReactMemoSymbol = hasSymbol ? Symbol.for("react.memo") : typeof memo === "function" && memo(function(props) {
  return null;
})["$$typeof"];
function observer(baseComponent, options) {
  var _a22;
  if (warnObserverOptionsDeprecated && options) {
    warnObserverOptionsDeprecated = false;
    console.warn("[mobx-react-lite] `observer(fn, { forwardRef: true })` is deprecated, use `observer(React.forwardRef(fn))`");
  }
  if (ReactMemoSymbol && baseComponent["$$typeof"] === ReactMemoSymbol) {
    throw new Error("[mobx-react-lite] You are trying to use `observer` on a function component wrapped in either another `observer` or `React.memo`. The observer already applies 'React.memo' for you.");
  }
  if (isUsingStaticRendering()) {
    return baseComponent;
  }
  var useForwardRef = (_a22 = options === null || options === void 0 ? void 0 : options.forwardRef) !== null && _a22 !== void 0 ? _a22 : false;
  var render4 = baseComponent;
  var baseComponentName = baseComponent.displayName || baseComponent.name;
  if (ReactForwardRefSymbol && baseComponent["$$typeof"] === ReactForwardRefSymbol) {
    useForwardRef = true;
    render4 = baseComponent["render"];
    if (typeof render4 !== "function") {
      throw new Error("[mobx-react-lite] `render` property of ForwardRef was not a function");
    }
  }
  var observerComponent = function(props, ref) {
    return useObserver(function() {
      return render4(props, ref);
    }, baseComponentName);
  };
  if (baseComponentName !== "") {
    ;
    observerComponent.displayName = baseComponentName;
  }
  if (baseComponent.contextTypes) {
    ;
    observerComponent.contextTypes = baseComponent.contextTypes;
  }
  if (useForwardRef) {
    observerComponent = forwardRef(observerComponent);
  }
  observerComponent = memo(observerComponent);
  copyStaticProperties(baseComponent, observerComponent);
  if (true) {
    Object.defineProperty(observerComponent, "contextTypes", {
      set: function() {
        var _a3;
        throw new Error("[mobx-react-lite] `".concat(this.displayName || ((_a3 = this.type) === null || _a3 === void 0 ? void 0 : _a3.displayName) || "Component", ".contextTypes` must be set before applying `observer`."));
      }
    });
  }
  return observerComponent;
}
var hoistBlackList = {
  $$typeof: true,
  render: true,
  compare: true,
  type: true,
  displayName: true
};
function copyStaticProperties(base, target) {
  Object.keys(base).forEach(function(key) {
    if (!hoistBlackList[key]) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));
    }
  });
}
function ObserverComponent(_a22) {
  var children = _a22.children, render4 = _a22.render;
  var component = children || render4;
  if (typeof component !== "function") {
    return null;
  }
  return useObserver(component);
}
if (true) {
  ObserverComponent.propTypes = {
    children: ObserverPropsCheck,
    render: ObserverPropsCheck
  };
}
ObserverComponent.displayName = "Observer";
function ObserverPropsCheck(props, key, componentName, location, propFullName) {
  var extraKey = key === "children" ? "render" : "children";
  var hasProp2 = typeof props[key] === "function";
  var hasExtraProp = typeof props[extraKey] === "function";
  if (hasProp2 && hasExtraProp) {
    return new Error("MobX Observer: Do not use children and render in the same time in`" + componentName);
  }
  if (hasProp2 || hasExtraProp) {
    return null;
  }
  return new Error("Invalid prop `" + propFullName + "` of type `" + typeof props[key] + "` supplied to `" + componentName + "`, expected `function`.");
}
observerBatching(unstable_batchedUpdates);

// src/views/Settings/panels/Document.tsx
import { jsx } from "/public/vendor/preact.min.js";
var DocumentPanel = observer(() => {
  const { authStore, settingsStore } = useRootStore();
  return /* @__PURE__ */ jsx($b9606c0c41d55371$export$27a5bd065ad55220, {
    children: /* @__PURE__ */ jsx($cd449e8defa988f0$export$5f1af8db9871e1d6, {
      children: "document"
    })
  });
});

// src/views/Settings/panels/Global.tsx
import { jsx as jsx2 } from "/public/vendor/preact.min.js";
var GlobalPanel = observer(() => {
  const { authStore, settingsStore } = useRootStore();
  return /* @__PURE__ */ jsx2($b9606c0c41d55371$export$27a5bd065ad55220, {
    children: /* @__PURE__ */ jsx2($cd449e8defa988f0$export$5f1af8db9871e1d6, {
      children: "global"
    })
  });
});

// src/views/Settings/panels/ids.ts
var ids_exports = {};
__export(ids_exports, {
  Document: () => Document,
  Global: () => Global,
  Node: () => Node2,
  User: () => User
});
var Node2 = "node";
var Document = "document";
var Global = "global";
var User = "user";

// src/views/Settings/panels/Node.tsx
import { jsx as jsx3 } from "/public/vendor/preact.min.js";
var NodePanel = observer(() => {
  const { authStore, settingsStore } = useRootStore();
  return /* @__PURE__ */ jsx3($b9606c0c41d55371$export$27a5bd065ad55220, {
    children: /* @__PURE__ */ jsx3($cd449e8defa988f0$export$5f1af8db9871e1d6, {
      children: "node"
    })
  });
});

// src/spectrumIcons.ts
var import_Edit = __toESM(require_Edit2(), 1);
var Edit = import_Edit.default.default;

// src/overlays/progress.tsx
import { PureComponent } from "/public/vendor/preact.min.js";
import { render as render2 } from "/public/vendor/preact.min.js";
import { jsx as jsx4, jsxs } from "/public/vendor/preact.min.js";
function getOpts(opts) {
  return __spreadValues({
    title: opts.title || "Progress",
    doneTitle: opts.title,
    errorTitle: "Error",
    indeterminate: false
  }, opts);
}
var Progress = class extends PureComponent {
  constructor(props) {
    var _a3;
    super(props);
    this.state = {
      cancelCallback: () => {
      },
      phantomTicks: 0,
      totalTicks: props.totalTicks,
      doneTicks: 0,
      taskName: "In progress",
      error: false,
      done: false,
      indeterminate: (_a3 = props.indeterminate) != null ? _a3 : false
    };
  }
  setTotalTicks(newTotal) {
    if (this.state.totalTicks == null) {
      this.setState({ totalTicks: newTotal });
      return;
    }
    const { doneTicks, phantomTicks, totalTicks } = this.state;
    const newPhantom = Math.ceil(newTotal * (doneTicks + phantomTicks) / totalTicks) - doneTicks;
    this.setState({ totalTicks: newTotal, phantomTicks: newPhantom });
  }
  addDoneTicks(ticks) {
    let { phantomTicks, doneTicks } = this.state;
    if (phantomTicks > 0) {
      if (phantomTicks >= ticks) {
        phantomTicks -= ticks;
        doneTicks += ticks;
      } else {
        phantomTicks = 0;
        doneTicks += ticks - phantomTicks;
      }
    } else {
      doneTicks += ticks;
    }
    this.setState({
      doneTicks,
      phantomTicks
    });
  }
  get progress() {
    if (this.state.done) {
      return 100;
    }
    if (this.state.totalTicks == null) {
      return -1;
    }
    const { totalTicks, doneTicks, phantomTicks } = this.state;
    return Math.min((doneTicks + phantomTicks) / totalTicks * 100, 99);
  }
  reset() {
    this.setState({
      phantomTicks: 0,
      totalTicks: void 0,
      doneTicks: 0,
      taskName: "-",
      error: false,
      done: false,
      indeterminate: false
    });
  }
  done() {
    this.setState({ done: true });
  }
  async close(reason) {
    await this.props.close(reason);
  }
  async cancel(reason) {
    console.debug(`[Progress] cancel() reason=${reason}`);
    const { cancelCallback } = this.state;
    const { close } = this.props;
    if (cancelCallback) {
      await cancelCallback(reason);
    }
    await close();
  }
  setMessage(msg = "") {
    const node = document.querySelector("#progress-message");
    if (!node) {
      return;
    }
    if (typeof msg === "string") {
      node.innerHTML = msg;
    } else {
      render2(msg, node);
    }
  }
  render() {
    const {
      close,
      title,
      errorTitle,
      doneTitle
    } = this.props;
    const {
      done,
      error,
      taskName,
      indeterminate
    } = this.state;
    const cancel = this.cancel.bind(this);
    const errMsg = typeof error === "string" ? error : "Something went wrong!";
    const pct = this.progress;
    return /* @__PURE__ */ jsx4(import_provider8.Provider, {
      theme: $bf24a13e98395dd3$export$bca14c5b3b88a9c9,
      colorScheme: "light",
      children: /* @__PURE__ */ jsx4("div", {
        className: "dialog",
        children: /* @__PURE__ */ jsxs("form", {
          children: [
            /* @__PURE__ */ jsx4("h1", {
              children: error ? errorTitle : done ? doneTitle : title
            }),
            /* @__PURE__ */ jsx4("hr", {}),
            /* @__PURE__ */ jsxs("span", {
              className: "col",
              children: [
                /* @__PURE__ */ jsx4("div", {
                  className: "content",
                  children: /* @__PURE__ */ jsx4("span", {
                    className: "row around progress-bar",
                    children: error ? /* @__PURE__ */ jsx4("p", {
                      children: errMsg
                    }) : indeterminate && done ? "DONE" : /* @__PURE__ */ jsx4($551ca31cb687f352$export$c17561cb55d4db30, {
                      width: "100%",
                      label: done ? "Done" : taskName,
                      minValue: 0,
                      maxValue: 100,
                      isIndeterminate: indeterminate,
                      value: indeterminate ? void 0 : pct
                    })
                  })
                }),
                /* @__PURE__ */ jsx4("span", {
                  className: "row",
                  children: /* @__PURE__ */ jsx4("div", {
                    id: "progress-message"
                  })
                }),
                /* @__PURE__ */ jsx4("span", {
                  className: "row end",
                  children: error || done ? /* @__PURE__ */ jsx4("button", {
                    className: "button-submit",
                    "uxp-variant": "cta",
                    onClick: close,
                    children: "Close"
                  }) : /* @__PURE__ */ jsx4("button", {
                    className: "button-submit",
                    "uxp-variant": "warning",
                    onClick: cancel,
                    children: "Cancel"
                  })
                })
              ]
            })
          ]
        })
      })
    });
  }
  static async present(opts) {
  }
};
function makeProgressContext(opts) {
  const cleanOpts = getOpts(opts);
  const close = () => root_store_default.popOverlay();
  root_store_default.pushOverlay(/* @__PURE__ */ jsx4(Progress, __spreadValues({
    close
  }, cleanOpts)));
  const cancelHandlers = [];
  const ctx = __spreadProps(__spreadValues({}, opts.baseCtx || { rootStore: root_store_default }), {
    canceled: false,
    setMessage: (msg) => {
      console.log("setMessage: ", msg);
    },
    setTotalTicks: (ticks) => {
      console.log("setTotalTicks: ", ticks);
    },
    task: (taskName) => {
      console.log("set task name: ", taskName);
    },
    progress: (ticks) => {
      console.log("addDoneTicks: ", ticks);
    },
    cancel: (reason) => {
      console.log("cancel reason: ", reason);
    },
    onCancel: (handler) => {
      const i = cancelHandlers.push(handler);
      return () => {
        delete cancelHandlers[i - 1];
      };
    },
    done: () => {
      console.log("done: ");
    }
  });
  const cancelCallback = async () => {
    ctx.canceled = true;
    await Promise.allSettled(cancelHandlers.map((ch) => ch && ch()));
  };
  Object.defineProperties(ctx, {
    totalTicks: {
      get: () => 0
    },
    doneTicks: {
      get: () => 0
    },
    percent: {
      get: () => 0
    }
  });
  return ctx;
}

// src/actions/auth.ts
var connect = (provider) => async () => {
  const ctx = makeProgressContext({
    title: `Connecting ${capitalize(provider)} account`,
    doneTitle: `Connected ${capitalize(provider)} account`,
    indeterminate: true
  });
  try {
    await ctx.rootStore.authStore.authenticate(provider, ctx);
  } catch (e) {
    ctx.done();
    console.error("[actions] connect() error: ", e);
  }
  ctx.done();
};

// src/views/Settings/panels/User.tsx
import { Fragment as Fragment2, jsx as jsx5, jsxs as jsxs2 } from "/public/vendor/preact.min.js";
var UserPanel = observer(() => {
  const { authStore, settingsStore } = useRootStore();
  return /* @__PURE__ */ jsx5(Fragment2, {
    children: /* @__PURE__ */ jsxs2($bd4bfa55854eb3bf$export$69b1032f2ecdf404, {
      children: [
        /* @__PURE__ */ jsxs2($042ad0b3a4a55b33$export$cfc7921d29ef7b80, {
          onPress: connect("microsoft"),
          children: [
            /* @__PURE__ */ jsx5(Edit, {}),
            /* @__PURE__ */ jsx5($cd449e8defa988f0$export$5f1af8db9871e1d6, {
              children: "Connect Microsoft"
            })
          ]
        }),
        /* @__PURE__ */ jsxs2($042ad0b3a4a55b33$export$cfc7921d29ef7b80, {
          onPress: connect("google"),
          children: [
            /* @__PURE__ */ jsx5(Edit, {}),
            /* @__PURE__ */ jsx5($cd449e8defa988f0$export$5f1af8db9871e1d6, {
              children: "Connect Google"
            })
          ]
        })
      ]
    })
  });
});

// src/views/Settings/panels/index.tsx
import { jsx as jsx6 } from "/public/vendor/preact.min.js";
var panels = [
  {
    id: Node2,
    name: "Node",
    children: /* @__PURE__ */ jsx6(NodePanel, {})
  },
  {
    id: Document,
    name: "Document",
    children: /* @__PURE__ */ jsx6(DocumentPanel, {})
  },
  {
    id: Global,
    name: "Global",
    children: /* @__PURE__ */ jsx6(GlobalPanel, {})
  },
  {
    id: User,
    name: "User",
    children: /* @__PURE__ */ jsx6(UserPanel, {})
  }
];
var panels_default = panels;

// src/state/stores/settings.store.ts
var SettingsStore = class extends BaseStore {
  constructor(root3) {
    super(root3);
    this.enabled = false;
    this.panelId = void 0;
    makeObservable(this, {
      enabled: observable,
      panelId: observable,
      nodePanelEnabled: computed,
      enabledPanels: computed,
      enable: action,
      setPanelId: action
    });
  }
  setPanelId(id) {
    this.panelId = id;
  }
  get nodePanelEnabled() {
    return !!this.root.nodeId;
  }
  get enabledPanels() {
    if (typeof this.root.initPayload.panels === "undefined") {
      const enabled = ["document", "global", "user"];
      if (this.nodePanelEnabled) {
        enabled.push("node");
      }
      return enabled;
    }
    return this.root.initPayload.panels;
  }
  async enable() {
    if (this.enabled) {
      return;
    }
    this.enabled = true;
    const enabled = this.enabledPanels;
    if (enabled.includes("node")) {
      this.setPanelId(ids_exports.Node);
    } else if (enabled.includes("document")) {
      this.setPanelId(ids_exports.Document);
    } else if (enabled.includes("user")) {
      this.setPanelId(ids_exports.User);
    } else if (enabled.includes("global")) {
      this.setPanelId(ids_exports.Global);
    }
  }
  onInit() {
    console.debug("[SettingsStore] ready!");
  }
  onReset() {
    this.enabled = false;
  }
};

// src/state/stores/root.store.ts
var _RootStore = class {
  constructor() {
    this.ready = false;
    this.authStore = void 0;
    this.selectionStore = void 0;
    this.settingsStore = void 0;
    this.viewType = void 0;
    this.nodeType = void 0;
    this.nodeId = void 0;
    this.viewReady = false;
    this.initPayload = void 0;
    this.theme = void 0;
    this.overlayStack = [];
    this.authStore = new AuthStore(this);
    this.selectionStore = new SelectionStore(this);
    this.settingsStore = new SettingsStore(this);
    makeObservable(this, {
      ready: observable,
      viewType: observable,
      nodeType: observable,
      nodeId: observable,
      viewReady: observable,
      initPayload: observable,
      theme: observable,
      overlayStack: observable,
      _init: action,
      reset: action,
      setNodeId: action,
      setNodeType: action,
      setViewType: action,
      setViewReady: action,
      setInitPayload: action,
      setTheme: action,
      pushOverlay: action
    });
    this._initPromise = this._init();
  }
  get whenReady() {
    return this._initPromise;
  }
  pushOverlay(overlay) {
    this.overlayStack.push(overlay);
  }
  popOverlay() {
    this.overlayStack.pop();
  }
  setTheme(theme) {
    console.log(`setTheme(${theme})`);
    this.theme = theme;
  }
  setNodeId(id) {
    console.log(`setNodeId(${id})`);
    this.nodeId = id;
  }
  setNodeType(type) {
    console.log(`setNodeType(${type})`);
    this.nodeType = type;
  }
  setViewType(type) {
    console.log(`setViewType(${type})`);
    this.viewType = type;
  }
  setViewReady(ready) {
    console.log(`setViewReady(${ready})`);
    this.viewReady = ready;
  }
  setInitPayload(payload) {
    console.log(`setInitPayload(${payload})`);
    this.initPayload = payload;
  }
  async _init() {
    await Promise.all([
      this.authStore.init(),
      this.selectionStore.init(),
      this.settingsStore.init()
    ]);
    runInAction(() => {
      console.debug("[RootStore] ready!");
      this.ready = true;
    });
  }
  async reset() {
    await Promise.all([
      this.authStore.reset(),
      this.selectionStore.reset(),
      this.settingsStore.reset()
    ]);
  }
};
var root = new _RootStore();
window.store = root;
var root_store_default = root;

// src/state/stores/index.ts
var stores_default = root_store_default;

// src/state/provider.tsx
import { jsx as jsx7 } from "/public/vendor/preact.min.js";
var StoreContext = createContext2(void 0);
function RootStoreProvider({ children }) {
  return /* @__PURE__ */ jsx7(StoreContext.Provider, {
    value: stores_default,
    children
  });
}
function useRootStore() {
  const context = useContext(StoreContext);
  if (typeof context === "undefined") {
    throw new Error("useRootStore() must be used within RootStoreProvider");
  }
  return context;
}

// src/Provider.tsx
import { jsx as jsx8 } from "/public/vendor/preact.min.js";
var ErrorBoundary = class extends PureComponent2 {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }
  static getDerivedStateFromError(error) {
    console.log("[ErrorBoundary] getDerivedStateFromError()", error);
    return error;
  }
  componentDidCatch(error, errorInfo) {
    console.log("[ErrorBoundary] componentDidCatch()", error, errorInfo);
  }
  render() {
    return this.props.children;
  }
};
var ThemeProvider = ({
  children
}) => {
  const store = useRootStore();
  useEffect(() => {
    if (document.documentElement.classList.contains("figma-dark")) {
      store.setTheme("dark");
    }
  }, []);
  return /* @__PURE__ */ jsx8(import_provider8.Provider, {
    theme: $bf24a13e98395dd3$export$bca14c5b3b88a9c9,
    scale: "medium",
    colorScheme: store.theme,
    children
  });
};
var Provider_default = ({
  children
}) => {
  return /* @__PURE__ */ jsx8(ErrorBoundary, {
    children: /* @__PURE__ */ jsx8(RootStoreProvider, {
      children: /* @__PURE__ */ jsx8(ThemeProvider, {
        children
      })
    })
  });
};

// src/App.tsx
import { useEffect as useEffect4 } from "/public/vendor/preact.min.js";
import MessageBus3 from "/public/vendor/MessageBus.min.js";

// src/views/ids.ts
var ViewId = {
  Config: "config",
  Settings: "settings"
};
var ids_default = ViewId;

// src/views/Configure.tsx
import { useEffect as useEffect2 } from "/public/vendor/preact.min.js";
import { Fragment as Fragment3 } from "/public/vendor/preact.min.js";
import { Fragment as Fragment4, jsx as jsx9, jsxs as jsxs3 } from "/public/vendor/preact.min.js";
var ConfigureView = observer(() => {
  const store = useRootStore();
  const { selectionStore: selection } = store;
  useEffect2(() => {
    (async () => {
      await selection.enable();
      store.setViewReady(true);
    })().catch((e) => {
      console.error("Failed to initialize ConfigureView: ", e);
    });
  }, []);
  console.log("selection: ", selection.nodes);
  return /* @__PURE__ */ jsxs3(Fragment4, {
    children: [
      /* @__PURE__ */ jsxs3("p", {
        children: [
          store.nodeType,
          " (",
          store.nodeId,
          ")"
        ]
      }),
      !selection.nodes || !selection.nodes.length ? /* @__PURE__ */ jsx9("p", {
        children: "Select a node to configure it!"
      }) : !selection.nodesUnderRoot.length ? /* @__PURE__ */ jsxs3("p", {
        children: [
          "Cannot configure a node outside of the ",
          store.nodeType.toLowerCase()
        ]
      }) : selection.nodesUnderRoot.map((node) => {
        return /* @__PURE__ */ jsxs3(Fragment3, {
          children: [
            /* @__PURE__ */ jsxs3("p", {
              children: [
                "Selected: ",
                node.name,
                " (",
                node.id,
                ")"
              ]
            }),
            /* @__PURE__ */ jsxs3("p", {
              children: [
                "Type: (",
                node.type,
                ")"
              ]
            })
          ]
        }, node.id);
      })
    ]
  });
});
var Configure_default = ConfigureView;

// src/views/Settings/index.tsx
import { useCallback, useEffect as useEffect3, useState as useState9 } from "/public/vendor/preact.min.js";

// ../../node_modules/mobx-react-lite/es/utils/assertEnvironment.js
init_preact();
if (!preact_exports.useState) {
  throw new Error("mobx-react-lite requires React with Hooks support");
}
if (!makeObservable) {
  throw new Error("mobx-react-lite@3 requires mobx at least version 6 to be available");
}

// ../../node_modules/mobx-react-lite/es/utils/reactBatchedUpdates.js
init_preact();

// ../../node_modules/mobx-react-lite/es/utils/observerBatching.js
function defaultNoopBatch2(callback) {
  callback();
}
function observerBatching2(reactionScheduler3) {
  if (!reactionScheduler3) {
    reactionScheduler3 = defaultNoopBatch2;
    if (true) {
      console.warn("[MobX] Failed to get unstable_batched updates from react-dom / react-native");
    }
  }
  configure({ reactionScheduler: reactionScheduler3 });
}

// ../../node_modules/mobx-react-lite/es/useObserver.js
init_preact();

// ../../node_modules/mobx-react-lite/es/utils/printDebugValue.js
function printDebugValue2(v) {
  return getDependencyTree(v);
}

// ../../node_modules/mobx-react-lite/es/utils/FinalizationRegistryWrapper.js
var FinalizationRegistryLocal2 = typeof FinalizationRegistry === "undefined" ? void 0 : FinalizationRegistry;

// ../../node_modules/mobx-react-lite/es/utils/reactionCleanupTrackingCommon.js
function createTrackingData2(reaction) {
  var trackingData = {
    reaction,
    mounted: false,
    changedBeforeMount: false,
    cleanAt: Date.now() + CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS2
  };
  return trackingData;
}
var CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS2 = 1e4;
var CLEANUP_TIMER_LOOP_MILLIS2 = 1e4;

// ../../node_modules/mobx-react-lite/es/utils/createReactionCleanupTrackingUsingFinalizationRegister.js
function createReactionCleanupTrackingUsingFinalizationRegister2(FinalizationRegistry2) {
  var cleanupTokenToReactionTrackingMap = /* @__PURE__ */ new Map();
  var globalCleanupTokensCounter = 1;
  var registry = new FinalizationRegistry2(function cleanupFunction(token) {
    var trackedReaction = cleanupTokenToReactionTrackingMap.get(token);
    if (trackedReaction) {
      trackedReaction.reaction.dispose();
      cleanupTokenToReactionTrackingMap.delete(token);
    }
  });
  return {
    addReactionToTrack: function(reactionTrackingRef, reaction, objectRetainedByReact) {
      var token = globalCleanupTokensCounter++;
      registry.register(objectRetainedByReact, token, reactionTrackingRef);
      reactionTrackingRef.current = createTrackingData2(reaction);
      reactionTrackingRef.current.finalizationRegistryCleanupToken = token;
      cleanupTokenToReactionTrackingMap.set(token, reactionTrackingRef.current);
      return reactionTrackingRef.current;
    },
    recordReactionAsCommitted: function(reactionRef) {
      registry.unregister(reactionRef);
      if (reactionRef.current && reactionRef.current.finalizationRegistryCleanupToken) {
        cleanupTokenToReactionTrackingMap.delete(reactionRef.current.finalizationRegistryCleanupToken);
      }
    },
    forceCleanupTimerToRunNowForTests: function() {
    },
    resetCleanupScheduleForTests: function() {
    }
  };
}

// ../../node_modules/mobx-react-lite/es/utils/createTimerBasedReactionCleanupTracking.js
var __values2 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
function createTimerBasedReactionCleanupTracking2() {
  var uncommittedReactionRefs = /* @__PURE__ */ new Set();
  var reactionCleanupHandle;
  function forceCleanupTimerToRunNowForTests3() {
    if (reactionCleanupHandle) {
      clearTimeout(reactionCleanupHandle);
      cleanUncommittedReactions();
    }
  }
  function resetCleanupScheduleForTests3() {
    var e_1, _a3;
    if (uncommittedReactionRefs.size > 0) {
      try {
        for (var uncommittedReactionRefs_1 = __values2(uncommittedReactionRefs), uncommittedReactionRefs_1_1 = uncommittedReactionRefs_1.next(); !uncommittedReactionRefs_1_1.done; uncommittedReactionRefs_1_1 = uncommittedReactionRefs_1.next()) {
          var ref = uncommittedReactionRefs_1_1.value;
          var tracking = ref.current;
          if (tracking) {
            tracking.reaction.dispose();
            ref.current = null;
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (uncommittedReactionRefs_1_1 && !uncommittedReactionRefs_1_1.done && (_a3 = uncommittedReactionRefs_1.return))
            _a3.call(uncommittedReactionRefs_1);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      uncommittedReactionRefs.clear();
    }
    if (reactionCleanupHandle) {
      clearTimeout(reactionCleanupHandle);
      reactionCleanupHandle = void 0;
    }
  }
  function ensureCleanupTimerRunning() {
    if (reactionCleanupHandle === void 0) {
      reactionCleanupHandle = setTimeout(cleanUncommittedReactions, CLEANUP_TIMER_LOOP_MILLIS2);
    }
  }
  function scheduleCleanupOfReactionIfLeaked(ref) {
    uncommittedReactionRefs.add(ref);
    ensureCleanupTimerRunning();
  }
  function recordReactionAsCommitted3(reactionRef) {
    uncommittedReactionRefs.delete(reactionRef);
  }
  function cleanUncommittedReactions() {
    reactionCleanupHandle = void 0;
    var now = Date.now();
    uncommittedReactionRefs.forEach(function(ref) {
      var tracking = ref.current;
      if (tracking) {
        if (now >= tracking.cleanAt) {
          tracking.reaction.dispose();
          ref.current = null;
          uncommittedReactionRefs.delete(ref);
        }
      }
    });
    if (uncommittedReactionRefs.size > 0) {
      ensureCleanupTimerRunning();
    }
  }
  return {
    addReactionToTrack: function(reactionTrackingRef, reaction, objectRetainedByReact) {
      reactionTrackingRef.current = createTrackingData2(reaction);
      scheduleCleanupOfReactionIfLeaked(reactionTrackingRef);
      return reactionTrackingRef.current;
    },
    recordReactionAsCommitted: recordReactionAsCommitted3,
    forceCleanupTimerToRunNowForTests: forceCleanupTimerToRunNowForTests3,
    resetCleanupScheduleForTests: resetCleanupScheduleForTests3
  };
}

// ../../node_modules/mobx-react-lite/es/utils/reactionCleanupTracking.js
var _a2 = FinalizationRegistryLocal2 ? createReactionCleanupTrackingUsingFinalizationRegister2(FinalizationRegistryLocal2) : createTimerBasedReactionCleanupTracking2();
var addReactionToTrack2 = _a2.addReactionToTrack;
var recordReactionAsCommitted2 = _a2.recordReactionAsCommitted;
var resetCleanupScheduleForTests2 = _a2.resetCleanupScheduleForTests;
var forceCleanupTimerToRunNowForTests2 = _a2.forceCleanupTimerToRunNowForTests;

// ../../node_modules/mobx-react-lite/es/staticRendering.js
var globalIsUsingStaticRendering2 = false;
function isUsingStaticRendering2() {
  return globalIsUsingStaticRendering2;
}

// ../../node_modules/mobx-react-lite/es/useObserver.js
var __read2 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
function observerComponentNameFor2(baseComponentName) {
  return "observer".concat(baseComponentName);
}
var ObjectToBeRetainedByReact2 = function() {
  function ObjectToBeRetainedByReact3() {
  }
  return ObjectToBeRetainedByReact3;
}();
function objectToBeRetainedByReactFactory2() {
  return new ObjectToBeRetainedByReact2();
}
function useObserver2(fn, baseComponentName) {
  if (baseComponentName === void 0) {
    baseComponentName = "observed";
  }
  if (isUsingStaticRendering2()) {
    return fn();
  }
  var _a3 = __read2(preact_default.useState(objectToBeRetainedByReactFactory2), 1), objectRetainedByReact = _a3[0];
  var _b = __read2(preact_default.useState(), 2), setState = _b[1];
  var forceUpdate = function() {
    return setState([]);
  };
  var reactionTrackingRef = preact_default.useRef(null);
  if (!reactionTrackingRef.current) {
    var newReaction = new Reaction(observerComponentNameFor2(baseComponentName), function() {
      if (trackingData_1.mounted) {
        forceUpdate();
      } else {
        trackingData_1.changedBeforeMount = true;
      }
    });
    var trackingData_1 = addReactionToTrack2(reactionTrackingRef, newReaction, objectRetainedByReact);
  }
  var reaction = reactionTrackingRef.current.reaction;
  preact_default.useDebugValue(reaction, printDebugValue2);
  preact_default.useEffect(function() {
    recordReactionAsCommitted2(reactionTrackingRef);
    if (reactionTrackingRef.current) {
      reactionTrackingRef.current.mounted = true;
      if (reactionTrackingRef.current.changedBeforeMount) {
        reactionTrackingRef.current.changedBeforeMount = false;
        forceUpdate();
      }
    } else {
      reactionTrackingRef.current = {
        reaction: new Reaction(observerComponentNameFor2(baseComponentName), function() {
          forceUpdate();
        }),
        mounted: true,
        changedBeforeMount: false,
        cleanAt: Infinity
      };
      forceUpdate();
    }
    return function() {
      reactionTrackingRef.current.reaction.dispose();
      reactionTrackingRef.current = null;
    };
  }, []);
  var rendering;
  var exception;
  reaction.track(function() {
    try {
      rendering = fn();
    } catch (e) {
      exception = e;
    }
  });
  if (exception) {
    throw exception;
  }
  return rendering;
}

// ../../node_modules/mobx-react-lite/es/observer.js
init_preact();
var warnObserverOptionsDeprecated2 = true;
var hasSymbol2 = typeof Symbol === "function" && Symbol.for;
var ReactForwardRefSymbol2 = hasSymbol2 ? Symbol.for("react.forward_ref") : typeof preact_exports.forwardRef === "function" && (0, preact_exports.forwardRef)(function(props) {
  return null;
})["$$typeof"];
var ReactMemoSymbol2 = hasSymbol2 ? Symbol.for("react.memo") : typeof preact_exports.memo === "function" && (0, preact_exports.memo)(function(props) {
  return null;
})["$$typeof"];
function observer2(baseComponent, options) {
  var _a3;
  if (warnObserverOptionsDeprecated2 && options) {
    warnObserverOptionsDeprecated2 = false;
    console.warn("[mobx-react-lite] `observer(fn, { forwardRef: true })` is deprecated, use `observer(React.forwardRef(fn))`");
  }
  if (ReactMemoSymbol2 && baseComponent["$$typeof"] === ReactMemoSymbol2) {
    throw new Error("[mobx-react-lite] You are trying to use `observer` on a function component wrapped in either another `observer` or `React.memo`. The observer already applies 'React.memo' for you.");
  }
  if (isUsingStaticRendering2()) {
    return baseComponent;
  }
  var useForwardRef = (_a3 = options === null || options === void 0 ? void 0 : options.forwardRef) !== null && _a3 !== void 0 ? _a3 : false;
  var render4 = baseComponent;
  var baseComponentName = baseComponent.displayName || baseComponent.name;
  if (ReactForwardRefSymbol2 && baseComponent["$$typeof"] === ReactForwardRefSymbol2) {
    useForwardRef = true;
    render4 = baseComponent["render"];
    if (typeof render4 !== "function") {
      throw new Error("[mobx-react-lite] `render` property of ForwardRef was not a function");
    }
  }
  var observerComponent = function(props, ref) {
    return useObserver2(function() {
      return render4(props, ref);
    }, baseComponentName);
  };
  if (baseComponentName !== "") {
    ;
    observerComponent.displayName = baseComponentName;
  }
  if (baseComponent.contextTypes) {
    ;
    observerComponent.contextTypes = baseComponent.contextTypes;
  }
  if (useForwardRef) {
    observerComponent = (0, preact_exports.forwardRef)(observerComponent);
  }
  observerComponent = (0, preact_exports.memo)(observerComponent);
  copyStaticProperties2(baseComponent, observerComponent);
  if (true) {
    Object.defineProperty(observerComponent, "contextTypes", {
      set: function() {
        var _a4;
        throw new Error("[mobx-react-lite] `".concat(this.displayName || ((_a4 = this.type) === null || _a4 === void 0 ? void 0 : _a4.displayName) || "Component", ".contextTypes` must be set before applying `observer`."));
      }
    });
  }
  return observerComponent;
}
var hoistBlackList2 = {
  $$typeof: true,
  render: true,
  compare: true,
  type: true,
  displayName: true
};
function copyStaticProperties2(base, target) {
  Object.keys(base).forEach(function(key) {
    if (!hoistBlackList2[key]) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));
    }
  });
}

// ../../node_modules/mobx-react-lite/es/ObserverComponent.js
function ObserverComponent2(_a3) {
  var children = _a3.children, render4 = _a3.render;
  var component = children || render4;
  if (typeof component !== "function") {
    return null;
  }
  return useObserver2(component);
}
if (true) {
  ObserverComponent2.propTypes = {
    children: ObserverPropsCheck2,
    render: ObserverPropsCheck2
  };
}
ObserverComponent2.displayName = "Observer";
function ObserverPropsCheck2(props, key, componentName, location, propFullName) {
  var extraKey = key === "children" ? "render" : "children";
  var hasProp2 = typeof props[key] === "function";
  var hasExtraProp = typeof props[extraKey] === "function";
  if (hasProp2 && hasExtraProp) {
    return new Error("MobX Observer: Do not use children and render in the same time in`" + componentName);
  }
  if (hasProp2 || hasExtraProp) {
    return null;
  }
  return new Error("Invalid prop `" + propFullName + "` of type `" + typeof props[key] + "` supplied to `" + componentName + "`, expected `function`.");
}

// ../../node_modules/mobx-react-lite/es/useLocalObservable.js
init_preact();

// ../../node_modules/mobx-react-lite/es/useLocalStore.js
init_preact();

// ../../node_modules/mobx-react-lite/es/useAsObservableSource.js
init_preact();

// ../../node_modules/mobx-react-lite/es/index.js
observerBatching2(preact_exports.unstable_batchedUpdates);

// src/views/Settings/index.tsx
import { Fragment as Fragment5, jsx as jsx10, jsxs as jsxs4 } from "/public/vendor/preact.min.js";
var SettingsView = observer2(() => {
  const store = useRootStore();
  const { settingsStore } = store;
  const [panels2, setPanels] = useState9([]);
  useEffect3(() => {
    console.log("[ui/Settings] initialize");
    (async () => {
      await settingsStore.enable();
      setPanels(panels_default.filter((panel) => settingsStore.enabledPanels.includes(panel.id)));
      store.setViewReady(true);
    })().catch((e) => {
      console.error("[ui/Settings] Failed to initialize: ", e);
    });
  }, []);
  const setIndex = useCallback((id) => () => {
    settingsStore.setPanelId(id);
  }, []);
  return store.viewReady && /* @__PURE__ */ jsx10(Fragment5, {
    children: panels2.length === 1 ? /* @__PURE__ */ jsx10($884c64d19340d345$export$f51f4c4ede09e011, {
      direction: "column",
      marginY: "size-100",
      children: panels2[0].children
    }) : /* @__PURE__ */ jsxs4($65ab70ddbed1564b$export$b2539bed5023c21c, {
      "aria-label": "Panels",
      items: panels2,
      density: "compact",
      selectedKey: settingsStore.panelId,
      children: [
        /* @__PURE__ */ jsx10($b9606c0c41d55371$export$27a5bd065ad55220, {
          marginY: "size-100",
          children: /* @__PURE__ */ jsx10($65ab70ddbed1564b$export$e51a686c67fdaa2d, {
            children: (item) => /* @__PURE__ */ jsx10($c1d7fb2ec91bae71$export$6d08773d2e66f8f2, {
              textValue: item.name,
              children: /* @__PURE__ */ jsx10("span", {
                onClick: setIndex(item.id),
                children: item.name
              })
            })
          })
        }),
        /* @__PURE__ */ jsx10($65ab70ddbed1564b$export$5dae8d435677f210, {
          children: (item) => /* @__PURE__ */ jsx10($c1d7fb2ec91bae71$export$6d08773d2e66f8f2, {
            children: /* @__PURE__ */ jsx10($884c64d19340d345$export$f51f4c4ede09e011, {
              direction: "column",
              children: item.children
            })
          })
        })
      ]
    })
  });
});
var Settings_default = SettingsView;

// src/views/index.tsx
import { Fragment as Fragment6, jsx as jsx11 } from "/public/vendor/preact.min.js";
var views_default = observer(({ type }) => {
  switch (type) {
    case ids_default.Config:
      return /* @__PURE__ */ jsx11(Configure_default, {});
    case ids_default.Settings:
      return /* @__PURE__ */ jsx11(Settings_default, {});
    default:
      console.error("[ui/views] Unhandled view type: ", type);
      return /* @__PURE__ */ jsx11(Fragment6, {});
  }
});

// src/App.tsx
import { jsx as jsx12, jsxs as jsxs5 } from "/public/vendor/preact.min.js";
var App = observer(() => {
  const store = useRootStore();
  useEffect4(() => {
    console.log("[ui/App] render");
    MessageBus3.once("ui:init", async (payload) => {
      console.log("[ui/App] init");
      const {
        uiType,
        nodeType,
        nodeId
      } = payload;
      store.setNodeId(nodeId);
      store.setViewType(uiType);
      store.setNodeType(nodeType);
      store.setInitPayload(payload);
    });
    MessageBus3.send("ui:ready");
  }, []);
  return /* @__PURE__ */ jsxs5($884c64d19340d345$export$f51f4c4ede09e011, {
    direction: "column",
    height: "100%",
    marginX: 8,
    children: [
      (!store.ready || !store.viewType || !store.viewReady) && /* @__PURE__ */ jsx12("div", {
        style: {
          background: "var(--figma-color-bg)",
          position: "absolute",
          left: 0,
          right: 0,
          top: 0,
          bottom: 0,
          zIndex: 100
        },
        children: /* @__PURE__ */ jsx12($884c64d19340d345$export$f51f4c4ede09e011, {
          direction: "column",
          justifyContent: "space-around",
          alignItems: "center",
          height: "100%",
          children: /* @__PURE__ */ jsx12($79c16f64960b6385$export$c79b9d6b4cc92af7, {
            "aria-label": "Loading",
            isIndeterminate: true,
            size: "L"
          })
        })
      }),
      store.ready && store.viewType && /* @__PURE__ */ jsx12(views_default, {
        type: store.viewType
      })
    ]
  });
});
var App_default = App;

// src/index.tsx
import { jsx as jsx13 } from "/public/vendor/preact.min.js";
var root2 = document.getElementById("app");
render3(
  /* @__PURE__ */ jsx13(Provider_default, {
    children: /* @__PURE__ */ jsx13(App_default, {})
  }),
  root2
);
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
//# sourceMappingURL=data:application/json;base64,
